{
  "api/index.html": {
    "href": "api/index.html",
    "title": "IX API Documentation | System.Dynamic.ExpandoObject",
    "keywords": "IX API Documentation PLC"
  },
  "api/Ix.Connector.html": {
    "href": "api/Ix.Connector.html",
    "title": "Namespace Ix.Connector | System.Dynamic.ExpandoObject",
    "keywords": "Namespace Ix.Connector Classes ITwinElementExtensions"
  },
  "api/Ix.Connector.ITwinElementExtensions.html": {
    "href": "api/Ix.Connector.ITwinElementExtensions.html",
    "title": "Class ITwinElementExtensions | System.Dynamic.ExpandoObject",
    "keywords": "Class ITwinElementExtensions Inheritance object ITwinElementExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Ix.Connector Assembly: ix.framework.core.blazor.dll Syntax public static class ITwinElementExtensions Methods | Improve this Doc View Source GetAttribute<T>(ITwinElement) Declaration public static T GetAttribute<T>(this ITwinElement twinObject) where T : Attribute Parameters Type Name Description Ix.Connector.ITwinElement twinObject Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetPropertyViaSymbol(ITwinElement) Declaration public static PropertyInfo GetPropertyViaSymbol(this ITwinElement twinObject) Parameters Type Name Description Ix.Connector.ITwinElement twinObject Returns Type Description System.Reflection.PropertyInfo"
  },
  "api/ix.framework.core._Imports.html": {
    "href": "api/ix.framework.core._Imports.html",
    "title": "Class _Imports | System.Dynamic.ExpandoObject",
    "keywords": "Class _Imports Inheritance object Microsoft.AspNetCore.Components.ComponentBase _Imports Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender Inherited Members Microsoft.AspNetCore.Components.ComponentBase.OnInitialized() Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ix.framework.core Assembly: ix.framework.core.blazor.dll Syntax public class _Imports : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender Methods | Improve this Doc View Source BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters Type Name Description Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder Overrides Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender"
  },
  "api/ix.framework.core._NULL_CONTEXT.html": {
    "href": "api/ix.framework.core._NULL_CONTEXT.html",
    "title": "Class _NULL_CONTEXT | System.Dynamic.ExpandoObject",
    "keywords": "Class _NULL_CONTEXT Inheritance object _NULL_CONTEXT Implements Ix.Connector.ITwinObject Ix.Connector.ITwinElement IIxContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ix.framework.core Assembly: ix.framework.core.dll Syntax public class _NULL_CONTEXT : ITwinObject, ITwinElement, IIxContext Constructors | Improve this Doc View Source _NULL_CONTEXT(ITwinObject, string, string) Declaration public _NULL_CONTEXT(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description Ix.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source AttributeName Declaration public string AttributeName { get; set; } Property Value Type Description string | Improve this Doc View Source Connector Declaration protected Connector Connector { get; } Property Value Type Description Ix.Connector.Connector | Improve this Doc View Source HumanReadable Declaration public string HumanReadable { get; set; } Property Value Type Description string | Improve this Doc View Source Parent Declaration protected ITwinObject Parent { get; set; } Property Value Type Description Ix.Connector.ITwinObject | Improve this Doc View Source Symbol Declaration public string Symbol { get; protected set; } Property Value Type Description string | Improve this Doc View Source SymbolTail Declaration protected string SymbolTail { get; set; } Property Value Type Description string Methods | Improve this Doc View Source AddChild(ITwinObject) Declaration public void AddChild(ITwinObject twinObject) Parameters Type Name Description Ix.Connector.ITwinObject twinObject | Improve this Doc View Source AddKid(ITwinElement) Declaration public void AddKid(ITwinElement kid) Parameters Type Name Description Ix.Connector.ITwinElement kid | Improve this Doc View Source AddValueTag(ITwinPrimitive) Declaration public void AddValueTag(ITwinPrimitive valueTag) Parameters Type Name Description Ix.Connector.ITwinPrimitive valueTag | Improve this Doc View Source GetChildren() Declaration public IEnumerable<ITwinObject> GetChildren() Returns Type Description System.Collections.Generic.IEnumerable<T><Ix.Connector.ITwinObject> | Improve this Doc View Source GetConnector() Declaration public Connector GetConnector() Returns Type Description Ix.Connector.Connector | Improve this Doc View Source GetKids() Declaration public IEnumerable<ITwinElement> GetKids() Returns Type Description System.Collections.Generic.IEnumerable<T><Ix.Connector.ITwinElement> | Improve this Doc View Source GetParent() Declaration public ITwinObject GetParent() Returns Type Description Ix.Connector.ITwinObject | Improve this Doc View Source GetSymbolTail() Declaration public string GetSymbolTail() Returns Type Description string | Improve this Doc View Source GetValueTags() Declaration public IEnumerable<ITwinPrimitive> GetValueTags() Returns Type Description System.Collections.Generic.IEnumerable<T><Ix.Connector.ITwinPrimitive> | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<_NULL_CONTEXT> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><_NULL_CONTEXT> | Improve this Doc View Source OnlineToPlainAsync(_NULL_CONTEXT) Declaration protected Task<_NULL_CONTEXT> OnlineToPlainAsync(_NULL_CONTEXT plain) Parameters Type Name Description _NULL_CONTEXT plain Returns Type Description System.Threading.Tasks.Task<TResult><_NULL_CONTEXT> | Improve this Doc View Source PlainToOnlineAsync(_NULL_CONTEXT) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(_NULL_CONTEXT plain) Parameters Type Name Description _NULL_CONTEXT plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><Ix.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadowAsync(_NULL_CONTEXT) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(_NULL_CONTEXT plain) Parameters Type Name Description _NULL_CONTEXT plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><Ix.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<_NULL_CONTEXT> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><_NULL_CONTEXT> | Improve this Doc View Source ShadowToPlainAsync(_NULL_CONTEXT) Declaration protected Task<_NULL_CONTEXT> ShadowToPlainAsync(_NULL_CONTEXT plain) Parameters Type Name Description _NULL_CONTEXT plain Returns Type Description System.Threading.Tasks.Task<TResult><_NULL_CONTEXT> Implements Ix.Connector.ITwinObject Ix.Connector.ITwinElement IIxContext"
  },
  "api/ix.framework.core.ComponentDetailsAttribute.html": {
    "href": "api/ix.framework.core.ComponentDetailsAttribute.html",
    "title": "Class ComponentDetailsAttribute | System.Dynamic.ExpandoObject",
    "keywords": "Class ComponentDetailsAttribute Inheritance object System.Attribute ComponentDetailsAttribute Inherited Members System.Attribute.Equals(object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, bool) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, bool) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, bool) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, bool) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, bool) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, bool) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, bool) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, bool) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, bool) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, bool) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, bool) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, bool) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, bool) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, bool) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, bool) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, bool) System.Attribute.Match(object) System.Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ix.framework.core Assembly: ix.framework.core.dll Syntax public class ComponentDetailsAttribute : Attribute Constructors | Improve this Doc View Source ComponentDetailsAttribute() Declaration public ComponentDetailsAttribute() | Improve this Doc View Source ComponentDetailsAttribute(string) Declaration public ComponentDetailsAttribute(string tabName) Parameters Type Name Description string tabName Properties | Improve this Doc View Source TabName Declaration public string TabName { get; } Property Value Type Description string"
  },
  "api/ix.framework.core.ComponentHeaderAttribute.html": {
    "href": "api/ix.framework.core.ComponentHeaderAttribute.html",
    "title": "Class ComponentHeaderAttribute | System.Dynamic.ExpandoObject",
    "keywords": "Class ComponentHeaderAttribute Inheritance object System.Attribute ComponentHeaderAttribute Inherited Members System.Attribute.Equals(object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, bool) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, bool) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, bool) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, bool) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, bool) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, bool) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, bool) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, bool) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, bool) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, bool) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, bool) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, bool) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, bool) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, bool) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, bool) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, bool) System.Attribute.Match(object) System.Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ix.framework.core Assembly: ix.framework.core.dll Syntax public class ComponentHeaderAttribute : Attribute Constructors | Improve this Doc View Source ComponentHeaderAttribute() Declaration public ComponentHeaderAttribute() | Improve this Doc View Source ComponentHeaderAttribute(string) Declaration public ComponentHeaderAttribute(string tabName) Parameters Type Name Description string tabName Properties | Improve this Doc View Source TabName Declaration public string TabName { get; } Property Value Type Description string"
  },
  "api/ix.framework.core.CoordinatorStates.html": {
    "href": "api/ix.framework.core.CoordinatorStates.html",
    "title": "Enum CoordinatorStates | System.Dynamic.ExpandoObject",
    "keywords": "Enum CoordinatorStates Namespace: ix.framework.core Assembly: ix.framework.core.dll Syntax public enum CoordinatorStates : short Fields Name Description Configuring Idle Running"
  },
  "api/ix.framework.core.DetailsContext.html": {
    "href": "api/ix.framework.core.DetailsContext.html",
    "title": "Class DetailsContext | System.Dynamic.ExpandoObject",
    "keywords": "Class DetailsContext Inheritance object DetailsContext Implements Ix.Connector.ITwinObject Ix.Connector.ITwinElement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ix.framework.core Assembly: ix.framework.core.blazor.dll Syntax public class DetailsContext : ITwinObject, ITwinElement Constructors | Improve this Doc View Source DetailsContext(ITwinObject, IList<ITwinElement>, string) Declaration public DetailsContext(ITwinObject parent, IList<ITwinElement> kids, string tabName) Parameters Type Name Description Ix.Connector.ITwinObject parent System.Collections.Generic.IList<T><Ix.Connector.ITwinElement> kids string tabName | Improve this Doc View Source DetailsContext(ITwinObject, IList<ITwinElement>) Declaration public DetailsContext(ITwinObject parent, IList<ITwinElement> kids) Parameters Type Name Description Ix.Connector.ITwinObject parent System.Collections.Generic.IList<T><Ix.Connector.ITwinElement> kids Properties | Improve this Doc View Source AttributeName Declaration public string AttributeName { get; } Property Value Type Description string | Improve this Doc View Source HumanReadable Declaration public string HumanReadable { get; set; } Property Value Type Description string | Improve this Doc View Source Symbol Declaration public string Symbol { get; } Property Value Type Description string | Improve this Doc View Source TabName Declaration public string TabName { get; set; } Property Value Type Description string Methods | Improve this Doc View Source AddChild(ITwinObject) Declaration public void AddChild(ITwinObject twinObject) Parameters Type Name Description Ix.Connector.ITwinObject twinObject | Improve this Doc View Source AddKid(ITwinElement) Declaration public void AddKid(ITwinElement kid) Parameters Type Name Description Ix.Connector.ITwinElement kid | Improve this Doc View Source AddValueTag(ITwinPrimitive) Declaration public void AddValueTag(ITwinPrimitive twinPrimitive) Parameters Type Name Description Ix.Connector.ITwinPrimitive twinPrimitive | Improve this Doc View Source GetChildren() Declaration public IEnumerable<ITwinObject> GetChildren() Returns Type Description System.Collections.Generic.IEnumerable<T><Ix.Connector.ITwinObject> | Improve this Doc View Source GetConnector() Declaration public Connector GetConnector() Returns Type Description Ix.Connector.Connector | Improve this Doc View Source GetKids() Declaration public IEnumerable<ITwinElement> GetKids() Returns Type Description System.Collections.Generic.IEnumerable<T><Ix.Connector.ITwinElement> | Improve this Doc View Source GetParent() Declaration public ITwinObject GetParent() Returns Type Description Ix.Connector.ITwinObject | Improve this Doc View Source GetSymbolTail() Declaration public string GetSymbolTail() Returns Type Description string | Improve this Doc View Source GetValueTags() Declaration public IEnumerable<ITwinPrimitive?> GetValueTags() Returns Type Description System.Collections.Generic.IEnumerable<T><Ix.Connector.ITwinPrimitive> | Improve this Doc View Source Poll() Declaration public void Poll() Implements Ix.Connector.ITwinObject Ix.Connector.ITwinElement Extension Methods ITwinElementExtensions.GetAttribute<T>(ITwinElement) ITwinElementExtensions.GetPropertyViaSymbol(ITwinElement)"
  },
  "api/ix.framework.core.eIxSequenceMode.html": {
    "href": "api/ix.framework.core.eIxSequenceMode.html",
    "title": "Enum eIxSequenceMode | System.Dynamic.ExpandoObject",
    "keywords": "Enum eIxSequenceMode Namespace: ix.framework.core Assembly: ix.framework.core.dll Syntax public enum eIxSequenceMode : short Fields Name Description Cyclic None RunOnce"
  },
  "api/ix.framework.core.eIxSteppingMode.html": {
    "href": "api/ix.framework.core.eIxSteppingMode.html",
    "title": "Enum eIxSteppingMode | System.Dynamic.ExpandoObject",
    "keywords": "Enum eIxSteppingMode Namespace: ix.framework.core Assembly: ix.framework.core.dll Syntax public enum eIxSteppingMode : short Fields Name Description Continous None StepByStep"
  },
  "api/ix.framework.core.eIxTaskState.html": {
    "href": "api/ix.framework.core.eIxTaskState.html",
    "title": "Enum eIxTaskState | System.Dynamic.ExpandoObject",
    "keywords": "Enum eIxTaskState Namespace: ix.framework.core Assembly: ix.framework.core.dll Syntax public enum eIxTaskState : short Fields Name Description Aborted Busy Disabled Done Error Kicking Ready"
  },
  "api/ix.framework.core.html": {
    "href": "api/ix.framework.core.html",
    "title": "Namespace ix.framework.core | System.Dynamic.ExpandoObject",
    "keywords": "Namespace ix.framework.core Classes _Imports _NULL_CONTEXT ComponentDetailsAttribute ComponentHeaderAttribute DetailsContext IxComponent IxComponentCommandView IxComponentStatusView IxComponentView IxContext IxObject IxSequencer IxSequencerCommandView IxSequencerStatusView IxSequencerView IxStep IxStepCommandView IxStepStatusView IxStepView IxTask IxTaskCommandView IxTaskStatusView IxTaskView Interfaces IIxComponent IIxContext IIxCoordinator IIxObject IIxServiceable IIxStep IIxTask IIxTaskState Enums CoordinatorStates eIxSequenceMode eIxSteppingMode eIxTaskState"
  },
  "api/ix.framework.core.IIxComponent.html": {
    "href": "api/ix.framework.core.IIxComponent.html",
    "title": "Interface IIxComponent | System.Dynamic.ExpandoObject",
    "keywords": "Interface IIxComponent Namespace: ix.framework.core Assembly: ix.framework.core.dll Syntax public interface IIxComponent"
  },
  "api/ix.framework.core.IIxContext.html": {
    "href": "api/ix.framework.core.IIxContext.html",
    "title": "Interface IIxContext | System.Dynamic.ExpandoObject",
    "keywords": "Interface IIxContext Namespace: ix.framework.core Assembly: ix.framework.core.dll Syntax public interface IIxContext"
  },
  "api/ix.framework.core.IIxCoordinator.html": {
    "href": "api/ix.framework.core.IIxCoordinator.html",
    "title": "Interface IIxCoordinator | System.Dynamic.ExpandoObject",
    "keywords": "Interface IIxCoordinator Namespace: ix.framework.core Assembly: ix.framework.core.dll Syntax public interface IIxCoordinator"
  },
  "api/ix.framework.core.IIxObject.html": {
    "href": "api/ix.framework.core.IIxObject.html",
    "title": "Interface IIxObject | System.Dynamic.ExpandoObject",
    "keywords": "Interface IIxObject Namespace: ix.framework.core Assembly: ix.framework.core.dll Syntax public interface IIxObject"
  },
  "api/ix.framework.core.IIxServiceable.html": {
    "href": "api/ix.framework.core.IIxServiceable.html",
    "title": "Interface IIxServiceable | System.Dynamic.ExpandoObject",
    "keywords": "Interface IIxServiceable Namespace: ix.framework.core Assembly: ix.framework.core.dll Syntax public interface IIxServiceable"
  },
  "api/ix.framework.core.IIxStep.html": {
    "href": "api/ix.framework.core.IIxStep.html",
    "title": "Interface IIxStep | System.Dynamic.ExpandoObject",
    "keywords": "Interface IIxStep Namespace: ix.framework.core Assembly: ix.framework.core.dll Syntax public interface IIxStep"
  },
  "api/ix.framework.core.IIxTask.html": {
    "href": "api/ix.framework.core.IIxTask.html",
    "title": "Interface IIxTask | System.Dynamic.ExpandoObject",
    "keywords": "Interface IIxTask Namespace: ix.framework.core Assembly: ix.framework.core.dll Syntax public interface IIxTask"
  },
  "api/ix.framework.core.IIxTaskState.html": {
    "href": "api/ix.framework.core.IIxTaskState.html",
    "title": "Interface IIxTaskState | System.Dynamic.ExpandoObject",
    "keywords": "Interface IIxTaskState Namespace: ix.framework.core Assembly: ix.framework.core.dll Syntax public interface IIxTaskState"
  },
  "api/ix.framework.core.IxComponent.html": {
    "href": "api/ix.framework.core.IxComponent.html",
    "title": "Class IxComponent | System.Dynamic.ExpandoObject",
    "keywords": "Class IxComponent Inheritance object IxObject IxComponent Implements Ix.Connector.ITwinObject Ix.Connector.ITwinElement IIxObject IIxComponent Inherited Members IxObject.OnlineToPlainAsync(IxObject) IxObject.PlainToOnlineAsync(IxObject) IxObject.ShadowToPlainAsync(IxObject) IxObject.PlainToShadowAsync(IxObject) IxObject.GetChildren() IxObject.GetKids() IxObject.GetValueTags() IxObject.AddValueTag(ITwinPrimitive) IxObject.AddKid(ITwinElement) IxObject.AddChild(ITwinObject) IxObject.Connector IxObject.GetConnector() IxObject.GetSymbolTail() IxObject.GetParent() IxObject.Symbol IxObject.AttributeName IxObject.HumanReadable IxObject.SymbolTail IxObject.Parent object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ix.framework.core Assembly: ix.framework.core.dll Syntax public class IxComponent : IxObject, ITwinObject, ITwinElement, IIxObject, IIxComponent Constructors | Improve this Doc View Source IxComponent(ITwinObject, string, string) Declaration public IxComponent(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description Ix.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source _isinServiceMode Declaration public OnlinerBool _isinServiceMode { get; } Property Value Type Description Ix.Connector.ValueTypes.OnlinerBool Methods | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<IxComponent> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><IxComponent> | Improve this Doc View Source OnlineToPlainAsync(IxComponent) Declaration protected Task<IxComponent> OnlineToPlainAsync(IxComponent plain) Parameters Type Name Description IxComponent plain Returns Type Description System.Threading.Tasks.Task<TResult><IxComponent> | Improve this Doc View Source PlainToOnlineAsync(IxComponent) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(IxComponent plain) Parameters Type Name Description IxComponent plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><Ix.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadowAsync(IxComponent) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(IxComponent plain) Parameters Type Name Description IxComponent plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><Ix.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<IxComponent> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><IxComponent> | Improve this Doc View Source ShadowToPlainAsync(IxComponent) Declaration protected Task<IxComponent> ShadowToPlainAsync(IxComponent plain) Parameters Type Name Description IxComponent plain Returns Type Description System.Threading.Tasks.Task<TResult><IxComponent> Implements Ix.Connector.ITwinObject Ix.Connector.ITwinElement IIxObject IIxComponent"
  },
  "api/ix.framework.core.IxComponentCommandView.html": {
    "href": "api/ix.framework.core.IxComponentCommandView.html",
    "title": "Class IxComponentCommandView | System.Dynamic.ExpandoObject",
    "keywords": "Class IxComponentCommandView Inheritance object Microsoft.AspNetCore.Components.ComponentBase Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><IxComponent> IxComponentCommandView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender Ix.Presentation.Blazor.Interfaces.IRenderableComponent Ix.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase Inherited Members Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<ix.framework.core.IxComponent>.Component Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(Ix.Connector.ITwinObject) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(Ix.Connector.ValueTypes.OnlinerBase) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(Ix.Connector.ITwinObject) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(Ix.Connector.ITwinPrimitive) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(Ix.Connector.ValueTypes.OnlinerBase) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, Ix.Connector.ValueTypes.ValueChangedEventArgs) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitialized() Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ix.framework.core Assembly: ix.framework.core.blazor.dll Syntax public class IxComponentCommandView : RenderableComplexComponentBase<IxComponent>, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase Methods | Improve this Doc View Source BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters Type Name Description Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder Overrides Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender Ix.Presentation.Blazor.Interfaces.IRenderableComponent Ix.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase"
  },
  "api/ix.framework.core.IxComponentStatusView.html": {
    "href": "api/ix.framework.core.IxComponentStatusView.html",
    "title": "Class IxComponentStatusView | System.Dynamic.ExpandoObject",
    "keywords": "Class IxComponentStatusView Inheritance object Microsoft.AspNetCore.Components.ComponentBase Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><IxComponent> IxComponentStatusView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender Ix.Presentation.Blazor.Interfaces.IRenderableComponent Ix.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase Inherited Members Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<ix.framework.core.IxComponent>.Component Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(Ix.Connector.ITwinObject) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(Ix.Connector.ValueTypes.OnlinerBase) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(Ix.Connector.ITwinObject) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(Ix.Connector.ITwinPrimitive) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(Ix.Connector.ValueTypes.OnlinerBase) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, Ix.Connector.ValueTypes.ValueChangedEventArgs) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitialized() Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ix.framework.core Assembly: ix.framework.core.blazor.dll Syntax public class IxComponentStatusView : RenderableComplexComponentBase<IxComponent>, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase Methods | Improve this Doc View Source BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters Type Name Description Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder Overrides Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender Ix.Presentation.Blazor.Interfaces.IRenderableComponent Ix.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase"
  },
  "api/ix.framework.core.IxComponentView.html": {
    "href": "api/ix.framework.core.IxComponentView.html",
    "title": "Class IxComponentView | System.Dynamic.ExpandoObject",
    "keywords": "Class IxComponentView Inheritance object Microsoft.AspNetCore.Components.ComponentBase Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><IxComponent> IxComponentView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender Ix.Presentation.Blazor.Interfaces.IRenderableComponent Ix.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable Inherited Members Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<ix.framework.core.IxComponent>.Component Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(Ix.Connector.ITwinObject) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(Ix.Connector.ValueTypes.OnlinerBase) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(Ix.Connector.ITwinObject) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(Ix.Connector.ITwinPrimitive) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(Ix.Connector.ValueTypes.OnlinerBase) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, Ix.Connector.ValueTypes.ValueChangedEventArgs) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ix.framework.core Assembly: ix.framework.core.blazor.dll Syntax public class IxComponentView : RenderableComplexComponentBase<IxComponent>, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Properties | Improve this Doc View Source IsControllable Declaration [Parameter] public bool IsControllable { get; set; } Property Value Type Description bool Methods | Improve this Doc View Source BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters Type Name Description Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder Overrides Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source OnInitialized() Declaration protected override void OnInitialized() Overrides Microsoft.AspNetCore.Components.ComponentBase.OnInitialized() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender Ix.Presentation.Blazor.Interfaces.IRenderableComponent Ix.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable"
  },
  "api/ix.framework.core.IxContext.html": {
    "href": "api/ix.framework.core.IxContext.html",
    "title": "Class IxContext | System.Dynamic.ExpandoObject",
    "keywords": "Class IxContext Inheritance object IxContext Implements Ix.Connector.ITwinObject Ix.Connector.ITwinElement IIxContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ix.framework.core Assembly: ix.framework.core.dll Syntax public class IxContext : ITwinObject, ITwinElement, IIxContext Constructors | Improve this Doc View Source IxContext(ITwinObject, string, string) Declaration public IxContext(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description Ix.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source AttributeName Declaration public string AttributeName { get; set; } Property Value Type Description string | Improve this Doc View Source Connector Declaration protected Connector Connector { get; } Property Value Type Description Ix.Connector.Connector | Improve this Doc View Source HumanReadable Declaration public string HumanReadable { get; set; } Property Value Type Description string | Improve this Doc View Source Parent Declaration protected ITwinObject Parent { get; set; } Property Value Type Description Ix.Connector.ITwinObject | Improve this Doc View Source Symbol Declaration public string Symbol { get; protected set; } Property Value Type Description string | Improve this Doc View Source SymbolTail Declaration protected string SymbolTail { get; set; } Property Value Type Description string Methods | Improve this Doc View Source AddChild(ITwinObject) Declaration public void AddChild(ITwinObject twinObject) Parameters Type Name Description Ix.Connector.ITwinObject twinObject | Improve this Doc View Source AddKid(ITwinElement) Declaration public void AddKid(ITwinElement kid) Parameters Type Name Description Ix.Connector.ITwinElement kid | Improve this Doc View Source AddValueTag(ITwinPrimitive) Declaration public void AddValueTag(ITwinPrimitive valueTag) Parameters Type Name Description Ix.Connector.ITwinPrimitive valueTag | Improve this Doc View Source GetChildren() Declaration public IEnumerable<ITwinObject> GetChildren() Returns Type Description System.Collections.Generic.IEnumerable<T><Ix.Connector.ITwinObject> | Improve this Doc View Source GetConnector() Declaration public Connector GetConnector() Returns Type Description Ix.Connector.Connector | Improve this Doc View Source GetKids() Declaration public IEnumerable<ITwinElement> GetKids() Returns Type Description System.Collections.Generic.IEnumerable<T><Ix.Connector.ITwinElement> | Improve this Doc View Source GetParent() Declaration public ITwinObject GetParent() Returns Type Description Ix.Connector.ITwinObject | Improve this Doc View Source GetSymbolTail() Declaration public string GetSymbolTail() Returns Type Description string | Improve this Doc View Source GetValueTags() Declaration public IEnumerable<ITwinPrimitive> GetValueTags() Returns Type Description System.Collections.Generic.IEnumerable<T><Ix.Connector.ITwinPrimitive> | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<IxContext> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><IxContext> | Improve this Doc View Source OnlineToPlainAsync(IxContext) Declaration protected Task<IxContext> OnlineToPlainAsync(IxContext plain) Parameters Type Name Description IxContext plain Returns Type Description System.Threading.Tasks.Task<TResult><IxContext> | Improve this Doc View Source PlainToOnlineAsync(IxContext) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(IxContext plain) Parameters Type Name Description IxContext plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><Ix.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadowAsync(IxContext) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(IxContext plain) Parameters Type Name Description IxContext plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><Ix.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<IxContext> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><IxContext> | Improve this Doc View Source ShadowToPlainAsync(IxContext) Declaration protected Task<IxContext> ShadowToPlainAsync(IxContext plain) Parameters Type Name Description IxContext plain Returns Type Description System.Threading.Tasks.Task<TResult><IxContext> Implements Ix.Connector.ITwinObject Ix.Connector.ITwinElement IIxContext"
  },
  "api/ix.framework.core.IxObject.html": {
    "href": "api/ix.framework.core.IxObject.html",
    "title": "Class IxObject | System.Dynamic.ExpandoObject",
    "keywords": "Class IxObject Inheritance object IxObject IxComponent IxTask Implements Ix.Connector.ITwinObject Ix.Connector.ITwinElement IIxObject Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ix.framework.core Assembly: ix.framework.core.dll Syntax public class IxObject : ITwinObject, ITwinElement, IIxObject Constructors | Improve this Doc View Source IxObject(ITwinObject, string, string) Declaration public IxObject(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description Ix.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source AttributeName Declaration public string AttributeName { get; set; } Property Value Type Description string | Improve this Doc View Source Connector Declaration protected Connector Connector { get; } Property Value Type Description Ix.Connector.Connector | Improve this Doc View Source HumanReadable Declaration public string HumanReadable { get; set; } Property Value Type Description string | Improve this Doc View Source Parent Declaration protected ITwinObject Parent { get; set; } Property Value Type Description Ix.Connector.ITwinObject | Improve this Doc View Source Symbol Declaration public string Symbol { get; protected set; } Property Value Type Description string | Improve this Doc View Source SymbolTail Declaration protected string SymbolTail { get; set; } Property Value Type Description string Methods | Improve this Doc View Source AddChild(ITwinObject) Declaration public void AddChild(ITwinObject twinObject) Parameters Type Name Description Ix.Connector.ITwinObject twinObject | Improve this Doc View Source AddKid(ITwinElement) Declaration public void AddKid(ITwinElement kid) Parameters Type Name Description Ix.Connector.ITwinElement kid | Improve this Doc View Source AddValueTag(ITwinPrimitive) Declaration public void AddValueTag(ITwinPrimitive valueTag) Parameters Type Name Description Ix.Connector.ITwinPrimitive valueTag | Improve this Doc View Source GetChildren() Declaration public IEnumerable<ITwinObject> GetChildren() Returns Type Description System.Collections.Generic.IEnumerable<T><Ix.Connector.ITwinObject> | Improve this Doc View Source GetConnector() Declaration public Connector GetConnector() Returns Type Description Ix.Connector.Connector | Improve this Doc View Source GetKids() Declaration public IEnumerable<ITwinElement> GetKids() Returns Type Description System.Collections.Generic.IEnumerable<T><Ix.Connector.ITwinElement> | Improve this Doc View Source GetParent() Declaration public ITwinObject GetParent() Returns Type Description Ix.Connector.ITwinObject | Improve this Doc View Source GetSymbolTail() Declaration public string GetSymbolTail() Returns Type Description string | Improve this Doc View Source GetValueTags() Declaration public IEnumerable<ITwinPrimitive> GetValueTags() Returns Type Description System.Collections.Generic.IEnumerable<T><Ix.Connector.ITwinPrimitive> | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<IxObject> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><IxObject> | Improve this Doc View Source OnlineToPlainAsync(IxObject) Declaration protected Task<IxObject> OnlineToPlainAsync(IxObject plain) Parameters Type Name Description IxObject plain Returns Type Description System.Threading.Tasks.Task<TResult><IxObject> | Improve this Doc View Source PlainToOnlineAsync(IxObject) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(IxObject plain) Parameters Type Name Description IxObject plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><Ix.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadowAsync(IxObject) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(IxObject plain) Parameters Type Name Description IxObject plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><Ix.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<IxObject> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><IxObject> | Improve this Doc View Source ShadowToPlainAsync(IxObject) Declaration protected Task<IxObject> ShadowToPlainAsync(IxObject plain) Parameters Type Name Description IxObject plain Returns Type Description System.Threading.Tasks.Task<TResult><IxObject> Implements Ix.Connector.ITwinObject Ix.Connector.ITwinElement IIxObject"
  },
  "api/ix.framework.core.IxSequencer.html": {
    "href": "api/ix.framework.core.IxSequencer.html",
    "title": "Class IxSequencer | System.Dynamic.ExpandoObject",
    "keywords": "Class IxSequencer Inheritance object IxObject IxTask IxSequencer Implements Ix.Connector.ITwinObject Ix.Connector.ITwinElement IIxObject System.Windows.Input.ICommand IIxTask IIxTaskState Inherited Members IxTask.CanExecute(object) IxTask.Execute(object) IxTask.CanExecuteChanged IxTask.Status IxTask.IsDisabled IxTask.RemoteInvoke IxTask.RemoteRestore IxTask.RemoteAbort IxTask.RemoteResume IxTask.OnlineToPlainAsync(IxTask) IxTask.PlainToOnlineAsync(IxTask) IxTask.ShadowToPlainAsync(IxTask) IxTask.PlainToShadowAsync(IxTask) IxObject.OnlineToPlainAsync(IxObject) IxObject.PlainToOnlineAsync(IxObject) IxObject.ShadowToPlainAsync(IxObject) IxObject.PlainToShadowAsync(IxObject) IxObject.GetChildren() IxObject.GetKids() IxObject.GetValueTags() IxObject.AddValueTag(ITwinPrimitive) IxObject.AddKid(ITwinElement) IxObject.AddChild(ITwinObject) IxObject.Connector IxObject.GetConnector() IxObject.GetSymbolTail() IxObject.GetParent() IxObject.Symbol IxObject.AttributeName IxObject.HumanReadable IxObject.SymbolTail IxObject.Parent object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ix.framework.core Assembly: ix.framework.core.dll Syntax public class IxSequencer : IxTask, ITwinObject, ITwinElement, IIxObject, ICommand, IIxTask, IIxTaskState Constructors | Improve this Doc View Source IxSequencer(ITwinObject, string, string) Declaration public IxSequencer(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description Ix.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source CurrentOrder Declaration public OnlinerULInt CurrentOrder { get; } Property Value Type Description Ix.Connector.ValueTypes.OnlinerULInt | Improve this Doc View Source SequenceMode Declaration [EnumeratorDiscriminator(typeof(eIxSequenceMode))] public OnlinerInt SequenceMode { get; } Property Value Type Description Ix.Connector.ValueTypes.OnlinerInt | Improve this Doc View Source StepBackwardCommand Declaration public IxTask StepBackwardCommand { get; } Property Value Type Description IxTask | Improve this Doc View Source StepForwardCommand Declaration public IxTask StepForwardCommand { get; } Property Value Type Description IxTask | Improve this Doc View Source StepIn Declaration public IxTask StepIn { get; } Property Value Type Description IxTask | Improve this Doc View Source SteppingMode Declaration [EnumeratorDiscriminator(typeof(eIxSteppingMode))] public OnlinerInt SteppingMode { get; } Property Value Type Description Ix.Connector.ValueTypes.OnlinerInt Methods | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<IxSequencer> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><IxSequencer> | Improve this Doc View Source OnlineToPlainAsync(IxSequencer) Declaration protected Task<IxSequencer> OnlineToPlainAsync(IxSequencer plain) Parameters Type Name Description IxSequencer plain Returns Type Description System.Threading.Tasks.Task<TResult><IxSequencer> | Improve this Doc View Source PlainToOnlineAsync(IxSequencer) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(IxSequencer plain) Parameters Type Name Description IxSequencer plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><Ix.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadowAsync(IxSequencer) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(IxSequencer plain) Parameters Type Name Description IxSequencer plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><Ix.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<IxSequencer> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><IxSequencer> | Improve this Doc View Source ShadowToPlainAsync(IxSequencer) Declaration protected Task<IxSequencer> ShadowToPlainAsync(IxSequencer plain) Parameters Type Name Description IxSequencer plain Returns Type Description System.Threading.Tasks.Task<TResult><IxSequencer> Implements Ix.Connector.ITwinObject Ix.Connector.ITwinElement IIxObject System.Windows.Input.ICommand IIxTask IIxTaskState"
  },
  "api/ix.framework.core.IxSequencerCommandView.html": {
    "href": "api/ix.framework.core.IxSequencerCommandView.html",
    "title": "Class IxSequencerCommandView | System.Dynamic.ExpandoObject",
    "keywords": "Class IxSequencerCommandView Inheritance object Microsoft.AspNetCore.Components.ComponentBase Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><IxSequencer> IxSequencerCommandView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender Ix.Presentation.Blazor.Interfaces.IRenderableComponent Ix.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase Inherited Members Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<ix.framework.core.IxSequencer>.Component Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(Ix.Connector.ITwinObject) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(Ix.Connector.ValueTypes.OnlinerBase) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(Ix.Connector.ITwinObject) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(Ix.Connector.ITwinPrimitive) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(Ix.Connector.ValueTypes.OnlinerBase) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, Ix.Connector.ValueTypes.ValueChangedEventArgs) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitialized() Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ix.framework.core Assembly: ix.framework.core.blazor.dll Syntax public class IxSequencerCommandView : RenderableComplexComponentBase<IxSequencer>, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase Methods | Improve this Doc View Source BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters Type Name Description Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder Overrides Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender Ix.Presentation.Blazor.Interfaces.IRenderableComponent Ix.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase"
  },
  "api/ix.framework.core.IxSequencerStatusView.html": {
    "href": "api/ix.framework.core.IxSequencerStatusView.html",
    "title": "Class IxSequencerStatusView | System.Dynamic.ExpandoObject",
    "keywords": "Class IxSequencerStatusView Inheritance object Microsoft.AspNetCore.Components.ComponentBase Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><IxSequencer> IxSequencerStatusView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender Ix.Presentation.Blazor.Interfaces.IRenderableComponent Ix.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase Inherited Members Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<ix.framework.core.IxSequencer>.Component Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(Ix.Connector.ITwinObject) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(Ix.Connector.ValueTypes.OnlinerBase) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(Ix.Connector.ITwinObject) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(Ix.Connector.ITwinPrimitive) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(Ix.Connector.ValueTypes.OnlinerBase) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, Ix.Connector.ValueTypes.ValueChangedEventArgs) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitialized() Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ix.framework.core Assembly: ix.framework.core.blazor.dll Syntax public class IxSequencerStatusView : RenderableComplexComponentBase<IxSequencer>, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase Methods | Improve this Doc View Source BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters Type Name Description Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder Overrides Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender Ix.Presentation.Blazor.Interfaces.IRenderableComponent Ix.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase"
  },
  "api/ix.framework.core.IxSequencerView.html": {
    "href": "api/ix.framework.core.IxSequencerView.html",
    "title": "Class IxSequencerView | System.Dynamic.ExpandoObject",
    "keywords": "Class IxSequencerView Inheritance object Microsoft.AspNetCore.Components.ComponentBase Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><IxSequencer> IxSequencerView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender Ix.Presentation.Blazor.Interfaces.IRenderableComponent Ix.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable Inherited Members Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<ix.framework.core.IxSequencer>.Component Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(Ix.Connector.ITwinObject) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(Ix.Connector.ValueTypes.OnlinerBase) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(Ix.Connector.ITwinObject) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(Ix.Connector.ITwinPrimitive) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(Ix.Connector.ValueTypes.OnlinerBase) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, Ix.Connector.ValueTypes.ValueChangedEventArgs) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ix.framework.core Assembly: ix.framework.core.blazor.dll Syntax public class IxSequencerView : RenderableComplexComponentBase<IxSequencer>, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Properties | Improve this Doc View Source IsControllable Declaration [Parameter] public bool IsControllable { get; set; } Property Value Type Description bool Methods | Improve this Doc View Source BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters Type Name Description Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder Overrides Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source OnInitialized() Declaration protected override void OnInitialized() Overrides Microsoft.AspNetCore.Components.ComponentBase.OnInitialized() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender Ix.Presentation.Blazor.Interfaces.IRenderableComponent Ix.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable"
  },
  "api/ix.framework.core.IxStep.html": {
    "href": "api/ix.framework.core.IxStep.html",
    "title": "Class IxStep | System.Dynamic.ExpandoObject",
    "keywords": "Class IxStep Inheritance object IxObject IxTask IxStep Implements Ix.Connector.ITwinObject Ix.Connector.ITwinElement IIxObject System.Windows.Input.ICommand IIxTask IIxTaskState IIxStep Inherited Members IxTask.CanExecute(object) IxTask.Execute(object) IxTask.CanExecuteChanged IxTask.Status IxTask.IsDisabled IxTask.RemoteInvoke IxTask.RemoteRestore IxTask.RemoteAbort IxTask.RemoteResume IxTask.OnlineToPlainAsync(IxTask) IxTask.PlainToOnlineAsync(IxTask) IxTask.ShadowToPlainAsync(IxTask) IxTask.PlainToShadowAsync(IxTask) IxObject.OnlineToPlainAsync(IxObject) IxObject.PlainToOnlineAsync(IxObject) IxObject.ShadowToPlainAsync(IxObject) IxObject.PlainToShadowAsync(IxObject) IxObject.GetChildren() IxObject.GetKids() IxObject.GetValueTags() IxObject.AddValueTag(ITwinPrimitive) IxObject.AddKid(ITwinElement) IxObject.AddChild(ITwinObject) IxObject.Connector IxObject.GetConnector() IxObject.GetSymbolTail() IxObject.GetParent() IxObject.Symbol IxObject.AttributeName IxObject.HumanReadable IxObject.SymbolTail IxObject.Parent object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ix.framework.core Assembly: ix.framework.core.dll Syntax public class IxStep : IxTask, ITwinObject, ITwinElement, IIxObject, ICommand, IIxTask, IIxTaskState, IIxStep Constructors | Improve this Doc View Source IxStep(ITwinObject, string, string) Declaration public IxStep(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description Ix.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source Description Declaration public string Description { get; set; } Property Value Type Description string | Improve this Doc View Source IsActive Declaration public OnlinerBool IsActive { get; } Property Value Type Description Ix.Connector.ValueTypes.OnlinerBool | Improve this Doc View Source IsEnabled Declaration public OnlinerBool IsEnabled { get; } Property Value Type Description Ix.Connector.ValueTypes.OnlinerBool | Improve this Doc View Source Order Declaration [ReadOnly] public OnlinerULInt Order { get; } Property Value Type Description Ix.Connector.ValueTypes.OnlinerULInt | Improve this Doc View Source StepDescription Declaration [ReadOnce] public OnlinerString StepDescription { get; } Property Value Type Description Ix.Connector.ValueTypes.OnlinerString Methods | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<IxStep> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><IxStep> | Improve this Doc View Source OnlineToPlainAsync(IxStep) Declaration protected Task<IxStep> OnlineToPlainAsync(IxStep plain) Parameters Type Name Description IxStep plain Returns Type Description System.Threading.Tasks.Task<TResult><IxStep> | Improve this Doc View Source PlainToOnlineAsync(IxStep) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(IxStep plain) Parameters Type Name Description IxStep plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><Ix.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadowAsync(IxStep) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(IxStep plain) Parameters Type Name Description IxStep plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><Ix.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<IxStep> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><IxStep> | Improve this Doc View Source ShadowToPlainAsync(IxStep) Declaration protected Task<IxStep> ShadowToPlainAsync(IxStep plain) Parameters Type Name Description IxStep plain Returns Type Description System.Threading.Tasks.Task<TResult><IxStep> Implements Ix.Connector.ITwinObject Ix.Connector.ITwinElement IIxObject System.Windows.Input.ICommand IIxTask IIxTaskState IIxStep"
  },
  "api/ix.framework.core.IxStepCommandView.html": {
    "href": "api/ix.framework.core.IxStepCommandView.html",
    "title": "Class IxStepCommandView | System.Dynamic.ExpandoObject",
    "keywords": "Class IxStepCommandView Inheritance object Microsoft.AspNetCore.Components.ComponentBase Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><IxStep> IxStepCommandView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender Ix.Presentation.Blazor.Interfaces.IRenderableComponent Ix.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase Inherited Members Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<ix.framework.core.IxStep>.Component Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(Ix.Connector.ITwinObject) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(Ix.Connector.ValueTypes.OnlinerBase) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(Ix.Connector.ITwinObject) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(Ix.Connector.ITwinPrimitive) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(Ix.Connector.ValueTypes.OnlinerBase) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, Ix.Connector.ValueTypes.ValueChangedEventArgs) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitialized() Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ix.framework.core Assembly: ix.framework.core.blazor.dll Syntax public class IxStepCommandView : RenderableComplexComponentBase<IxStep>, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase Methods | Improve this Doc View Source BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters Type Name Description Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder Overrides Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender Ix.Presentation.Blazor.Interfaces.IRenderableComponent Ix.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase"
  },
  "api/ix.framework.core.IxStepStatusView.html": {
    "href": "api/ix.framework.core.IxStepStatusView.html",
    "title": "Class IxStepStatusView | System.Dynamic.ExpandoObject",
    "keywords": "Class IxStepStatusView Inheritance object Microsoft.AspNetCore.Components.ComponentBase Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><IxStep> IxStepStatusView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender Ix.Presentation.Blazor.Interfaces.IRenderableComponent Ix.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase Inherited Members Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<ix.framework.core.IxStep>.Component Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(Ix.Connector.ITwinObject) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(Ix.Connector.ValueTypes.OnlinerBase) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(Ix.Connector.ITwinObject) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(Ix.Connector.ITwinPrimitive) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(Ix.Connector.ValueTypes.OnlinerBase) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, Ix.Connector.ValueTypes.ValueChangedEventArgs) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitialized() Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ix.framework.core Assembly: ix.framework.core.blazor.dll Syntax public class IxStepStatusView : RenderableComplexComponentBase<IxStep>, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase Methods | Improve this Doc View Source BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters Type Name Description Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder Overrides Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender Ix.Presentation.Blazor.Interfaces.IRenderableComponent Ix.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase"
  },
  "api/ix.framework.core.IxStepView.html": {
    "href": "api/ix.framework.core.IxStepView.html",
    "title": "Class IxStepView | System.Dynamic.ExpandoObject",
    "keywords": "Class IxStepView Inheritance object Microsoft.AspNetCore.Components.ComponentBase Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><IxStep> IxStepView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender Ix.Presentation.Blazor.Interfaces.IRenderableComponent Ix.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable Inherited Members Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<ix.framework.core.IxStep>.Component Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(Ix.Connector.ITwinObject) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(Ix.Connector.ValueTypes.OnlinerBase) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(Ix.Connector.ITwinObject) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(Ix.Connector.ITwinPrimitive) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(Ix.Connector.ValueTypes.OnlinerBase) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, Ix.Connector.ValueTypes.ValueChangedEventArgs) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ix.framework.core Assembly: ix.framework.core.blazor.dll Syntax public class IxStepView : RenderableComplexComponentBase<IxStep>, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Properties | Improve this Doc View Source IsControllable Declaration [Parameter] public bool IsControllable { get; set; } Property Value Type Description bool Methods | Improve this Doc View Source BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters Type Name Description Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder Overrides Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source OnInitialized() Declaration protected override void OnInitialized() Overrides Microsoft.AspNetCore.Components.ComponentBase.OnInitialized() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender Ix.Presentation.Blazor.Interfaces.IRenderableComponent Ix.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable"
  },
  "api/ix.framework.core.IxTask.html": {
    "href": "api/ix.framework.core.IxTask.html",
    "title": "Class IxTask | System.Dynamic.ExpandoObject",
    "keywords": "Class IxTask Inheritance object IxObject IxTask IxSequencer IxStep Implements Ix.Connector.ITwinObject Ix.Connector.ITwinElement IIxObject System.Windows.Input.ICommand IIxTask IIxTaskState Inherited Members IxObject.OnlineToPlainAsync(IxObject) IxObject.PlainToOnlineAsync(IxObject) IxObject.ShadowToPlainAsync(IxObject) IxObject.PlainToShadowAsync(IxObject) IxObject.GetChildren() IxObject.GetKids() IxObject.GetValueTags() IxObject.AddValueTag(ITwinPrimitive) IxObject.AddKid(ITwinElement) IxObject.AddChild(ITwinObject) IxObject.Connector IxObject.GetConnector() IxObject.GetSymbolTail() IxObject.GetParent() IxObject.Symbol IxObject.AttributeName IxObject.HumanReadable IxObject.SymbolTail IxObject.Parent object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ix.framework.core Assembly: ix.framework.core.dll Syntax public class IxTask : IxObject, ITwinObject, ITwinElement, IIxObject, ICommand, IIxTask, IIxTaskState Constructors | Improve this Doc View Source IxTask(ITwinObject, string, string) Declaration public IxTask(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description Ix.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source IsDisabled Declaration public OnlinerBool IsDisabled { get; } Property Value Type Description Ix.Connector.ValueTypes.OnlinerBool | Improve this Doc View Source RemoteAbort Declaration public OnlinerBool RemoteAbort { get; } Property Value Type Description Ix.Connector.ValueTypes.OnlinerBool | Improve this Doc View Source RemoteInvoke Declaration public OnlinerBool RemoteInvoke { get; } Property Value Type Description Ix.Connector.ValueTypes.OnlinerBool | Improve this Doc View Source RemoteRestore Declaration public OnlinerBool RemoteRestore { get; } Property Value Type Description Ix.Connector.ValueTypes.OnlinerBool | Improve this Doc View Source RemoteResume Declaration public OnlinerBool RemoteResume { get; } Property Value Type Description Ix.Connector.ValueTypes.OnlinerBool | Improve this Doc View Source Status Declaration [ReadOnly] [EnumeratorDiscriminator(typeof(eIxTaskState))] public OnlinerInt Status { get; } Property Value Type Description Ix.Connector.ValueTypes.OnlinerInt Methods | Improve this Doc View Source CanExecute(object) Declaration public bool CanExecute(object parameter = null) Parameters Type Name Description object parameter Returns Type Description bool | Improve this Doc View Source Execute(object) Declaration public void Execute(object parameter) Parameters Type Name Description object parameter | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<IxTask> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><IxTask> | Improve this Doc View Source OnlineToPlainAsync(IxTask) Declaration protected Task<IxTask> OnlineToPlainAsync(IxTask plain) Parameters Type Name Description IxTask plain Returns Type Description System.Threading.Tasks.Task<TResult><IxTask> | Improve this Doc View Source PlainToOnlineAsync(IxTask) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(IxTask plain) Parameters Type Name Description IxTask plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><Ix.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadowAsync(IxTask) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(IxTask plain) Parameters Type Name Description IxTask plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><Ix.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<IxTask> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><IxTask> | Improve this Doc View Source ShadowToPlainAsync(IxTask) Declaration protected Task<IxTask> ShadowToPlainAsync(IxTask plain) Parameters Type Name Description IxTask plain Returns Type Description System.Threading.Tasks.Task<TResult><IxTask> Events | Improve this Doc View Source CanExecuteChanged Declaration public event EventHandler CanExecuteChanged Event Type Type Description System.EventHandler Implements Ix.Connector.ITwinObject Ix.Connector.ITwinElement IIxObject System.Windows.Input.ICommand IIxTask IIxTaskState"
  },
  "api/ix.framework.core.IxTaskCommandView.html": {
    "href": "api/ix.framework.core.IxTaskCommandView.html",
    "title": "Class IxTaskCommandView | System.Dynamic.ExpandoObject",
    "keywords": "Class IxTaskCommandView Inheritance object Microsoft.AspNetCore.Components.ComponentBase Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><IxTask> IxTaskCommandView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender Ix.Presentation.Blazor.Interfaces.IRenderableComponent Ix.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase Inherited Members Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<ix.framework.core.IxTask>.Component Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(Ix.Connector.ITwinObject) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(Ix.Connector.ValueTypes.OnlinerBase) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(Ix.Connector.ITwinObject) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(Ix.Connector.ITwinPrimitive) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(Ix.Connector.ValueTypes.OnlinerBase) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, Ix.Connector.ValueTypes.ValueChangedEventArgs) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitialized() Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ix.framework.core Assembly: ix.framework.core.blazor.dll Syntax public class IxTaskCommandView : RenderableComplexComponentBase<IxTask>, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase Properties | Improve this Doc View Source Description Declaration [Parameter] public string Description { get; set; } Property Value Type Description string | Improve this Doc View Source HideRestoreButton Declaration [Parameter] public bool HideRestoreButton { get; set; } Property Value Type Description bool Methods | Improve this Doc View Source BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters Type Name Description Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder Overrides Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender Ix.Presentation.Blazor.Interfaces.IRenderableComponent Ix.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase"
  },
  "api/ix.framework.core.IxTaskStatusView.html": {
    "href": "api/ix.framework.core.IxTaskStatusView.html",
    "title": "Class IxTaskStatusView | System.Dynamic.ExpandoObject",
    "keywords": "Class IxTaskStatusView Inheritance object Microsoft.AspNetCore.Components.ComponentBase Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><IxTask> IxTaskStatusView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender Ix.Presentation.Blazor.Interfaces.IRenderableComponent Ix.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase Inherited Members Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<ix.framework.core.IxTask>.Component Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(Ix.Connector.ITwinObject) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(Ix.Connector.ValueTypes.OnlinerBase) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(Ix.Connector.ITwinObject) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(Ix.Connector.ITwinPrimitive) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(Ix.Connector.ValueTypes.OnlinerBase) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, Ix.Connector.ValueTypes.ValueChangedEventArgs) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitialized() Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ix.framework.core Assembly: ix.framework.core.blazor.dll Syntax public class IxTaskStatusView : RenderableComplexComponentBase<IxTask>, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase Properties | Improve this Doc View Source Description Declaration [Parameter] public string Description { get; set; } Property Value Type Description string | Improve this Doc View Source HideRestoreButton Declaration [Parameter] public bool HideRestoreButton { get; set; } Property Value Type Description bool Methods | Improve this Doc View Source BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters Type Name Description Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder Overrides Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender Ix.Presentation.Blazor.Interfaces.IRenderableComponent Ix.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase"
  },
  "api/ix.framework.core.IxTaskView.html": {
    "href": "api/ix.framework.core.IxTaskView.html",
    "title": "Class IxTaskView | System.Dynamic.ExpandoObject",
    "keywords": "Class IxTaskView Inheritance object Microsoft.AspNetCore.Components.ComponentBase Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><IxTask> IxTaskView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender Ix.Presentation.Blazor.Interfaces.IRenderableComponent Ix.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable Inherited Members Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<ix.framework.core.IxTask>.Component Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(Ix.Connector.ITwinObject) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(Ix.Connector.ValueTypes.OnlinerBase) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(Ix.Connector.ITwinObject) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(Ix.Connector.ITwinPrimitive) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(Ix.Connector.ValueTypes.OnlinerBase) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, Ix.Connector.ValueTypes.ValueChangedEventArgs) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) Ix.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ix.framework.core Assembly: ix.framework.core.blazor.dll Syntax public class IxTaskView : RenderableComplexComponentBase<IxTask>, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Properties | Improve this Doc View Source Description Declaration [Parameter] public string Description { get; set; } Property Value Type Description string | Improve this Doc View Source HideRestoreButton Declaration [Parameter] public bool HideRestoreButton { get; set; } Property Value Type Description bool | Improve this Doc View Source IsDisabled Declaration [Parameter] public bool IsDisabled { get; set; } Property Value Type Description bool Methods | Improve this Doc View Source BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters Type Name Description Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder Overrides Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source OnInitialized() Declaration protected override void OnInitialized() Overrides Microsoft.AspNetCore.Components.ComponentBase.OnInitialized() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender Ix.Presentation.Blazor.Interfaces.IRenderableComponent Ix.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable"
  },
  "api/Pocos.ix.framework.core._NULL_CONTEXT.html": {
    "href": "api/Pocos.ix.framework.core._NULL_CONTEXT.html",
    "title": "Class _NULL_CONTEXT | System.Dynamic.ExpandoObject",
    "keywords": "Class _NULL_CONTEXT Inheritance object _NULL_CONTEXT Implements IIxContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.ix.framework.core Assembly: ix.framework.core.dll Syntax public class _NULL_CONTEXT : IIxContext Implements IIxContext"
  },
  "api/Pocos.ix.framework.core.html": {
    "href": "api/Pocos.ix.framework.core.html",
    "title": "Namespace Pocos.ix.framework.core | System.Dynamic.ExpandoObject",
    "keywords": "Namespace Pocos.ix.framework.core Classes _NULL_CONTEXT IxComponent IxContext IxObject IxSequencer IxStep IxTask Interfaces IIxComponent IIxContext IIxCoordinator IIxObject IIxServiceable IIxStep IIxTask IIxTaskState"
  },
  "api/Pocos.ix.framework.core.IIxComponent.html": {
    "href": "api/Pocos.ix.framework.core.IIxComponent.html",
    "title": "Interface IIxComponent | System.Dynamic.ExpandoObject",
    "keywords": "Interface IIxComponent Namespace: Pocos.ix.framework.core Assembly: ix.framework.core.dll Syntax public interface IIxComponent"
  },
  "api/Pocos.ix.framework.core.IIxContext.html": {
    "href": "api/Pocos.ix.framework.core.IIxContext.html",
    "title": "Interface IIxContext | System.Dynamic.ExpandoObject",
    "keywords": "Interface IIxContext Namespace: Pocos.ix.framework.core Assembly: ix.framework.core.dll Syntax public interface IIxContext"
  },
  "api/Pocos.ix.framework.core.IIxCoordinator.html": {
    "href": "api/Pocos.ix.framework.core.IIxCoordinator.html",
    "title": "Interface IIxCoordinator | System.Dynamic.ExpandoObject",
    "keywords": "Interface IIxCoordinator Namespace: Pocos.ix.framework.core Assembly: ix.framework.core.dll Syntax public interface IIxCoordinator"
  },
  "api/Pocos.ix.framework.core.IIxObject.html": {
    "href": "api/Pocos.ix.framework.core.IIxObject.html",
    "title": "Interface IIxObject | System.Dynamic.ExpandoObject",
    "keywords": "Interface IIxObject Namespace: Pocos.ix.framework.core Assembly: ix.framework.core.dll Syntax public interface IIxObject"
  },
  "api/Pocos.ix.framework.core.IIxServiceable.html": {
    "href": "api/Pocos.ix.framework.core.IIxServiceable.html",
    "title": "Interface IIxServiceable | System.Dynamic.ExpandoObject",
    "keywords": "Interface IIxServiceable Namespace: Pocos.ix.framework.core Assembly: ix.framework.core.dll Syntax public interface IIxServiceable"
  },
  "api/Pocos.ix.framework.core.IIxStep.html": {
    "href": "api/Pocos.ix.framework.core.IIxStep.html",
    "title": "Interface IIxStep | System.Dynamic.ExpandoObject",
    "keywords": "Interface IIxStep Namespace: Pocos.ix.framework.core Assembly: ix.framework.core.dll Syntax public interface IIxStep"
  },
  "api/Pocos.ix.framework.core.IIxTask.html": {
    "href": "api/Pocos.ix.framework.core.IIxTask.html",
    "title": "Interface IIxTask | System.Dynamic.ExpandoObject",
    "keywords": "Interface IIxTask Namespace: Pocos.ix.framework.core Assembly: ix.framework.core.dll Syntax public interface IIxTask"
  },
  "api/Pocos.ix.framework.core.IIxTaskState.html": {
    "href": "api/Pocos.ix.framework.core.IIxTaskState.html",
    "title": "Interface IIxTaskState | System.Dynamic.ExpandoObject",
    "keywords": "Interface IIxTaskState Namespace: Pocos.ix.framework.core Assembly: ix.framework.core.dll Syntax public interface IIxTaskState"
  },
  "api/Pocos.ix.framework.core.IxComponent.html": {
    "href": "api/Pocos.ix.framework.core.IxComponent.html",
    "title": "Class IxComponent | System.Dynamic.ExpandoObject",
    "keywords": "Class IxComponent Inheritance object IxObject IxComponent Implements IIxObject IIxComponent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.ix.framework.core Assembly: ix.framework.core.dll Syntax public class IxComponent : IxObject, IIxObject, IIxComponent Properties | Improve this Doc View Source _isinServiceMode Declaration public bool _isinServiceMode { get; set; } Property Value Type Description bool Implements IIxObject IIxComponent"
  },
  "api/Pocos.ix.framework.core.IxContext.html": {
    "href": "api/Pocos.ix.framework.core.IxContext.html",
    "title": "Class IxContext | System.Dynamic.ExpandoObject",
    "keywords": "Class IxContext Inheritance object IxContext Implements IIxContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.ix.framework.core Assembly: ix.framework.core.dll Syntax public class IxContext : IIxContext Implements IIxContext"
  },
  "api/Pocos.ix.framework.core.IxObject.html": {
    "href": "api/Pocos.ix.framework.core.IxObject.html",
    "title": "Class IxObject | System.Dynamic.ExpandoObject",
    "keywords": "Class IxObject Inheritance object IxObject IxComponent IxTask Implements IIxObject Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.ix.framework.core Assembly: ix.framework.core.dll Syntax public class IxObject : IIxObject Implements IIxObject"
  },
  "api/Pocos.ix.framework.core.IxSequencer.html": {
    "href": "api/Pocos.ix.framework.core.IxSequencer.html",
    "title": "Class IxSequencer | System.Dynamic.ExpandoObject",
    "keywords": "Class IxSequencer Inheritance object IxObject IxTask IxSequencer Implements IIxObject IIxTask IIxTaskState Inherited Members IxTask.Status IxTask.IsDisabled IxTask.RemoteInvoke IxTask.RemoteRestore IxTask.RemoteAbort IxTask.RemoteResume object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.ix.framework.core Assembly: ix.framework.core.dll Syntax public class IxSequencer : IxTask, IIxObject, IIxTask, IIxTaskState Properties | Improve this Doc View Source CurrentOrder Declaration public ulong CurrentOrder { get; set; } Property Value Type Description ulong | Improve this Doc View Source SequenceMode Declaration public short SequenceMode { get; set; } Property Value Type Description short | Improve this Doc View Source StepBackwardCommand Declaration public IxTask StepBackwardCommand { get; set; } Property Value Type Description IxTask | Improve this Doc View Source StepForwardCommand Declaration public IxTask StepForwardCommand { get; set; } Property Value Type Description IxTask | Improve this Doc View Source StepIn Declaration public IxTask StepIn { get; set; } Property Value Type Description IxTask | Improve this Doc View Source SteppingMode Declaration public short SteppingMode { get; set; } Property Value Type Description short Implements IIxObject IIxTask IIxTaskState"
  },
  "api/Pocos.ix.framework.core.IxStep.html": {
    "href": "api/Pocos.ix.framework.core.IxStep.html",
    "title": "Class IxStep | System.Dynamic.ExpandoObject",
    "keywords": "Class IxStep Inheritance object IxObject IxTask IxStep Implements IIxObject IIxTask IIxTaskState IIxStep Inherited Members IxTask.Status IxTask.IsDisabled IxTask.RemoteInvoke IxTask.RemoteRestore IxTask.RemoteAbort IxTask.RemoteResume object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.ix.framework.core Assembly: ix.framework.core.dll Syntax public class IxStep : IxTask, IIxObject, IIxTask, IIxTaskState, IIxStep Properties | Improve this Doc View Source IsActive Declaration public bool IsActive { get; set; } Property Value Type Description bool | Improve this Doc View Source IsEnabled Declaration public bool IsEnabled { get; set; } Property Value Type Description bool | Improve this Doc View Source Order Declaration public ulong Order { get; set; } Property Value Type Description ulong | Improve this Doc View Source StepDescription Declaration public string StepDescription { get; set; } Property Value Type Description string Implements IIxObject IIxTask IIxTaskState IIxStep"
  },
  "api/Pocos.ix.framework.core.IxTask.html": {
    "href": "api/Pocos.ix.framework.core.IxTask.html",
    "title": "Class IxTask | System.Dynamic.ExpandoObject",
    "keywords": "Class IxTask Inheritance object IxObject IxTask IxSequencer IxStep Implements IIxObject IIxTask IIxTaskState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.ix.framework.core Assembly: ix.framework.core.dll Syntax public class IxTask : IxObject, IIxObject, IIxTask, IIxTaskState Properties | Improve this Doc View Source IsDisabled Declaration public bool IsDisabled { get; set; } Property Value Type Description bool | Improve this Doc View Source RemoteAbort Declaration public bool RemoteAbort { get; set; } Property Value Type Description bool | Improve this Doc View Source RemoteInvoke Declaration public bool RemoteInvoke { get; set; } Property Value Type Description bool | Improve this Doc View Source RemoteRestore Declaration public bool RemoteRestore { get; set; } Property Value Type Description bool | Improve this Doc View Source RemoteResume Declaration public bool RemoteResume { get; set; } Property Value Type Description bool | Improve this Doc View Source Status Declaration public short Status { get; set; } Property Value Type Description short Implements IIxObject IIxTask IIxTaskState"
  },
  "apictrl/index.html": {
    "href": "apictrl/index.html",
    "title": "IX API Documentation | System.Dynamic.ExpandoObject",
    "keywords": "IX API Documentation"
  },
  "apictrl/ix.framework.core._NULL_CONTEXT.html": {
    "href": "apictrl/ix.framework.core._NULL_CONTEXT.html",
    "title": "Class _NULL_CONTEXT | System.Dynamic.ExpandoObject",
    "keywords": "Class _NULL_CONTEXT Provides an empty context for uninitialized objects. Inheritance _NULL_CONTEXT Namespace: core Assembly: @ix-ax/ix.framework.core.dll Syntax CLASS _NULL_CONTEXT Methods CreateIdentity Declaration Public ULINT CreateIdentity() Returns Type Description OpenCycleCount Declaration Public ULINT OpenCycleCount() Returns Type Description"
  },
  "apictrl/ix.framework.core.CoordinatorStates.html": {
    "href": "apictrl/ix.framework.core.CoordinatorStates.html",
    "title": "Enum CoordinatorStates | System.Dynamic.ExpandoObject",
    "keywords": "Enum CoordinatorStates Namespace: core Assembly: .dll Syntax CoordinatorStates : ix.framework.core.CoordinatorStates"
  },
  "apictrl/ix.framework.core.eIxSequenceMode.html": {
    "href": "apictrl/ix.framework.core.eIxSequenceMode.html",
    "title": "Enum eIxSequenceMode | System.Dynamic.ExpandoObject",
    "keywords": "Enum eIxSequenceMode Namespace: core Assembly: .dll Syntax eIxSequenceMode : ix.framework.core.eIxSequenceMode"
  },
  "apictrl/ix.framework.core.eIxSteppingMode.html": {
    "href": "apictrl/ix.framework.core.eIxSteppingMode.html",
    "title": "Enum eIxSteppingMode | System.Dynamic.ExpandoObject",
    "keywords": "Enum eIxSteppingMode Namespace: core Assembly: .dll Syntax eIxSteppingMode : ix.framework.core.eIxSteppingMode"
  },
  "apictrl/ix.framework.core.eIxTaskState.html": {
    "href": "apictrl/ix.framework.core.eIxTaskState.html",
    "title": "Enum eIxTaskState | System.Dynamic.ExpandoObject",
    "keywords": "Enum eIxTaskState Namespace: core Assembly: .dll Syntax eIxTaskState : ix.framework.core.eIxTaskState"
  },
  "apictrl/ix.framework.core.html": {
    "href": "apictrl/ix.framework.core.html",
    "title": "Namespace core | System.Dynamic.ExpandoObject",
    "keywords": "Namespace core Interfaces IIxStep"
  },
  "apictrl/ix.framework.core.IIxComponent.html": {
    "href": "apictrl/ix.framework.core.IIxComponent.html",
    "title": "Interface IIxComponent | System.Dynamic.ExpandoObject",
    "keywords": "Interface IIxComponent Namespace: core Assembly: @ix-ax/ix.framework.core.dll Syntax INTERFACE IIxComponent"
  },
  "apictrl/ix.framework.core.IIxContext.html": {
    "href": "apictrl/ix.framework.core.IIxContext.html",
    "title": "Interface IIxContext | System.Dynamic.ExpandoObject",
    "keywords": "Interface IIxContext Namespace: core Assembly: @ix-ax/ix.framework.core.dll Syntax INTERFACE IIxContext Methods CreateIdentity Declaration Public ULINT CreateIdentity() Returns Type Description OpenCycleCount Declaration Public ULINT OpenCycleCount() Returns Type Description"
  },
  "apictrl/ix.framework.core.IIxCoordinator.html": {
    "href": "apictrl/ix.framework.core.IIxCoordinator.html",
    "title": "Interface IIxCoordinator | System.Dynamic.ExpandoObject",
    "keywords": "Interface IIxCoordinator Namespace: core Assembly: @ix-ax/ix.framework.core.dll Syntax INTERFACE IIxCoordinator Methods GetCoordinatorState Declaration Public ix.framework.core.CoordinatorStates GetCoordinatorState() Returns Type Description"
  },
  "apictrl/ix.framework.core.IIxManuallyControllable.html": {
    "href": "apictrl/ix.framework.core.IIxManuallyControllable.html",
    "title": "Interface IIxManuallyControllable | System.Dynamic.ExpandoObject",
    "keywords": "Interface IIxManuallyControllable Namespace: core Assembly: @ix-ax/ix.framework.core.dll Syntax INTERFACE IIxManuallyControllable Methods ActivateManualControl Declaration Public VOID ActivateManualControl() IsManuallyControllable Declaration Public BOOL IsManuallyControllable() Returns Type Description"
  },
  "apictrl/ix.framework.core.IIxObject.html": {
    "href": "apictrl/ix.framework.core.IIxObject.html",
    "title": "Interface IIxObject | System.Dynamic.ExpandoObject",
    "keywords": "Interface IIxObject Namespace: core Assembly: @ix-ax/ix.framework.core.dll Syntax INTERFACE IIxObject Methods GetIdentity Declaration Public ULINT GetIdentity() Returns Type Description GetContext Declaration Public ix.framework.core.IIxContext GetContext() Returns Type Description"
  },
  "apictrl/ix.framework.core.IIxSequencer.html": {
    "href": "apictrl/ix.framework.core.IIxSequencer.html",
    "title": "Interface IIxSequencer | System.Dynamic.ExpandoObject",
    "keywords": "Interface IIxSequencer Namespace: core Assembly: @ix-ax/ix.framework.core.dll Syntax INTERFACE IIxSequencer"
  },
  "apictrl/ix.framework.core.IIxStep.html": {
    "href": "apictrl/ix.framework.core.IIxStep.html",
    "title": "Interface IIxStep | System.Dynamic.ExpandoObject",
    "keywords": "Interface IIxStep Namespace: core Assembly: @ix-ax/ix.framework.core.dll Syntax INTERFACE IIxStep Methods GetStepOrder Declaration Public ULINT GetStepOrder() Returns Type Description SetStepOrder Declaration Public VOID SetStepOrder(in ix.framework.core.IIxCoordinator coord,in ULINT StepOrder) Parameters Type Name Description coord StepOrder IsCalledJustOnceInThisPlcCycle Declaration Public BOOL IsCalledJustOnceInThisPlcCycle() Returns Type Description SetIsActive Declaration Public VOID SetIsActive(in BOOL Active) Parameters Type Name Description Active GetIsActive Declaration Public BOOL GetIsActive() Returns Type Description SetIsEnabled Declaration Public VOID SetIsEnabled(in BOOL Enabled) Parameters Type Name Description Enabled GetIsEnabled Declaration Public BOOL GetIsEnabled() Returns Type Description"
  },
  "apictrl/ix.framework.core.IIxTask.html": {
    "href": "apictrl/ix.framework.core.IIxTask.html",
    "title": "Interface IIxTask | System.Dynamic.ExpandoObject",
    "keywords": "Interface IIxTask Namespace: core Assembly: @ix-ax/ix.framework.core.dll Syntax INTERFACE IIxTask Methods Execute Declaration Public BOOL Execute() Returns Type Description Invoke Declaration Public ix.framework.core.IIxTaskState Invoke() Returns Type Description Restore Declaration Public ix.framework.core.IIxTaskState Restore() Returns Type Description Abort Declaration Public VOID Abort() Resume Declaration Public VOID Resume() DoneWhen Declaration Public VOID DoneWhen(in BOOL Condition) Parameters Type Name Description Condition ThrowWhen Declaration Public VOID ThrowWhen(in BOOL HasErrorState) Parameters Type Name Description HasErrorState IsReady Declaration Public BOOL IsReady() Returns Type Description IsDone Declaration Public BOOL IsDone() Returns Type Description IsBusy Declaration Public BOOL IsBusy() Returns Type Description HasError Declaration Public BOOL HasError() Returns Type Description"
  },
  "apictrl/ix.framework.core.IIxTaskInt.html": {
    "href": "apictrl/ix.framework.core.IIxTaskInt.html",
    "title": "Interface IIxTaskInt | System.Dynamic.ExpandoObject",
    "keywords": "Interface IIxTaskInt Namespace: core Assembly: @ix-ax/ix.framework.core.dll Syntax INTERFACE IIxTaskInt Methods SetIsDisabled Declaration Public VOID SetIsDisabled(in BOOL Disabled) Parameters Type Name Description Disabled GetIsDisabled Declaration Public BOOL GetIsDisabled() Returns Type Description"
  },
  "apictrl/ix.framework.core.IIxTaskState.html": {
    "href": "apictrl/ix.framework.core.IIxTaskState.html",
    "title": "Interface IIxTaskState | System.Dynamic.ExpandoObject",
    "keywords": "Interface IIxTaskState Namespace: core Assembly: @ix-ax/ix.framework.core.dll Syntax INTERFACE IIxTaskState Methods IsDone Declaration Public BOOL IsDone() Returns Type Description IsBusy Declaration Public BOOL IsBusy() Returns Type Description IsAborted Declaration Public BOOL IsAborted() Returns Type Description HasError Declaration Public BOOL HasError() Returns Type Description"
  },
  "apictrl/ix.framework.core.IxComponent.html": {
    "href": "apictrl/ix.framework.core.IxComponent.html",
    "title": "Class IxComponent | System.Dynamic.ExpandoObject",
    "keywords": "Class IxComponent Inheritance IxObject IxComponent Inherited Members GetIdentity() GetContext() Initialize(IIxObject) Initialize(IIxContext) Namespace: core Assembly: @ix-ax/ix.framework.core.dll Syntax CLASS IxComponent Properties _manualControlContextCycle Declaration _manualControlContextCycle : ULINT Property Value Type Description _isManuallyControllable Declaration _isManuallyControllable : BOOL Property Value Type Description Methods ActivateManualControl Executes the logic for manual-maintenance control. Declaration Public VOID ActivateManualControl() IsManuallyControllable Gets whether the IxComponent is manually controllable.To make the IxComponent manually controllable, it is necessary to call the ActivateManualMode() method cyclically. Declaration Public BOOL IsManuallyControllable() Returns Type Description CheckIfManualControlIsActivated Declaration Private VOID CheckIfManualControlIsActivated() Open Declaration Protected VOID Open() Run Declaration Public VOID Run() Close Declaration Protected VOID Close() Restore Restores this instance. This method must be implemented in derived class. Declaration Protected ix.framework.core.IIxTask Restore() Returns Type Description ManualControl Custom logic for manual control of the IxComponent.This method must be implemented in derived class. Declaration Protected VOID ManualControl()"
  },
  "apictrl/ix.framework.core.IxContext.html": {
    "href": "apictrl/ix.framework.core.IxContext.html",
    "title": "Class IxContext | System.Dynamic.ExpandoObject",
    "keywords": "Class IxContext Provides base for contextualized entry of ix.framework application.This class is abstract and must be inherited. Inheritance IxContext Namespace: core Assembly: @ix-ax/ix.framework.core.dll Syntax CLASS IxContext Properties _openCounter Declaration _openCounter : ULINT Property Value Type Description _closeCounter Declaration _closeCounter : ULINT Property Value Type Description _identityCounter Declaration _identityCounter : ULINT Property Value Type Description Methods Open Declaration Private ULINT Open() Returns Type Description Close Declaration Private ULINT Close() Returns Type Description Run Runs the cycle of this context. This method must be called cyclically in a PLC task. Declaration Public VOID Run() OpenCycleCount Gets the value of current context cycle counter. Declaration Public ULINT OpenCycleCount() Returns Type Description ClosedCycleCount Declaration Public ULINT ClosedCycleCount() Returns Type Description CreateIdentity Declaration Public ULINT CreateIdentity() Returns Type Description PeekIdentity Declaration Public ULINT PeekIdentity() Returns Type Description Main The entry point for the context. The call tree of the context start here and all the logic of given contextmust be placed here.This method must be overridden in derived class. Declaration Protected VOID Main()"
  },
  "apictrl/ix.framework.core.IxObject.html": {
    "href": "apictrl/ix.framework.core.IxObject.html",
    "title": "Class IxObject | System.Dynamic.ExpandoObject",
    "keywords": "Class IxObject Provides base class for all classes of ix.framework. Inheritance IxObject Namespace: core Assembly: @ix-ax/ix.framework.core.dll Syntax CLASS IxObject Properties _identity Declaration _identity : ULINT Property Value Type Description _parent Declaration _parent : ix.framework.core.IIxObject Property Value Type Description _context Declaration _context : ix.framework.core.IIxContext Property Value Type Description NULL_CONTEXT Declaration NULL_CONTEXT : ix.framework.core._NULL_CONTEXT Property Value Type Description Methods GetIdentity Gets unique identity of this object in given context. Declaration Public ULINT GetIdentity() Returns Type Description GetContext Gets context in which this object was initialized. Declaration Public ix.framework.core.IIxContext GetContext() Returns Type Description Initialize Initializes this object associating it given parent.This method should be called only once upon the program start.Any subsequent call are ignored. Declaration Public VOID Initialize(in ix.framework.core.IIxObject parent) Parameters Type Name Description parent Initialize Initializes this object associating it given context.This method should be called only once upon the program start.Any subsequent call are ignored. Declaration Public VOID Initialize(in ix.framework.core.IIxContext context) Parameters Type Name Description context"
  },
  "apictrl/ix.framework.core.IxSequencer.html": {
    "href": "apictrl/ix.framework.core.IxSequencer.html",
    "title": "Class IxSequencer | System.Dynamic.ExpandoObject",
    "keywords": "Class IxSequencer Inheritance IxTask IxObject IxSequencer Inherited Members Status IsDisabled RemoteInvoke RemoteRestore RemoteAbort RemoteResume GetState() IsReady() IsDone() IsBusy() IsAborted() HasError() IsNewInvokeCall() IsInvokeCalledInThisPlcCycle() WasInvokeCalledInPreviousPlcCycle() IsNewExecuteCall() IsExecuteCalledInThisPlcCycle() WasExecuteCalledInPreviousPlcCycle() UpdateState() Invoke() Restore() DoneWhen(BOOL) Execute() ThrowWhen(BOOL) SetIsDisabled(BOOL) GetIsDisabled() Abort() Resume() OnAbort() OnResume() OnDone() OnError() OnRestore() OnStart() WhileError() GetIdentity() GetContext() Initialize(IIxObject) Initialize(IIxContext) Namespace: core Assembly: @ix-ax/ix.framework.core.dll Syntax CLASS IxSequencer Properties SteppingMode Declaration SteppingMode : ix.framework.core.eIxSteppingMode Property Value Type Description SequenceMode Declaration SequenceMode : ix.framework.core.eIxSequenceMode Property Value Type Description CurrentOrder Declaration CurrentOrder : ULINT Property Value Type Description StepForwardCommand Declaration StepForwardCommand : ix.framework.core.IxTask Property Value Type Description StepIn Declaration StepIn : ix.framework.core.IxTask Property Value Type Description StepBackwardCommand Declaration StepBackwardCommand : ix.framework.core.IxTask Property Value Type Description _configurationFlowOrder Declaration _configurationFlowOrder : ULINT Property Value Type Description _numberOfConfiguredSteps Declaration _numberOfConfiguredSteps : ULINT Property Value Type Description _coordinatorState Declaration _coordinatorState : ix.framework.core.CoordinatorStates Property Value Type Description _step Declaration _step : ix.framework.core.IIxStep Property Value Type Description _openCycleCounter Declaration _openCycleCounter : ULINT Property Value Type Description _closeCycleCounter Declaration _closeCycleCounter : ULINT Property Value Type Description Methods Open Opens sequencers operations.This method must be called prior to any other calls of this instance ofsequencer. Declaration Public VOID Open() Execute Declaration Internal BOOL Execute(in ix.framework.core.IIxStep step,in BOOL Enable) Parameters Type Name Description step Enable Returns Type Description MoveNext Moves the execution to the next step. Declaration Public VOID MoveNext() RequestStep Terminates the currently executed step and initiates the RequestedStep to be executed Declaration Public VOID RequestStep(in ix.framework.core.IIxStep RequestedStep) Parameters Type Name Description RequestedStep CompleteSequence Completes (finishes) the execution of this sequencer and set the coordination state to Idle.If the SequenceMode of the sequencer is set to RunOnce, terminates also execution of the sequencer itself. Declaration Public VOID CompleteSequence() OnBeforeSequenceStart Executes once when the sequence starts. Declaration Protected VOID OnBeforeSequenceStart() OnCompleteSequence Executes once when the sequence is completed. Declaration Protected VOID OnCompleteSequence() GetCoordinatorState Gets the state of the coordinator Declaration Public ix.framework.core.CoordinatorStates GetCoordinatorState() Returns Type Description DetermineOrder Declaration Protected ULINT DetermineOrder(in ix.framework.core.IIxStep step) Parameters Type Name Description step Returns Type Description GetNumberOfConfiguredSteps Gets the number of the configured steps in the sequence. Declaration Public ULINT GetNumberOfConfiguredSteps() Returns Type Description InvalidContext Declaration Protected BOOL InvalidContext() Returns Type Description InvalidContext Declaration Protected BOOL InvalidContext(in ix.framework.core.IIxStep step) Parameters Type Name Description step Returns Type Description DisableAllSteppingComands Declaration Protected VOID DisableAllSteppingComands() AbortCurrentStep Declaration Protected VOID AbortCurrentStep() OnRestore Declaration Protected VOID OnRestore()"
  },
  "apictrl/ix.framework.core.IxStep.html": {
    "href": "apictrl/ix.framework.core.IxStep.html",
    "title": "Class IxStep | System.Dynamic.ExpandoObject",
    "keywords": "Class IxStep Inheritance IxTask IxObject IxStep Inherited Members Status IsDisabled RemoteInvoke RemoteRestore RemoteAbort RemoteResume GetState() IsReady() IsDone() IsBusy() IsAborted() HasError() IsNewInvokeCall() IsInvokeCalledInThisPlcCycle() WasInvokeCalledInPreviousPlcCycle() IsNewExecuteCall() IsExecuteCalledInThisPlcCycle() WasExecuteCalledInPreviousPlcCycle() UpdateState() Invoke() Restore() DoneWhen(BOOL) Execute() ThrowWhen(BOOL) SetIsDisabled(BOOL) GetIsDisabled() Abort() Resume() OnAbort() OnResume() OnDone() OnError() OnRestore() OnStart() WhileError() GetIdentity() GetContext() Initialize(IIxObject) Initialize(IIxContext) Namespace: core Assembly: @ix-ax/ix.framework.core.dll Syntax CLASS IxStep Properties Order Declaration Order : ULINT Property Value Type Description StepDescription Declaration StepDescription : STRING[120] Property Value Type Description IsActive Declaration IsActive : BOOL Property Value Type Description IsEnabled Declaration IsEnabled : BOOL Property Value Type Description _openCycleCount Declaration _openCycleCount : ULINT Property Value Type Description _isCalledJustOnceInThisPlcCycle Declaration _isCalledJustOnceInThisPlcCycle : BOOL Property Value Type Description _multipleStepCallInThisPlcCycle Declaration _multipleStepCallInThisPlcCycle : BOOL Property Value Type Description _noStepCallInPreviousPlcCycle Declaration _noStepCallInPreviousPlcCycle : BOOL Property Value Type Description Methods GetStepOrder Returns the order of the execution. Declaration Public ULINT GetStepOrder() Returns Type Description SetStepOrder Sets the order of the execution, if conditions are met. Declaration Public VOID SetStepOrder(in ix.framework.core.IIxCoordinator coord,in ULINT StepOrder) Parameters Type Name Description coord StepOrder IsCalledJustOnceInThisPlcCycle Returns TRUE if the execution of the step is called only once in this PLC cycle. Declaration Public BOOL IsCalledJustOnceInThisPlcCycle() Returns Type Description Execute Returns TRUE if instance of THIS step is curently executing Declaration Public BOOL Execute(in ix.framework.core.IIxCoordinator coord) Parameters Type Name Description coord Returns Type Description Execute Returns TRUE if instance of THIS step is curently executing and the step is enabled Declaration Public BOOL Execute(in ix.framework.core.IIxCoordinator coord,in BOOL Enable) Parameters Type Name Description coord Enable Returns Type Description Execute Returns TRUE if instance of THIS step is curently executing and the step is enabledand sets the description of the step Declaration Public BOOL Execute(in ix.framework.core.IIxCoordinator coord,in BOOL Enable,in STRING[120] Description) Parameters Type Name Description coord Enable Description Returns Type Description Execute Returns TRUE if instance of THIS step is curently executingand sets the description of the step Declaration Public BOOL Execute(in ix.framework.core.IIxCoordinator coord,in STRING[120] Description) Parameters Type Name Description coord Description Returns Type Description CountCallsOfTheExecuteMethod Declaration Protected VOID CountCallsOfTheExecuteMethod() ExecuteInternal Declaration Protected BOOL ExecuteInternal(in ix.framework.core.IIxCoordinator coord,in BOOL Enable) Parameters Type Name Description coord Enable Returns Type Description SetIsActive Sets the value of the IsActive variable Declaration Public VOID SetIsActive(in BOOL Active) Parameters Type Name Description Active GetIsActive Returns the value of the IsActive variable Declaration Public BOOL GetIsActive() Returns Type Description SetIsEnabled Sets the value of the IsEnabled variable Declaration Public VOID SetIsEnabled(in BOOL Enabled) Parameters Type Name Description Enabled GetIsEnabled Returns the value of the IsEnabled variable Declaration Public BOOL GetIsEnabled() Returns Type Description"
  },
  "apictrl/ix.framework.core.IxTask.html": {
    "href": "apictrl/ix.framework.core.IxTask.html",
    "title": "Class IxTask | System.Dynamic.ExpandoObject",
    "keywords": "Class IxTask Inheritance IxObject IxTask Inherited Members GetIdentity() GetContext() Initialize(IIxObject) Initialize(IIxContext) Namespace: core Assembly: @ix-ax/ix.framework.core.dll Syntax CLASS IxTask Properties Status Gets the state of this task. Declaration Status : ix.framework.core.eIxTaskState Property Value Type Description IsDisabled Gets or sets whether this task is disabled for execution. Declaration IsDisabled : BOOL Property Value Type Description RemoteInvoke Remote requests for invoke of this task.When 'TRUE' this task will be invoked. Declaration RemoteInvoke : BOOL Property Value Type Description RemoteRestore Remote requests for restore of this task.When 'TRUE' this task will be restored. Declaration RemoteRestore : BOOL Property Value Type Description RemoteAbort Remote requests for abort of this task.When 'TRUE' this task will be aborted. Declaration RemoteAbort : BOOL Property Value Type Description RemoteResume Remote requests for resume of this task.When 'TRUE' this task will be resumed. Declaration RemoteResume : BOOL Property Value Type Description _openCycleCountInvoke Declaration _openCycleCountInvoke : ULINT Property Value Type Description _openCycleCountExecute Declaration _openCycleCountExecute : ULINT Property Value Type Description Methods GetState Gets the actual state of this task. Declaration Public ix.framework.core.eIxTaskState GetState() Returns Type Description IsReady Gets true when the task is ready. Declaration Public BOOL IsReady() Returns Type Description IsDone Gets true when the task is done. Declaration Public BOOL IsDone() Returns Type Description IsBusy Gets true when the task is busy/executing. Declaration Public BOOL IsBusy() Returns Type Description IsAborted Gets true when the task is aborted. Declaration Public BOOL IsAborted() Returns Type Description HasError Gets true when the task has error. Declaration Public BOOL HasError() Returns Type Description IsNewInvokeCall Declaration Private BOOL IsNewInvokeCall() Returns Type Description IsInvokeCalledInThisPlcCycle Declaration Private BOOL IsInvokeCalledInThisPlcCycle() Returns Type Description WasInvokeCalledInPreviousPlcCycle Declaration Private BOOL WasInvokeCalledInPreviousPlcCycle() Returns Type Description IsNewExecuteCall Declaration Private BOOL IsNewExecuteCall() Returns Type Description IsExecuteCalledInThisPlcCycle Declaration Private BOOL IsExecuteCalledInThisPlcCycle() Returns Type Description WasExecuteCalledInPreviousPlcCycle Declaration Private BOOL WasExecuteCalledInPreviousPlcCycle() Returns Type Description UpdateState Declaration Private VOID UpdateState() Invoke Invokes this task. Declaration Public ix.framework.core.IIxTaskState Invoke() Returns Type Description Restore Restores this task. Declaration Public ix.framework.core.IIxTaskState Restore() Returns Type Description DoneWhen Makes this task to transition in Done statewhen Condition argument is TRUE. Declaration Public VOID DoneWhen(in BOOL Condition) Parameters Type Name Description Condition Execute Returns TRUE if the task is Busy, otherwise false.This method needs to be called cyclically. Declaration Public BOOL Execute() Returns Type Description ThrowWhen Makes this task enter into Error state, when HasErrorState argument is TRUEtask in error state stops its execution. Declaration Public VOID ThrowWhen(in BOOL HasErrorState) Parameters Type Name Description HasErrorState SetIsDisabled Sets the value of the IsDisabled variable Declaration Public VOID SetIsDisabled(in BOOL Disabled) Parameters Type Name Description Disabled GetIsDisabled Returns the value of the IsDisabled variable Declaration Public BOOL GetIsDisabled() Returns Type Description Abort Aborts the execution of the task if running and sets its state to aborted. Declaration Public VOID Abort() Resume Resume the execution of the task if aborted and sets its state to busy. Declaration Public VOID Resume() OnAbort Executes once when the task is aborted. Declaration Protected VOID OnAbort() OnResume Executes once when the task is resumed. Declaration Protected VOID OnResume() OnDone Executes once when the task reaches the Done state. Declaration Protected VOID OnDone() OnError Executes once when the task reaches the Error state. Declaration Protected VOID OnError() OnRestore Executes once when the task is restored. Declaration Protected VOID OnRestore() OnStart Executes once when the task starts (at the moment of transition from the Kicking state into the Busy state). Declaration Protected VOID OnStart() WhileError Executes repeatedly while the task is in Error state (and Execute() method is called). Declaration Protected VOID WhileError()"
  },
  "apictrl/ix.framework.html": {
    "href": "apictrl/ix.framework.html",
    "title": "Namespace framework | System.Dynamic.ExpandoObject",
    "keywords": "Namespace framework core"
  },
  "apictrl/ix.html": {
    "href": "apictrl/ix.html",
    "title": "Namespace ix | System.Dynamic.ExpandoObject",
    "keywords": "Namespace ix framework"
  },
  "articles/core/README.html": {
    "href": "articles/core/README.html",
    "title": "ix.framework.core | System.Dynamic.ExpandoObject",
    "keywords": "ix.framework.core ix.core provides basic blocks for building ix.framework applications. Basic concepts IxContext IxContext encapsulates entire application or application units. Any solution may contain one or more contexts, however the each should be considered to be an isolated island and any direct inter-context access to members must be avoided. Note Each IxContext must belong to a single PLC task.Multiple IxContexts can be however running on the same task. classDiagram class Context{ +Main()* +Run() } In its basic implementation IxContext has relatively simple interface. Main is the method where we place all calls of our sub-routines. In other words the Run is the root of the call tree of our program. Run method runs the IxContext. It must be called cyclically within a program unit that is attached to a cyclic task. Why do we need IxContext IxContext provides counters, object identification and other information about the execution of the program. These information is then used by the objects contained at different levels of the IxContext. How IxContext works When you call Run method on an instance of a IxContext, it will ensure opening IxContext, running Main method (root of all your program calls) and IxContext closing. flowchart LR classDef run fill:#80FF00,stroke:#0080FF,stroke-width:4px,color:#7F00FF,font-size:15px,font-weight:bold classDef main fill:#ff8000,stroke:#0080ff,stroke-width:4px,color:#7F00FF,font-size:15px,font-weight:bold id1(Open):::run-->id2(#Main*):::main-->id3(Close):::run-->id1 How to use IxContext Base class for the IxContext is ix.core.IxContext. The entry point of call execution of the IxContext is Main method. Notice that the IxContext class is abstract and cannot be instantiated if not extended. Main method must be overridden in derived class notice the use of override keyword and also that the method is protected which means the it is visible only from within the IxContext and derived classes. How to extend IxContext class CLASS PUBLIC IxContextExample EXTENDS IxContext METHOD PROTECTED OVERRIDE Main // Here goes all your logic for given IxContext. ; END_METHOD END_CLASS Cyclical call of the IxContext logic (Main method) is ensured when IxContext Run method is called. Run method is public therefore accessible and visible to any part of the program that whishes to call it. How to start IxContext's execution PROGRAM ProgramExample VAR MyContext : IxContextExample; END_VAR MyContext.Run(); END_PROGRAM IxObject IxObject is the base class for any other classes of ix.framework. It provides access to the parent IxObject and the IxContext in which it was initialized. classDiagram class Object{ +Initialize(IIxContext context) +Initialize(IIxObject parent) } IxObject initialization within a IxContext CLASS PUBLIC MyContext EXTENDS IxContext VAR _myObject : IxObject; END_VAR METHOD PROTECTED OVERRIDE Main _myObject.Initialize(THIS); END_METHOD END_CLASS IxObject initialization within another IxObject CLASS PUBLIC MyParentObject EXTENDS IxContext VAR _myChildObject : IxObject; END_VAR METHOD PROTECTED OVERRIDE Main _myChildObject.Initialize(THIS); END_METHOD END_CLASS IxTask IxTask provides basic task execution. IxTask needs to be initialized to set the proper IxContext. IxTask initialization within a IxContext CLASS IxTaskDocuExample EXTENDS IxContext VAR PUBLIC _myTask : IxTask; _myCounter : ULINT; END_VAR METHOD PUBLIC Initialize // Initialization of the context needs to be called first // It does not need to be called cyclically, just once _myTask.Initialize(THIS); END_METHOD END_CLASS There are two key methods for managing the IxTask: Invoke() fires the execution of the IxTask (can be called fire&forget or cyclically) Execute() method must be called cyclically. The method returns TRUE when the IxTask is required to run until enters Done state or terminates in error. For termination of the execution of the IxTask there are following methods: DoneWhen(Done_Condition) - terminates the execution of the IxTask and enters the Done state when the Done_Condition is TRUE. ThrowWhen(Error_Condition) - terminates the execution of the IxTask and enters the Error state when the Error_Condition is TRUE. Abort() - terminates the execution of the IxTask and enters the Ready state if the IxTask is in the Busy state, otherwise does nothing. To reset the IxTask from any state in any moment there is following method: Restore() acts as reset of the IxTask (sets the state into Ready state from any state of the IxTask). Moreover, there are seven more \"event-like\" methods that are called when a specific event occurs (see the chart below). flowchart TD classDef states fill:#80FF00,stroke:#0080FF,stroke-width:4px,color:#7F00FF,font-size:15px,font-weight:bold classDef actions fill:#ff8000,stroke:#0080ff,stroke-width:4px,color:#7F00FF,font-size:15px,font-weight:bold classDef events fill:#80FF00,stroke:#0080ff,stroke-width:4px,color:#7F00FF,font-size:15px,font-weight:bold s1((Ready)):::states s2((Kicking)):::states s3((Busy)):::states s4((Done)):::states s5((Error)):::states s6((Aborted)):::states a1(\"Invoke()#128258;\"):::actions a2(\"Execute()#128260;\"):::actions a3(\"DoneWhen(TRUE)#128258;\"):::actions a4(\"ThrowWhen(TRUE)#128258;\"):::actions a5(\"NOT Invoke() call for at<br>least two Context cycles#128260;\"):::actions a6(\"Restore()#128258;\"):::actions a7(\"Abort()#128258;\"):::actions a8(\"Resume()#128258;\"):::actions e1{{\"OnStart()#128258;\"}}:::events e2{{\"OnError()#128258;\"}}:::events e3{{\"WhileError()#128260;\"}}:::events e4{{\"OnDone()#128258;\"}}:::events e5{{\"OnAbort()#128258;\"}}:::events e6{{\"OnRestore()#128258;\"}}:::events subgraph legend[\" \"] direction LR s((State)):::states ac(\"Action #128260;:called<br>cyclically\"):::actions as(\"Action #128258;:single<br>or cyclical call \"):::actions ec{{\"Event #128260;:called<br>cyclically\"}}:::events es{{\"Event #128258;:triggered<br>once \"}}:::events end subgraph chart[\" \"] direction TB s1 s1-->a1 a1-->s2 s2-->a2 s3-->a3 s3-->a7 a7-->e5 a7-->s6 s6-->a8 a8-->s3 a3-->s4 s4---->a5 a5-->a1 a2--->s3 s3--->a4 a4-->s5 s5-->a6 a6-->e6 a2-->e1 a4-->e2 a4-->e3 a3-->e4 a6-->s1 end Example of using IxTask: CLASS IxTaskDocuExample EXTENDS IxContext VAR PUBLIC _myTask : IxTask; _myCounter : ULINT; END_VAR METHOD PUBLIC Initialize // Initialization of the context needs to be called first // It does not need to be called cyclically, just once _myTask.Initialize(THIS); END_METHOD METHOD PROTECTED OVERRIDE Main // Cyclicall call of the Execute IF _myTask.Execute() THEN _myCounter := _myCounter + ULINT#1; _myTask.DoneWhen(_myCounter = ULINT#100); END_IF; END_METHOD END_CLASS The IxTask executes upon the Invoke method call. Invoke fires the execution of Execute logic upon the first call, and it does not need cyclical calling. _myTask.Invoke(); Invoke() method returns IIxTaskState with the following members: IsBusy indicates the execution started and is running. IsDone indicates the execution completed with success. HasError indicates the execution terminated with a failure. IsAborted indicates that the execution of the IxTask has been aborted. It should continue by calling the method Resume(). Examples of using: Invoking the IxTask and waiting for its completion at the same place. IF _myTask.Invoke().IsDone() THEN ; //Do something END_IF; Invoking the IxTask and waiting for its completion at the different places. _myTask.Invoke(); IF _myTask.IsDone() THEN ; //Do something END_IF; Checking if the IxTask is executing. IF _myTask.Invoke().IsBusy() THEN ; //Do something END_IF; Check for the IxTask's error state. IF _myTask.Invoke().HasError() THEN ; //Do something END_IF; The IxTask can be started only from the Ready state by calling the Invoke() method in the same Context cycle as the Execute() method is called, regardless the order of the methods calls. After IxTask completion, the state of the IxTask will remain in Done, unless: 1.) IxTask's Restore method is called (IxTask changes it's state to Ready state). 2.) Invoke method is not called for two or more consecutive cycles of its context (that usually means the same as PLC cycle); successive call of Invoke will switch the task into the Ready state and immediately into the Kicking state. The IxTask may finish also in an Error state. In that case, the only possibility to get out of Error state is by calling the Restore() method. To implement any of the already mentioned \"event-like\" methods the new class that extends from the IxTask needs to be created. The required method with PROTECTED OVERRIDE access modifier needs to be created as well, and the custom logic needs to be placed in. These methods are: OnAbort() - executes once when the task is aborted. OnResume() - executes once when the task is resumed. OnDone() - executes once when the task reaches the Done state. OnError() - executes once when the task reaches the Error state. OnRestore() - executes once when the task is restored. OnStart() - executes once when the task starts (at the moment of transition from the Kicking state into the Busy state). WhileError() - executes repeatedly while the task is in Error state (and Execute() method is called). Example of implementing \"event-like\" methods: CLASS MyTaskExample Extends IxTask VAR OnAbortCounter : ULINT; OnResumeCounter : ULINT; OnDoneCounter : ULINT; OnErrorCounter : ULINT; OnRestoreCounter : ULINT; OnStartCounter : ULINT; WhileErrorCounter : ULINT; END_VAR METHOD PROTECTED OVERRIDE OnAbort OnAbortCounter := OnAbortCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnResume OnResumeCounter := OnResumeCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnDone OnDoneCounter := OnDoneCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnError OnErrorCounter := OnErrorCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnRestore OnRestoreCounter := OnRestoreCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnStart OnStartCounter := OnStartCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE WhileError WhileErrorCounter := WhileErrorCounter + ULINT#1; END_METHOD END_CLASS Step IxStep is an extension class of the IxTask and provides the basics for the coordinated controlled execution of the task in the desired order based on the coordination mechanism used. IxStep contains the Execute() method so as its base class overloaded and extended by following parameters: coord (mandatory): instance of the coordination controlling the execution of the IxStep. Enable (optional): if this value is FALSE, IxStep body is not executed and the current order of the execution is incremented. Description (optional): IxStep description text describing the action the IxStep is providing. IxStep class contains following public members: Order: Order of the IxStep in the coordination. This value can be set by calling the method SetSteoOrder() and read by the method GetStepOrder(). StepDescription: IxStep description text describing the action the IxStep is providing. This value can be set by calling the Execute() method with Description parameter. IsActive: if TRUE, the IxStep is currently executing, or is in the order of the execution, otherwise FALSE. This value can be set by calling the method SetIsActive() and read by the method GetIsActive(). IsEnabled: if FALSE, IxStep body is not executed and the current order of the execution is incremented. This value can be set by calling the method SetIsEnabled() or calling the Execute() method with Enable parameter and read by the method GetIsEnabled(). IxSequencer IxSequencer is an IxCordinator class provides triggering the IxStep-s inside the sequence in the order they are written. IxSequencer extends from IxTask so it also has to be initialized by calling its Initialize() method and started using its Invoke() method. IxSequencer contains following methods: Open(): this method must be called cyclically before any logic. It provides some configuration mechanism that ensures that the steps are going to be executed in the order, they are written. During the very first call of the sequence, no step is executed as the IxSequencer is in the configuring state. From the second context cycle after the IxSequencer has been invoked the IxSequencer change its state to running and starts the execution from the first step upto the last one. When IxSequencer is in running state, order of the step cannot be changed. MoveNext(): Terminates the currently executed step and moves the IxSequencer's pointer to the next step in order of execution. RequestStep(): Terminates the currently executed step and set the IxSequencer's pointer to the order of the RequestedStep. When the order of the RequestedStep is higher than the order of the currently finished step (the requested step is \"after\" the current one) the requested step is started in the same context cycle. When the order of the RequestedStep is lower than the order of the currently finished step (the requested step is \"before\" the current one) the requested step is started in the next context cycle. CompleteSequence(): Terminates the currently executed step, completes (finishes) the execution of this IxSequencer and set the coordination state to Idle. If the SequenceMode of the IxSequencer is set to Cyclic, following Open() method call in the next context cycle switch it again into the configuring state, reasign the order of the individual steps (even if the orders have been changed) and subsequently set IxSequencer back into the running state. If the SequenceMode of the IxSequencer is set to RunOnce, terminates also execution of the IxSequencer itself. `GetCoordinatorState()': Returns the current state of the IxSequencer. Idle Configuring: assigning the orders to the steps, no step is executed. Running: orders to the steps are already assigned, step is executed. SetSteppingMode(): Sets the stepping mode of the IxSequencer. Following values are possible. None: StepByStep: if this mode is choosen, each step needs to be started by the invocation of the StepIn commmand. Continous: if this mode is choosen (default), each step is started automaticcaly after the previous one has been completed. GetSteppingMode(): Gets the current stepping mode of the IxSequencer. SetSequenceMode(): Sets the sequence mode of the IxSequencer. Following values are possible. None: RunOnce: if this mode is choosen, after calling the method CompleteSequence() the execution of the sequence is terminated. Cyclic: if this mode is choosen (default), after calling the method CompleteSequence() the execution of the sequence is \"reordered\" and started from beginning. GetSequenceMode(): Gets the current sequence mode of the IxSequencer. GetNumberOfConfiguredSteps(): Gets the number of the configured steps in the sequence. Example of using IxSequencer Example of the declaration of the IxSequencer and IxStep CLASS IxSequencerDocuExample EXTENDS IxContext VAR PUBLIC _mySequencer : IxSequencer; _step_1 : IxStep; _step_2 : IxStep; _step_3 : IxStep; _myCounter : ULINT; END_VAR END_CLASS Initialization Initialization of the context needs to be called first. It does not need to be called cyclically, just once. METHOD PUBLIC Initialize _mySequencer.Initialize(THIS); _step_1.Initialize(THIS); _step_2.Initialize(THIS); _step_3.Initialize(THIS); END_METHOD Open The Open() method must be called cyclically before any logic. _mySequencer.Open(); Step Example of the most simple use of the Execute() method of the IxStep class, only with the IxCoordinator defined. IF _step_1.Execute(_mySequencer) THEN // do something _myCounter := _myCounter + ULINT#1; IF (_myCounter MOD ULINT#5) = ULINT#0 THEN // continue to the next step of the sequence _mySequencer.MoveNext(); END_IF; END_IF; Example of use of the Execute() method of the IxStep class with the Enable condition. This step is going to be executed just in the first run of the sequence, as during the second one, the Enable parameter will have the value of FALSE. IF _step_2.Execute(coord := _mySequencer, Enable := _myCounter <= ULINT#20) THEN _myCounter := _myCounter + ULINT#1; IF _myCounter = ULINT#20 THEN // Jumping to step 1. As it is jumping backwards, the execution of step 1 // is going to be started in the next context cycle. _mySequencer.RequestStep(_step_1); END_IF; END_IF; Example of use of the Execute() method of the IxStep class with all three parameters defined. IF _step_3.Execute(coord := _mySequencer, Enable := TRUE, Description := 'This is a description of the step 3' ) THEN _myCounter := _myCounter + ULINT#1; IF (_myCounter MOD ULINT#7) = ULINT#0 THEN // Finalize the sequence and initiate the execution from the first step. _mySequencer.CompleteSequence(); END_IF; END_IF; IxComponent IxComponent is an abstract class extending the IxObject, and it is the base building block for the \"hardware-related devices\" like a pneumatic piston, servo drive, robot, etc., so as for the, let's say, \"virtual devices\" like counter, database, etc. IxComponent is designed to group all possible methods, tasks, settings, and status information into one consistent class. As the IxComponent is an abstract class, it cannot be instantiated and must be extended. In the extended class, two methods are mandatory. Restore() - inside this method, the logic for resetting the IxComponent or restoring it from any state to its initial state should be placed. ManualControl() - inside this method, the logic for manual operations with the component should be placed. To be able to control the IxComponent instance manually, the method ActivateManualControl() of this instance needs to be called cyclically. The base class contains two additional method to deal with the manual control of the IxComponent. ActivateManualControl() - when this method is called cyclically, the IxComponent changes its behavior to manually controllable and ensure the call of the ManualControl() method in the derived class. IsManuallyControllable() -returns TRUE when the IxComponent is manually controllable. Layout attributes ComponentHeader and ComponentDetails The visual view of the extended IxComponent on the UI side could be done both ways. Manually with complete control over the design or by using the auto-rendering mechanism of the RenderableContentControl (TODO add a link to docu of the RenderableContentControl) element, which is, in most cases, more than perfect. To take full advantage of the auto-rendering mechanism, the base class has implemented the additional layout attributes ComponentHeader and ComponentDetails(TabName). The auto-rendered view is divided into two parts: the fixed one and the expandable one. All IxComponent members with the ComponentHeader layout attribute defined will be displayed in the fixed part. All members with the ComponentDetails(TabName) layout attribute defined will be displayed in the expandable part inside the TabControl with \"TabName\". All members are added in the order in which they are defined, taking into account their layout attributes like Container(Layout.Wrap) or Container(Layout.Stack). How to implement IxComponent Example of the implementation very simple IxComponent with members placed only inside the Header. {#ix-attr:[Container(Layout.Stack)]} {#ix-set:AttributeName = \"IxComponent with header only example\"} CLASS PUBLIC IxComponentHeaderOnlyExample EXTENDS IxComponent METHOD PROTECTED OVERRIDE Restore: IIxTask // Some logic for Restore could be placed here. For Example: valueReal := REAL#1.0; valueDint := DINT#0; END_METHOD METHOD PROTECTED OVERRIDE ManualControl // Some logic for manual control could be placed here. ; END_METHOD // Main method of the `IxComponent` that must be // called inside the `IxContext` cyclically. METHOD PUBLIC Run // Declaration of the input and output variables. // In the case of \"hardware-related\" `IxComponent`, // these would be the variables linked to the hardware. VAR_INPUT inReal : REAL; inDint : DINT; END_VAR VAR_OUTPUT outReal : REAL; outDint : DINT; END_VAR // This must be called first. SUPER.Open(); // Place the custom logic here. valueReal := valueReal * inReal; valueDint := valueDint + inDint; outReal := valueReal; outDint := valueDint; END_METHOD VAR PUBLIC {#ix-attr:[Container(Layout.Wrap)]} {#ix-attr:[ComponentHeader()]} {#ix-set:AttributeName = \"Real product value\"} valueReal : REAL := REAL#1.0; {#ix-attr:[ComponentHeader()]} {#ix-set:AttributeName = \"Dint sum value\"} valueDint : DINT:= DINT#0; END_VAR END_CLASS How to use IxComponent The instance of the extended IxComponent must be defined inside the IxContext. CLASS ComponentHeaderOnlyExampleContext EXTENDS ix.framework.core.IxContext VAR PUBLIC {#ix-set:AttributeName = \"Very simple component example with header only defined\"} MyComponentWithHeaderOnly : IxComponentHeaderOnlyExample; {#ix-set:AttributeName = \"<#Activate manual control#>\"} ActivateManualControl : BOOL; inHwReal : REAL := REAL#1.0001; inHwDint : DINT := DINT#1; outHwReal : REAL; outHwDint : DINT; END_VAR METHOD PROTECTED OVERRIDE Main // The `Initialize()` method must be called before any other method. MyComponentWithHeaderOnly.Initialize(THIS); // Example of the activation of the manual control. IF ActivateManualControl THEN MyComponentWithHeaderOnly.ActivateManualControl(); END_IF; // Calling the main method `Run` with respective input and output variables. MyComponentWithHeaderOnly.Run(inReal := inHwReal, inDint := inHwDint, outReal => outHwReal, outDint => outHwDint); END_METHOD END_CLASS Inside the Main() method of the related IxContext following rules must be applied. The Initialize() method of the extended instance of the IxComponent must be called first. The Run() method with the respective input and output variables must be called afterwards. How to visualize IxComponent On the UI side use the RenderableContentControl and set its Context according the placement of the instance of the IxComponent. <RenderableContentControl Context=\"@Entry.Plc.myComponentHeaderOnlyExample.MyComponentWithHeaderOnly\" Presentation=\"Command\" /> The rendered result should then looks as follows: In case of more complex IxComponent the most important members should be placed in the fixed part (Header) and the rest of the members should be placed inside the expandable part (Details). The members inside the expandable part should be organize inside the tabs. More complex IxComponent Example of the implementation more complex IxComponent with members placed also in several tabs inside the expandable part (Details). {#ix-attr:[Container(Layout.Stack)]} {#ix-set:AttributeName = \"IxComponent example name\"} CLASS PUBLIC IxComponentExample EXTENDS IxComponent METHOD PROTECTED OVERRIDE Restore: IIxTask ; END_METHOD METHOD PROTECTED OVERRIDE ManualControl ; END_METHOD METHOD PUBLIC Run VAR_INPUT inReal : REAL; inDint : DINT; END_VAR VAR_OUTPUT outReal : REAL; outDint : DINT; END_VAR // This must be called first. SUPER.Open(); // Place the custom logic here. Status.SomeStatusValue1 := Status.SomeStatusValue1 * inReal; Status.SomeStatusValue2 := Status.SomeStatusValue2 + inDint; outReal := Status.SomeStatusValue1; outDint := Status.SomeStatusValue2; END_METHOD VAR PUBLIC // Complete structure as a part of the component header. // All structure members are going to be displayed in the component header. {#ix-attr:[Container(Layout.Wrap)]} {#ix-attr:[ComponentHeader()]} Header : Header_ComponentExample; // Two separate tasks as a part of the component header. // These tasks are going to be added to the previous members of the component header. {#ix-attr:[ComponentHeader()]} {#ix-set:AttributeName = \"Header task 1\"} HeaderTask1 : IxTask; // Complete structure as a part of the component details tab `Tasks`. // All structure members are going to be added to the previous members of the component details tab `Tasks`. {#ix-set:AttributeName = \"Tasks\"} {#ix-attr:[Container(Layout.Stack)]} Tasks : Tasks_ComponentExample; // Single task as a part of the component details tab `Tasks`. // This task is going to be displayed in the component details tab `Tasks` {#ix-attr:[ComponentDetails(\"Tasks\")]} {#ix-attr:[Container(Layout.Stack)]} {#ix-set:AttributeName = \"Detail task in Tasks tab\"} DetailTaskInTasksTab : IxTask; // Additional separate task as a part of the component header. // This task is going to be added to the previous members of the component header. {#ix-attr:[ComponentHeader()]} {#ix-set:AttributeName = \"Header task 2\"} HeaderTask2 : IxTask; // Complete structure as a part of the component details tab `Status` as the attribute [ComponentDetails(\"Status\")] // is defined on the class Status_ComponentExample. // All structure members are going to be added to the previous members of the component details tab `Status`. {#ix-set:AttributeName = \"Status class\"} Status :Status_ComponentExample; // Single variable as a part of the component details tab `Status`. // This variable is going to be added to the previous members of the component details tab `Status`. {#ix-attr:[ComponentDetails(\"Status\")]} {#ix-attr:[Container(Layout.Stack)]} {#ix-set:AttributeName = \"Status string\"} Status2 : string; // Additional separate task as a part of the component header. // This task is going to be added to the previous members of the component header. {#ix-attr:[ComponentHeader()]} {#ix-set:AttributeName = \"Header task 3\"} HeaderTask3 : IxTask; // Complete structure as a part of the component details tab `Settings` as the attribute [ComponentDetails(\"Settings\")] // is defined on the class Settings_ComponentExample. // All structure members are going to be added to the previous members of the component details tab `Settings`. {#ix-set:AttributeName = \"Settings\"} Settings : Settings_ComponentExample; // Complete structure as a part of the component details tab `Diagnostics` as the attribute [ComponentDetails(\"Diagnostics\")] // is defined on the class Diagnostics_ComponentExample. git // All structure members are going to be added to the previous members of the component details tab `Diagnostics`. {#ix-set:AttributeName = \"Diagnostics\"} Diagnostics : Diagnostics_ComponentExample; // Complete structure as a part of the component details tab `Help` as the attribute [ComponentDetails(\"Help\")] // is defined on the class Help_ComponentExample. // All structure members are going to be added to the previous members of the component details tab `Help`. {#ix-set:AttributeName = \"Help\"} Help : Help_ComponentExample; END_VAR END_CLASS For the complex types of the IxComponent it is also recomended to organize partial groups of the members into the classes as it is in this example. CLASS PUBLIC Header_ComponentExample VAR PUBLIC {#ix-set:AttributeName = \"Start\"} Start : IxTask; {#ix-set:AttributeName = \"Stop\"} Stop : IxTask; {#ix-set:AttributeName = \"Status\"} Status : STRING:='Some status description'; END_VAR END_CLASS {#ix-attr:[Container(Layout.Stack)]} {#ix-attr:[ComponentDetails(\"Tasks\")]} CLASS PUBLIC Tasks_ComponentExample VAR PUBLIC {#ix-set:AttributeName = \"Some status value 1\"} SomeStatusValue1 : REAL := REAL#45.3; {#ix-set:AttributeName = \"Some advanced component task 1\"} SomeAdvancedComponentTask1 : IxTask; {#ix-set:AttributeName = \"Some advanced component task 2\"} SomeAdvancedComponentTask2 : IxTask; {#ix-set:AttributeName = \"Some advanced component task 3\"} SomeAdvancedComponentTask3 : IxTask; {#ix-set:AttributeName = \"Some advanced component task 4\"} SomeAdvancedComponentTask4 : IxTask; {#ix-set:AttributeName = \"Some advanced component task 5\"} SomeAdvancedComponentTask5 : IxTask; END_VAR END_CLASS {#ix-attr:[Container(Layout.Stack)]} {#ix-attr:[ComponentDetails(\"Status\")]} CLASS PUBLIC Status_ComponentExample VAR PUBLIC {#ix-set:AttributeName = \"Some status value 1\"} SomeStatusValue1 : REAL := REAL#45.3; {#ix-set:AttributeName = \"Some status value 2\"} SomeStatusValue2 : DINT := DINT#46587; {#ix-set:AttributeName = \"Some status value 3\"} SomeStatusValue3 : STRING := 'some description'; END_VAR END_CLASS {#ix-attr:[ComponentDetails(\"Settings\")]} {#ix-attr:[Container(Layout.Stack)]} CLASS PUBLIC Settings_ComponentExample VAR PUBLIC {#ix-set:AttributeName = \"Some setting value 1\"} SomeSettingValue1 : REAL := REAL#45.3; {#ix-set:AttributeName = \"Some setting value 2\"} SomeSettingValue2 : DINT := DINT#46587; {#ix-set:AttributeName = \"Some setting value 3\"} SomeSettingValue3 : STRING := 'some setting'; END_VAR END_CLASS {#ix-attr:[ComponentDetails(\"Diagnostics\")]} {#ix-attr:[Container(Layout.Stack)]} CLASS PUBLIC Diagnostics_ComponentExample VAR PUBLIC {#ix-set:AttributeName = \"Some diagnostic message\"} SomeDiagnosticMessage : STRING := 'TODO: Some diagnostic message needs to be placed here'; END_VAR END_CLASS {#ix-attr:[ComponentDetails(\"Help\")]} {#ix-attr:[Container(Layout.Stack)]} CLASS PUBLIC Help_ComponentExample VAR PUBLIC {#ix-set:AttributeName = \"Some help\"} SomeHelp : STRING := 'TODO: Provide some help'; END_VAR END_CLASS Instantiate and call the IxComponent instance. CLASS ComponentExampleContext EXTENDS ix.framework.core.IxContext VAR PUBLIC {#ix-set:AttributeName = \"Component example name\"} MyComponent : IxComponentExample; {#ix-set:AttributeName = \"<#Activate manual control#>\"} ActivateManualControl : BOOL; inHwReal : REAL := REAL#1.0001; inHwDint : DINT := DINT#1; outHwReal : REAL; outHwDint : DINT; END_VAR METHOD PROTECTED OVERRIDE Main // The `Initialize()` method must be called before any other method. MyComponent.Initialize(THIS); // Example of the activation of the manual control. IF ActivateManualControl THEN MyComponent.ActivateManualControl(); END_IF; // Calling the main method `Run` with respective input and output variables. MyComponent.Run(inReal := inHwReal, inDint := inHwDint, outReal => outHwReal, outDint => outHwDint); END_METHOD END_CLASS UI side of the IxComponent. <RenderableContentControl Context=\"@Entry.Plc.myComponentExample.MyComponent\" Presentation=\"Command\" /> and the rendered result:"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Source repositories | System.Dynamic.ExpandoObject",
    "keywords": "IX FRAMEWORK is an open-source application framework project developed by a group of automation engineers. It is based on SIMATIC AX platfrom and IX technology Source repositories IX IX FRAMEWORK Note This project is under development. We periodically release versions that can be used for testing and in non-production environments. Disclaimer Important It is necessary to have a valid license for SIMATIC AX in order to use IX! SIMATIC AX is currently in a limited sales release in selected European countries only. You will need to request access from the AX team which will check if your use case is suitable for the current state of the product. The first step to getting the approval is contacting your local SIEMENS sales representative or writing an email to simatic-ax@siemens.com."
  },
  "index.html": {
    "href": "index.html",
    "title": "Source repositories | System.Dynamic.ExpandoObject",
    "keywords": "IX FRAMEWORK is an open-source application framework project developed by a group of automation engineers. It is based on SIMATIC AX platfrom and IX technology Source repositories IX IX FRAMEWORK Note This project is under development. We periodically release versions that can be used for testing and in non-production environments. Disclaimer Important It is necessary to have a valid license for SIMATIC AX in order to use IX! SIMATIC AX is currently in a limited sales release in selected European countries only. You will need to request access from the AX team which will check if your use case is suitable for the current state of the product. The first step to getting the approval is contacting your local SIEMENS sales representative or writing an email to simatic-ax@siemens.com."
  }
}