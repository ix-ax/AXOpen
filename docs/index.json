{
  "api/AXOpen.Core._NULL_CONTEXT.html": {
    "href": "api/AXOpen.Core._NULL_CONTEXT.html",
    "title": "Class _NULL_CONTEXT | System.Dynamic.ExpandoObject",
    "keywords": "Class _NULL_CONTEXT Inheritance object _NULL_CONTEXT Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class _NULL_CONTEXT : ITwinObject, ITwinElement, IAxoContext Constructors | Improve this Doc View Source _NULL_CONTEXT(ITwinObject, string, string) Declaration public _NULL_CONTEXT(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description AXSharp.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source AttributeName Declaration public string AttributeName { get; set; } Property Value Type Description string | Improve this Doc View Source Connector Declaration protected Connector Connector { get; } Property Value Type Description AXSharp.Connector.Connector | Improve this Doc View Source HumanReadable Declaration public string HumanReadable { get; set; } Property Value Type Description string | Improve this Doc View Source Interpreter Declaration public Translator Interpreter { get; } Property Value Type Description AXSharp.Connector.Localizations.Translator | Improve this Doc View Source Parent Declaration protected ITwinObject Parent { get; set; } Property Value Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source Symbol Declaration public string Symbol { get; protected set; } Property Value Type Description string | Improve this Doc View Source SymbolTail Declaration protected string SymbolTail { get; set; } Property Value Type Description string Methods | Improve this Doc View Source AddChild(ITwinObject) Declaration public void AddChild(ITwinObject twinObject) Parameters Type Name Description AXSharp.Connector.ITwinObject twinObject | Improve this Doc View Source AddKid(ITwinElement) Declaration public void AddKid(ITwinElement kid) Parameters Type Name Description AXSharp.Connector.ITwinElement kid | Improve this Doc View Source AddValueTag(ITwinPrimitive) Declaration public void AddValueTag(ITwinPrimitive valueTag) Parameters Type Name Description AXSharp.Connector.ITwinPrimitive valueTag | Improve this Doc View Source CreateEmptyPoco() Declaration public _NULL_CONTEXT CreateEmptyPoco() Returns Type Description _NULL_CONTEXT | Improve this Doc View Source GetChildren() Declaration public IEnumerable<ITwinObject> GetChildren() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinObject> | Improve this Doc View Source GetConnector() Declaration public Connector GetConnector() Returns Type Description AXSharp.Connector.Connector | Improve this Doc View Source GetKids() Declaration public IEnumerable<ITwinElement> GetKids() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinElement> | Improve this Doc View Source GetParent() Declaration public ITwinObject GetParent() Returns Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source GetSymbolTail() Declaration public string GetSymbolTail() Returns Type Description string | Improve this Doc View Source GetValueTags() Declaration public IEnumerable<ITwinPrimitive> GetValueTags() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive> | Improve this Doc View Source OnlineToPlain<T>() Declaration public virtual Task<T> OnlineToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<_NULL_CONTEXT> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><_NULL_CONTEXT> | Improve this Doc View Source OnlineToPlainAsync(_NULL_CONTEXT) Declaration protected Task<_NULL_CONTEXT> OnlineToPlainAsync(_NULL_CONTEXT plain) Parameters Type Name Description _NULL_CONTEXT plain Returns Type Description System.Threading.Tasks.Task<TResult><_NULL_CONTEXT> | Improve this Doc View Source PlainToOnline<T>(T) Declaration public virtual Task PlainToOnline<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source PlainToOnlineAsync(_NULL_CONTEXT) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(_NULL_CONTEXT plain) Parameters Type Name Description _NULL_CONTEXT plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadow<T>(T) Declaration public virtual Task PlainToShadow<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source PlainToShadowAsync(_NULL_CONTEXT) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(_NULL_CONTEXT plain) Parameters Type Name Description _NULL_CONTEXT plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ShadowToPlain<T>() Declaration public virtual Task<T> ShadowToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<_NULL_CONTEXT> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><_NULL_CONTEXT> | Improve this Doc View Source ShadowToPlainAsync(_NULL_CONTEXT) Declaration protected Task<_NULL_CONTEXT> ShadowToPlainAsync(_NULL_CONTEXT plain) Parameters Type Name Description _NULL_CONTEXT plain Returns Type Description System.Threading.Tasks.Task<TResult><_NULL_CONTEXT> Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoContext"
  },
  "api/AXOpen.Core._NULL_OBJECT.html": {
    "href": "api/AXOpen.Core._NULL_OBJECT.html",
    "title": "Class _NULL_OBJECT | System.Dynamic.ExpandoObject",
    "keywords": "Class _NULL_OBJECT Inheritance object _NULL_OBJECT Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class _NULL_OBJECT : ITwinObject, ITwinElement, IAxoObject Constructors | Improve this Doc View Source _NULL_OBJECT(ITwinObject, string, string) Declaration public _NULL_OBJECT(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description AXSharp.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source AttributeName Declaration public string AttributeName { get; set; } Property Value Type Description string | Improve this Doc View Source Connector Declaration protected Connector Connector { get; } Property Value Type Description AXSharp.Connector.Connector | Improve this Doc View Source HumanReadable Declaration public string HumanReadable { get; set; } Property Value Type Description string | Improve this Doc View Source Interpreter Declaration public Translator Interpreter { get; } Property Value Type Description AXSharp.Connector.Localizations.Translator | Improve this Doc View Source Parent Declaration protected ITwinObject Parent { get; set; } Property Value Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source Symbol Declaration public string Symbol { get; protected set; } Property Value Type Description string | Improve this Doc View Source SymbolTail Declaration protected string SymbolTail { get; set; } Property Value Type Description string Methods | Improve this Doc View Source AddChild(ITwinObject) Declaration public void AddChild(ITwinObject twinObject) Parameters Type Name Description AXSharp.Connector.ITwinObject twinObject | Improve this Doc View Source AddKid(ITwinElement) Declaration public void AddKid(ITwinElement kid) Parameters Type Name Description AXSharp.Connector.ITwinElement kid | Improve this Doc View Source AddValueTag(ITwinPrimitive) Declaration public void AddValueTag(ITwinPrimitive valueTag) Parameters Type Name Description AXSharp.Connector.ITwinPrimitive valueTag | Improve this Doc View Source CreateEmptyPoco() Declaration public _NULL_OBJECT CreateEmptyPoco() Returns Type Description _NULL_OBJECT | Improve this Doc View Source GetChildren() Declaration public IEnumerable<ITwinObject> GetChildren() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinObject> | Improve this Doc View Source GetConnector() Declaration public Connector GetConnector() Returns Type Description AXSharp.Connector.Connector | Improve this Doc View Source GetKids() Declaration public IEnumerable<ITwinElement> GetKids() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinElement> | Improve this Doc View Source GetParent() Declaration public ITwinObject GetParent() Returns Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source GetSymbolTail() Declaration public string GetSymbolTail() Returns Type Description string | Improve this Doc View Source GetValueTags() Declaration public IEnumerable<ITwinPrimitive> GetValueTags() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive> | Improve this Doc View Source OnlineToPlain<T>() Declaration public virtual Task<T> OnlineToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<_NULL_OBJECT> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><_NULL_OBJECT> | Improve this Doc View Source OnlineToPlainAsync(_NULL_OBJECT) Declaration protected Task<_NULL_OBJECT> OnlineToPlainAsync(_NULL_OBJECT plain) Parameters Type Name Description _NULL_OBJECT plain Returns Type Description System.Threading.Tasks.Task<TResult><_NULL_OBJECT> | Improve this Doc View Source PlainToOnline<T>(T) Declaration public virtual Task PlainToOnline<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source PlainToOnlineAsync(_NULL_OBJECT) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(_NULL_OBJECT plain) Parameters Type Name Description _NULL_OBJECT plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadow<T>(T) Declaration public virtual Task PlainToShadow<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source PlainToShadowAsync(_NULL_OBJECT) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(_NULL_OBJECT plain) Parameters Type Name Description _NULL_OBJECT plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ShadowToPlain<T>() Declaration public virtual Task<T> ShadowToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<_NULL_OBJECT> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><_NULL_OBJECT> | Improve this Doc View Source ShadowToPlainAsync(_NULL_OBJECT) Declaration protected Task<_NULL_OBJECT> ShadowToPlainAsync(_NULL_OBJECT plain) Parameters Type Name Description _NULL_OBJECT plain Returns Type Description System.Threading.Tasks.Task<TResult><_NULL_OBJECT> Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject"
  },
  "api/AXOpen.Core._NULL_RTC.html": {
    "href": "api/AXOpen.Core._NULL_RTC.html",
    "title": "Class _NULL_RTC | System.Dynamic.ExpandoObject",
    "keywords": "Class _NULL_RTC Inheritance object _NULL_RTC Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoRtc Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class _NULL_RTC : ITwinObject, ITwinElement, IAxoRtc Constructors | Improve this Doc View Source _NULL_RTC(ITwinObject, string, string) Declaration public _NULL_RTC(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description AXSharp.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source AttributeName Declaration public string AttributeName { get; set; } Property Value Type Description string | Improve this Doc View Source Connector Declaration protected Connector Connector { get; } Property Value Type Description AXSharp.Connector.Connector | Improve this Doc View Source HumanReadable Declaration public string HumanReadable { get; set; } Property Value Type Description string | Improve this Doc View Source Interpreter Declaration public Translator Interpreter { get; } Property Value Type Description AXSharp.Connector.Localizations.Translator | Improve this Doc View Source Parent Declaration protected ITwinObject Parent { get; set; } Property Value Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source Symbol Declaration public string Symbol { get; protected set; } Property Value Type Description string | Improve this Doc View Source SymbolTail Declaration protected string SymbolTail { get; set; } Property Value Type Description string Methods | Improve this Doc View Source AddChild(ITwinObject) Declaration public void AddChild(ITwinObject twinObject) Parameters Type Name Description AXSharp.Connector.ITwinObject twinObject | Improve this Doc View Source AddKid(ITwinElement) Declaration public void AddKid(ITwinElement kid) Parameters Type Name Description AXSharp.Connector.ITwinElement kid | Improve this Doc View Source AddValueTag(ITwinPrimitive) Declaration public void AddValueTag(ITwinPrimitive valueTag) Parameters Type Name Description AXSharp.Connector.ITwinPrimitive valueTag | Improve this Doc View Source CreateEmptyPoco() Declaration public _NULL_RTC CreateEmptyPoco() Returns Type Description _NULL_RTC | Improve this Doc View Source GetChildren() Declaration public IEnumerable<ITwinObject> GetChildren() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinObject> | Improve this Doc View Source GetConnector() Declaration public Connector GetConnector() Returns Type Description AXSharp.Connector.Connector | Improve this Doc View Source GetKids() Declaration public IEnumerable<ITwinElement> GetKids() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinElement> | Improve this Doc View Source GetParent() Declaration public ITwinObject GetParent() Returns Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source GetSymbolTail() Declaration public string GetSymbolTail() Returns Type Description string | Improve this Doc View Source GetValueTags() Declaration public IEnumerable<ITwinPrimitive> GetValueTags() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive> | Improve this Doc View Source OnlineToPlain<T>() Declaration public virtual Task<T> OnlineToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<_NULL_RTC> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><_NULL_RTC> | Improve this Doc View Source OnlineToPlainAsync(_NULL_RTC) Declaration protected Task<_NULL_RTC> OnlineToPlainAsync(_NULL_RTC plain) Parameters Type Name Description _NULL_RTC plain Returns Type Description System.Threading.Tasks.Task<TResult><_NULL_RTC> | Improve this Doc View Source PlainToOnline<T>(T) Declaration public virtual Task PlainToOnline<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source PlainToOnlineAsync(_NULL_RTC) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(_NULL_RTC plain) Parameters Type Name Description _NULL_RTC plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadow<T>(T) Declaration public virtual Task PlainToShadow<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source PlainToShadowAsync(_NULL_RTC) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(_NULL_RTC plain) Parameters Type Name Description _NULL_RTC plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ShadowToPlain<T>() Declaration public virtual Task<T> ShadowToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<_NULL_RTC> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><_NULL_RTC> | Improve this Doc View Source ShadowToPlainAsync(_NULL_RTC) Declaration protected Task<_NULL_RTC> ShadowToPlainAsync(_NULL_RTC plain) Parameters Type Name Description _NULL_RTC plain Returns Type Description System.Threading.Tasks.Task<TResult><_NULL_RTC> Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoRtc"
  },
  "api/AXOpen.Core.AxoComponent.html": {
    "href": "api/AXOpen.Core.AxoComponent.html",
    "title": "Class AxoComponent | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoComponent Inheritance object AxoObject AxoComponent Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject IAxoComponent Inherited Members AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class AxoComponent : AxoObject, ITwinObject, ITwinElement, IAxoObject, IAxoComponent Constructors | Improve this Doc View Source AxoComponent(ITwinObject, string, string) Declaration public AxoComponent(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description AXSharp.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source _isManuallyControllable Declaration public OnlinerBool _isManuallyControllable { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerBool Methods | Improve this Doc View Source CreateEmptyPoco() Declaration public AxoComponent CreateEmptyPoco() Returns Type Description AxoComponent | Improve this Doc View Source OnlineToPlain<T>() Declaration public override Task<T> OnlineToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T Overrides AxoObject.OnlineToPlain<T>() | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<AxoComponent> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoComponent> | Improve this Doc View Source OnlineToPlainAsync(AxoComponent) Declaration protected Task<AxoComponent> OnlineToPlainAsync(AxoComponent plain) Parameters Type Name Description AxoComponent plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoComponent> | Improve this Doc View Source PlainToOnline<T>(T) Declaration public override Task PlainToOnline<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T Overrides AXOpen.Core.AxoObject.PlainToOnline<T>(T) | Improve this Doc View Source PlainToOnlineAsync(AxoComponent) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoComponent plain) Parameters Type Name Description AxoComponent plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadow<T>(T) Declaration public override Task PlainToShadow<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T Overrides AXOpen.Core.AxoObject.PlainToShadow<T>(T) | Improve this Doc View Source PlainToShadowAsync(AxoComponent) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoComponent plain) Parameters Type Name Description AxoComponent plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ShadowToPlain<T>() Declaration public override Task<T> ShadowToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T Overrides AxoObject.ShadowToPlain<T>() | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<AxoComponent> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoComponent> | Improve this Doc View Source ShadowToPlainAsync(AxoComponent) Declaration protected Task<AxoComponent> ShadowToPlainAsync(AxoComponent plain) Parameters Type Name Description AxoComponent plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoComponent> Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject IAxoComponent"
  },
  "api/AXOpen.Core.AxoComponentCommandView.html": {
    "href": "api/AXOpen.Core.AxoComponentCommandView.html",
    "title": "Class AxoComponentCommandView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoComponentCommandView Inheritance object Microsoft.AspNetCore.Components.ComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><AxoComponent> AxoComponentView AxoComponentCommandView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable Inherited Members AxoComponentView.IsControllable AxoComponentView.OnInitialized() AxoComponentView.BuildRenderTree(RenderTreeBuilder) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<AXOpen.Core.AxoComponent>.Component AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.Dispose() AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ITwinObject, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ValueTypes.OnlinerBase, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinPrimitive) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, AXSharp.Connector.ValueTypes.ValueChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.PollingInterval AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: axopen_core_blazor.dll Syntax public class AxoComponentCommandView : AxoComponentView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Constructors | Improve this Doc View Source AxoComponentCommandView() Declaration public AxoComponentCommandView() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable"
  },
  "api/AXOpen.Core.AxoComponentStatusView.html": {
    "href": "api/AXOpen.Core.AxoComponentStatusView.html",
    "title": "Class AxoComponentStatusView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoComponentStatusView Inheritance object Microsoft.AspNetCore.Components.ComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><AxoComponent> AxoComponentView AxoComponentStatusView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable Inherited Members AxoComponentView.IsControllable AxoComponentView.OnInitialized() AxoComponentView.BuildRenderTree(RenderTreeBuilder) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<AXOpen.Core.AxoComponent>.Component AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.Dispose() AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ITwinObject, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ValueTypes.OnlinerBase, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinPrimitive) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, AXSharp.Connector.ValueTypes.ValueChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.PollingInterval AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: axopen_core_blazor.dll Syntax public class AxoComponentStatusView : AxoComponentView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Constructors | Improve this Doc View Source AxoComponentStatusView() Declaration public AxoComponentStatusView() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable"
  },
  "api/AXOpen.Core.AxoComponentView.html": {
    "href": "api/AXOpen.Core.AxoComponentView.html",
    "title": "Class AxoComponentView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoComponentView Inheritance object Microsoft.AspNetCore.Components.ComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><AxoComponent> AxoComponentView AxoComponentCommandView AxoComponentStatusView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable Inherited Members AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<AXOpen.Core.AxoComponent>.Component AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.Dispose() AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ITwinObject, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ValueTypes.OnlinerBase, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinPrimitive) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, AXSharp.Connector.ValueTypes.ValueChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.PollingInterval AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: axopen_core_blazor.dll Syntax public class AxoComponentView : RenderableComplexComponentBase<AxoComponent>, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Properties | Improve this Doc View Source IsControllable Declaration [Parameter] public bool IsControllable { get; set; } Property Value Type Description bool Methods | Improve this Doc View Source BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters Type Name Description Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder Overrides Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) | Improve this Doc View Source OnInitialized() Declaration protected override void OnInitialized() Overrides Microsoft.AspNetCore.Components.ComponentBase.OnInitialized() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable"
  },
  "api/AXOpen.Core.AxoContext.html": {
    "href": "api/AXOpen.Core.AxoContext.html",
    "title": "Class AxoContext | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoContext Inheritance object AxoContext Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class AxoContext : ITwinObject, ITwinElement, IAxoContext Constructors | Improve this Doc View Source AxoContext(ITwinObject, string, string) Declaration public AxoContext(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description AXSharp.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source AttributeName Declaration public string AttributeName { get; set; } Property Value Type Description string | Improve this Doc View Source Connector Declaration protected Connector Connector { get; } Property Value Type Description AXSharp.Connector.Connector | Improve this Doc View Source HumanReadable Declaration public string HumanReadable { get; set; } Property Value Type Description string | Improve this Doc View Source Interpreter Declaration public Translator Interpreter { get; } Property Value Type Description AXSharp.Connector.Localizations.Translator | Improve this Doc View Source Parent Declaration protected ITwinObject Parent { get; set; } Property Value Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source Symbol Declaration public string Symbol { get; protected set; } Property Value Type Description string | Improve this Doc View Source SymbolTail Declaration protected string SymbolTail { get; set; } Property Value Type Description string Methods | Improve this Doc View Source AddChild(ITwinObject) Declaration public void AddChild(ITwinObject twinObject) Parameters Type Name Description AXSharp.Connector.ITwinObject twinObject | Improve this Doc View Source AddKid(ITwinElement) Declaration public void AddKid(ITwinElement kid) Parameters Type Name Description AXSharp.Connector.ITwinElement kid | Improve this Doc View Source AddValueTag(ITwinPrimitive) Declaration public void AddValueTag(ITwinPrimitive valueTag) Parameters Type Name Description AXSharp.Connector.ITwinPrimitive valueTag | Improve this Doc View Source CreateEmptyPoco() Declaration public AxoContext CreateEmptyPoco() Returns Type Description AxoContext | Improve this Doc View Source GetChildren() Declaration public IEnumerable<ITwinObject> GetChildren() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinObject> | Improve this Doc View Source GetConnector() Declaration public Connector GetConnector() Returns Type Description AXSharp.Connector.Connector | Improve this Doc View Source GetKids() Declaration public IEnumerable<ITwinElement> GetKids() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinElement> | Improve this Doc View Source GetParent() Declaration public ITwinObject GetParent() Returns Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source GetSymbolTail() Declaration public string GetSymbolTail() Returns Type Description string | Improve this Doc View Source GetValueTags() Declaration public IEnumerable<ITwinPrimitive> GetValueTags() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive> | Improve this Doc View Source OnlineToPlain<T>() Declaration public virtual Task<T> OnlineToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<AxoContext> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoContext> | Improve this Doc View Source OnlineToPlainAsync(AxoContext) Declaration protected Task<AxoContext> OnlineToPlainAsync(AxoContext plain) Parameters Type Name Description AxoContext plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoContext> | Improve this Doc View Source PlainToOnline<T>(T) Declaration public virtual Task PlainToOnline<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source PlainToOnlineAsync(AxoContext) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoContext plain) Parameters Type Name Description AxoContext plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadow<T>(T) Declaration public virtual Task PlainToShadow<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source PlainToShadowAsync(AxoContext) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoContext plain) Parameters Type Name Description AxoContext plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ShadowToPlain<T>() Declaration public virtual Task<T> ShadowToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<AxoContext> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoContext> | Improve this Doc View Source ShadowToPlainAsync(AxoContext) Declaration protected Task<AxoContext> ShadowToPlainAsync(AxoContext plain) Parameters Type Name Description AxoContext plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoContext> Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoContext"
  },
  "api/AXOpen.Core.AxoContextEnvironment.html": {
    "href": "api/AXOpen.Core.AxoContextEnvironment.html",
    "title": "Class AxoContextEnvironment | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoContextEnvironment Inheritance object AxoContextEnvironment Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoContextEnvironment Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class AxoContextEnvironment : ITwinObject, ITwinElement, IAxoContextEnvironment Constructors | Improve this Doc View Source AxoContextEnvironment(ITwinObject, string, string) Declaration public AxoContextEnvironment(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description AXSharp.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source AttributeName Declaration public string AttributeName { get; set; } Property Value Type Description string | Improve this Doc View Source Connector Declaration protected Connector Connector { get; } Property Value Type Description AXSharp.Connector.Connector | Improve this Doc View Source HumanReadable Declaration public string HumanReadable { get; set; } Property Value Type Description string | Improve this Doc View Source Interpreter Declaration public Translator Interpreter { get; } Property Value Type Description AXSharp.Connector.Localizations.Translator | Improve this Doc View Source Parent Declaration protected ITwinObject Parent { get; set; } Property Value Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source Symbol Declaration public string Symbol { get; protected set; } Property Value Type Description string | Improve this Doc View Source SymbolTail Declaration protected string SymbolTail { get; set; } Property Value Type Description string Methods | Improve this Doc View Source AddChild(ITwinObject) Declaration public void AddChild(ITwinObject twinObject) Parameters Type Name Description AXSharp.Connector.ITwinObject twinObject | Improve this Doc View Source AddKid(ITwinElement) Declaration public void AddKid(ITwinElement kid) Parameters Type Name Description AXSharp.Connector.ITwinElement kid | Improve this Doc View Source AddValueTag(ITwinPrimitive) Declaration public void AddValueTag(ITwinPrimitive valueTag) Parameters Type Name Description AXSharp.Connector.ITwinPrimitive valueTag | Improve this Doc View Source CreateEmptyPoco() Declaration public AxoContextEnvironment CreateEmptyPoco() Returns Type Description AxoContextEnvironment | Improve this Doc View Source GetChildren() Declaration public IEnumerable<ITwinObject> GetChildren() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinObject> | Improve this Doc View Source GetConnector() Declaration public Connector GetConnector() Returns Type Description AXSharp.Connector.Connector | Improve this Doc View Source GetKids() Declaration public IEnumerable<ITwinElement> GetKids() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinElement> | Improve this Doc View Source GetParent() Declaration public ITwinObject GetParent() Returns Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source GetSymbolTail() Declaration public string GetSymbolTail() Returns Type Description string | Improve this Doc View Source GetValueTags() Declaration public IEnumerable<ITwinPrimitive> GetValueTags() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive> | Improve this Doc View Source OnlineToPlain<T>() Declaration public virtual Task<T> OnlineToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<AxoContextEnvironment> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoContextEnvironment> | Improve this Doc View Source OnlineToPlainAsync(AxoContextEnvironment) Declaration protected Task<AxoContextEnvironment> OnlineToPlainAsync(AxoContextEnvironment plain) Parameters Type Name Description AxoContextEnvironment plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoContextEnvironment> | Improve this Doc View Source PlainToOnline<T>(T) Declaration public virtual Task PlainToOnline<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source PlainToOnlineAsync(AxoContextEnvironment) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoContextEnvironment plain) Parameters Type Name Description AxoContextEnvironment plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadow<T>(T) Declaration public virtual Task PlainToShadow<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source PlainToShadowAsync(AxoContextEnvironment) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoContextEnvironment plain) Parameters Type Name Description AxoContextEnvironment plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ShadowToPlain<T>() Declaration public virtual Task<T> ShadowToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<AxoContextEnvironment> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoContextEnvironment> | Improve this Doc View Source ShadowToPlainAsync(AxoContextEnvironment) Declaration protected Task<AxoContextEnvironment> ShadowToPlainAsync(AxoContextEnvironment plain) Parameters Type Name Description AxoContextEnvironment plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoContextEnvironment> Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoContextEnvironment"
  },
  "api/AXOpen.Core.AxoCoordinatorStates.html": {
    "href": "api/AXOpen.Core.AxoCoordinatorStates.html",
    "title": "Enum AxoCoordinatorStates | System.Dynamic.ExpandoObject",
    "keywords": "Enum AxoCoordinatorStates Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public enum AxoCoordinatorStates : short Fields Name Description Configuring Idle Running"
  },
  "api/AXOpen.Core.AxoMomentaryTask.html": {
    "href": "api/AXOpen.Core.AxoMomentaryTask.html",
    "title": "Class AxoMomentaryTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoMomentaryTask Inheritance object AxoObject AxoMomentaryTask Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject IAxoMomentaryTask Inherited Members AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class AxoMomentaryTask : AxoObject, ITwinObject, ITwinElement, IAxoObject, IAxoMomentaryTask Constructors | Improve this Doc View Source AxoMomentaryTask(ITwinObject, string, string) Declaration public AxoMomentaryTask(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description AXSharp.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source AttributeStateOffDesc Declaration public string AttributeStateOffDesc { get; set; } Property Value Type Description string | Improve this Doc View Source AttributeStateOnDesc Declaration public string AttributeStateOnDesc { get; set; } Property Value Type Description string | Improve this Doc View Source IsDisabled Declaration [ReadOnly] public OnlinerBool IsDisabled { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerBool | Improve this Doc View Source RemoteSwitchOn Declaration public OnlinerBool RemoteSwitchOn { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerBool | Improve this Doc View Source State Declaration [ReadOnly] public OnlinerBool State { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerBool Methods | Improve this Doc View Source CreateEmptyPoco() Declaration public AxoMomentaryTask CreateEmptyPoco() Returns Type Description AxoMomentaryTask | Improve this Doc View Source OnlineToPlain<T>() Declaration public override Task<T> OnlineToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T Overrides AxoObject.OnlineToPlain<T>() | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<AxoMomentaryTask> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoMomentaryTask> | Improve this Doc View Source OnlineToPlainAsync(AxoMomentaryTask) Declaration protected Task<AxoMomentaryTask> OnlineToPlainAsync(AxoMomentaryTask plain) Parameters Type Name Description AxoMomentaryTask plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoMomentaryTask> | Improve this Doc View Source PlainToOnline<T>(T) Declaration public override Task PlainToOnline<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T Overrides AXOpen.Core.AxoObject.PlainToOnline<T>(T) | Improve this Doc View Source PlainToOnlineAsync(AxoMomentaryTask) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoMomentaryTask plain) Parameters Type Name Description AxoMomentaryTask plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadow<T>(T) Declaration public override Task PlainToShadow<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T Overrides AXOpen.Core.AxoObject.PlainToShadow<T>(T) | Improve this Doc View Source PlainToShadowAsync(AxoMomentaryTask) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoMomentaryTask plain) Parameters Type Name Description AxoMomentaryTask plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ShadowToPlain<T>() Declaration public override Task<T> ShadowToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T Overrides AxoObject.ShadowToPlain<T>() | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<AxoMomentaryTask> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoMomentaryTask> | Improve this Doc View Source ShadowToPlainAsync(AxoMomentaryTask) Declaration protected Task<AxoMomentaryTask> ShadowToPlainAsync(AxoMomentaryTask plain) Parameters Type Name Description AxoMomentaryTask plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoMomentaryTask> Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject IAxoMomentaryTask"
  },
  "api/AXOpen.Core.AxoMomentaryTaskCommandView.html": {
    "href": "api/AXOpen.Core.AxoMomentaryTaskCommandView.html",
    "title": "Class AxoMomentaryTaskCommandView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoMomentaryTaskCommandView Inheritance object Microsoft.AspNetCore.Components.ComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><AxoMomentaryTask> AxoMomentaryTaskView AxoMomentaryTaskCommandView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable Inherited Members AxoMomentaryTaskView.OnInitialized() AxoMomentaryTaskView.Dispose() AxoMomentaryTaskView.Disable AxoMomentaryTaskView.IsDisabled AxoMomentaryTaskView.Description AxoMomentaryTaskView.BuildRenderTree(RenderTreeBuilder) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<AXOpen.Core.AxoMomentaryTask>.Component AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ITwinObject, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ValueTypes.OnlinerBase, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinPrimitive) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, AXSharp.Connector.ValueTypes.ValueChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.PollingInterval AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: axopen_core_blazor.dll Syntax public class AxoMomentaryTaskCommandView : AxoMomentaryTaskView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Constructors | Improve this Doc View Source AxoMomentaryTaskCommandView() Declaration public AxoMomentaryTaskCommandView() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable"
  },
  "api/AXOpen.Core.AxoMomentaryTaskStatusView.html": {
    "href": "api/AXOpen.Core.AxoMomentaryTaskStatusView.html",
    "title": "Class AxoMomentaryTaskStatusView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoMomentaryTaskStatusView Inheritance object Microsoft.AspNetCore.Components.ComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><AxoMomentaryTask> AxoMomentaryTaskView AxoMomentaryTaskStatusView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable Inherited Members AxoMomentaryTaskView.OnInitialized() AxoMomentaryTaskView.Dispose() AxoMomentaryTaskView.Disable AxoMomentaryTaskView.IsDisabled AxoMomentaryTaskView.Description AxoMomentaryTaskView.BuildRenderTree(RenderTreeBuilder) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<AXOpen.Core.AxoMomentaryTask>.Component AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ITwinObject, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ValueTypes.OnlinerBase, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinPrimitive) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, AXSharp.Connector.ValueTypes.ValueChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.PollingInterval AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: axopen_core_blazor.dll Syntax public class AxoMomentaryTaskStatusView : AxoMomentaryTaskView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Constructors | Improve this Doc View Source AxoMomentaryTaskStatusView() Declaration public AxoMomentaryTaskStatusView() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable"
  },
  "api/AXOpen.Core.AxoMomentaryTaskView.html": {
    "href": "api/AXOpen.Core.AxoMomentaryTaskView.html",
    "title": "Class AxoMomentaryTaskView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoMomentaryTaskView Inheritance object Microsoft.AspNetCore.Components.ComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><AxoMomentaryTask> AxoMomentaryTaskView AxoMomentaryTaskCommandView AxoMomentaryTaskStatusView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable Inherited Members AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<AXOpen.Core.AxoMomentaryTask>.Component AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ITwinObject, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ValueTypes.OnlinerBase, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinPrimitive) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, AXSharp.Connector.ValueTypes.ValueChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.PollingInterval AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: axopen_core_blazor.dll Syntax public class AxoMomentaryTaskView : RenderableComplexComponentBase<AxoMomentaryTask>, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Properties | Improve this Doc View Source Description Declaration public string Description { get; } Property Value Type Description string | Improve this Doc View Source Disable Declaration [Parameter] public bool Disable { get; set; } Property Value Type Description bool | Improve this Doc View Source IsDisabled Declaration public bool IsDisabled { get; } Property Value Type Description bool Methods | Improve this Doc View Source BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters Type Name Description Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder Overrides Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source OnInitialized() Declaration protected override void OnInitialized() Overrides Microsoft.AspNetCore.Components.ComponentBase.OnInitialized() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable"
  },
  "api/AXOpen.Core.AxoObject.html": {
    "href": "api/AXOpen.Core.AxoObject.html",
    "title": "Class AxoObject | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoObject Inheritance object AxoObject AxoComponent AxoMomentaryTask AxoTask AxoToggleTask AxoDataExchangeBase Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class AxoObject : ITwinObject, ITwinElement, IAxoObject Constructors | Improve this Doc View Source AxoObject(ITwinObject, string, string) Declaration public AxoObject(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description AXSharp.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source AttributeName Declaration public string AttributeName { get; set; } Property Value Type Description string | Improve this Doc View Source Connector Declaration protected Connector Connector { get; } Property Value Type Description AXSharp.Connector.Connector | Improve this Doc View Source HumanReadable Declaration public string HumanReadable { get; set; } Property Value Type Description string | Improve this Doc View Source Identity Declaration [CompilerOmits(new string[] { \"POCO\" })] [ReadOnly] [RenderIgnore] public OnlinerULInt Identity { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerULInt | Improve this Doc View Source Interpreter Declaration public Translator Interpreter { get; } Property Value Type Description AXSharp.Connector.Localizations.Translator | Improve this Doc View Source Parent Declaration protected ITwinObject Parent { get; set; } Property Value Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source Symbol Declaration public string Symbol { get; protected set; } Property Value Type Description string | Improve this Doc View Source SymbolTail Declaration protected string SymbolTail { get; set; } Property Value Type Description string Methods | Improve this Doc View Source AddChild(ITwinObject) Declaration public void AddChild(ITwinObject twinObject) Parameters Type Name Description AXSharp.Connector.ITwinObject twinObject | Improve this Doc View Source AddKid(ITwinElement) Declaration public void AddKid(ITwinElement kid) Parameters Type Name Description AXSharp.Connector.ITwinElement kid | Improve this Doc View Source AddValueTag(ITwinPrimitive) Declaration public void AddValueTag(ITwinPrimitive valueTag) Parameters Type Name Description AXSharp.Connector.ITwinPrimitive valueTag | Improve this Doc View Source CreateEmptyPoco() Declaration public AxoObject CreateEmptyPoco() Returns Type Description AxoObject | Improve this Doc View Source GetChildren() Declaration public IEnumerable<ITwinObject> GetChildren() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinObject> | Improve this Doc View Source GetConnector() Declaration public Connector GetConnector() Returns Type Description AXSharp.Connector.Connector | Improve this Doc View Source GetKids() Declaration public IEnumerable<ITwinElement> GetKids() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinElement> | Improve this Doc View Source GetParent() Declaration public ITwinObject GetParent() Returns Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source GetSymbolTail() Declaration public string GetSymbolTail() Returns Type Description string | Improve this Doc View Source GetValueTags() Declaration public IEnumerable<ITwinPrimitive> GetValueTags() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive> | Improve this Doc View Source OnlineToPlain<T>() Declaration public virtual Task<T> OnlineToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<AxoObject> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoObject> | Improve this Doc View Source OnlineToPlainAsync(AxoObject) Declaration protected Task<AxoObject> OnlineToPlainAsync(AxoObject plain) Parameters Type Name Description AxoObject plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoObject> | Improve this Doc View Source PlainToOnline<T>(T) Declaration public virtual Task PlainToOnline<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source PlainToOnlineAsync(AxoObject) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoObject plain) Parameters Type Name Description AxoObject plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadow<T>(T) Declaration public virtual Task PlainToShadow<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source PlainToShadowAsync(AxoObject) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoObject plain) Parameters Type Name Description AxoObject plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ShadowToPlain<T>() Declaration public virtual Task<T> ShadowToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<AxoObject> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoObject> | Improve this Doc View Source ShadowToPlainAsync(AxoObject) Declaration protected Task<AxoObject> ShadowToPlainAsync(AxoObject plain) Parameters Type Name Description AxoObject plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoObject> Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject"
  },
  "api/AXOpen.Core.AxoRemoteTask.html": {
    "href": "api/AXOpen.Core.AxoRemoteTask.html",
    "title": "Class AxoRemoteTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoRemoteTask Inheritance object AxoObject AxoTask AxoRemoteTask AxoDataExchangeTask Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject System.Windows.Input.ICommand IAxoTask IAxoTaskState Inherited Members AxoTask.Restore() AxoTask.CanExecute(object) AxoTask.Execute(object) AxoTask.CanExecuteChanged AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails AxoTask.OnlineToPlainAsync(AxoTask) AxoTask.PlainToOnlineAsync(AxoTask) AxoTask.ShadowToPlainAsync(AxoTask) AxoTask.PlainToShadowAsync(AxoTask) AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class AxoRemoteTask : AxoTask, ITwinObject, ITwinElement, IAxoObject, ICommand, IAxoTask, IAxoTaskState Constructors | Improve this Doc View Source AxoRemoteTask(ITwinObject, string, string) Declaration public AxoRemoteTask(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description AXSharp.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source DoneSignature Declaration public OnlinerULInt DoneSignature { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerULInt | Improve this Doc View Source HasRemoteException Declaration public OnlinerBool HasRemoteException { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerBool | Improve this Doc View Source IsBeingCalledCounter Declaration public OnlinerInt IsBeingCalledCounter { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerInt | Improve this Doc View Source IsInitialized Declaration public OnlinerBool IsInitialized { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerBool | Improve this Doc View Source RemoteExceptionDetails Gets string representation of the current exception on this remote task. Declaration public string RemoteExceptionDetails { get; } Property Value Type Description string | Improve this Doc View Source RemoteExecutionException Gets the exception that occurred during the last execution. Declaration public Exception RemoteExecutionException { get; } Property Value Type Description System.Exception Methods | Improve this Doc View Source CreateEmptyPoco() Declaration public AxoRemoteTask CreateEmptyPoco() Returns Type Description AxoRemoteTask | Improve this Doc View Source DeInitialize() Removes currently bound AXOpen.Core.AxoRemoteTask.DeferredAction from the execution of this AxoRemoteTask Declaration public void DeInitialize() | Improve this Doc View Source Initialize(Action) Initializes this AxoRemoteTask. Declaration public void Initialize(Action deferredAction) Parameters Type Name Description System.Action deferredAction Action to be executed on this AxoRemoteTask call. | Improve this Doc View Source Initialize(Func<bool>) Initializes this AxoRemoteTask. Declaration public void Initialize(Func<bool> deferredAction) Parameters Type Name Description System.Func<TResult><bool> deferredAction Action to be executed on this AxoRemoteTask call. | Improve this Doc View Source InitializeExclusively(Action) Initializes this AxoRemoteTask exclusively for this AXOpen.Core.AxoRemoteTask.DeferredAction. Any following attempt to initialize this AxoRemoteTask will throw an exception. Declaration public void InitializeExclusively(Action deferredAction) Parameters Type Name Description System.Action deferredAction Action to be executed on this AxoRemoteTask call. | Improve this Doc View Source InitializeExclusively(Func<bool>) Initializes this AxoRemoteTask exclusively for this AXOpen.Core.AxoRemoteTask.DeferredAction. Any following attempt to initialize this AxoRemoteTask will throw an exception. Declaration public void InitializeExclusively(Func<bool> deferredAction) Parameters Type Name Description System.Func<TResult><bool> deferredAction Action to be executed on this AxoRemoteTask call. | Improve this Doc View Source OnlineToPlain<T>() Declaration public override Task<T> OnlineToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T Overrides AxoTask.OnlineToPlain<T>() | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<AxoRemoteTask> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoRemoteTask> | Improve this Doc View Source OnlineToPlainAsync(AxoRemoteTask) Declaration protected Task<AxoRemoteTask> OnlineToPlainAsync(AxoRemoteTask plain) Parameters Type Name Description AxoRemoteTask plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoRemoteTask> | Improve this Doc View Source PlainToOnline<T>(T) Declaration public override Task PlainToOnline<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T Overrides AXOpen.Core.AxoTask.PlainToOnline<T>(T) | Improve this Doc View Source PlainToOnlineAsync(AxoRemoteTask) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoRemoteTask plain) Parameters Type Name Description AxoRemoteTask plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadow<T>(T) Declaration public override Task PlainToShadow<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T Overrides AXOpen.Core.AxoTask.PlainToShadow<T>(T) | Improve this Doc View Source PlainToShadowAsync(AxoRemoteTask) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoRemoteTask plain) Parameters Type Name Description AxoRemoteTask plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ResetExecution() Resets the resets this instance of AxoRemoteTask. Declaration public Task ResetExecution() Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source ShadowToPlain<T>() Declaration public override Task<T> ShadowToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T Overrides AxoTask.ShadowToPlain<T>() | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<AxoRemoteTask> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoRemoteTask> | Improve this Doc View Source ShadowToPlainAsync(AxoRemoteTask) Declaration protected Task<AxoRemoteTask> ShadowToPlainAsync(AxoRemoteTask plain) Parameters Type Name Description AxoRemoteTask plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoRemoteTask> Events | Improve this Doc View Source PropertyChanged Declaration public event PropertyChangedEventHandler PropertyChanged Event Type Type Description System.ComponentModel.PropertyChangedEventHandler Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject System.Windows.Input.ICommand IAxoTask IAxoTaskState"
  },
  "api/AXOpen.Core.AxoSequencer.html": {
    "href": "api/AXOpen.Core.AxoSequencer.html",
    "title": "Class AxoSequencer | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoSequencer Inheritance object AxoObject AxoTask AxoSequencer AxoSequencerContainer Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject System.Windows.Input.ICommand IAxoTask IAxoTaskState Inherited Members AxoTask.Restore() AxoTask.CanExecute(object) AxoTask.Execute(object) AxoTask.CanExecuteChanged AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails AxoTask.OnlineToPlainAsync(AxoTask) AxoTask.PlainToOnlineAsync(AxoTask) AxoTask.ShadowToPlainAsync(AxoTask) AxoTask.PlainToShadowAsync(AxoTask) AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class AxoSequencer : AxoTask, ITwinObject, ITwinElement, IAxoObject, ICommand, IAxoTask, IAxoTaskState Constructors | Improve this Doc View Source AxoSequencer(ITwinObject, string, string) Declaration public AxoSequencer(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description AXSharp.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source CurrentOrder Declaration public OnlinerULInt CurrentOrder { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerULInt | Improve this Doc View Source SequenceMode Declaration [EnumeratorDiscriminator(typeof(eAxoSequenceMode))] public OnlinerInt SequenceMode { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerInt | Improve this Doc View Source StepBackwardCommand Declaration public AxoTask StepBackwardCommand { get; } Property Value Type Description AxoTask | Improve this Doc View Source StepForwardCommand Declaration public AxoTask StepForwardCommand { get; } Property Value Type Description AxoTask | Improve this Doc View Source StepIn Declaration public AxoTask StepIn { get; } Property Value Type Description AxoTask | Improve this Doc View Source SteppingMode Declaration [EnumeratorDiscriminator(typeof(eAxoSteppingMode))] public OnlinerInt SteppingMode { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerInt Methods | Improve this Doc View Source CreateEmptyPoco() Declaration public AxoSequencer CreateEmptyPoco() Returns Type Description AxoSequencer | Improve this Doc View Source OnlineToPlain<T>() Declaration public override Task<T> OnlineToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T Overrides AxoTask.OnlineToPlain<T>() | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<AxoSequencer> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoSequencer> | Improve this Doc View Source OnlineToPlainAsync(AxoSequencer) Declaration protected Task<AxoSequencer> OnlineToPlainAsync(AxoSequencer plain) Parameters Type Name Description AxoSequencer plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoSequencer> | Improve this Doc View Source PlainToOnline<T>(T) Declaration public override Task PlainToOnline<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T Overrides AXOpen.Core.AxoTask.PlainToOnline<T>(T) | Improve this Doc View Source PlainToOnlineAsync(AxoSequencer) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoSequencer plain) Parameters Type Name Description AxoSequencer plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadow<T>(T) Declaration public override Task PlainToShadow<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T Overrides AXOpen.Core.AxoTask.PlainToShadow<T>(T) | Improve this Doc View Source PlainToShadowAsync(AxoSequencer) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoSequencer plain) Parameters Type Name Description AxoSequencer plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ShadowToPlain<T>() Declaration public override Task<T> ShadowToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T Overrides AxoTask.ShadowToPlain<T>() | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<AxoSequencer> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoSequencer> | Improve this Doc View Source ShadowToPlainAsync(AxoSequencer) Declaration protected Task<AxoSequencer> ShadowToPlainAsync(AxoSequencer plain) Parameters Type Name Description AxoSequencer plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoSequencer> Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject System.Windows.Input.ICommand IAxoTask IAxoTaskState"
  },
  "api/AXOpen.Core.AxoSequencerCommandView.html": {
    "href": "api/AXOpen.Core.AxoSequencerCommandView.html",
    "title": "Class AxoSequencerCommandView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoSequencerCommandView Inheritance object Microsoft.AspNetCore.Components.ComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><AxoSequencer> AxoSequencerView AxoSequencerCommandView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent System.IDisposable AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase Inherited Members AxoSequencerView.Steps AxoSequencerView.IsControllable AxoSequencerView.HasTaskControlButton AxoSequencerView.HasSettings AxoSequencerView.HasStepControls AxoSequencerView.HasStepDetails AxoSequencerView.OnInitialized() AxoSequencerView.BuildRenderTree(RenderTreeBuilder) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<AXOpen.Core.AxoSequencer>.Component AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.Dispose() AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ITwinObject, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ValueTypes.OnlinerBase, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinPrimitive) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, AXSharp.Connector.ValueTypes.ValueChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.PollingInterval AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: axopen_core_blazor.dll Syntax public class AxoSequencerCommandView : AxoSequencerView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IDisposable, IRenderableComplexComponentBase Constructors | Improve this Doc View Source AxoSequencerCommandView() Declaration public AxoSequencerCommandView() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent System.IDisposable AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase"
  },
  "api/AXOpen.Core.AxoSequencerContainer.html": {
    "href": "api/AXOpen.Core.AxoSequencerContainer.html",
    "title": "Class AxoSequencerContainer | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoSequencerContainer Inheritance object AxoObject AxoTask AxoSequencer AxoSequencerContainer Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject System.Windows.Input.ICommand IAxoTask IAxoTaskState Inherited Members AxoSequencer.SteppingMode AxoSequencer.SequenceMode AxoSequencer.CurrentOrder AxoSequencer.StepForwardCommand AxoSequencer.StepIn AxoSequencer.StepBackwardCommand AxoSequencer.OnlineToPlainAsync(AxoSequencer) AxoSequencer.PlainToOnlineAsync(AxoSequencer) AxoSequencer.ShadowToPlainAsync(AxoSequencer) AxoSequencer.PlainToShadowAsync(AxoSequencer) AxoTask.Restore() AxoTask.CanExecute(object) AxoTask.Execute(object) AxoTask.CanExecuteChanged AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails AxoTask.OnlineToPlainAsync(AxoTask) AxoTask.PlainToOnlineAsync(AxoTask) AxoTask.ShadowToPlainAsync(AxoTask) AxoTask.PlainToShadowAsync(AxoTask) AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class AxoSequencerContainer : AxoSequencer, ITwinObject, ITwinElement, IAxoObject, ICommand, IAxoTask, IAxoTaskState Constructors | Improve this Doc View Source AxoSequencerContainer(ITwinObject, string, string) Declaration public AxoSequencerContainer(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description AXSharp.Connector.ITwinObject parent string readableTail string symbolTail Methods | Improve this Doc View Source CreateEmptyPoco() Declaration public AxoSequencerContainer CreateEmptyPoco() Returns Type Description AxoSequencerContainer | Improve this Doc View Source OnlineToPlain<T>() Declaration public override Task<T> OnlineToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T Overrides AxoSequencer.OnlineToPlain<T>() | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<AxoSequencerContainer> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoSequencerContainer> | Improve this Doc View Source OnlineToPlainAsync(AxoSequencerContainer) Declaration protected Task<AxoSequencerContainer> OnlineToPlainAsync(AxoSequencerContainer plain) Parameters Type Name Description AxoSequencerContainer plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoSequencerContainer> | Improve this Doc View Source PlainToOnline<T>(T) Declaration public override Task PlainToOnline<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T Overrides AXOpen.Core.AxoSequencer.PlainToOnline<T>(T) | Improve this Doc View Source PlainToOnlineAsync(AxoSequencerContainer) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoSequencerContainer plain) Parameters Type Name Description AxoSequencerContainer plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadow<T>(T) Declaration public override Task PlainToShadow<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T Overrides AXOpen.Core.AxoSequencer.PlainToShadow<T>(T) | Improve this Doc View Source PlainToShadowAsync(AxoSequencerContainer) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoSequencerContainer plain) Parameters Type Name Description AxoSequencerContainer plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ShadowToPlain<T>() Declaration public override Task<T> ShadowToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T Overrides AxoSequencer.ShadowToPlain<T>() | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<AxoSequencerContainer> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoSequencerContainer> | Improve this Doc View Source ShadowToPlainAsync(AxoSequencerContainer) Declaration protected Task<AxoSequencerContainer> ShadowToPlainAsync(AxoSequencerContainer plain) Parameters Type Name Description AxoSequencerContainer plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoSequencerContainer> Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject System.Windows.Input.ICommand IAxoTask IAxoTaskState"
  },
  "api/AXOpen.Core.AxoSequencerStatusView.html": {
    "href": "api/AXOpen.Core.AxoSequencerStatusView.html",
    "title": "Class AxoSequencerStatusView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoSequencerStatusView Inheritance object Microsoft.AspNetCore.Components.ComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><AxoSequencer> AxoSequencerView AxoSequencerStatusView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent System.IDisposable AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase Inherited Members AxoSequencerView.Steps AxoSequencerView.IsControllable AxoSequencerView.HasTaskControlButton AxoSequencerView.HasSettings AxoSequencerView.HasStepControls AxoSequencerView.HasStepDetails AxoSequencerView.OnInitialized() AxoSequencerView.BuildRenderTree(RenderTreeBuilder) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<AXOpen.Core.AxoSequencer>.Component AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.Dispose() AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ITwinObject, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ValueTypes.OnlinerBase, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinPrimitive) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, AXSharp.Connector.ValueTypes.ValueChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.PollingInterval AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: axopen_core_blazor.dll Syntax public class AxoSequencerStatusView : AxoSequencerView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IDisposable, IRenderableComplexComponentBase Constructors | Improve this Doc View Source AxoSequencerStatusView() Declaration public AxoSequencerStatusView() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent System.IDisposable AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase"
  },
  "api/AXOpen.Core.AxoSequencerView.html": {
    "href": "api/AXOpen.Core.AxoSequencerView.html",
    "title": "Class AxoSequencerView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoSequencerView Inheritance object Microsoft.AspNetCore.Components.ComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><AxoSequencer> AxoSequencerView AxoSequencerCommandView AxoSequencerStatusView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent System.IDisposable AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase Inherited Members AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<AXOpen.Core.AxoSequencer>.Component AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.Dispose() AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ITwinObject, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ValueTypes.OnlinerBase, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinPrimitive) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, AXSharp.Connector.ValueTypes.ValueChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.PollingInterval AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: axopen_core_blazor.dll Syntax public class AxoSequencerView : RenderableComplexComponentBase<AxoSequencer>, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IDisposable, IRenderableComplexComponentBase Properties | Improve this Doc View Source HasSettings Declaration [Parameter] public bool HasSettings { get; set; } Property Value Type Description bool | Improve this Doc View Source HasStepControls Declaration [Parameter] public bool HasStepControls { get; set; } Property Value Type Description bool | Improve this Doc View Source HasStepDetails Declaration [Parameter] public bool HasStepDetails { get; set; } Property Value Type Description bool | Improve this Doc View Source HasTaskControlButton Declaration [Parameter] public bool HasTaskControlButton { get; set; } Property Value Type Description bool | Improve this Doc View Source IsControllable Declaration [Parameter] public bool IsControllable { get; set; } Property Value Type Description bool | Improve this Doc View Source Steps Declaration public IEnumerable<AxoStep?> Steps { get; } Property Value Type Description System.Collections.Generic.IEnumerable<T><AxoStep> Methods | Improve this Doc View Source BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters Type Name Description Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder Overrides Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) | Improve this Doc View Source OnInitialized() Declaration protected override void OnInitialized() Overrides Microsoft.AspNetCore.Components.ComponentBase.OnInitialized() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent System.IDisposable AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase"
  },
  "api/AXOpen.Core.AxoStep.html": {
    "href": "api/AXOpen.Core.AxoStep.html",
    "title": "Class AxoStep | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoStep Inheritance object AxoObject AxoTask AxoStep Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject System.Windows.Input.ICommand IAxoTask IAxoTaskState IAxoStep Inherited Members AxoTask.Restore() AxoTask.CanExecute(object) AxoTask.Execute(object) AxoTask.CanExecuteChanged AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails AxoTask.OnlineToPlainAsync(AxoTask) AxoTask.PlainToOnlineAsync(AxoTask) AxoTask.ShadowToPlainAsync(AxoTask) AxoTask.PlainToShadowAsync(AxoTask) AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class AxoStep : AxoTask, ITwinObject, ITwinElement, IAxoObject, ICommand, IAxoTask, IAxoTaskState, IAxoStep Constructors | Improve this Doc View Source AxoStep(ITwinObject, string, string) Declaration public AxoStep(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description AXSharp.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source Description Declaration public string Description { get; set; } Property Value Type Description string | Improve this Doc View Source IsActive Declaration public OnlinerBool IsActive { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerBool | Improve this Doc View Source IsEnabled Declaration public OnlinerBool IsEnabled { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerBool | Improve this Doc View Source Order Declaration [ReadOnly] public OnlinerULInt Order { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerULInt | Improve this Doc View Source StepDescription Declaration public OnlinerString StepDescription { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerString Methods | Improve this Doc View Source CreateEmptyPoco() Declaration public AxoStep CreateEmptyPoco() Returns Type Description AxoStep | Improve this Doc View Source OnlineToPlain<T>() Declaration public override Task<T> OnlineToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T Overrides AxoTask.OnlineToPlain<T>() | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<AxoStep> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoStep> | Improve this Doc View Source OnlineToPlainAsync(AxoStep) Declaration protected Task<AxoStep> OnlineToPlainAsync(AxoStep plain) Parameters Type Name Description AxoStep plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoStep> | Improve this Doc View Source PlainToOnline<T>(T) Declaration public override Task PlainToOnline<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T Overrides AXOpen.Core.AxoTask.PlainToOnline<T>(T) | Improve this Doc View Source PlainToOnlineAsync(AxoStep) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoStep plain) Parameters Type Name Description AxoStep plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadow<T>(T) Declaration public override Task PlainToShadow<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T Overrides AXOpen.Core.AxoTask.PlainToShadow<T>(T) | Improve this Doc View Source PlainToShadowAsync(AxoStep) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoStep plain) Parameters Type Name Description AxoStep plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ShadowToPlain<T>() Declaration public override Task<T> ShadowToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T Overrides AxoTask.ShadowToPlain<T>() | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<AxoStep> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoStep> | Improve this Doc View Source ShadowToPlainAsync(AxoStep) Declaration protected Task<AxoStep> ShadowToPlainAsync(AxoStep plain) Parameters Type Name Description AxoStep plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoStep> Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject System.Windows.Input.ICommand IAxoTask IAxoTaskState IAxoStep"
  },
  "api/AXOpen.Core.AxoStepCommandView.html": {
    "href": "api/AXOpen.Core.AxoStepCommandView.html",
    "title": "Class AxoStepCommandView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoStepCommandView Inheritance object Microsoft.AspNetCore.Components.ComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><AxoStep> AxoStepView AxoStepCommandView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent System.IDisposable AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase Inherited Members AxoStepView.OnInitialized() AxoStepView.IsControllable AxoStepView.BuildRenderTree(RenderTreeBuilder) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<AXOpen.Core.AxoStep>.Component AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.Dispose() AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ITwinObject, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ValueTypes.OnlinerBase, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinPrimitive) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, AXSharp.Connector.ValueTypes.ValueChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.PollingInterval AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: axopen_core_blazor.dll Syntax public class AxoStepCommandView : AxoStepView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IDisposable, IRenderableComplexComponentBase Constructors | Improve this Doc View Source AxoStepCommandView() Declaration public AxoStepCommandView() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent System.IDisposable AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase"
  },
  "api/AXOpen.Core.AxoStepStatusView.html": {
    "href": "api/AXOpen.Core.AxoStepStatusView.html",
    "title": "Class AxoStepStatusView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoStepStatusView Inheritance object Microsoft.AspNetCore.Components.ComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><AxoStep> AxoStepView AxoStepStatusView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent System.IDisposable AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase Inherited Members AxoStepView.OnInitialized() AxoStepView.IsControllable AxoStepView.BuildRenderTree(RenderTreeBuilder) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<AXOpen.Core.AxoStep>.Component AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.Dispose() AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ITwinObject, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ValueTypes.OnlinerBase, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinPrimitive) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, AXSharp.Connector.ValueTypes.ValueChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.PollingInterval AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: axopen_core_blazor.dll Syntax public class AxoStepStatusView : AxoStepView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IDisposable, IRenderableComplexComponentBase Constructors | Improve this Doc View Source AxoStepStatusView() Declaration public AxoStepStatusView() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent System.IDisposable AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase"
  },
  "api/AXOpen.Core.AxoStepView.html": {
    "href": "api/AXOpen.Core.AxoStepView.html",
    "title": "Class AxoStepView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoStepView Inheritance object Microsoft.AspNetCore.Components.ComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><AxoStep> AxoStepView AxoStepCommandView AxoStepStatusView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent System.IDisposable AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase Inherited Members AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<AXOpen.Core.AxoStep>.Component AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.Dispose() AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ITwinObject, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ValueTypes.OnlinerBase, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinPrimitive) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, AXSharp.Connector.ValueTypes.ValueChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.PollingInterval AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: axopen_core_blazor.dll Syntax public class AxoStepView : RenderableComplexComponentBase<AxoStep>, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IDisposable, IRenderableComplexComponentBase Properties | Improve this Doc View Source IsControllable Declaration [Parameter] public bool IsControllable { get; set; } Property Value Type Description bool Methods | Improve this Doc View Source BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters Type Name Description Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder Overrides Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) | Improve this Doc View Source OnInitialized() Declaration protected override void OnInitialized() Overrides Microsoft.AspNetCore.Components.ComponentBase.OnInitialized() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent System.IDisposable AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase"
  },
  "api/AXOpen.Core.AxoTask.html": {
    "href": "api/AXOpen.Core.AxoTask.html",
    "title": "Class AxoTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoTask Inheritance object AxoObject AxoTask AxoRemoteTask AxoSequencer AxoStep Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject System.Windows.Input.ICommand IAxoTask IAxoTaskState Inherited Members AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class AxoTask : AxoObject, ITwinObject, ITwinElement, IAxoObject, ICommand, IAxoTask, IAxoTaskState Constructors | Improve this Doc View Source AxoTask(ITwinObject, string, string) Declaration public AxoTask(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description AXSharp.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source Duration Declaration [ReadOnly] public OnlinerLTime Duration { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerLTime | Improve this Doc View Source ErrorDetails Declaration public OnlinerString ErrorDetails { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerString | Improve this Doc View Source IsDisabled Declaration public OnlinerBool IsDisabled { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerBool | Improve this Doc View Source RemoteAbort Declaration public OnlinerBool RemoteAbort { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerBool | Improve this Doc View Source RemoteInvoke Declaration public OnlinerBool RemoteInvoke { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerBool | Improve this Doc View Source RemoteRestore Declaration public OnlinerBool RemoteRestore { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerBool | Improve this Doc View Source RemoteResume Declaration public OnlinerBool RemoteResume { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerBool | Improve this Doc View Source StartSignature Declaration public OnlinerULInt StartSignature { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerULInt | Improve this Doc View Source StartTimeStamp Declaration [ReadOnly] public OnlinerLDateTime StartTimeStamp { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerLDateTime | Improve this Doc View Source Status Declaration [ReadOnly] [EnumeratorDiscriminator(typeof(eAxoTaskState))] public OnlinerInt Status { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerInt Methods | Improve this Doc View Source CanExecute(object) Declaration public bool CanExecute(object parameter = null) Parameters Type Name Description object parameter Returns Type Description bool | Improve this Doc View Source CreateEmptyPoco() Declaration public AxoTask CreateEmptyPoco() Returns Type Description AxoTask | Improve this Doc View Source Execute(object) Executes this task. Declaration public void Execute(object parameter = null) Parameters Type Name Description object parameter | Improve this Doc View Source OnlineToPlain<T>() Declaration public override Task<T> OnlineToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T Overrides AxoObject.OnlineToPlain<T>() | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<AxoTask> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoTask> | Improve this Doc View Source OnlineToPlainAsync(AxoTask) Declaration protected Task<AxoTask> OnlineToPlainAsync(AxoTask plain) Parameters Type Name Description AxoTask plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoTask> | Improve this Doc View Source PlainToOnline<T>(T) Declaration public override Task PlainToOnline<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T Overrides AXOpen.Core.AxoObject.PlainToOnline<T>(T) | Improve this Doc View Source PlainToOnlineAsync(AxoTask) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoTask plain) Parameters Type Name Description AxoTask plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadow<T>(T) Declaration public override Task PlainToShadow<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T Overrides AXOpen.Core.AxoObject.PlainToShadow<T>(T) | Improve this Doc View Source PlainToShadowAsync(AxoTask) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoTask plain) Parameters Type Name Description AxoTask plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source Restore() Restore this task to ready state. Declaration public Task<bool> Restore() Returns Type Description System.Threading.Tasks.Task<TResult><bool> Returns true when the task is restored. | Improve this Doc View Source ShadowToPlain<T>() Declaration public override Task<T> ShadowToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T Overrides AxoObject.ShadowToPlain<T>() | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<AxoTask> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoTask> | Improve this Doc View Source ShadowToPlainAsync(AxoTask) Declaration protected Task<AxoTask> ShadowToPlainAsync(AxoTask plain) Parameters Type Name Description AxoTask plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoTask> Events | Improve this Doc View Source CanExecuteChanged Declaration public event EventHandler CanExecuteChanged Event Type Type Description System.EventHandler Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject System.Windows.Input.ICommand IAxoTask IAxoTaskState"
  },
  "api/AXOpen.Core.AxoTaskCommandView.html": {
    "href": "api/AXOpen.Core.AxoTaskCommandView.html",
    "title": "Class AxoTaskCommandView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoTaskCommandView Inheritance object Microsoft.AspNetCore.Components.ComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><AxoTask> AxoTaskView AxoTaskCommandView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable Inherited Members AxoTaskView.OnInitialized() AxoTaskView.Disable AxoTaskView.HideRestoreButton AxoTaskView.IsDisabled AxoTaskView.Description AxoTaskView.BuildRenderTree(RenderTreeBuilder) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<AXOpen.Core.AxoTask>.Component AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.Dispose() AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ITwinObject, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ValueTypes.OnlinerBase, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinPrimitive) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, AXSharp.Connector.ValueTypes.ValueChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.PollingInterval AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: axopen_core_blazor.dll Syntax public class AxoTaskCommandView : AxoTaskView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Constructors | Improve this Doc View Source AxoTaskCommandView() Declaration public AxoTaskCommandView() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable"
  },
  "api/AXOpen.Core.AxoTaskStatusView.html": {
    "href": "api/AXOpen.Core.AxoTaskStatusView.html",
    "title": "Class AxoTaskStatusView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoTaskStatusView Inheritance object Microsoft.AspNetCore.Components.ComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><AxoTask> AxoTaskView AxoTaskStatusView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable Inherited Members AxoTaskView.OnInitialized() AxoTaskView.Disable AxoTaskView.HideRestoreButton AxoTaskView.IsDisabled AxoTaskView.Description AxoTaskView.BuildRenderTree(RenderTreeBuilder) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<AXOpen.Core.AxoTask>.Component AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.Dispose() AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ITwinObject, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ValueTypes.OnlinerBase, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinPrimitive) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, AXSharp.Connector.ValueTypes.ValueChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.PollingInterval AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: axopen_core_blazor.dll Syntax public class AxoTaskStatusView : AxoTaskView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Constructors | Improve this Doc View Source AxoTaskStatusView() Declaration public AxoTaskStatusView() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable"
  },
  "api/AXOpen.Core.AxoTaskView.html": {
    "href": "api/AXOpen.Core.AxoTaskView.html",
    "title": "Class AxoTaskView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoTaskView Inheritance object Microsoft.AspNetCore.Components.ComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><AxoTask> AxoTaskView AxoTaskCommandView AxoTaskStatusView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable Inherited Members AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<AXOpen.Core.AxoTask>.Component AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.Dispose() AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ITwinObject, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ValueTypes.OnlinerBase, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinPrimitive) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, AXSharp.Connector.ValueTypes.ValueChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.PollingInterval AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: axopen_core_blazor.dll Syntax public class AxoTaskView : RenderableComplexComponentBase<AxoTask>, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Properties | Improve this Doc View Source Description Declaration public string Description { get; } Property Value Type Description string | Improve this Doc View Source Disable Declaration [Parameter] public bool Disable { get; set; } Property Value Type Description bool | Improve this Doc View Source HideRestoreButton Declaration [Parameter] public bool HideRestoreButton { get; set; } Property Value Type Description bool | Improve this Doc View Source IsDisabled Declaration public bool IsDisabled { get; } Property Value Type Description bool Methods | Improve this Doc View Source BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters Type Name Description Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder Overrides Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) | Improve this Doc View Source OnInitialized() Declaration protected override void OnInitialized() Overrides Microsoft.AspNetCore.Components.ComponentBase.OnInitialized() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable"
  },
  "api/AXOpen.Core.AxoToggleTask.html": {
    "href": "api/AXOpen.Core.AxoToggleTask.html",
    "title": "Class AxoToggleTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoToggleTask Inheritance object AxoObject AxoToggleTask Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject IAxoToggleTask Inherited Members AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class AxoToggleTask : AxoObject, ITwinObject, ITwinElement, IAxoObject, IAxoToggleTask Constructors | Improve this Doc View Source AxoToggleTask(ITwinObject, string, string) Declaration public AxoToggleTask(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description AXSharp.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source AttributeStateOffDesc Declaration public string AttributeStateOffDesc { get; set; } Property Value Type Description string | Improve this Doc View Source AttributeStateOnDesc Declaration public string AttributeStateOnDesc { get; set; } Property Value Type Description string | Improve this Doc View Source IsDisabled Declaration [ReadOnly] public OnlinerBool IsDisabled { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerBool | Improve this Doc View Source RemoteToggle Declaration public OnlinerBool RemoteToggle { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerBool | Improve this Doc View Source State Declaration [ReadOnly] public OnlinerBool State { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerBool Methods | Improve this Doc View Source CreateEmptyPoco() Declaration public AxoToggleTask CreateEmptyPoco() Returns Type Description AxoToggleTask | Improve this Doc View Source OnlineToPlain<T>() Declaration public override Task<T> OnlineToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T Overrides AxoObject.OnlineToPlain<T>() | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<AxoToggleTask> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoToggleTask> | Improve this Doc View Source OnlineToPlainAsync(AxoToggleTask) Declaration protected Task<AxoToggleTask> OnlineToPlainAsync(AxoToggleTask plain) Parameters Type Name Description AxoToggleTask plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoToggleTask> | Improve this Doc View Source PlainToOnline<T>(T) Declaration public override Task PlainToOnline<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T Overrides AXOpen.Core.AxoObject.PlainToOnline<T>(T) | Improve this Doc View Source PlainToOnlineAsync(AxoToggleTask) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoToggleTask plain) Parameters Type Name Description AxoToggleTask plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadow<T>(T) Declaration public override Task PlainToShadow<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T Overrides AXOpen.Core.AxoObject.PlainToShadow<T>(T) | Improve this Doc View Source PlainToShadowAsync(AxoToggleTask) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoToggleTask plain) Parameters Type Name Description AxoToggleTask plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ShadowToPlain<T>() Declaration public override Task<T> ShadowToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T Overrides AxoObject.ShadowToPlain<T>() | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<AxoToggleTask> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoToggleTask> | Improve this Doc View Source ShadowToPlainAsync(AxoToggleTask) Declaration protected Task<AxoToggleTask> ShadowToPlainAsync(AxoToggleTask plain) Parameters Type Name Description AxoToggleTask plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoToggleTask> Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject IAxoToggleTask"
  },
  "api/AXOpen.Core.AxoToggleTaskCommandView.html": {
    "href": "api/AXOpen.Core.AxoToggleTaskCommandView.html",
    "title": "Class AxoToggleTaskCommandView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoToggleTaskCommandView Inheritance object Microsoft.AspNetCore.Components.ComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><AxoToggleTask> AxoToggleTaskView AxoToggleTaskCommandView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable Inherited Members AxoToggleTaskView.OnInitialized() AxoToggleTaskView.Dispose() AxoToggleTaskView.Disable AxoToggleTaskView.IsDisabled AxoToggleTaskView.Description AxoToggleTaskView.BuildRenderTree(RenderTreeBuilder) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<AXOpen.Core.AxoToggleTask>.Component AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ITwinObject, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ValueTypes.OnlinerBase, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinPrimitive) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, AXSharp.Connector.ValueTypes.ValueChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.PollingInterval AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: axopen_core_blazor.dll Syntax public class AxoToggleTaskCommandView : AxoToggleTaskView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Constructors | Improve this Doc View Source AxoToggleTaskCommandView() Declaration public AxoToggleTaskCommandView() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable"
  },
  "api/AXOpen.Core.AxoToggleTaskStatusView.html": {
    "href": "api/AXOpen.Core.AxoToggleTaskStatusView.html",
    "title": "Class AxoToggleTaskStatusView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoToggleTaskStatusView Inheritance object Microsoft.AspNetCore.Components.ComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><AxoToggleTask> AxoToggleTaskView AxoToggleTaskStatusView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable Inherited Members AxoToggleTaskView.OnInitialized() AxoToggleTaskView.Dispose() AxoToggleTaskView.Disable AxoToggleTaskView.IsDisabled AxoToggleTaskView.Description AxoToggleTaskView.BuildRenderTree(RenderTreeBuilder) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<AXOpen.Core.AxoToggleTask>.Component AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ITwinObject, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ValueTypes.OnlinerBase, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinPrimitive) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, AXSharp.Connector.ValueTypes.ValueChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.PollingInterval AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: axopen_core_blazor.dll Syntax public class AxoToggleTaskStatusView : AxoToggleTaskView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Constructors | Improve this Doc View Source AxoToggleTaskStatusView() Declaration public AxoToggleTaskStatusView() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable"
  },
  "api/AXOpen.Core.AxoToggleTaskView.html": {
    "href": "api/AXOpen.Core.AxoToggleTaskView.html",
    "title": "Class AxoToggleTaskView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoToggleTaskView Inheritance object Microsoft.AspNetCore.Components.ComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><AxoToggleTask> AxoToggleTaskView AxoToggleTaskCommandView AxoToggleTaskStatusView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable Inherited Members AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<AXOpen.Core.AxoToggleTask>.Component AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ITwinObject, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ValueTypes.OnlinerBase, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinPrimitive) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, AXSharp.Connector.ValueTypes.ValueChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.PollingInterval AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: axopen_core_blazor.dll Syntax public class AxoToggleTaskView : RenderableComplexComponentBase<AxoToggleTask>, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Properties | Improve this Doc View Source Description Declaration public string Description { get; } Property Value Type Description string | Improve this Doc View Source Disable Declaration [Parameter] public bool Disable { get; set; } Property Value Type Description bool | Improve this Doc View Source IsDisabled Declaration public bool IsDisabled { get; } Property Value Type Description bool Methods | Improve this Doc View Source BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters Type Name Description Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder Overrides Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source OnInitialized() Declaration protected override void OnInitialized() Overrides Microsoft.AspNetCore.Components.ComponentBase.OnInitialized() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable"
  },
  "api/AXOpen.Core.Blazor._Imports.html": {
    "href": "api/AXOpen.Core.Blazor._Imports.html",
    "title": "Class _Imports | System.Dynamic.ExpandoObject",
    "keywords": "Class _Imports Inheritance object Microsoft.AspNetCore.Components.ComponentBase _Imports Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender Inherited Members Microsoft.AspNetCore.Components.ComponentBase.OnInitialized() Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core.Blazor Assembly: axopen_core_blazor.dll Syntax public class _Imports : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender Methods | Improve this Doc View Source BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters Type Name Description Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder Overrides Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender"
  },
  "api/AXOpen.Core.Blazor.html": {
    "href": "api/AXOpen.Core.Blazor.html",
    "title": "Namespace AXOpen.Core.Blazor | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen.Core.Blazor Classes _Imports"
  },
  "api/AXOpen.Core.blazor.Toaster.html": {
    "href": "api/AXOpen.Core.blazor.Toaster.html",
    "title": "Namespace AXOpen.Core.blazor.Toaster | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen.Core.blazor.Toaster Classes Toast Toaster ToastService"
  },
  "api/AXOpen.Core.blazor.Toaster.Toast.html": {
    "href": "api/AXOpen.Core.blazor.Toaster.Toast.html",
    "title": "Class Toast | System.Dynamic.ExpandoObject",
    "keywords": "Class Toast Inheritance object Toast Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core.blazor.Toaster Assembly: axopen_core_blazor.dll Syntax public class Toast Constructors | Improve this Doc View Source Toast(string, string, string, int) Declaration public Toast(string type, string title, string message, int time) Parameters Type Name Description string type string title string message int time Fields | Improve this Doc View Source Id Declaration public Guid Id Field Value Type Description System.Guid | Improve this Doc View Source Posted Declaration public DateTimeOffset Posted Field Value Type Description System.DateTimeOffset Properties | Improve this Doc View Source Message Declaration public string Message { get; set; } Property Value Type Description string | Improve this Doc View Source TimeToBurn Declaration public DateTimeOffset TimeToBurn { get; set; } Property Value Type Description System.DateTimeOffset | Improve this Doc View Source Title Declaration public string Title { get; set; } Property Value Type Description string | Improve this Doc View Source Type Declaration public string Type { get; set; } Property Value Type Description string"
  },
  "api/AXOpen.Core.blazor.Toaster.Toaster.html": {
    "href": "api/AXOpen.Core.blazor.Toaster.Toaster.html",
    "title": "Class Toaster | System.Dynamic.ExpandoObject",
    "keywords": "Class Toaster Inheritance object Microsoft.AspNetCore.Components.ComponentBase Toaster Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender System.IDisposable Inherited Members Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core.blazor.Toaster Assembly: axopen_core_blazor.dll Syntax public class Toaster : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender, IDisposable Methods | Improve this Doc View Source BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters Type Name Description Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder Overrides Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source OnInitialized() Declaration protected override void OnInitialized() Overrides Microsoft.AspNetCore.Components.ComponentBase.OnInitialized() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender System.IDisposable"
  },
  "api/AXOpen.Core.blazor.Toaster.ToastService.html": {
    "href": "api/AXOpen.Core.blazor.Toaster.ToastService.html",
    "title": "Class ToastService | System.Dynamic.ExpandoObject",
    "keywords": "Class ToastService Inheritance object ToastService Implements System.IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core.blazor.Toaster Assembly: axopen_core_blazor.dll Syntax public class ToastService : IDisposable Constructors | Improve this Doc View Source ToastService() Declaration public ToastService() Methods | Improve this Doc View Source AddToast(Toast) Declaration public void AddToast(Toast toast) Parameters Type Name Description Toast toast | Improve this Doc View Source AddToast(string, string, string, int) Declaration public void AddToast(string type, string title, string message, int time) Parameters Type Name Description string type string title string message int time | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source GetToasts() Declaration public List<Toast> GetToasts() Returns Type Description System.Collections.Generic.List<T><Toast> | Improve this Doc View Source RemoveAllToast() Declaration public void RemoveAllToast() | Improve this Doc View Source RemoveToast(Toast) Declaration public void RemoveToast(Toast toast) Parameters Type Name Description Toast toast Events | Improve this Doc View Source ToasterChanged Declaration public event EventHandler? ToasterChanged Event Type Type Description System.EventHandler Implements System.IDisposable"
  },
  "api/AXOpen.Core.ComponentDetailsAttribute.html": {
    "href": "api/AXOpen.Core.ComponentDetailsAttribute.html",
    "title": "Class ComponentDetailsAttribute | System.Dynamic.ExpandoObject",
    "keywords": "Class ComponentDetailsAttribute Inheritance object System.Attribute ComponentDetailsAttribute Inherited Members System.Attribute.Equals(object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, bool) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, bool) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, bool) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, bool) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, bool) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, bool) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, bool) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, bool) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, bool) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, bool) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, bool) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, bool) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, bool) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, bool) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, bool) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, bool) System.Attribute.Match(object) System.Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class ComponentDetailsAttribute : Attribute Constructors | Improve this Doc View Source ComponentDetailsAttribute() Declaration public ComponentDetailsAttribute() | Improve this Doc View Source ComponentDetailsAttribute(string) Declaration public ComponentDetailsAttribute(string tabName) Parameters Type Name Description string tabName Properties | Improve this Doc View Source TabName Declaration public string TabName { get; } Property Value Type Description string"
  },
  "api/AXOpen.Core.ComponentGroupContext.html": {
    "href": "api/AXOpen.Core.ComponentGroupContext.html",
    "title": "Class ComponentGroupContext | System.Dynamic.ExpandoObject",
    "keywords": "Class ComponentGroupContext Inheritance object ComponentGroupContext Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: axopen_core_blazor.dll Syntax public class ComponentGroupContext : ITwinObject, ITwinElement Constructors | Improve this Doc View Source ComponentGroupContext(ITwinObject, IList<ITwinElement>, string) Declaration public ComponentGroupContext(ITwinObject parent, IList<ITwinElement> kids, string tabName) Parameters Type Name Description AXSharp.Connector.ITwinObject parent System.Collections.Generic.IList<T><AXSharp.Connector.ITwinElement> kids string tabName | Improve this Doc View Source ComponentGroupContext(ITwinObject, IList<ITwinElement>) Declaration public ComponentGroupContext(ITwinObject parent, IList<ITwinElement> kids) Parameters Type Name Description AXSharp.Connector.ITwinObject parent System.Collections.Generic.IList<T><AXSharp.Connector.ITwinElement> kids Properties | Improve this Doc View Source AttributeName Declaration public string AttributeName { get; } Property Value Type Description string | Improve this Doc View Source HumanReadable Declaration public string HumanReadable { get; set; } Property Value Type Description string | Improve this Doc View Source Interpreter Declaration public Translator Interpreter { get; } Property Value Type Description AXSharp.Connector.Localizations.Translator | Improve this Doc View Source Symbol Declaration public string Symbol { get; } Property Value Type Description string | Improve this Doc View Source TabName Declaration public string TabName { get; set; } Property Value Type Description string Methods | Improve this Doc View Source AddChild(ITwinObject) Declaration public void AddChild(ITwinObject twinObject) Parameters Type Name Description AXSharp.Connector.ITwinObject twinObject | Improve this Doc View Source AddKid(ITwinElement) Declaration public void AddKid(ITwinElement kid) Parameters Type Name Description AXSharp.Connector.ITwinElement kid | Improve this Doc View Source AddValueTag(ITwinPrimitive) Declaration public void AddValueTag(ITwinPrimitive twinPrimitive) Parameters Type Name Description AXSharp.Connector.ITwinPrimitive twinPrimitive | Improve this Doc View Source GetChildren() Declaration public IEnumerable<ITwinObject> GetChildren() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinObject> | Improve this Doc View Source GetConnector() Declaration public Connector GetConnector() Returns Type Description AXSharp.Connector.Connector | Improve this Doc View Source GetKids() Declaration public IEnumerable<ITwinElement> GetKids() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinElement> | Improve this Doc View Source GetParent() Declaration public ITwinObject GetParent() Returns Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source GetSymbolTail() Declaration public string GetSymbolTail() Returns Type Description string | Improve this Doc View Source GetValueTags() Declaration public IEnumerable<ITwinPrimitive?> GetValueTags() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive> | Improve this Doc View Source OnlineToPlain<T>() Declaration public Task<T> OnlineToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T | Improve this Doc View Source PlainToOnline<T>(T) Declaration public Task PlainToOnline<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source PlainToShadow<T>(T) Declaration public Task PlainToShadow<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ShadowToPlain<T>() Declaration public Task<T> ShadowToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement"
  },
  "api/AXOpen.Core.ComponentHeaderAttribute.html": {
    "href": "api/AXOpen.Core.ComponentHeaderAttribute.html",
    "title": "Class ComponentHeaderAttribute | System.Dynamic.ExpandoObject",
    "keywords": "Class ComponentHeaderAttribute Inheritance object System.Attribute ComponentHeaderAttribute Inherited Members System.Attribute.Equals(object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, bool) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, bool) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, bool) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, bool) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, bool) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, bool) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, bool) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, bool) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, bool) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, bool) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, bool) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, bool) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, bool) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, bool) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, bool) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, bool) System.Attribute.Match(object) System.Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class ComponentHeaderAttribute : Attribute Constructors | Improve this Doc View Source ComponentHeaderAttribute() Declaration public ComponentHeaderAttribute() | Improve this Doc View Source ComponentHeaderAttribute(string) Declaration public ComponentHeaderAttribute(string tabName) Parameters Type Name Description string tabName Properties | Improve this Doc View Source TabName Declaration public string TabName { get; } Property Value Type Description string"
  },
  "api/AXOpen.Core.eAxoSequenceMode.html": {
    "href": "api/AXOpen.Core.eAxoSequenceMode.html",
    "title": "Enum eAxoSequenceMode | System.Dynamic.ExpandoObject",
    "keywords": "Enum eAxoSequenceMode Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public enum eAxoSequenceMode : short Fields Name Description Cyclic None RunOnce"
  },
  "api/AXOpen.Core.eAxoSteppingMode.html": {
    "href": "api/AXOpen.Core.eAxoSteppingMode.html",
    "title": "Enum eAxoSteppingMode | System.Dynamic.ExpandoObject",
    "keywords": "Enum eAxoSteppingMode Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public enum eAxoSteppingMode : short Fields Name Description Continous None StepByStep"
  },
  "api/AXOpen.Core.eAxoTaskState.html": {
    "href": "api/AXOpen.Core.eAxoTaskState.html",
    "title": "Enum eAxoTaskState | System.Dynamic.ExpandoObject",
    "keywords": "Enum eAxoTaskState Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public enum eAxoTaskState : short Fields Name Description Aborted Busy Disabled Done Error Kicking Ready"
  },
  "api/AXOpen.Core.html": {
    "href": "api/AXOpen.Core.html",
    "title": "Namespace AXOpen.Core | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen.Core Classes _NULL_CONTEXT _NULL_OBJECT _NULL_RTC AxoComponent AxoComponentCommandView AxoComponentStatusView AxoComponentView AxoContext AxoContextEnvironment AxoMomentaryTask AxoMomentaryTaskCommandView AxoMomentaryTaskStatusView AxoMomentaryTaskView AxoObject AxoRemoteTask AxoSequencer AxoSequencerCommandView AxoSequencerContainer AxoSequencerStatusView AxoSequencerView AxoStep AxoStepCommandView AxoStepStatusView AxoStepView AxoTask AxoTaskCommandView AxoTaskStatusView AxoTaskView AxoToggleTask AxoToggleTaskCommandView AxoToggleTaskStatusView AxoToggleTaskView ComponentDetailsAttribute ComponentGroupContext ComponentHeaderAttribute MultipleRemoteCallInitializationException ToastMessage Interfaces IAxoComponent IAxoContext IAxoContextEnvironment IAxoCoordinator IAxoManuallyControllable IAxoMomentaryTask IAxoObject IAxoStep IAxoTask IAxoTaskState IAxoToggleTask Enums AxoCoordinatorStates eAxoSequenceMode eAxoSteppingMode eAxoTaskState"
  },
  "api/AXOpen.Core.IAxoComponent.html": {
    "href": "api/AXOpen.Core.IAxoComponent.html",
    "title": "Interface IAxoComponent | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoComponent Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoComponent"
  },
  "api/AXOpen.Core.IAxoContext.html": {
    "href": "api/AXOpen.Core.IAxoContext.html",
    "title": "Interface IAxoContext | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoContext Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoContext"
  },
  "api/AXOpen.Core.IAxoContextEnvironment.html": {
    "href": "api/AXOpen.Core.IAxoContextEnvironment.html",
    "title": "Interface IAxoContextEnvironment | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoContextEnvironment Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoContextEnvironment"
  },
  "api/AXOpen.Core.IAxoCoordinator.html": {
    "href": "api/AXOpen.Core.IAxoCoordinator.html",
    "title": "Interface IAxoCoordinator | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoCoordinator Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoCoordinator"
  },
  "api/AXOpen.Core.IAxoManuallyControllable.html": {
    "href": "api/AXOpen.Core.IAxoManuallyControllable.html",
    "title": "Interface IAxoManuallyControllable | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoManuallyControllable Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoManuallyControllable"
  },
  "api/AXOpen.Core.IAxoMomentaryTask.html": {
    "href": "api/AXOpen.Core.IAxoMomentaryTask.html",
    "title": "Interface IAxoMomentaryTask | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoMomentaryTask Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoMomentaryTask"
  },
  "api/AXOpen.Core.IAxoObject.html": {
    "href": "api/AXOpen.Core.IAxoObject.html",
    "title": "Interface IAxoObject | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoObject Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoObject"
  },
  "api/AXOpen.Core.IAxoStep.html": {
    "href": "api/AXOpen.Core.IAxoStep.html",
    "title": "Interface IAxoStep | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoStep Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoStep"
  },
  "api/AXOpen.Core.IAxoTask.html": {
    "href": "api/AXOpen.Core.IAxoTask.html",
    "title": "Interface IAxoTask | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoTask Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoTask"
  },
  "api/AXOpen.Core.IAxoTaskState.html": {
    "href": "api/AXOpen.Core.IAxoTaskState.html",
    "title": "Interface IAxoTaskState | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoTaskState Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoTaskState"
  },
  "api/AXOpen.Core.IAxoToggleTask.html": {
    "href": "api/AXOpen.Core.IAxoToggleTask.html",
    "title": "Interface IAxoToggleTask | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoToggleTask Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoToggleTask"
  },
  "api/AXOpen.Core.MultipleRemoteCallInitializationException.html": {
    "href": "api/AXOpen.Core.MultipleRemoteCallInitializationException.html",
    "title": "Class MultipleRemoteCallInitializationException | System.Dynamic.ExpandoObject",
    "keywords": "Class MultipleRemoteCallInitializationException Inheritance object System.Exception MultipleRemoteCallInitializationException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class MultipleRemoteCallInitializationException : Exception, ISerializable Constructors | Improve this Doc View Source MultipleRemoteCallInitializationException() Declaration public MultipleRemoteCallInitializationException() | Improve this Doc View Source MultipleRemoteCallInitializationException(SerializationInfo, StreamingContext) Initializes a new instance of the MultipleRemoteCallInitializationException class with serialized data. Declaration protected MultipleRemoteCallInitializationException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. Exceptions Type Condition System.ArgumentNullException The info parameter is null. System.Runtime.Serialization.SerializationException The class name is null or System.Exception.HResult is zero (0). | Improve this Doc View Source MultipleRemoteCallInitializationException(string, Exception) Initializes a new instance of the MultipleRemoteCallInitializationException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public MultipleRemoteCallInitializationException(string message, Exception innerException) Parameters Type Name Description string message The error message that explains the reason for the exception. System.Exception innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. | Improve this Doc View Source MultipleRemoteCallInitializationException(string) Initializes a new instance of the MultipleRemoteCallInitializationException class with a specified error message. Declaration public MultipleRemoteCallInitializationException(string message) Parameters Type Name Description string message The message that describes the error. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/AXOpen.Core.Resources.html": {
    "href": "api/AXOpen.Core.Resources.html",
    "title": "Namespace AXOpen.Core.Resources | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen.Core.Resources Classes PlcStringResources A strongly-typed resource class, for looking up localized strings, etc."
  },
  "api/AXOpen.Core.Resources.PlcStringResources.html": {
    "href": "api/AXOpen.Core.Resources.PlcStringResources.html",
    "title": "Class PlcStringResources | System.Dynamic.ExpandoObject",
    "keywords": "Class PlcStringResources A strongly-typed resource class, for looking up localized strings, etc. Inheritance object PlcStringResources Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core.Resources Assembly: ix_ax_axopen_core.dll Syntax public class PlcStringResources Properties | Improve this Doc View Source Command_state Looks up a localized string similar to Command state. Declaration public static string Command_state { get; } Property Value Type Description string | Improve this Doc View Source Culture Overrides the current thread's CurrentUICulture property for all resource lookups using this strongly typed resource class. Declaration public static CultureInfo Culture { get; set; } Property Value Type Description System.Globalization.CultureInfo | Improve this Doc View Source ResourceManager Returns the cached ResourceManager instance used by this class. Declaration public static ResourceManager ResourceManager { get; } Property Value Type Description System.Resources.ResourceManager | Improve this Doc View Source Run_step Looks up a localized string similar to Run step. Declaration public static string Run_step { get; } Property Value Type Description string | Improve this Doc View Source Sequence_mode Looks up a localized string similar to Sequence mode. Declaration public static string Sequence_mode { get; } Property Value Type Description string | Improve this Doc View Source Stepping_mode Looks up a localized string similar to Stepping mode. Declaration public static string Stepping_mode { get; } Property Value Type Description string"
  },
  "api/AXOpen.Core.ToastMessage.html": {
    "href": "api/AXOpen.Core.ToastMessage.html",
    "title": "Class ToastMessage | System.Dynamic.ExpandoObject",
    "keywords": "Class ToastMessage Inheritance object CommunityToolkit.Mvvm.Messaging.Messages.ValueChangedMessage<T><Toast> ToastMessage Inherited Members CommunityToolkit.Mvvm.Messaging.Messages.ValueChangedMessage<AXOpen.Core.blazor.Toaster.Toast>.Value object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: axopen_core_blazor.dll Syntax public class ToastMessage : ValueChangedMessage<Toast> Constructors | Improve this Doc View Source ToastMessage(Toast) Declaration public ToastMessage(Toast toast) Parameters Type Name Description Toast toast"
  },
  "api/AXOpen.Data.AxoCompoundRepository.html": {
    "href": "api/AXOpen.Data.AxoCompoundRepository.html",
    "title": "Class AxoCompoundRepository | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoCompoundRepository Inheritance object AxoCompoundRepository Implements AXOpen.Base.Data.IRepository Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Data Assembly: ix_ax_axopen_data.dll Syntax public class AxoCompoundRepository : IRepository Constructors | Improve this Doc View Source AxoCompoundRepository(IEnumerable<IAxoDataExchange>) Declaration public AxoCompoundRepository(IEnumerable<IAxoDataExchange> dataFragments) Parameters Type Name Description System.Collections.Generic.IEnumerable<T><IAxoDataExchange> dataFragments Properties | Improve this Doc View Source Count Declaration public long Count { get; } Property Value Type Description long Methods | Improve this Doc View Source Create(string, object) Declaration public void Create(string identifier, object data) Parameters Type Name Description string identifier object data | Improve this Doc View Source Delete(string) Declaration public void Delete(string identifier) Parameters Type Name Description string identifier | Improve this Doc View Source Exists(string) Declaration public bool Exists(string identifier) Parameters Type Name Description string identifier Returns Type Description bool | Improve this Doc View Source FilteredCount(string, eSearchMode) Declaration public long FilteredCount(string id, eSearchMode searchMode = eSearchMode.Exact) Parameters Type Name Description string id AXOpen.Base.Data.eSearchMode searchMode Returns Type Description long | Improve this Doc View Source GetRecords(string, int, int, eSearchMode) Declaration public IEnumerable<IBrowsableDataObject> GetRecords(string identifier, int limit, int skip, eSearchMode searchMode) Parameters Type Name Description string identifier int limit int skip AXOpen.Base.Data.eSearchMode searchMode Returns Type Description System.Collections.Generic.IEnumerable<T><AXOpen.Base.Data.IBrowsableDataObject> | Improve this Doc View Source GetRecords(string) Declaration public IEnumerable<IBrowsableDataObject> GetRecords(string identifier) Parameters Type Name Description string identifier Returns Type Description System.Collections.Generic.IEnumerable<T><AXOpen.Base.Data.IBrowsableDataObject> | Improve this Doc View Source Read(string) Declaration public dynamic Read(string identifier) Parameters Type Name Description string identifier Returns Type Description dynamic | Improve this Doc View Source Update(string, object) Declaration public void Update(string identifier, object data) Parameters Type Name Description string identifier object data Implements AXOpen.Base.Data.IRepository"
  },
  "api/AXOpen.Data.AxoDataCrudTask.html": {
    "href": "api/AXOpen.Data.AxoDataCrudTask.html",
    "title": "Class AxoDataCrudTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataCrudTask Inheritance object AxoObject AxoTask AxoRemoteTask AxoDataExchangeTask AxoDataCrudTask Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject System.Windows.Input.ICommand IAxoTask IAxoTaskState Inherited Members AxoDataExchangeTask.DataEntityIdentifier AxoDataExchangeTask.OnlineToPlainAsync(AxoDataExchangeTask) AxoDataExchangeTask.PlainToOnlineAsync(AxoDataExchangeTask) AxoDataExchangeTask.ShadowToPlainAsync(AxoDataExchangeTask) AxoDataExchangeTask.PlainToShadowAsync(AxoDataExchangeTask) AxoRemoteTask.PropertyChanged AxoRemoteTask.Initialize(Action) AxoRemoteTask.Initialize(Func<bool>) AxoRemoteTask.InitializeExclusively(Action) AxoRemoteTask.InitializeExclusively(Func<bool>) AxoRemoteTask.DeInitialize() AxoRemoteTask.RemoteExecutionException AxoRemoteTask.RemoteExceptionDetails AxoRemoteTask.ResetExecution() AxoRemoteTask.DoneSignature AxoRemoteTask.IsInitialized AxoRemoteTask.HasRemoteException AxoRemoteTask.IsBeingCalledCounter AxoRemoteTask.OnlineToPlainAsync(AxoRemoteTask) AxoRemoteTask.PlainToOnlineAsync(AxoRemoteTask) AxoRemoteTask.ShadowToPlainAsync(AxoRemoteTask) AxoRemoteTask.PlainToShadowAsync(AxoRemoteTask) AxoTask.Restore() AxoTask.CanExecute(object) AxoTask.Execute(object) AxoTask.CanExecuteChanged AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails AxoTask.OnlineToPlainAsync(AxoTask) AxoTask.PlainToOnlineAsync(AxoTask) AxoTask.ShadowToPlainAsync(AxoTask) AxoTask.PlainToShadowAsync(AxoTask) AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Data Assembly: ix_ax_axopen_data.dll Syntax public class AxoDataCrudTask : AxoDataExchangeTask, ITwinObject, ITwinElement, IAxoObject, ICommand, IAxoTask, IAxoTaskState Constructors | Improve this Doc View Source AxoDataCrudTask(ITwinObject, string, string) Declaration public AxoDataCrudTask(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description AXSharp.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source CrudOperation Declaration [EnumeratorDiscriminator(typeof(eCrudOperation))] public OnlinerInt CrudOperation { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerInt Methods | Improve this Doc View Source CreateEmptyPoco() Declaration public AxoDataCrudTask CreateEmptyPoco() Returns Type Description AxoDataCrudTask | Improve this Doc View Source OnlineToPlain<T>() Declaration public override Task<T> OnlineToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T Overrides AxoDataExchangeTask.OnlineToPlain<T>() | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<AxoDataCrudTask> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoDataCrudTask> | Improve this Doc View Source OnlineToPlainAsync(AxoDataCrudTask) Declaration protected Task<AxoDataCrudTask> OnlineToPlainAsync(AxoDataCrudTask plain) Parameters Type Name Description AxoDataCrudTask plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoDataCrudTask> | Improve this Doc View Source PlainToOnline<T>(T) Declaration public override Task PlainToOnline<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T Overrides AXOpen.Data.AxoDataExchangeTask.PlainToOnline<T>(T) | Improve this Doc View Source PlainToOnlineAsync(AxoDataCrudTask) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoDataCrudTask plain) Parameters Type Name Description AxoDataCrudTask plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadow<T>(T) Declaration public override Task PlainToShadow<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T Overrides AXOpen.Data.AxoDataExchangeTask.PlainToShadow<T>(T) | Improve this Doc View Source PlainToShadowAsync(AxoDataCrudTask) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoDataCrudTask plain) Parameters Type Name Description AxoDataCrudTask plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ShadowToPlain<T>() Declaration public override Task<T> ShadowToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T Overrides AxoDataExchangeTask.ShadowToPlain<T>() | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<AxoDataCrudTask> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoDataCrudTask> | Improve this Doc View Source ShadowToPlainAsync(AxoDataCrudTask) Declaration protected Task<AxoDataCrudTask> ShadowToPlainAsync(AxoDataCrudTask plain) Parameters Type Name Description AxoDataCrudTask plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoDataCrudTask> Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject System.Windows.Input.ICommand IAxoTask IAxoTaskState"
  },
  "api/AXOpen.Data.AxoDataEntity.html": {
    "href": "api/AXOpen.Data.AxoDataEntity.html",
    "title": "Class AxoDataEntity | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataEntity Inheritance object AxoDataEntity Implements ICrudDataObject AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoDataEntity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Data Assembly: ix_ax_axopen_data.dll Syntax public class AxoDataEntity : ICrudDataObject, ITwinObject, ITwinElement, IAxoDataEntity Constructors | Improve this Doc View Source AxoDataEntity(ITwinObject, string, string) Declaration public AxoDataEntity(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description AXSharp.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source AttributeName Declaration public string AttributeName { get; set; } Property Value Type Description string | Improve this Doc View Source Changes Declaration public List<ValueChangeItem> Changes { get; set; } Property Value Type Description System.Collections.Generic.List<T><ValueChangeItem> | Improve this Doc View Source ChangeTracker Declaration public ValueChangeTracker ChangeTracker { get; } Property Value Type Description ValueChangeTracker | Improve this Doc View Source Connector Declaration protected Connector Connector { get; } Property Value Type Description AXSharp.Connector.Connector | Improve this Doc View Source DataEntityId Declaration [RenderIgnore] public OnlinerString DataEntityId { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerString | Improve this Doc View Source HumanReadable Declaration public string HumanReadable { get; set; } Property Value Type Description string | Improve this Doc View Source Interpreter Declaration public Translator Interpreter { get; } Property Value Type Description AXSharp.Connector.Localizations.Translator | Improve this Doc View Source Parent Declaration protected ITwinObject Parent { get; set; } Property Value Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source Symbol Declaration public string Symbol { get; protected set; } Property Value Type Description string | Improve this Doc View Source SymbolTail Declaration protected string SymbolTail { get; set; } Property Value Type Description string Methods | Improve this Doc View Source AddChild(ITwinObject) Declaration public void AddChild(ITwinObject twinObject) Parameters Type Name Description AXSharp.Connector.ITwinObject twinObject | Improve this Doc View Source AddKid(ITwinElement) Declaration public void AddKid(ITwinElement kid) Parameters Type Name Description AXSharp.Connector.ITwinElement kid | Improve this Doc View Source AddValueTag(ITwinPrimitive) Declaration public void AddValueTag(ITwinPrimitive valueTag) Parameters Type Name Description AXSharp.Connector.ITwinPrimitive valueTag | Improve this Doc View Source CreateEmptyPoco() Declaration public AxoDataEntity CreateEmptyPoco() Returns Type Description AxoDataEntity | Improve this Doc View Source GetChildren() Declaration public IEnumerable<ITwinObject> GetChildren() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinObject> | Improve this Doc View Source GetConnector() Declaration public Connector GetConnector() Returns Type Description AXSharp.Connector.Connector | Improve this Doc View Source GetKids() Declaration public IEnumerable<ITwinElement> GetKids() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinElement> | Improve this Doc View Source GetParent() Declaration public ITwinObject GetParent() Returns Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source GetSymbolTail() Declaration public string GetSymbolTail() Returns Type Description string | Improve this Doc View Source GetValueTags() Declaration public IEnumerable<ITwinPrimitive> GetValueTags() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive> | Improve this Doc View Source OnlineToPlain<T>() Declaration public virtual Task<T> OnlineToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<AxoDataEntity> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoDataEntity> | Improve this Doc View Source OnlineToPlainAsync(AxoDataEntity) Declaration protected Task<AxoDataEntity> OnlineToPlainAsync(AxoDataEntity plain) Parameters Type Name Description AxoDataEntity plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoDataEntity> | Improve this Doc View Source PlainToOnline<T>(T) Declaration public virtual Task PlainToOnline<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source PlainToOnlineAsync(AxoDataEntity) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoDataEntity plain) Parameters Type Name Description AxoDataEntity plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadow<T>(T) Declaration public virtual Task PlainToShadow<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source PlainToShadowAsync(AxoDataEntity) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoDataEntity plain) Parameters Type Name Description AxoDataEntity plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ShadowToPlain<T>() Declaration public virtual Task<T> ShadowToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<AxoDataEntity> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoDataEntity> | Improve this Doc View Source ShadowToPlainAsync(AxoDataEntity) Declaration protected Task<AxoDataEntity> ShadowToPlainAsync(AxoDataEntity plain) Parameters Type Name Description AxoDataEntity plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoDataEntity> Implements ICrudDataObject AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoDataEntity"
  },
  "api/AXOpen.Data.AxoDataEntityAttribute.html": {
    "href": "api/AXOpen.Data.AxoDataEntityAttribute.html",
    "title": "Class AxoDataEntityAttribute | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataEntityAttribute Inheritance object System.Attribute AxoDataEntityAttribute Inherited Members System.Attribute.Equals(object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, bool) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, bool) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, bool) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, bool) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, bool) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, bool) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, bool) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, bool) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, bool) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, bool) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, bool) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, bool) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, bool) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, bool) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, bool) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, bool) System.Attribute.Match(object) System.Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Data Assembly: ix_ax_axopen_data.dll Syntax [AttributeUsage(AttributeTargets.Property)] public class AxoDataEntityAttribute : Attribute"
  },
  "api/AXOpen.Data.AxoDataEntityAttributeNotFoundException.html": {
    "href": "api/AXOpen.Data.AxoDataEntityAttributeNotFoundException.html",
    "title": "Class AxoDataEntityAttributeNotFoundException | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataEntityAttributeNotFoundException Inheritance object System.Exception AxoDataEntityAttributeNotFoundException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: AXOpen.Data Assembly: ix_ax_axopen_data.dll Syntax public class AxoDataEntityAttributeNotFoundException : Exception, ISerializable Constructors | Improve this Doc View Source AxoDataEntityAttributeNotFoundException() Declaration public AxoDataEntityAttributeNotFoundException() | Improve this Doc View Source AxoDataEntityAttributeNotFoundException(string) Declaration public AxoDataEntityAttributeNotFoundException(string message) Parameters Type Name Description string message Implements System.Runtime.Serialization.ISerializable"
  },
  "api/AXOpen.Data.AxoDataExchange-2.html": {
    "href": "api/AXOpen.Data.AxoDataExchange-2.html",
    "title": "Class AxoDataExchange<TOnline, TPlain> | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataExchange<TOnline, TPlain> Provides mechanism for structured data exchange between the controller and an arbitrary repository. Inheritance object AxoObject AxoDataExchangeBase AxoDataExchange<TOnline, TPlain> Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject IAxoDataExchange Inherited Members AxoDataExchangeBase.OnlineToPlainAsync(AxoDataExchangeBase) AxoDataExchangeBase.PlainToOnlineAsync(AxoDataExchangeBase) AxoDataExchangeBase.ShadowToPlainAsync(AxoDataExchangeBase) AxoDataExchangeBase.PlainToShadowAsync(AxoDataExchangeBase) AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Data Assembly: ix_ax_axopen_data.dll Syntax public class AxoDataExchange<TOnline, TPlain> : AxoDataExchangeBase, ITwinObject, ITwinElement, IAxoObject, IAxoDataExchange where TOnline : IAxoDataEntity where TPlain : IAxoDataEntity Type Parameters Name Description TOnline Online data twin object of AxoDataEntity TPlain POCO twin of AxoDataEntity Constructors | Improve this Doc View Source AxoDataExchange(ITwinObject, string, string) Declaration public AxoDataExchange(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description AXSharp.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source CreateTask Declaration public AxoDataExchangeTask CreateTask { get; } Property Value Type Description AxoDataExchangeTask | Improve this Doc View Source DataEntity Gets AxoDataEntity associated with this AxoDataExchange<TOnline, TPlain>. Declaration public TOnline DataEntity { get; } Property Value Type Description TOnline | Improve this Doc View Source DataRepository Get strongly typed repository associated with this AxoDataExchange<TOnline, TPlain>. Declaration public IRepository<TPlain> DataRepository { get; } Property Value Type Description AXOpen.Base.Data.IRepository<T><TPlain> | Improve this Doc View Source DeleteTask Declaration public AxoDataExchangeTask DeleteTask { get; } Property Value Type Description AxoDataExchangeTask | Improve this Doc View Source ReadTask Declaration public AxoDataExchangeTask ReadTask { get; } Property Value Type Description AxoDataExchangeTask | Improve this Doc View Source RefUIData Gets AxoDataEntity as AXSharp.Connector.ITwinObject that provides exchange mechanisms between this AxoDataExchange<TOnline, TPlain> and controller. Declaration public ITwinObject RefUIData { get; } Property Value Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source Repository Gets repository associated with this IAxoDataExchange object. Declaration public IRepository? Repository { get; } Property Value Type Description AXOpen.Base.Data.IRepository | Improve this Doc View Source UpdateTask Declaration public AxoDataExchangeTask UpdateTask { get; } Property Value Type Description AxoDataExchangeTask Methods | Improve this Doc View Source CreateAsync(string, TPlain) Declaration public Task CreateAsync(string identifier, TPlain plain) Parameters Type Name Description string identifier TPlain plain Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source CreateCopyCurrentShadowsAsync(string) Create new record of the current data present in the shadows of this object in the repository. Declaration public Task CreateCopyCurrentShadowsAsync(string recordId) Parameters Type Name Description string recordId Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source CreateDataFromControllerAsync(string) Load data from controller and creates new record in the repository. Declaration public Task CreateDataFromControllerAsync(string recordId) Parameters Type Name Description string recordId Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source CreateEmptyPoco() Declaration public AxoDataExchange CreateEmptyPoco() Returns Type Description AxoDataExchange | Improve this Doc View Source CreateNewAsync(string) Creates new record in the repository. Declaration public Task CreateNewAsync(string identifier) Parameters Type Name Description string identifier Id of the record. Returns Type Description System.Threading.Tasks.Task Task | Improve this Doc View Source DeInitializeRemoteDataExchange() Terminates data exchange between controller and this AxoDataExchange<TOnline, TPlain> Declaration public void DeInitializeRemoteDataExchange() | Improve this Doc View Source Delete(string) Deletes record from the repository. Declaration public Task Delete(string identifier) Parameters Type Name Description string identifier Id of the record. Returns Type Description System.Threading.Tasks.Task Task | Improve this Doc View Source DeleteAsync(string) Declaration public Task DeleteAsync(string identifier) Parameters Type Name Description string identifier Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source FromRepositoryToControllerAsync(IBrowsableDataObject) Loads data from respective record of the repository into the controller. Declaration public Task FromRepositoryToControllerAsync(IBrowsableDataObject selected) Parameters Type Name Description AXOpen.Base.Data.IBrowsableDataObject selected Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source FromRepositoryToShadowsAsync(IBrowsableDataObject) Copies the data from the repository(ies) to shadows of this twin object. Declaration public Task FromRepositoryToShadowsAsync(IBrowsableDataObject entity) Parameters Type Name Description AXOpen.Base.Data.IBrowsableDataObject entity Data entity object. Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source GetRecords(string, int, int, eSearchMode) Gets records meeting criteria from the Repository associated with this IAxoDataExchange Declaration public IEnumerable<IBrowsableDataObject> GetRecords(string identifier, int limit, int skip, eSearchMode searchMode) Parameters Type Name Description string identifier Record identifier. Use of '*' will provide no filter to the query. DataEntityId int limit Limits number of entries int skip Skips number of entries. AXOpen.Base.Data.eSearchMode searchMode Set the search mode fot his query. AXOpen.Base.Data.eSearchMode Returns Type Description System.Collections.Generic.IEnumerable<T><AXOpen.Base.Data.IBrowsableDataObject> Records from the associated repository meeting criteria. | Improve this Doc View Source GetRecords(string) Gets record meeting criteria from the Repository associated with this IAxoDataExchange where the data entity id matches exactly the argument. Declaration public IEnumerable<IBrowsableDataObject> GetRecords(string identifier) Parameters Type Name Description string identifier Record identifier. Use of '*' will provide no filter to the query. DataEntityId Returns Type Description System.Collections.Generic.IEnumerable<T><AXOpen.Base.Data.IBrowsableDataObject> Record from the associated repository meeting criteria. | Improve this Doc View Source InitializeRemoteDataExchange() Initializes data exchange between remote controller and this AxoDataExchange<TOnline, TPlain> Declaration public void InitializeRemoteDataExchange() | Improve this Doc View Source InitializeRemoteDataExchange(IRepository<TPlain>) Initializes data exchange between remote controller and this AxoDataExchange<TOnline, TPlain> Declaration public void InitializeRemoteDataExchange(IRepository<TPlain> repository) Parameters Type Name Description AXOpen.Base.Data.IRepository<T><TPlain> repository Repository to be associated with this AxoDataExchange<TOnline, TPlain> | Improve this Doc View Source OnlineToPlain<T>() Declaration public override Task<T> OnlineToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T Overrides AxoDataExchangeBase.OnlineToPlain<T>() | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<AxoDataExchange> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoDataExchange> | Improve this Doc View Source OnlineToPlainAsync(AxoDataExchange) Declaration protected Task<AxoDataExchange> OnlineToPlainAsync(AxoDataExchange plain) Parameters Type Name Description AxoDataExchange plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoDataExchange> | Improve this Doc View Source PlainToOnline<T>(T) Declaration public override Task PlainToOnline<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T Overrides AXOpen.Data.AxoDataExchangeBase.PlainToOnline<T>(T) | Improve this Doc View Source PlainToOnlineAsync(AxoDataExchange) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoDataExchange plain) Parameters Type Name Description AxoDataExchange plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadow<T>(T) Declaration public override Task PlainToShadow<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T Overrides AXOpen.Data.AxoDataExchangeBase.PlainToShadow<T>(T) | Improve this Doc View Source PlainToShadowAsync(AxoDataExchange) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoDataExchange plain) Parameters Type Name Description AxoDataExchange plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ReadAsync(string) Declaration public Task<TPlain> ReadAsync(string identifier) Parameters Type Name Description string identifier Returns Type Description System.Threading.Tasks.Task<TResult><TPlain> | Improve this Doc View Source RemoteCreate(string) Provides handler for remote (controller's) request to create new data entry in the Repository associated with this IAxoDataExchange Declaration public bool RemoteCreate(string identifier) Parameters Type Name Description string identifier Record identifier. Returns Type Description bool True when success | Improve this Doc View Source RemoteDelete(string) Provides handler for remote (controller's) request to delete data from the Repository associated with this IAxoDataExchange Declaration public bool RemoteDelete(string identifier) Parameters Type Name Description string identifier Record identifier. Returns Type Description bool True when success | Improve this Doc View Source RemoteRead(string) Provides handler for remote (controller's) request to read data from the Repository associated with this IAxoDataExchange Declaration public bool RemoteRead(string identifier) Parameters Type Name Description string identifier Record identifier. Returns Type Description bool True when success | Improve this Doc View Source RemoteUpdate(string) Provides handler for remote (controller's) request to update data in the Repository associated with this IAxoDataExchange Declaration public bool RemoteUpdate(string identifier) Parameters Type Name Description string identifier Record identifier. Returns Type Description bool True when success | Improve this Doc View Source SetRepository(IRepository<TPlain>) Sets repository for this instance of AxoDataExchange<TOnline, TPlain> Declaration public void SetRepository(IRepository<TPlain> repository) Parameters Type Name Description AXOpen.Base.Data.IRepository<T><TPlain> repository | Improve this Doc View Source ShadowToPlain<T>() Declaration public override Task<T> ShadowToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T Overrides AxoDataExchangeBase.ShadowToPlain<T>() | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<AxoDataExchange> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoDataExchange> | Improve this Doc View Source ShadowToPlainAsync(AxoDataExchange) Declaration protected Task<AxoDataExchange> ShadowToPlainAsync(AxoDataExchange plain) Parameters Type Name Description AxoDataExchange plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoDataExchange> | Improve this Doc View Source UpdateAsync(string, TPlain) Declaration public Task UpdateAsync(string identifier, TPlain data) Parameters Type Name Description string identifier TPlain data Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source UpdateFromShadowsAsync() Updates data form shadows of this object to respective record in the repository. Declaration public Task UpdateFromShadowsAsync() Returns Type Description System.Threading.Tasks.Task Task Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject IAxoDataExchange"
  },
  "api/AXOpen.Data.AxoDataExchangeBase.html": {
    "href": "api/AXOpen.Data.AxoDataExchangeBase.html",
    "title": "Class AxoDataExchangeBase | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataExchangeBase Inheritance object AxoObject AxoDataExchangeBase AxoDataExchange<TOnline, TPlain> AxoDataFragmentExchange Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject Inherited Members AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Data Assembly: ix_ax_axopen_data.dll Syntax public class AxoDataExchangeBase : AxoObject, ITwinObject, ITwinElement, IAxoObject Constructors | Improve this Doc View Source AxoDataExchangeBase(ITwinObject, string, string) Declaration public AxoDataExchangeBase(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description AXSharp.Connector.ITwinObject parent string readableTail string symbolTail Methods | Improve this Doc View Source CreateEmptyPoco() Declaration public AxoDataExchangeBase CreateEmptyPoco() Returns Type Description AxoDataExchangeBase | Improve this Doc View Source OnlineToPlain<T>() Declaration public override Task<T> OnlineToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T Overrides AxoObject.OnlineToPlain<T>() | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<AxoDataExchangeBase> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoDataExchangeBase> | Improve this Doc View Source OnlineToPlainAsync(AxoDataExchangeBase) Declaration protected Task<AxoDataExchangeBase> OnlineToPlainAsync(AxoDataExchangeBase plain) Parameters Type Name Description AxoDataExchangeBase plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoDataExchangeBase> | Improve this Doc View Source PlainToOnline<T>(T) Declaration public override Task PlainToOnline<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T Overrides AXOpen.Core.AxoObject.PlainToOnline<T>(T) | Improve this Doc View Source PlainToOnlineAsync(AxoDataExchangeBase) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoDataExchangeBase plain) Parameters Type Name Description AxoDataExchangeBase plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadow<T>(T) Declaration public override Task PlainToShadow<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T Overrides AXOpen.Core.AxoObject.PlainToShadow<T>(T) | Improve this Doc View Source PlainToShadowAsync(AxoDataExchangeBase) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoDataExchangeBase plain) Parameters Type Name Description AxoDataExchangeBase plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ShadowToPlain<T>() Declaration public override Task<T> ShadowToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T Overrides AxoObject.ShadowToPlain<T>() | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<AxoDataExchangeBase> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoDataExchangeBase> | Improve this Doc View Source ShadowToPlainAsync(AxoDataExchangeBase) Declaration protected Task<AxoDataExchangeBase> ShadowToPlainAsync(AxoDataExchangeBase plain) Parameters Type Name Description AxoDataExchangeBase plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoDataExchangeBase> Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject"
  },
  "api/AXOpen.Data.AxoDataExchangeBaseCommandView.html": {
    "href": "api/AXOpen.Data.AxoDataExchangeBaseCommandView.html",
    "title": "Class AxoDataExchangeBaseCommandView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataExchangeBaseCommandView Inheritance object Microsoft.AspNetCore.Components.ComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><AxoDataExchangeBase> AxoDataExchangeBaseCommandView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent System.IDisposable AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase Inherited Members AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<AXOpen.Data.AxoDataExchangeBase>.Component AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.Dispose() AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ITwinObject, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ValueTypes.OnlinerBase, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinPrimitive) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, AXSharp.Connector.ValueTypes.ValueChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.PollingInterval AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitialized() Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Data Assembly: axopen_data_blazor.dll Syntax public class AxoDataExchangeBaseCommandView : RenderableComplexComponentBase<AxoDataExchangeBase>, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IDisposable, IRenderableComplexComponentBase Methods | Improve this Doc View Source BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters Type Name Description Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder Overrides Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent System.IDisposable AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase"
  },
  "api/AXOpen.Data.AxoDataExchangeBaseStatusView.html": {
    "href": "api/AXOpen.Data.AxoDataExchangeBaseStatusView.html",
    "title": "Class AxoDataExchangeBaseStatusView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataExchangeBaseStatusView Inheritance object Microsoft.AspNetCore.Components.ComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><AxoDataExchangeBase> AxoDataExchangeBaseStatusView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent System.IDisposable AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase Inherited Members AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<AXOpen.Data.AxoDataExchangeBase>.Component AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.Dispose() AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ITwinObject, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ValueTypes.OnlinerBase, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinPrimitive) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, AXSharp.Connector.ValueTypes.ValueChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.PollingInterval AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitialized() Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Data Assembly: axopen_data_blazor.dll Syntax public class AxoDataExchangeBaseStatusView : RenderableComplexComponentBase<AxoDataExchangeBase>, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IDisposable, IRenderableComplexComponentBase Methods | Improve this Doc View Source BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters Type Name Description Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder Overrides Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent System.IDisposable AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase"
  },
  "api/AXOpen.Data.AxoDataExchangeTask.html": {
    "href": "api/AXOpen.Data.AxoDataExchangeTask.html",
    "title": "Class AxoDataExchangeTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataExchangeTask Inheritance object AxoObject AxoTask AxoRemoteTask AxoDataExchangeTask AxoDataCrudTask Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject System.Windows.Input.ICommand IAxoTask IAxoTaskState Inherited Members AxoRemoteTask.PropertyChanged AxoRemoteTask.Initialize(Action) AxoRemoteTask.Initialize(Func<bool>) AxoRemoteTask.InitializeExclusively(Action) AxoRemoteTask.InitializeExclusively(Func<bool>) AxoRemoteTask.DeInitialize() AxoRemoteTask.RemoteExecutionException AxoRemoteTask.RemoteExceptionDetails AxoRemoteTask.ResetExecution() AxoRemoteTask.DoneSignature AxoRemoteTask.IsInitialized AxoRemoteTask.HasRemoteException AxoRemoteTask.IsBeingCalledCounter AxoRemoteTask.OnlineToPlainAsync(AxoRemoteTask) AxoRemoteTask.PlainToOnlineAsync(AxoRemoteTask) AxoRemoteTask.ShadowToPlainAsync(AxoRemoteTask) AxoRemoteTask.PlainToShadowAsync(AxoRemoteTask) AxoTask.Restore() AxoTask.CanExecute(object) AxoTask.Execute(object) AxoTask.CanExecuteChanged AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails AxoTask.OnlineToPlainAsync(AxoTask) AxoTask.PlainToOnlineAsync(AxoTask) AxoTask.ShadowToPlainAsync(AxoTask) AxoTask.PlainToShadowAsync(AxoTask) AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Data Assembly: ix_ax_axopen_data.dll Syntax public class AxoDataExchangeTask : AxoRemoteTask, ITwinObject, ITwinElement, IAxoObject, ICommand, IAxoTask, IAxoTaskState Constructors | Improve this Doc View Source AxoDataExchangeTask(ITwinObject, string, string) Declaration public AxoDataExchangeTask(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description AXSharp.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source DataEntityIdentifier Declaration public OnlinerString DataEntityIdentifier { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerString Methods | Improve this Doc View Source CreateEmptyPoco() Declaration public AxoDataExchangeTask CreateEmptyPoco() Returns Type Description AxoDataExchangeTask | Improve this Doc View Source OnlineToPlain<T>() Declaration public override Task<T> OnlineToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T Overrides AxoRemoteTask.OnlineToPlain<T>() | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<AxoDataExchangeTask> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoDataExchangeTask> | Improve this Doc View Source OnlineToPlainAsync(AxoDataExchangeTask) Declaration protected Task<AxoDataExchangeTask> OnlineToPlainAsync(AxoDataExchangeTask plain) Parameters Type Name Description AxoDataExchangeTask plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoDataExchangeTask> | Improve this Doc View Source PlainToOnline<T>(T) Declaration public override Task PlainToOnline<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T Overrides AXOpen.Core.AxoRemoteTask.PlainToOnline<T>(T) | Improve this Doc View Source PlainToOnlineAsync(AxoDataExchangeTask) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoDataExchangeTask plain) Parameters Type Name Description AxoDataExchangeTask plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadow<T>(T) Declaration public override Task PlainToShadow<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T Overrides AXOpen.Core.AxoRemoteTask.PlainToShadow<T>(T) | Improve this Doc View Source PlainToShadowAsync(AxoDataExchangeTask) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoDataExchangeTask plain) Parameters Type Name Description AxoDataExchangeTask plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ShadowToPlain<T>() Declaration public override Task<T> ShadowToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T Overrides AxoRemoteTask.ShadowToPlain<T>() | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<AxoDataExchangeTask> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoDataExchangeTask> | Improve this Doc View Source ShadowToPlainAsync(AxoDataExchangeTask) Declaration protected Task<AxoDataExchangeTask> ShadowToPlainAsync(AxoDataExchangeTask plain) Parameters Type Name Description AxoDataExchangeTask plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoDataExchangeTask> Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject System.Windows.Input.ICommand IAxoTask IAxoTaskState"
  },
  "api/AXOpen.Data.AxoDataFragmentAttribute.html": {
    "href": "api/AXOpen.Data.AxoDataFragmentAttribute.html",
    "title": "Class AxoDataFragmentAttribute | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataFragmentAttribute Inheritance object System.Attribute AxoDataFragmentAttribute Inherited Members System.Attribute.Equals(object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, bool) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, bool) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, bool) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, bool) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, bool) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, bool) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, bool) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, bool) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, bool) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, bool) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, bool) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, bool) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, bool) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, bool) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, bool) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, bool) System.Attribute.Match(object) System.Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Data Assembly: ix_ax_axopen_data.dll Syntax [AttributeUsage(AttributeTargets.Property)] public class AxoDataFragmentAttribute : Attribute"
  },
  "api/AXOpen.Data.AxoDataFragmentExchange.html": {
    "href": "api/AXOpen.Data.AxoDataFragmentExchange.html",
    "title": "Class AxoDataFragmentExchange | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataFragmentExchange Inheritance object AxoObject AxoDataExchangeBase AxoDataFragmentExchange Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject IAxoDataExchange Inherited Members AxoDataExchangeBase.OnlineToPlainAsync(AxoDataExchangeBase) AxoDataExchangeBase.PlainToOnlineAsync(AxoDataExchangeBase) AxoDataExchangeBase.ShadowToPlainAsync(AxoDataExchangeBase) AxoDataExchangeBase.PlainToShadowAsync(AxoDataExchangeBase) AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Data Assembly: ix_ax_axopen_data.dll Syntax public class AxoDataFragmentExchange : AxoDataExchangeBase, ITwinObject, ITwinElement, IAxoObject, IAxoDataExchange Constructors | Improve this Doc View Source AxoDataFragmentExchange(ITwinObject, string, string) Declaration public AxoDataFragmentExchange(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description AXSharp.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source DataFragments Declaration protected IAxoDataExchange[] DataFragments { get; } Property Value Type Description IAxoDataExchange[] | Improve this Doc View Source Operation Declaration public AxoDataCrudTask Operation { get; } Property Value Type Description AxoDataCrudTask | Improve this Doc View Source RefUIData Declaration public ITwinObject RefUIData { get; } Property Value Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source Repository Declaration public IRepository? Repository { get; } Property Value Type Description AXOpen.Base.Data.IRepository Methods | Improve this Doc View Source CreateBuilder() Declaration public object CreateBuilder() Returns Type Description object | Improve this Doc View Source CreateBuilder<T>() Declaration public T? CreateBuilder<T>() where T : AxoDataFragmentExchange Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source CreateCopyCurrentShadowsAsync(string) Declaration public Task CreateCopyCurrentShadowsAsync(string recordId) Parameters Type Name Description string recordId Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source CreateDataFromControllerAsync(string) Declaration public Task CreateDataFromControllerAsync(string recordId) Parameters Type Name Description string recordId Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source CreateEmptyPoco() Declaration public AxoDataFragmentExchange CreateEmptyPoco() Returns Type Description AxoDataFragmentExchange | Improve this Doc View Source CreateNewAsync(string) Declaration public Task CreateNewAsync(string identifier) Parameters Type Name Description string identifier Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source DeInitializeRemoteDataExchange() Declaration public void DeInitializeRemoteDataExchange() | Improve this Doc View Source Delete(string) Declaration public Task Delete(string identifier) Parameters Type Name Description string identifier Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source FromRepositoryToControllerAsync(IBrowsableDataObject) Declaration public Task FromRepositoryToControllerAsync(IBrowsableDataObject selected) Parameters Type Name Description AXOpen.Base.Data.IBrowsableDataObject selected Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source FromRepositoryToShadowsAsync(IBrowsableDataObject) Declaration public Task FromRepositoryToShadowsAsync(IBrowsableDataObject entity) Parameters Type Name Description AXOpen.Base.Data.IBrowsableDataObject entity Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source GetRecords(string, int, int, eSearchMode) Declaration public IEnumerable<IBrowsableDataObject> GetRecords(string identifier, int limit, int skip, eSearchMode searchMode) Parameters Type Name Description string identifier int limit int skip AXOpen.Base.Data.eSearchMode searchMode Returns Type Description System.Collections.Generic.IEnumerable<T><AXOpen.Base.Data.IBrowsableDataObject> | Improve this Doc View Source GetRecords(string) Declaration public IEnumerable<IBrowsableDataObject> GetRecords(string identifier) Parameters Type Name Description string identifier Returns Type Description System.Collections.Generic.IEnumerable<T><AXOpen.Base.Data.IBrowsableDataObject> | Improve this Doc View Source InitializeRemoteDataExchange() Initializes data exchange between remote controller and this AxoDataExchange<TOnline, TPlain> Declaration public void InitializeRemoteDataExchange() | Improve this Doc View Source OnlineToPlain<T>() Declaration public override Task<T> OnlineToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T Overrides AxoDataExchangeBase.OnlineToPlain<T>() | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<AxoDataFragmentExchange> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoDataFragmentExchange> | Improve this Doc View Source OnlineToPlainAsync(AxoDataFragmentExchange) Declaration protected Task<AxoDataFragmentExchange> OnlineToPlainAsync(AxoDataFragmentExchange plain) Parameters Type Name Description AxoDataFragmentExchange plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoDataFragmentExchange> | Improve this Doc View Source PlainToOnline<T>(T) Declaration public override Task PlainToOnline<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T Overrides AXOpen.Data.AxoDataExchangeBase.PlainToOnline<T>(T) | Improve this Doc View Source PlainToOnlineAsync(AxoDataFragmentExchange) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoDataFragmentExchange plain) Parameters Type Name Description AxoDataFragmentExchange plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadow<T>(T) Declaration public override Task PlainToShadow<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T Overrides AXOpen.Data.AxoDataExchangeBase.PlainToShadow<T>(T) | Improve this Doc View Source PlainToShadowAsync(AxoDataFragmentExchange) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoDataFragmentExchange plain) Parameters Type Name Description AxoDataFragmentExchange plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source RemoteCreate(string) Declaration public bool RemoteCreate(string identifier) Parameters Type Name Description string identifier Returns Type Description bool | Improve this Doc View Source RemoteDelete(string) Declaration public bool RemoteDelete(string identifier) Parameters Type Name Description string identifier Returns Type Description bool | Improve this Doc View Source RemoteRead(string) Declaration public bool RemoteRead(string identifier) Parameters Type Name Description string identifier Returns Type Description bool | Improve this Doc View Source RemoteUpdate(string) Declaration public bool RemoteUpdate(string identifier) Parameters Type Name Description string identifier Returns Type Description bool | Improve this Doc View Source ShadowToPlain<T>() Declaration public override Task<T> ShadowToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T Overrides AxoDataExchangeBase.ShadowToPlain<T>() | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<AxoDataFragmentExchange> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoDataFragmentExchange> | Improve this Doc View Source ShadowToPlainAsync(AxoDataFragmentExchange) Declaration protected Task<AxoDataFragmentExchange> ShadowToPlainAsync(AxoDataFragmentExchange plain) Parameters Type Name Description AxoDataFragmentExchange plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoDataFragmentExchange> | Improve this Doc View Source UpdateFromShadowsAsync() Declaration public Task UpdateFromShadowsAsync() Returns Type Description System.Threading.Tasks.Task Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject IAxoDataExchange"
  },
  "api/AXOpen.Data.AxoFragmentedDataCompound.html": {
    "href": "api/AXOpen.Data.AxoFragmentedDataCompound.html",
    "title": "Class AxoFragmentedDataCompound | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoFragmentedDataCompound Inheritance object AxoFragmentedDataCompound Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Data Assembly: ix_ax_axopen_data.dll Syntax [Container(Layout.Tabs)] public class AxoFragmentedDataCompound : ITwinObject, ITwinElement Constructors | Improve this Doc View Source AxoFragmentedDataCompound(ITwinObject, IList<ITwinElement>) Declaration public AxoFragmentedDataCompound(ITwinObject parent, IList<ITwinElement> kids) Parameters Type Name Description AXSharp.Connector.ITwinObject parent System.Collections.Generic.IList<T><AXSharp.Connector.ITwinElement> kids Properties | Improve this Doc View Source AttributeName Declaration public string AttributeName { get; } Property Value Type Description string | Improve this Doc View Source HumanReadable Declaration public string HumanReadable { get; set; } Property Value Type Description string | Improve this Doc View Source Interpreter Declaration public Translator Interpreter { get; } Property Value Type Description AXSharp.Connector.Localizations.Translator | Improve this Doc View Source Symbol Declaration public string Symbol { get; } Property Value Type Description string Methods | Improve this Doc View Source AddChild(ITwinObject) Declaration public void AddChild(ITwinObject twinObject) Parameters Type Name Description AXSharp.Connector.ITwinObject twinObject | Improve this Doc View Source AddKid(ITwinElement) Declaration public void AddKid(ITwinElement kid) Parameters Type Name Description AXSharp.Connector.ITwinElement kid | Improve this Doc View Source AddValueTag(ITwinPrimitive) Declaration public void AddValueTag(ITwinPrimitive twinPrimitive) Parameters Type Name Description AXSharp.Connector.ITwinPrimitive twinPrimitive | Improve this Doc View Source GetChildren() Declaration public IEnumerable<ITwinObject> GetChildren() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinObject> | Improve this Doc View Source GetConnector() Declaration public Connector GetConnector() Returns Type Description AXSharp.Connector.Connector | Improve this Doc View Source GetKids() Declaration public IEnumerable<ITwinElement> GetKids() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinElement> | Improve this Doc View Source GetParent() Declaration public ITwinObject GetParent() Returns Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source GetSymbolTail() Declaration public string GetSymbolTail() Returns Type Description string | Improve this Doc View Source GetValueTags() Declaration public IEnumerable<ITwinPrimitive?> GetValueTags() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive> | Improve this Doc View Source OnlineToPlain<T>() Declaration public Task<T> OnlineToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T | Improve this Doc View Source PlainToOnline<T>(T) Declaration public Task PlainToOnline<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source PlainToShadow<T>(T) Declaration public Task PlainToShadow<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ShadowToPlain<T>() Declaration public Task<T> ShadowToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement"
  },
  "api/AXOpen.Data.Blazor._Imports.html": {
    "href": "api/AXOpen.Data.Blazor._Imports.html",
    "title": "Class _Imports | System.Dynamic.ExpandoObject",
    "keywords": "Class _Imports Inheritance object Microsoft.AspNetCore.Components.ComponentBase _Imports Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender Inherited Members Microsoft.AspNetCore.Components.ComponentBase.OnInitialized() Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Data.Blazor Assembly: axopen_data_blazor.dll Syntax public class _Imports : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender Methods | Improve this Doc View Source BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters Type Name Description Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder Overrides Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender"
  },
  "api/AXOpen.Data.Blazor.html": {
    "href": "api/AXOpen.Data.Blazor.html",
    "title": "Namespace AXOpen.Data.Blazor | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen.Data.Blazor Classes _Imports"
  },
  "api/AXOpen.Data.ColumnData.html": {
    "href": "api/AXOpen.Data.ColumnData.html",
    "title": "Class ColumnData | System.Dynamic.ExpandoObject",
    "keywords": "Class ColumnData Inheritance object Microsoft.AspNetCore.Components.ComponentBase ColumnData Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender Inherited Members Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Data Assembly: axopen_data_blazor.dll Syntax public class ColumnData : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender Properties | Improve this Doc View Source BindingValue Declaration [Parameter] public string BindingValue { get; set; } Property Value Type Description string | Improve this Doc View Source Clickable Declaration [Parameter] public bool Clickable { get; set; } Property Value Type Description bool | Improve this Doc View Source DataView Declaration [CascadingParameter] public DataExchangeView DataView { get; set; } Property Value Type Description DataExchangeView | Improve this Doc View Source HeaderName Declaration [Parameter] public string HeaderName { get; set; } Property Value Type Description string Methods | Improve this Doc View Source BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters Type Name Description Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder Overrides Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source OnInitialized() Declaration protected override void OnInitialized() Overrides Microsoft.AspNetCore.Components.ComponentBase.OnInitialized() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender"
  },
  "api/AXOpen.Data.DataExchangeView.html": {
    "href": "api/AXOpen.Data.DataExchangeView.html",
    "title": "Class DataExchangeView | System.Dynamic.ExpandoObject",
    "keywords": "Class DataExchangeView Inheritance object Microsoft.AspNetCore.Components.ComponentBase DataExchangeView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender Inherited Members Microsoft.AspNetCore.Components.ComponentBase.OnInitialized() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Data Assembly: axopen_data_blazor.dll Syntax public class DataExchangeView : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender Properties | Improve this Doc View Source CanExport Declaration [Parameter] public bool CanExport { get; set; } Property Value Type Description bool | Improve this Doc View Source ChildContent Declaration [Parameter] public RenderFragment ChildContent { get; set; } Property Value Type Description Microsoft.AspNetCore.Components.RenderFragment | Improve this Doc View Source ModalDataView Declaration [Parameter] public bool ModalDataView { get; set; } Property Value Type Description bool | Improve this Doc View Source Presentation Declaration [Parameter] public string Presentation { get; set; } Property Value Type Description string | Improve this Doc View Source Vm Declaration [Parameter] public DataExchangeViewModel Vm { get; set; } Property Value Type Description DataExchangeViewModel Methods | Improve this Doc View Source AddLine(ColumnData) Declaration public void AddLine(ColumnData line) Parameters Type Name Description ColumnData line | Improve this Doc View Source BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters Type Name Description Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder Overrides Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) | Improve this Doc View Source OnInitializedAsync() Declaration protected override Task OnInitializedAsync() Returns Type Description System.Threading.Tasks.Task Overrides Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() | Improve this Doc View Source RemoveLine(ColumnData) Declaration public void RemoveLine(ColumnData line) Parameters Type Name Description ColumnData line Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender"
  },
  "api/AXOpen.Data.DataExchangeViewModel.html": {
    "href": "api/AXOpen.Data.DataExchangeViewModel.html",
    "title": "Class DataExchangeViewModel | System.Dynamic.ExpandoObject",
    "keywords": "Class DataExchangeViewModel Inheritance object AXSharp.Presentation.BindableBase AXSharp.Presentation.RenderableViewModelBase DataExchangeViewModel Implements System.ComponentModel.INotifyPropertyChanged Inherited Members AXSharp.Presentation.BindableBase.SetProperty<T>(ref T, T, string) AXSharp.Presentation.BindableBase.OnPropertyChanged(string) AXSharp.Presentation.BindableBase.PropertyChanged object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Data Assembly: axopen_data_blazor.dll Syntax public class DataExchangeViewModel : RenderableViewModelBase, INotifyPropertyChanged Properties | Improve this Doc View Source Changes Declaration public List<ValueChangeItem> Changes { get; set; } Property Value Type Description System.Collections.Generic.List<T><ValueChangeItem> | Improve this Doc View Source CreateItemId Declaration public string CreateItemId { get; set; } Property Value Type Description string | Improve this Doc View Source DataExchange Declaration public IAxoDataExchange DataExchange { get; } Property Value Type Description IAxoDataExchange | Improve this Doc View Source FilterById Declaration public string FilterById { get; set; } Property Value Type Description string | Improve this Doc View Source FilteredCount Declaration public long FilteredCount { get; set; } Property Value Type Description long | Improve this Doc View Source IsBusy Declaration public bool IsBusy { get; set; } Property Value Type Description bool | Improve this Doc View Source Limit Declaration public int Limit { get; set; } Property Value Type Description int | Improve this Doc View Source Model Declaration public override object Model { get; set; } Property Value Type Description object Overrides AXSharp.Presentation.RenderableViewModelBase.Model | Improve this Doc View Source Page Declaration public int Page { get; set; } Property Value Type Description int | Improve this Doc View Source Records Declaration public ObservableCollection<IBrowsableDataObject> Records { get; set; } Property Value Type Description System.Collections.ObjectModel.ObservableCollection<T><AXOpen.Base.Data.IBrowsableDataObject> | Improve this Doc View Source SearchMode Declaration public eSearchMode SearchMode { get; set; } Property Value Type Description AXOpen.Base.Data.eSearchMode | Improve this Doc View Source SelectedRecord Declaration public IBrowsableDataObject SelectedRecord { get; set; } Property Value Type Description AXOpen.Base.Data.IBrowsableDataObject Methods | Improve this Doc View Source Copy() Declaration public Task Copy() Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source CountFiltered(string, eSearchMode) Declaration public long CountFiltered(string id, eSearchMode searchMode = eSearchMode.Exact) Parameters Type Name Description string id AXOpen.Base.Data.eSearchMode searchMode Returns Type Description long | Improve this Doc View Source CreateNew() Declaration public Task CreateNew() Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source Delete() Declaration public void Delete() | Improve this Doc View Source Edit() Declaration public Task Edit() Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source Export(Expression<Func<IPlain, bool>>, char) Declaration public IEnumerable<string> Export(Expression<Func<IPlain, bool>> expression, char separator = ';') Parameters Type Name Description System.Linq.Expressions.Expression<TDelegate><Func<AXSharp.Connector.IPlain, bool>> expression char separator Returns Type Description System.Collections.Generic.IEnumerable<T><string> | Improve this Doc View Source ExportData() Declaration public void ExportData() | Improve this Doc View Source FillObservableRecordsAsync() Declaration public Task FillObservableRecordsAsync() Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source Filter() Declaration public Task Filter() Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source Filter(string, int, int, eSearchMode) Declaration public IEnumerable<IBrowsableDataObject> Filter(string identifier, int limit = 10, int skip = 0, eSearchMode searchMode = eSearchMode.Exact) Parameters Type Name Description string identifier int limit int skip AXOpen.Base.Data.eSearchMode searchMode Returns Type Description System.Collections.Generic.IEnumerable<T><AXOpen.Base.Data.IBrowsableDataObject> | Improve this Doc View Source FindById(string) Declaration public IBrowsableDataObject FindById(string id) Parameters Type Name Description string id Returns Type Description AXOpen.Base.Data.IBrowsableDataObject | Improve this Doc View Source Import(IEnumerable<string>, ITwinObject, char) Declaration public void Import(IEnumerable<string> records, ITwinObject crudDataObject = null, char separator = ';') Parameters Type Name Description System.Collections.Generic.IEnumerable<T><string> records AXSharp.Connector.ITwinObject crudDataObject char separator | Improve this Doc View Source ImportData() Declaration public void ImportData() | Improve this Doc View Source LoadFromPlc() Declaration public Task LoadFromPlc() Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source RefreshFilter() Declaration public Task RefreshFilter() Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source SendToPlc() Declaration public Task SendToPlc() Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source UpdateObservableRecords() Declaration public void UpdateObservableRecords() | Improve this Doc View Source UpdateRecord(AxoDataEntity) Declaration public IEnumerable<DataItemValidation> UpdateRecord(AxoDataEntity data) Parameters Type Name Description AxoDataEntity data Returns Type Description System.Collections.Generic.IEnumerable<T><DataItemValidation> Implements System.ComponentModel.INotifyPropertyChanged"
  },
  "api/AXOpen.Data.eCrudOperation.html": {
    "href": "api/AXOpen.Data.eCrudOperation.html",
    "title": "Enum eCrudOperation | System.Dynamic.ExpandoObject",
    "keywords": "Enum eCrudOperation Namespace: AXOpen.Data Assembly: ix_ax_axopen_data.dll Syntax public enum eCrudOperation Fields Name Description Create Delete Read Update"
  },
  "api/AXOpen.Data.html": {
    "href": "api/AXOpen.Data.html",
    "title": "Namespace AXOpen.Data | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen.Data Classes AxoCompoundRepository AxoDataCrudTask AxoDataEntity AxoDataEntityAttribute AxoDataEntityAttributeNotFoundException AxoDataExchange<TOnline, TPlain> Provides mechanism for structured data exchange between the controller and an arbitrary repository. AxoDataExchangeBase AxoDataExchangeBaseCommandView AxoDataExchangeBaseStatusView AxoDataExchangeTask AxoDataFragmentAttribute AxoDataFragmentExchange AxoFragmentedDataCompound ColumnData DataExchangeView DataExchangeViewModel MultipleDataEntityAttributeException MultipleRemoteCallInitializationException ValueChangeItem ValueChangeTracker ValueItemDescriptor WrongTypeOfDataObjectException Interfaces IAxoDataEntity IAxoDataExchange ICrudDataObject IDataExchangeOperations An interface which grants access to certain operations in DataExchange viewmodel, like searching by id, invoking search or filling the search box Enums eCrudOperation"
  },
  "api/AXOpen.Data.IAxoDataEntity.html": {
    "href": "api/AXOpen.Data.IAxoDataEntity.html",
    "title": "Interface IAxoDataEntity | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoDataEntity Namespace: AXOpen.Data Assembly: ix_ax_axopen_data.dll Syntax public interface IAxoDataEntity Properties | Improve this Doc View Source DataEntityId Declaration OnlinerString DataEntityId { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerString"
  },
  "api/AXOpen.Data.IAxoDataExchange.html": {
    "href": "api/AXOpen.Data.IAxoDataExchange.html",
    "title": "Interface IAxoDataExchange | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoDataExchange Namespace: AXOpen.Data Assembly: ix_ax_axopen_data.dll Syntax public interface IAxoDataExchange Properties | Improve this Doc View Source RefUIData Gets data of this AxoDataExchange object for automated UI generation. Declaration ITwinObject RefUIData { get; } Property Value Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source Repository Gets repository associated with this IAxoDataExchange object. Declaration IRepository? Repository { get; } Property Value Type Description AXOpen.Base.Data.IRepository Methods | Improve this Doc View Source CreateCopyCurrentShadowsAsync(string) Create new record of the current data present in the shadows of this object in the repository. Declaration Task CreateCopyCurrentShadowsAsync(string identifier) Parameters Type Name Description string identifier Id of the new record Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source CreateDataFromControllerAsync(string) Load data from controller and creates new record in the repository. Declaration Task CreateDataFromControllerAsync(string recordId) Parameters Type Name Description string recordId Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source CreateNewAsync(string) Creates new record in the repository. Declaration Task CreateNewAsync(string identifier) Parameters Type Name Description string identifier Id of the record. Returns Type Description System.Threading.Tasks.Task Task | Improve this Doc View Source Delete(string) Deletes record from the repository. Declaration Task Delete(string identifier) Parameters Type Name Description string identifier Id of the record. Returns Type Description System.Threading.Tasks.Task Task | Improve this Doc View Source FromRepositoryToControllerAsync(IBrowsableDataObject) Loads data from respective record of the repository into the controller. Declaration Task FromRepositoryToControllerAsync(IBrowsableDataObject entity) Parameters Type Name Description AXOpen.Base.Data.IBrowsableDataObject entity Entity to be loaded into the controller. Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source FromRepositoryToShadowsAsync(IBrowsableDataObject) Copies the data from the repository(ies) to shadows of this twin object. Declaration Task FromRepositoryToShadowsAsync(IBrowsableDataObject entity) Parameters Type Name Description AXOpen.Base.Data.IBrowsableDataObject entity Data entity object. Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source GetRecords(string, int, int, eSearchMode) Gets records meeting criteria from the Repository associated with this IAxoDataExchange Declaration IEnumerable<IBrowsableDataObject> GetRecords(string identifier, int limit, int skip, eSearchMode searchMode) Parameters Type Name Description string identifier Record identifier. Use of '*' will provide no filter to the query. DataEntityId int limit Limits number of entries int skip Skips number of entries. AXOpen.Base.Data.eSearchMode searchMode Set the search mode fot his query. AXOpen.Base.Data.eSearchMode Returns Type Description System.Collections.Generic.IEnumerable<T><AXOpen.Base.Data.IBrowsableDataObject> Records from the associated repository meeting criteria. | Improve this Doc View Source GetRecords(string) Gets record meeting criteria from the Repository associated with this IAxoDataExchange where the data entity id matches exactly the argument. Declaration IEnumerable<IBrowsableDataObject> GetRecords(string identifier) Parameters Type Name Description string identifier Record identifier. Use of '*' will provide no filter to the query. DataEntityId Returns Type Description System.Collections.Generic.IEnumerable<T><AXOpen.Base.Data.IBrowsableDataObject> Record from the associated repository meeting criteria. | Improve this Doc View Source RemoteCreate(string) Provides handler for remote (controller's) request to create new data entry in the Repository associated with this IAxoDataExchange Declaration bool RemoteCreate(string identifier) Parameters Type Name Description string identifier Record identifier. Returns Type Description bool True when success | Improve this Doc View Source RemoteDelete(string) Provides handler for remote (controller's) request to delete data from the Repository associated with this IAxoDataExchange Declaration bool RemoteDelete(string identifier) Parameters Type Name Description string identifier Record identifier. Returns Type Description bool True when success | Improve this Doc View Source RemoteRead(string) Provides handler for remote (controller's) request to read data from the Repository associated with this IAxoDataExchange Declaration bool RemoteRead(string identifier) Parameters Type Name Description string identifier Record identifier. Returns Type Description bool True when success | Improve this Doc View Source RemoteUpdate(string) Provides handler for remote (controller's) request to update data in the Repository associated with this IAxoDataExchange Declaration bool RemoteUpdate(string identifier) Parameters Type Name Description string identifier Record identifier. Returns Type Description bool True when success | Improve this Doc View Source UpdateFromShadowsAsync() Updates data form shadows of this object to respective record in the repository. Declaration Task UpdateFromShadowsAsync() Returns Type Description System.Threading.Tasks.Task Task"
  },
  "api/AXOpen.Data.ICrudDataObject.html": {
    "href": "api/AXOpen.Data.ICrudDataObject.html",
    "title": "Interface ICrudDataObject | System.Dynamic.ExpandoObject",
    "keywords": "Interface ICrudDataObject Namespace: AXOpen.Data Assembly: ix_ax_axopen_data.dll Syntax public interface ICrudDataObject Properties | Improve this Doc View Source Changes Declaration List<ValueChangeItem> Changes { get; set; } Property Value Type Description System.Collections.Generic.List<T><ValueChangeItem> | Improve this Doc View Source ChangeTracker Declaration ValueChangeTracker ChangeTracker { get; } Property Value Type Description ValueChangeTracker | Improve this Doc View Source DataEntityId Declaration OnlinerString DataEntityId { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerString"
  },
  "api/AXOpen.Data.IDataExchangeOperations.html": {
    "href": "api/AXOpen.Data.IDataExchangeOperations.html",
    "title": "Interface IDataExchangeOperations | System.Dynamic.ExpandoObject",
    "keywords": "Interface IDataExchangeOperations An interface which grants access to certain operations in DataExchange viewmodel, like searching by id, invoking search or filling the search box Namespace: AXOpen.Data Assembly: ix_ax_axopen_data.dll Syntax public interface IDataExchangeOperations Properties | Improve this Doc View Source FilterByID Declaration string FilterByID { get; set; } Property Value Type Description string | Improve this Doc View Source SelectedRecord Declaration object SelectedRecord { get; } Property Value Type Description object Methods | Improve this Doc View Source InvokeSearch() Declaration void InvokeSearch()"
  },
  "api/AXOpen.Data.InMemory.html": {
    "href": "api/AXOpen.Data.InMemory.html",
    "title": "Namespace AXOpen.Data.InMemory | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen.Data.InMemory Classes InMemoryRepository<T> Provides in memory data repository. important The data in this repository persist only during the run of the application. InMemoryRepositorySettings<T> Repository settings for InMemoryRepository<T>. Repository SameObjectReferenceException"
  },
  "api/AXOpen.Data.InMemory.InMemoryRepository-1.html": {
    "href": "api/AXOpen.Data.InMemory.InMemoryRepository-1.html",
    "title": "Class InMemoryRepository<T> | System.Dynamic.ExpandoObject",
    "keywords": "Class InMemoryRepository<T> Provides in memory data repository. important The data in this repository persist only during the run of the application. Inheritance object AXOpen.Base.Data.RepositoryBase<T><T> InMemoryRepository<T> Implements AXOpen.Base.Data.IRepository<T><T> AXOpen.Base.Data.IRepository Inherited Members AXOpen.Base.Data.RepositoryBase<T>.OnCreate AXOpen.Base.Data.RepositoryBase<T>.OnRead AXOpen.Base.Data.RepositoryBase<T>.OnUpdate AXOpen.Base.Data.RepositoryBase<T>.OnDelete AXOpen.Base.Data.RepositoryBase<T>.OnCreateDone AXOpen.Base.Data.RepositoryBase<T>.OnReadDone AXOpen.Base.Data.RepositoryBase<T>.OnUpdateDone AXOpen.Base.Data.RepositoryBase<T>.OnDeleteDone AXOpen.Base.Data.RepositoryBase<T>.OnCreateFailed AXOpen.Base.Data.RepositoryBase<T>.OnReadFailed AXOpen.Base.Data.RepositoryBase<T>.OnUpdateFailed AXOpen.Base.Data.RepositoryBase<T>.OnDeleteFailed AXOpen.Base.Data.RepositoryBase<T>.OnRecordUpdateValidation AXOpen.Base.Data.RepositoryBase<T>.Count AXOpen.Base.Data.RepositoryBase<T>.FilteredCount(string, AXOpen.Base.Data.eSearchMode) AXOpen.Base.Data.RepositoryBase<T>.Exists(string) AXOpen.Base.Data.RepositoryBase<T>.Create(string, T) AXOpen.Base.Data.RepositoryBase<T>.Read(string) AXOpen.Base.Data.RepositoryBase<T>.Update(string, T) AXOpen.Base.Data.RepositoryBase<T>.Delete(string) AXOpen.Base.Data.RepositoryBase<T>.GetRecords(string, int, int, AXOpen.Base.Data.eSearchMode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Data.InMemory Assembly: AXOpen.Data.InMemory.dll Syntax public class InMemoryRepository<T> : RepositoryBase<T>, IRepository<T>, IRepository where T : IBrowsableDataObject Type Parameters Name Description T POCO twin type Constructors | Improve this Doc View Source InMemoryRepository() Creates new instance of InMemoryRepository<T> Declaration public InMemoryRepository() | Improve this Doc View Source InMemoryRepository(InMemoryRepositorySettings<T>) Creates new instance of InMemoryRepository<T> Declaration public InMemoryRepository(InMemoryRepositorySettings<T> parameters) Parameters Type Name Description InMemoryRepositorySettings<T> parameters Repository settings Properties | Improve this Doc View Source CountNvi Declaration protected override long CountNvi { get; } Property Value Type Description long Overrides AXOpen.Base.Data.RepositoryBase<T>.CountNvi | Improve this Doc View Source Queryable Declaration public override IQueryable<T> Queryable { get; } Property Value Type Description System.Linq.IQueryable<T><T> Overrides AXOpen.Base.Data.RepositoryBase<T>.Queryable Methods | Improve this Doc View Source CreateNvi(string, T) Declaration protected override void CreateNvi(string identifier, T data) Parameters Type Name Description string identifier T data Overrides AXOpen.Base.Data.RepositoryBase<T>.CreateNvi(string, T) | Improve this Doc View Source DeleteNvi(string) Declaration protected override void DeleteNvi(string identifier) Parameters Type Name Description string identifier Overrides AXOpen.Base.Data.RepositoryBase<T>.DeleteNvi(string) | Improve this Doc View Source ExistsNvi(string) Declaration protected override bool ExistsNvi(string identifier) Parameters Type Name Description string identifier Returns Type Description bool Overrides AXOpen.Base.Data.RepositoryBase<T>.ExistsNvi(string) | Improve this Doc View Source FilteredCountNvi(string, eSearchMode) Declaration protected override long FilteredCountNvi(string id, eSearchMode searchMode) Parameters Type Name Description string id AXOpen.Base.Data.eSearchMode searchMode Returns Type Description long Overrides AXOpen.Base.Data.RepositoryBase<T>.FilteredCountNvi(string, AXOpen.Base.Data.eSearchMode) | Improve this Doc View Source GetRecordsNvi(string, int, int, eSearchMode) Declaration protected override IEnumerable<T> GetRecordsNvi(string identifier, int limit, int skip, eSearchMode searchMode) Parameters Type Name Description string identifier int limit int skip AXOpen.Base.Data.eSearchMode searchMode Returns Type Description System.Collections.Generic.IEnumerable<T><T> Overrides AXOpen.Base.Data.RepositoryBase<T>.GetRecordsNvi(string, int, int, AXOpen.Base.Data.eSearchMode) | Improve this Doc View Source ReadNvi(string) Declaration protected override T ReadNvi(string identifier) Parameters Type Name Description string identifier Returns Type Description T Overrides AXOpen.Base.Data.RepositoryBase<T>.ReadNvi(string) | Improve this Doc View Source UpdateNvi(string, T) Declaration protected override void UpdateNvi(string identifier, T data) Parameters Type Name Description string identifier T data Overrides AXOpen.Base.Data.RepositoryBase<T>.UpdateNvi(string, T) Implements AXOpen.Base.Data.IRepository<T> AXOpen.Base.Data.IRepository"
  },
  "api/AXOpen.Data.InMemory.InMemoryRepositorySettings-1.html": {
    "href": "api/AXOpen.Data.InMemory.InMemoryRepositorySettings-1.html",
    "title": "Class InMemoryRepositorySettings<T> | System.Dynamic.ExpandoObject",
    "keywords": "Class InMemoryRepositorySettings<T> Repository settings for InMemoryRepository<T>. Inheritance object AXOpen.Base.Data.RepositorySettings InMemoryRepositorySettings<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Data.InMemory Assembly: AXOpen.Data.InMemory.dll Syntax public class InMemoryRepositorySettings<T> : RepositorySettings Type Parameters Name Description T POCO twin type"
  },
  "api/AXOpen.Data.InMemory.Repository.html": {
    "href": "api/AXOpen.Data.InMemory.Repository.html",
    "title": "Class Repository | System.Dynamic.ExpandoObject",
    "keywords": "Class Repository Inheritance object Repository Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Data.InMemory Assembly: AXOpen.Data.InMemory.dll Syntax public static class Repository Methods | Improve this Doc View Source Factory<T>(InMemoryRepositorySettings<T>) Declaration public static IRepository<T> Factory<T>(this InMemoryRepositorySettings<T> parameters) where T : IBrowsableDataObject Parameters Type Name Description InMemoryRepositorySettings<T> parameters Returns Type Description AXOpen.Base.Data.IRepository<T><T> Type Parameters Name Description T"
  },
  "api/AXOpen.Data.InMemory.SameObjectReferenceException.html": {
    "href": "api/AXOpen.Data.InMemory.SameObjectReferenceException.html",
    "title": "Class SameObjectReferenceException | System.Dynamic.ExpandoObject",
    "keywords": "Class SameObjectReferenceException Inheritance object System.Exception SameObjectReferenceException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: AXOpen.Data.InMemory Assembly: AXOpen.Data.InMemory.dll Syntax public class SameObjectReferenceException : Exception, ISerializable Constructors | Improve this Doc View Source SameObjectReferenceException() Declaration public SameObjectReferenceException() | Improve this Doc View Source SameObjectReferenceException(SerializationInfo, StreamingContext) Declaration protected SameObjectReferenceException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context | Improve this Doc View Source SameObjectReferenceException(string, Exception) Declaration public SameObjectReferenceException(string message, Exception innerException) Parameters Type Name Description string message System.Exception innerException | Improve this Doc View Source SameObjectReferenceException(string) Declaration public SameObjectReferenceException(string message) Parameters Type Name Description string message Implements System.Runtime.Serialization.ISerializable"
  },
  "api/AXOpen.Data.Interfaces.html": {
    "href": "api/AXOpen.Data.Interfaces.html",
    "title": "Namespace AXOpen.Data.Interfaces | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen.Data.Interfaces Interfaces IDataViewModel"
  },
  "api/AXOpen.Data.Interfaces.IDataViewModel.html": {
    "href": "api/AXOpen.Data.Interfaces.IDataViewModel.html",
    "title": "Interface IDataViewModel | System.Dynamic.ExpandoObject",
    "keywords": "Interface IDataViewModel Namespace: AXOpen.Data.Interfaces Assembly: axopen_data_blazor.dll Syntax public interface IDataViewModel Properties | Improve this Doc View Source CreateItemId Declaration string CreateItemId { get; set; } Property Value Type Description string | Improve this Doc View Source FilterById Declaration string FilterById { get; set; } Property Value Type Description string | Improve this Doc View Source FilteredCount Declaration long FilteredCount { get; set; } Property Value Type Description long | Improve this Doc View Source IsBusy Declaration bool IsBusy { get; set; } Property Value Type Description bool | Improve this Doc View Source Limit Declaration int Limit { get; set; } Property Value Type Description int | Improve this Doc View Source Page Declaration int Page { get; set; } Property Value Type Description int | Improve this Doc View Source Records Declaration ObservableCollection<IBrowsableDataObject> Records { get; set; } Property Value Type Description System.Collections.ObjectModel.ObservableCollection<T><AXOpen.Base.Data.IBrowsableDataObject> | Improve this Doc View Source SearchMode Declaration eSearchMode SearchMode { get; set; } Property Value Type Description AXOpen.Base.Data.eSearchMode | Improve this Doc View Source SelectedRecord Declaration IBrowsableDataObject SelectedRecord { get; set; } Property Value Type Description AXOpen.Base.Data.IBrowsableDataObject Methods | Improve this Doc View Source Copy() Declaration Task Copy() Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source CreateNew() Declaration Task CreateNew() Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source Delete() Declaration void Delete() | Improve this Doc View Source Edit() Declaration Task Edit() Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source ExportData() Declaration void ExportData() | Improve this Doc View Source FillObservableRecordsAsync() Declaration Task FillObservableRecordsAsync() Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source Filter() Declaration Task Filter() Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source ImportData() Declaration void ImportData() | Improve this Doc View Source LoadFromPlc() Declaration Task LoadFromPlc() Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source RefreshFilter() Declaration Task RefreshFilter() Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source SendToPlc() Declaration Task SendToPlc() Returns Type Description System.Threading.Tasks.Task Events | Improve this Doc View Source PropertyChanged Declaration event PropertyChangedEventHandler? PropertyChanged Event Type Type Description System.ComponentModel.PropertyChangedEventHandler"
  },
  "api/AXOpen.Data.Json.html": {
    "href": "api/AXOpen.Data.Json.html",
    "title": "Namespace AXOpen.Data.Json | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen.Data.Json Classes JsonRepository<T> Provides repository for storing data in files with Json format. warning This repository type is not suitable for large data collections. Use this repository for settings, recipes or data persistence with limited number of records. JsonRepositorySettings<T> Provides JsonRepository<T> parameter"
  },
  "api/AXOpen.Data.Json.JsonRepository-1.html": {
    "href": "api/AXOpen.Data.Json.JsonRepository-1.html",
    "title": "Class JsonRepository<T> | System.Dynamic.ExpandoObject",
    "keywords": "Class JsonRepository<T> Provides repository for storing data in files with Json format. warning This repository type is not suitable for large data collections. Use this repository for settings, recipes or data persistence with limited number of records. Inheritance object AXOpen.Base.Data.RepositoryBase<T><T> JsonRepository<T> Implements AXOpen.Base.Data.IRepository<T><T> AXOpen.Base.Data.IRepository Inherited Members AXOpen.Base.Data.RepositoryBase<T>.OnCreate AXOpen.Base.Data.RepositoryBase<T>.OnRead AXOpen.Base.Data.RepositoryBase<T>.OnUpdate AXOpen.Base.Data.RepositoryBase<T>.OnDelete AXOpen.Base.Data.RepositoryBase<T>.OnCreateDone AXOpen.Base.Data.RepositoryBase<T>.OnReadDone AXOpen.Base.Data.RepositoryBase<T>.OnUpdateDone AXOpen.Base.Data.RepositoryBase<T>.OnDeleteDone AXOpen.Base.Data.RepositoryBase<T>.OnCreateFailed AXOpen.Base.Data.RepositoryBase<T>.OnReadFailed AXOpen.Base.Data.RepositoryBase<T>.OnUpdateFailed AXOpen.Base.Data.RepositoryBase<T>.OnDeleteFailed AXOpen.Base.Data.RepositoryBase<T>.OnRecordUpdateValidation AXOpen.Base.Data.RepositoryBase<T>.Count AXOpen.Base.Data.RepositoryBase<T>.FilteredCount(string, AXOpen.Base.Data.eSearchMode) AXOpen.Base.Data.RepositoryBase<T>.Exists(string) AXOpen.Base.Data.RepositoryBase<T>.Create(string, T) AXOpen.Base.Data.RepositoryBase<T>.Read(string) AXOpen.Base.Data.RepositoryBase<T>.Update(string, T) AXOpen.Base.Data.RepositoryBase<T>.Delete(string) AXOpen.Base.Data.RepositoryBase<T>.GetRecords(string, int, int, AXOpen.Base.Data.eSearchMode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Data.Json Assembly: AXOpen.Data.Json.dll Syntax public class JsonRepository<T> : RepositoryBase<T>, IRepository<T>, IRepository where T : IBrowsableDataObject Type Parameters Name Description T POCO twin type Constructors | Improve this Doc View Source JsonRepository(JsonRepositorySettings<T>) Creates new instance of JsonRepository<T> Declaration public JsonRepository(JsonRepositorySettings<T> parameters) Parameters Type Name Description JsonRepositorySettings<T> parameters Repository parameters Properties | Improve this Doc View Source CountNvi Declaration protected override long CountNvi { get; } Property Value Type Description long Overrides AXOpen.Base.Data.RepositoryBase<T>.CountNvi | Improve this Doc View Source Location Get the location (directory) where the entries of this repository are placed. Declaration public string Location { get; } Property Value Type Description string | Improve this Doc View Source Queryable Declaration public override IQueryable<T> Queryable { get; } Property Value Type Description System.Linq.IQueryable<T><T> Overrides AXOpen.Base.Data.RepositoryBase<T>.Queryable Methods | Improve this Doc View Source CreateNvi(string, T) Declaration protected override void CreateNvi(string identifier, T data) Parameters Type Name Description string identifier T data Overrides AXOpen.Base.Data.RepositoryBase<T>.CreateNvi(string, T) | Improve this Doc View Source DeleteNvi(string) Declaration protected override void DeleteNvi(string identifier) Parameters Type Name Description string identifier Overrides AXOpen.Base.Data.RepositoryBase<T>.DeleteNvi(string) | Improve this Doc View Source ExistsNvi(string) Declaration protected override bool ExistsNvi(string identifier) Parameters Type Name Description string identifier Returns Type Description bool Overrides AXOpen.Base.Data.RepositoryBase<T>.ExistsNvi(string) | Improve this Doc View Source FilteredCountNvi(string, eSearchMode) Declaration protected override long FilteredCountNvi(string id, eSearchMode searchMode) Parameters Type Name Description string id AXOpen.Base.Data.eSearchMode searchMode Returns Type Description long Overrides AXOpen.Base.Data.RepositoryBase<T>.FilteredCountNvi(string, AXOpen.Base.Data.eSearchMode) | Improve this Doc View Source GetRecordsNvi(string, int, int, eSearchMode) Declaration protected override IEnumerable<T> GetRecordsNvi(string identifier, int limit, int skip, eSearchMode searchMode) Parameters Type Name Description string identifier int limit int skip AXOpen.Base.Data.eSearchMode searchMode Returns Type Description System.Collections.Generic.IEnumerable<T><T> Overrides AXOpen.Base.Data.RepositoryBase<T>.GetRecordsNvi(string, int, int, AXOpen.Base.Data.eSearchMode) | Improve this Doc View Source ReadNvi(string) Declaration protected override T ReadNvi(string identifier) Parameters Type Name Description string identifier Returns Type Description T Overrides AXOpen.Base.Data.RepositoryBase<T>.ReadNvi(string) | Improve this Doc View Source UpdateNvi(string, T) Declaration protected override void UpdateNvi(string identifier, T data) Parameters Type Name Description string identifier T data Overrides AXOpen.Base.Data.RepositoryBase<T>.UpdateNvi(string, T) Implements AXOpen.Base.Data.IRepository<T> AXOpen.Base.Data.IRepository"
  },
  "api/AXOpen.Data.Json.JsonRepositorySettings-1.html": {
    "href": "api/AXOpen.Data.Json.JsonRepositorySettings-1.html",
    "title": "Class JsonRepositorySettings<T> | System.Dynamic.ExpandoObject",
    "keywords": "Class JsonRepositorySettings<T> Provides JsonRepository<T> parameter Inheritance object AXOpen.Base.Data.RepositorySettings JsonRepositorySettings<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Data.Json Assembly: AXOpen.Data.Json.dll Syntax public class JsonRepositorySettings<T> : RepositorySettings Type Parameters Name Description T POCO twin type Constructors | Improve this Doc View Source JsonRepositorySettings(string) Creates new instance of JsonRepositorySettings<T> Declaration public JsonRepositorySettings(string repositoryLocation) Parameters Type Name Description string repositoryLocation Location for the Json files Properties | Improve this Doc View Source Location Gets location of Json file of the respective repository. Declaration public string Location { get; } Property Value Type Description string"
  },
  "api/AXOpen.Data.MongoDb.FloatTruncationSerializer.html": {
    "href": "api/AXOpen.Data.MongoDb.FloatTruncationSerializer.html",
    "title": "Class FloatTruncationSerializer | System.Dynamic.ExpandoObject",
    "keywords": "Class FloatTruncationSerializer Writes the float value to mongo as double as reads it back as float. Inheritance object MongoDB.Bson.Serialization.Serializers.SerializerBase<TValue><float> FloatTruncationSerializer Implements MongoDB.Bson.Serialization.IBsonSerializer<TValue><float> MongoDB.Bson.Serialization.IBsonSerializer Inherited Members MongoDB.Bson.Serialization.Serializers.SerializerBase<float>.CreateCannotBeDeserializedException() MongoDB.Bson.Serialization.Serializers.SerializerBase<float>.CreateCannotBeSerializedException() MongoDB.Bson.Serialization.Serializers.SerializerBase<float>.CreateCannotDeserializeFromBsonTypeException(MongoDB.Bson.BsonType) MongoDB.Bson.Serialization.Serializers.SerializerBase<float>.EnsureBsonTypeEquals(MongoDB.Bson.IO.IBsonReader, MongoDB.Bson.BsonType) MongoDB.Bson.Serialization.Serializers.SerializerBase<float>.ValueType object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Data.MongoDb Assembly: AXOpen.Data.MongoDb.dll Syntax public class FloatTruncationSerializer : SerializerBase<float>, IBsonSerializer<float>, IBsonSerializer Methods | Improve this Doc View Source Deserialize(BsonDeserializationContext, BsonDeserializationArgs) Declaration public override float Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args) Parameters Type Name Description MongoDB.Bson.Serialization.BsonDeserializationContext context MongoDB.Bson.Serialization.BsonDeserializationArgs args Returns Type Description float Overrides MongoDB.Bson.Serialization.Serializers.SerializerBase<float>.Deserialize(MongoDB.Bson.Serialization.BsonDeserializationContext, MongoDB.Bson.Serialization.BsonDeserializationArgs) | Improve this Doc View Source Serialize(BsonSerializationContext, BsonSerializationArgs, float) Declaration public override void Serialize(BsonSerializationContext context, BsonSerializationArgs args, float value) Parameters Type Name Description MongoDB.Bson.Serialization.BsonSerializationContext context MongoDB.Bson.Serialization.BsonSerializationArgs args float value Overrides MongoDB.Bson.Serialization.Serializers.SerializerBase<float>.Serialize(MongoDB.Bson.Serialization.BsonSerializationContext, MongoDB.Bson.Serialization.BsonSerializationArgs, float) Implements MongoDB.Bson.Serialization.IBsonSerializer<TValue> MongoDB.Bson.Serialization.IBsonSerializer"
  },
  "api/AXOpen.Data.MongoDb.html": {
    "href": "api/AXOpen.Data.MongoDb.html",
    "title": "Namespace AXOpen.Data.MongoDb | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen.Data.MongoDb Classes FloatTruncationSerializer Writes the float value to mongo as double as reads it back as float. MongoDbCredentials MongoDbRepository<T> Provides access to basic operations for MongoDB. To use this code, mongo database must run somewhere. To start MongoDB locally you can use following code Start MongoDB without authentication \"C:\\Program Files\\MongoDB\\Server\\4.4\\bin\\mongod.exe\" --dbpath C:\\DATA\\DB446\\ Start MongoDB with authentication. You don't have to use the \"--port\" attribute or use a different \"--dbpath\". The only reason why would you want to run authenticated database on a different dbpath and port simultaneously is if they're running on the same machine. More info about the use credentials MongoDbCredentials \"C:\\Program Files\\MongoDB\\Server\\4.4\\bin\\mongod.exe\" --dbpath C:\\DATA\\DB446_AUTH\\ --auth --port 27018 MongoDbRepositorySettings<T> Repository"
  },
  "api/AXOpen.Data.MongoDb.MongoDbCredentials.html": {
    "href": "api/AXOpen.Data.MongoDb.MongoDbCredentials.html",
    "title": "Class MongoDbCredentials | System.Dynamic.ExpandoObject",
    "keywords": "Class MongoDbCredentials Inheritance object MongoDbCredentials Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Data.MongoDb Assembly: AXOpen.Data.MongoDb.dll Syntax public class MongoDbCredentials Constructors | Improve this Doc View Source MongoDbCredentials(string, string, string) Declaration public MongoDbCredentials(string usersDatabase, string user, string password) Parameters Type Name Description string usersDatabase string user string password Properties | Improve this Doc View Source Password Declaration public string Password { get; } Property Value Type Description string | Improve this Doc View Source Username Declaration public string Username { get; } Property Value Type Description string | Improve this Doc View Source UsersDatabase Declaration public string UsersDatabase { get; } Property Value Type Description string"
  },
  "api/AXOpen.Data.MongoDb.MongoDbRepository-1.html": {
    "href": "api/AXOpen.Data.MongoDb.MongoDbRepository-1.html",
    "title": "Class MongoDbRepository<T> | System.Dynamic.ExpandoObject",
    "keywords": "Class MongoDbRepository<T> Provides access to basic operations for MongoDB. To use this code, mongo database must run somewhere. To start MongoDB locally you can use following code Start MongoDB without authentication \"C:\\Program Files\\MongoDB\\Server\\4.4\\bin\\mongod.exe\" --dbpath C:\\DATA\\DB446\\ Start MongoDB with authentication. You don't have to use the \"--port\" attribute or use a different \"--dbpath\". The only reason why would you want to run authenticated database on a different dbpath and port simultaneously is if they're running on the same machine. More info about the use credentials MongoDbCredentials \"C:\\Program Files\\MongoDB\\Server\\4.4\\bin\\mongod.exe\" --dbpath C:\\DATA\\DB446_AUTH\\ --auth --port 27018 Inheritance object AXOpen.Base.Data.RepositoryBase<T><T> MongoDbRepository<T> Implements AXOpen.Base.Data.IRepository<T><T> AXOpen.Base.Data.IRepository Inherited Members AXOpen.Base.Data.RepositoryBase<T>.OnCreate AXOpen.Base.Data.RepositoryBase<T>.OnRead AXOpen.Base.Data.RepositoryBase<T>.OnUpdate AXOpen.Base.Data.RepositoryBase<T>.OnDelete AXOpen.Base.Data.RepositoryBase<T>.OnCreateDone AXOpen.Base.Data.RepositoryBase<T>.OnReadDone AXOpen.Base.Data.RepositoryBase<T>.OnUpdateDone AXOpen.Base.Data.RepositoryBase<T>.OnDeleteDone AXOpen.Base.Data.RepositoryBase<T>.OnCreateFailed AXOpen.Base.Data.RepositoryBase<T>.OnReadFailed AXOpen.Base.Data.RepositoryBase<T>.OnUpdateFailed AXOpen.Base.Data.RepositoryBase<T>.OnDeleteFailed AXOpen.Base.Data.RepositoryBase<T>.OnRecordUpdateValidation AXOpen.Base.Data.RepositoryBase<T>.Count AXOpen.Base.Data.RepositoryBase<T>.FilteredCount(string, AXOpen.Base.Data.eSearchMode) AXOpen.Base.Data.RepositoryBase<T>.Exists(string) AXOpen.Base.Data.RepositoryBase<T>.Create(string, T) AXOpen.Base.Data.RepositoryBase<T>.Read(string) AXOpen.Base.Data.RepositoryBase<T>.Update(string, T) AXOpen.Base.Data.RepositoryBase<T>.Delete(string) AXOpen.Base.Data.RepositoryBase<T>.GetRecords(string, int, int, AXOpen.Base.Data.eSearchMode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Data.MongoDb Assembly: AXOpen.Data.MongoDb.dll Syntax public class MongoDbRepository<T> : RepositoryBase<T>, IRepository<T>, IRepository where T : IBrowsableDataObject Type Parameters Name Description T Constructors | Improve this Doc View Source MongoDbRepository(MongoDbRepositorySettings<T>) Creates new instance of MongoDbRepository<T>. Declaration public MongoDbRepository(MongoDbRepositorySettings<T> parameters) Parameters Type Name Description MongoDbRepositorySettings<T> parameters Repository settings Properties | Improve this Doc View Source Collection Gets the MongoDB.Driver.IMongoCollection<TDocument> of this repository. Declaration public IMongoCollection<T> Collection { get; } Property Value Type Description MongoDB.Driver.IMongoCollection<TDocument><T> | Improve this Doc View Source CountNvi Declaration protected override long CountNvi { get; } Property Value Type Description long Overrides AXOpen.Base.Data.RepositoryBase<T>.CountNvi | Improve this Doc View Source Queryable Declaration public override IQueryable<T> Queryable { get; } Property Value Type Description System.Linq.IQueryable<T><T> Overrides AXOpen.Base.Data.RepositoryBase<T>.Queryable Methods | Improve this Doc View Source CreateNvi(string, T) Declaration protected override void CreateNvi(string identifier, T data) Parameters Type Name Description string identifier T data Overrides AXOpen.Base.Data.RepositoryBase<T>.CreateNvi(string, T) | Improve this Doc View Source DeleteNvi(string) Declaration protected override void DeleteNvi(string identifier) Parameters Type Name Description string identifier Overrides AXOpen.Base.Data.RepositoryBase<T>.DeleteNvi(string) | Improve this Doc View Source ExistsNvi(string) Declaration protected override bool ExistsNvi(string identifier) Parameters Type Name Description string identifier Returns Type Description bool Overrides AXOpen.Base.Data.RepositoryBase<T>.ExistsNvi(string) | Improve this Doc View Source FilteredCountNvi(string, eSearchMode) Declaration protected override long FilteredCountNvi(string id, eSearchMode searchMode) Parameters Type Name Description string id AXOpen.Base.Data.eSearchMode searchMode Returns Type Description long Overrides AXOpen.Base.Data.RepositoryBase<T>.FilteredCountNvi(string, AXOpen.Base.Data.eSearchMode) | Improve this Doc View Source GetRecordsNvi(string, int, int, eSearchMode) Declaration protected override IEnumerable<T> GetRecordsNvi(string identifier, int limit, int skip, eSearchMode searchMode) Parameters Type Name Description string identifier int limit int skip AXOpen.Base.Data.eSearchMode searchMode Returns Type Description System.Collections.Generic.IEnumerable<T><T> Overrides AXOpen.Base.Data.RepositoryBase<T>.GetRecordsNvi(string, int, int, AXOpen.Base.Data.eSearchMode) | Improve this Doc View Source ReadNvi(string) Declaration protected override T ReadNvi(string identifier) Parameters Type Name Description string identifier Returns Type Description T Overrides AXOpen.Base.Data.RepositoryBase<T>.ReadNvi(string) | Improve this Doc View Source UpdateNvi(string, T) Declaration protected override void UpdateNvi(string identifier, T data) Parameters Type Name Description string identifier T data Overrides AXOpen.Base.Data.RepositoryBase<T>.UpdateNvi(string, T) Implements AXOpen.Base.Data.IRepository<T> AXOpen.Base.Data.IRepository"
  },
  "api/AXOpen.Data.MongoDb.MongoDbRepositorySettings-1.html": {
    "href": "api/AXOpen.Data.MongoDb.MongoDbRepositorySettings-1.html",
    "title": "Class MongoDbRepositorySettings<T> | System.Dynamic.ExpandoObject",
    "keywords": "Class MongoDbRepositorySettings<T> Inheritance object AXOpen.Base.Data.RepositorySettings MongoDbRepositorySettings<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Data.MongoDb Assembly: AXOpen.Data.MongoDb.dll Syntax public class MongoDbRepositorySettings<T> : RepositorySettings where T : IBrowsableDataObject Type Parameters Name Description T Constructors | Improve this Doc View Source MongoDbRepositorySettings(string, string, string, MongoDbCredentials) Creates new instance of MongoDbRepositorySettings<T> for a MongoDbRepository<T> with secured access. Declaration public MongoDbRepositorySettings(string connectionString, string databaseName, string collectionName, MongoDbCredentials credentials) Parameters Type Name Description string connectionString Database connection string string databaseName Database name string collectionName Collection name MongoDbCredentials credentials Credentials | Improve this Doc View Source MongoDbRepositorySettings(string, string, string) Creates new instance of MongoDbRepositorySettings<T> for a MongoDbRepository<T> with NON-SECURED access. Declaration public MongoDbRepositorySettings(string connectionString, string databaseName, string collectionName) Parameters Type Name Description string connectionString Database connection string string databaseName Database name string collectionName Collection name Properties | Improve this Doc View Source Client Declaration public IMongoClient Client { get; } Property Value Type Description MongoDB.Driver.IMongoClient | Improve this Doc View Source Collection Declaration public IMongoCollection<T> Collection { get; } Property Value Type Description MongoDB.Driver.IMongoCollection<TDocument><T> | Improve this Doc View Source Database Declaration public IMongoDatabase Database { get; } Property Value Type Description MongoDB.Driver.IMongoDatabase Methods | Improve this Doc View Source GetConnectionInfo() Declaration public string GetConnectionInfo() Returns Type Description string | Improve this Doc View Source WaitForMongoServerAvailability() Declaration public void WaitForMongoServerAvailability()"
  },
  "api/AXOpen.Data.MongoDb.Repository.html": {
    "href": "api/AXOpen.Data.MongoDb.Repository.html",
    "title": "Class Repository | System.Dynamic.ExpandoObject",
    "keywords": "Class Repository Inheritance object Repository Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Data.MongoDb Assembly: AXOpen.Data.MongoDb.dll Syntax public static class Repository Methods | Improve this Doc View Source Factory<T>(MongoDbRepositorySettings<T>) Declaration public static IRepository<T> Factory<T>(MongoDbRepositorySettings<T> parameters) where T : IBrowsableDataObject Parameters Type Name Description MongoDbRepositorySettings<T> parameters Returns Type Description AXOpen.Base.Data.IRepository<T><T> Type Parameters Name Description T"
  },
  "api/AXOpen.Data.MultipleDataEntityAttributeException.html": {
    "href": "api/AXOpen.Data.MultipleDataEntityAttributeException.html",
    "title": "Class MultipleDataEntityAttributeException | System.Dynamic.ExpandoObject",
    "keywords": "Class MultipleDataEntityAttributeException Inheritance object System.Exception MultipleDataEntityAttributeException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: AXOpen.Data Assembly: ix_ax_axopen_data.dll Syntax public class MultipleDataEntityAttributeException : Exception, ISerializable Constructors | Improve this Doc View Source MultipleDataEntityAttributeException() Declaration public MultipleDataEntityAttributeException() | Improve this Doc View Source MultipleDataEntityAttributeException(string) Declaration public MultipleDataEntityAttributeException(string message) Parameters Type Name Description string message Implements System.Runtime.Serialization.ISerializable"
  },
  "api/AXOpen.Data.MultipleRemoteCallInitializationException.html": {
    "href": "api/AXOpen.Data.MultipleRemoteCallInitializationException.html",
    "title": "Class MultipleRemoteCallInitializationException | System.Dynamic.ExpandoObject",
    "keywords": "Class MultipleRemoteCallInitializationException Inheritance object System.Exception MultipleRemoteCallInitializationException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: AXOpen.Data Assembly: ix_ax_axopen_data.dll Syntax public class MultipleRemoteCallInitializationException : Exception, ISerializable Constructors | Improve this Doc View Source MultipleRemoteCallInitializationException() Declaration public MultipleRemoteCallInitializationException() | Improve this Doc View Source MultipleRemoteCallInitializationException(SerializationInfo, StreamingContext) Initializes a new instance of the MultipleRemoteCallInitializationException class with serialized data. Declaration protected MultipleRemoteCallInitializationException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. Exceptions Type Condition System.ArgumentNullException The info parameter is null. System.Runtime.Serialization.SerializationException The class name is null or System.Exception.HResult is zero (0). | Improve this Doc View Source MultipleRemoteCallInitializationException(string, Exception) Initializes a new instance of the MultipleRemoteCallInitializationException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public MultipleRemoteCallInitializationException(string message, Exception innerException) Parameters Type Name Description string message The error message that explains the reason for the exception. System.Exception innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. | Improve this Doc View Source MultipleRemoteCallInitializationException(string) Initializes a new instance of the MultipleRemoteCallInitializationException class with a specified error message. Declaration public MultipleRemoteCallInitializationException(string message) Parameters Type Name Description string message The message that describes the error. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/AXOpen.Data.RavenDb.html": {
    "href": "api/AXOpen.Data.RavenDb.html",
    "title": "Namespace AXOpen.Data.RavenDb | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen.Data.RavenDb Classes RavenDbRepository<T> RavenDbRepositorySettings<T> RavenDbRepositorySettingsBase<T> SharedData"
  },
  "api/AXOpen.Data.RavenDb.RavenDbRepository-1.html": {
    "href": "api/AXOpen.Data.RavenDb.RavenDbRepository-1.html",
    "title": "Class RavenDbRepository<T> | System.Dynamic.ExpandoObject",
    "keywords": "Class RavenDbRepository<T> Inheritance object AXOpen.Base.Data.RepositoryBase<T><T> RavenDbRepository<T> Implements AXOpen.Base.Data.IRepository<T><T> AXOpen.Base.Data.IRepository Inherited Members AXOpen.Base.Data.RepositoryBase<T>.OnCreate AXOpen.Base.Data.RepositoryBase<T>.OnRead AXOpen.Base.Data.RepositoryBase<T>.OnUpdate AXOpen.Base.Data.RepositoryBase<T>.OnDelete AXOpen.Base.Data.RepositoryBase<T>.OnCreateDone AXOpen.Base.Data.RepositoryBase<T>.OnReadDone AXOpen.Base.Data.RepositoryBase<T>.OnUpdateDone AXOpen.Base.Data.RepositoryBase<T>.OnDeleteDone AXOpen.Base.Data.RepositoryBase<T>.OnCreateFailed AXOpen.Base.Data.RepositoryBase<T>.OnReadFailed AXOpen.Base.Data.RepositoryBase<T>.OnUpdateFailed AXOpen.Base.Data.RepositoryBase<T>.OnDeleteFailed AXOpen.Base.Data.RepositoryBase<T>.OnRecordUpdateValidation AXOpen.Base.Data.RepositoryBase<T>.Count AXOpen.Base.Data.RepositoryBase<T>.FilteredCount(string, AXOpen.Base.Data.eSearchMode) AXOpen.Base.Data.RepositoryBase<T>.Exists(string) AXOpen.Base.Data.RepositoryBase<T>.Create(string, T) AXOpen.Base.Data.RepositoryBase<T>.Read(string) AXOpen.Base.Data.RepositoryBase<T>.Update(string, T) AXOpen.Base.Data.RepositoryBase<T>.Delete(string) AXOpen.Base.Data.RepositoryBase<T>.GetRecords(string, int, int, AXOpen.Base.Data.eSearchMode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Data.RavenDb Assembly: AXOpen.Data.RavenDb.dll Syntax public class RavenDbRepository<T> : RepositoryBase<T>, IRepository<T>, IRepository where T : IBrowsableDataObject Type Parameters Name Description T Constructors | Improve this Doc View Source RavenDbRepository(RavenDbRepositorySettingsBase<T>) Declaration public RavenDbRepository(RavenDbRepositorySettingsBase<T> parameters) Parameters Type Name Description RavenDbRepositorySettingsBase<T> parameters Properties | Improve this Doc View Source CountNvi Declaration protected override long CountNvi { get; } Property Value Type Description long Overrides AXOpen.Base.Data.RepositoryBase<T>.CountNvi | Improve this Doc View Source Queryable Declaration public override IQueryable<T> Queryable { get; } Property Value Type Description System.Linq.IQueryable<T><T> Overrides AXOpen.Base.Data.RepositoryBase<T>.Queryable Methods | Improve this Doc View Source CreateNvi(string, T) Declaration protected override void CreateNvi(string identifier, T data) Parameters Type Name Description string identifier T data Overrides AXOpen.Base.Data.RepositoryBase<T>.CreateNvi(string, T) | Improve this Doc View Source DeleteNvi(string) Declaration protected override void DeleteNvi(string identifier) Parameters Type Name Description string identifier Overrides AXOpen.Base.Data.RepositoryBase<T>.DeleteNvi(string) | Improve this Doc View Source EnsureDatabaseExists(IDocumentStore, string, bool) Declaration protected void EnsureDatabaseExists(IDocumentStore store, string database = null, bool createDatabaseIfNotExists = true) Parameters Type Name Description Raven.Client.Documents.IDocumentStore store string database bool createDatabaseIfNotExists | Improve this Doc View Source ExistsNvi(string) Declaration protected override bool ExistsNvi(string identifier) Parameters Type Name Description string identifier Returns Type Description bool Overrides AXOpen.Base.Data.RepositoryBase<T>.ExistsNvi(string) | Improve this Doc View Source FilteredCountNvi(string, eSearchMode) Declaration protected override long FilteredCountNvi(string identifier, eSearchMode searchMode) Parameters Type Name Description string identifier AXOpen.Base.Data.eSearchMode searchMode Returns Type Description long Overrides AXOpen.Base.Data.RepositoryBase<T>.FilteredCountNvi(string, AXOpen.Base.Data.eSearchMode) | Improve this Doc View Source GetRecordsNvi(string, int, int, eSearchMode) Declaration protected override IEnumerable<T> GetRecordsNvi(string identifier, int limit, int skip, eSearchMode searchMode) Parameters Type Name Description string identifier int limit int skip AXOpen.Base.Data.eSearchMode searchMode Returns Type Description System.Collections.Generic.IEnumerable<T><T> Overrides AXOpen.Base.Data.RepositoryBase<T>.GetRecordsNvi(string, int, int, AXOpen.Base.Data.eSearchMode) | Improve this Doc View Source ReadNvi(string) Declaration protected override T ReadNvi(string identifier) Parameters Type Name Description string identifier Returns Type Description T Overrides AXOpen.Base.Data.RepositoryBase<T>.ReadNvi(string) | Improve this Doc View Source UpdateNvi(string, T) Declaration protected override void UpdateNvi(string identifier, T data) Parameters Type Name Description string identifier T data Overrides AXOpen.Base.Data.RepositoryBase<T>.UpdateNvi(string, T) Implements AXOpen.Base.Data.IRepository<T> AXOpen.Base.Data.IRepository"
  },
  "api/AXOpen.Data.RavenDb.RavenDbRepositorySettings-1.html": {
    "href": "api/AXOpen.Data.RavenDb.RavenDbRepositorySettings-1.html",
    "title": "Class RavenDbRepositorySettings<T> | System.Dynamic.ExpandoObject",
    "keywords": "Class RavenDbRepositorySettings<T> Inheritance object AXOpen.Base.Data.RepositorySettings RavenDbRepositorySettingsBase<T> RavenDbRepositorySettings<T> Inherited Members RavenDbRepositorySettingsBase<T>.Store object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Data.RavenDb Assembly: AXOpen.Data.RavenDb.dll Syntax public class RavenDbRepositorySettings<T> : RavenDbRepositorySettingsBase<T> where T : IBrowsableDataObject Type Parameters Name Description T Constructors | Improve this Doc View Source RavenDbRepositorySettings(string[], string, string, string) Declaration public RavenDbRepositorySettings(string[] urls, string databaseName, string certPath, string certPass) Parameters Type Name Description string[] urls string databaseName string certPath string certPass"
  },
  "api/AXOpen.Data.RavenDb.RavenDbRepositorySettingsBase-1.html": {
    "href": "api/AXOpen.Data.RavenDb.RavenDbRepositorySettingsBase-1.html",
    "title": "Class RavenDbRepositorySettingsBase<T> | System.Dynamic.ExpandoObject",
    "keywords": "Class RavenDbRepositorySettingsBase<T> Inheritance object AXOpen.Base.Data.RepositorySettings RavenDbRepositorySettingsBase<T> RavenDbRepositorySettings<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Data.RavenDb Assembly: AXOpen.Data.RavenDb.dll Syntax public class RavenDbRepositorySettingsBase<T> : RepositorySettings where T : IBrowsableDataObject Type Parameters Name Description T Properties | Improve this Doc View Source Store Declaration public IDocumentStore Store { get; set; } Property Value Type Description Raven.Client.Documents.IDocumentStore"
  },
  "api/AXOpen.Data.RavenDb.SharedData.html": {
    "href": "api/AXOpen.Data.RavenDb.SharedData.html",
    "title": "Class SharedData | System.Dynamic.ExpandoObject",
    "keywords": "Class SharedData Inheritance object SharedData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Data.RavenDb Assembly: AXOpen.Data.RavenDb.dll Syntax public static class SharedData Fields | Improve this Doc View Source Stores Declaration public static readonly List<IDocumentStore> Stores Field Value Type Description System.Collections.Generic.List<T><Raven.Client.Documents.IDocumentStore>"
  },
  "api/AXOpen.Data.ValueChangeItem.html": {
    "href": "api/AXOpen.Data.ValueChangeItem.html",
    "title": "Class ValueChangeItem | System.Dynamic.ExpandoObject",
    "keywords": "Class ValueChangeItem Inheritance object ValueChangeItem Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Data Assembly: ix_ax_axopen_data.dll Syntax public class ValueChangeItem Properties | Improve this Doc View Source DateTime Declaration public DateTime DateTime { get; set; } Property Value Type Description System.DateTime | Improve this Doc View Source NewValue Declaration public object NewValue { get; set; } Property Value Type Description object | Improve this Doc View Source OldValue Declaration public object OldValue { get; set; } Property Value Type Description object | Improve this Doc View Source UserName Declaration public string UserName { get; set; } Property Value Type Description string | Improve this Doc View Source ValueTag Declaration public ValueItemDescriptor ValueTag { get; set; } Property Value Type Description ValueItemDescriptor"
  },
  "api/AXOpen.Data.ValueChangeTracker.html": {
    "href": "api/AXOpen.Data.ValueChangeTracker.html",
    "title": "Class ValueChangeTracker | System.Dynamic.ExpandoObject",
    "keywords": "Class ValueChangeTracker Inheritance object ValueChangeTracker Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Data Assembly: ix_ax_axopen_data.dll Syntax public class ValueChangeTracker Constructors | Improve this Doc View Source ValueChangeTracker(ICrudDataObject) Declaration public ValueChangeTracker(ICrudDataObject dataObject) Parameters Type Name Description ICrudDataObject dataObject Methods | Improve this Doc View Source Import(IBrowsableDataObject) Declaration public void Import(IBrowsableDataObject plainObject) Parameters Type Name Description AXOpen.Base.Data.IBrowsableDataObject plainObject | Improve this Doc View Source SaveObservedChanges(IBrowsableDataObject) Declaration public void SaveObservedChanges(IBrowsableDataObject plainObject) Parameters Type Name Description AXOpen.Base.Data.IBrowsableDataObject plainObject | Improve this Doc View Source StartObservingChanges() Declaration public void StartObservingChanges() | Improve this Doc View Source StopObservingChanges() Declaration public void StopObservingChanges()"
  },
  "api/AXOpen.Data.ValueItemDescriptor.html": {
    "href": "api/AXOpen.Data.ValueItemDescriptor.html",
    "title": "Class ValueItemDescriptor | System.Dynamic.ExpandoObject",
    "keywords": "Class ValueItemDescriptor Inheritance object ValueItemDescriptor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Data Assembly: ix_ax_axopen_data.dll Syntax public class ValueItemDescriptor Constructors | Improve this Doc View Source ValueItemDescriptor() Declaration public ValueItemDescriptor() | Improve this Doc View Source ValueItemDescriptor(ITwinPrimitive) Declaration public ValueItemDescriptor(ITwinPrimitive valueTag) Parameters Type Name Description AXSharp.Connector.ITwinPrimitive valueTag Properties | Improve this Doc View Source HumanReadable Declaration public string HumanReadable { get; set; } Property Value Type Description string | Improve this Doc View Source Symbol Declaration public string Symbol { get; set; } Property Value Type Description string"
  },
  "api/AXOpen.Data.WrongTypeOfDataObjectException.html": {
    "href": "api/AXOpen.Data.WrongTypeOfDataObjectException.html",
    "title": "Class WrongTypeOfDataObjectException | System.Dynamic.ExpandoObject",
    "keywords": "Class WrongTypeOfDataObjectException Inheritance object System.Exception WrongTypeOfDataObjectException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: AXOpen.Data Assembly: axopen_data_blazor.dll Syntax public class WrongTypeOfDataObjectException : Exception, ISerializable Constructors | Improve this Doc View Source WrongTypeOfDataObjectException(string) Declaration public WrongTypeOfDataObjectException(string message) Parameters Type Name Description string message Implements System.Runtime.Serialization.ISerializable"
  },
  "api/AXOpen.Messaging.AxoIntConstants.html": {
    "href": "api/AXOpen.Messaging.AxoIntConstants.html",
    "title": "Enum AxoIntConstants | System.Dynamic.ExpandoObject",
    "keywords": "Enum AxoIntConstants Namespace: AXOpen.Messaging Assembly: ix_ax_axopen_abstractions.dll Syntax public enum AxoIntConstants : short Fields Name Description MAX_MESSAGE_TEXT_LENGHT MDS_MAX_INDEX"
  },
  "api/AXOpen.Messaging.Blazor._Imports.html": {
    "href": "api/AXOpen.Messaging.Blazor._Imports.html",
    "title": "Class _Imports | System.Dynamic.ExpandoObject",
    "keywords": "Class _Imports Inheritance object Microsoft.AspNetCore.Components.ComponentBase _Imports Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender Inherited Members Microsoft.AspNetCore.Components.ComponentBase.OnInitialized() Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Messaging.Blazor Assembly: axopen_messaging_blazor.dll Syntax public class _Imports : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender Methods | Improve this Doc View Source BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters Type Name Description Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder Overrides Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender"
  },
  "api/AXOpen.Messaging.Blazor.html": {
    "href": "api/AXOpen.Messaging.Blazor.html",
    "title": "Namespace AXOpen.Messaging.Blazor | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen.Messaging.Blazor Classes _Imports"
  },
  "api/AXOpen.Messaging.Dynamic.AxoMessage.html": {
    "href": "api/AXOpen.Messaging.Dynamic.AxoMessage.html",
    "title": "Class AxoMessage | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoMessage Inheritance object AxoMessage Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Messaging.Dynamic Assembly: ix_ax_axopen_messaging.dll Syntax public class AxoMessage : ITwinObject, ITwinElement Constructors | Improve this Doc View Source AxoMessage(ITwinObject, string, string) Declaration public AxoMessage(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description AXSharp.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source AttributeName Declaration public string AttributeName { get; set; } Property Value Type Description string | Improve this Doc View Source Category Declaration [EnumeratorDiscriminator(typeof(eAxoMessageCategory))] public OnlinerInt Category { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerInt | Improve this Doc View Source Connector Declaration protected Connector Connector { get; } Property Value Type Description AXSharp.Connector.Connector | Improve this Doc View Source Cycle Declaration [ReadOnly] public OnlinerULInt Cycle { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerULInt | Improve this Doc View Source ExpectDequeing Declaration public OnlinerBool ExpectDequeing { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerBool | Improve this Doc View Source HumanReadable Declaration public string HumanReadable { get; set; } Property Value Type Description string | Improve this Doc View Source Identity Declaration [ReadOnly] public OnlinerULInt Identity { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerULInt | Improve this Doc View Source Interpreter Declaration public Translator Interpreter { get; } Property Value Type Description AXSharp.Connector.Localizations.Translator | Improve this Doc View Source MessageDigest Declaration public OnlinerDWord MessageDigest { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerDWord | Improve this Doc View Source Parent Declaration protected ITwinObject Parent { get; set; } Property Value Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source PerCycleCount Declaration [ReadOnly] public OnlinerUSInt PerCycleCount { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerUSInt | Improve this Doc View Source Pinned Declaration public OnlinerBool Pinned { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerBool | Improve this Doc View Source Symbol Declaration public string Symbol { get; protected set; } Property Value Type Description string | Improve this Doc View Source SymbolTail Declaration protected string SymbolTail { get; set; } Property Value Type Description string | Improve this Doc View Source Text Declaration [ReadOnly] public OnlinerString Text { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerString | Improve this Doc View Source TimeStamp Declaration [ReadOnly] public OnlinerLDateTime TimeStamp { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerLDateTime Methods | Improve this Doc View Source AddChild(ITwinObject) Declaration public void AddChild(ITwinObject twinObject) Parameters Type Name Description AXSharp.Connector.ITwinObject twinObject | Improve this Doc View Source AddKid(ITwinElement) Declaration public void AddKid(ITwinElement kid) Parameters Type Name Description AXSharp.Connector.ITwinElement kid | Improve this Doc View Source AddValueTag(ITwinPrimitive) Declaration public void AddValueTag(ITwinPrimitive valueTag) Parameters Type Name Description AXSharp.Connector.ITwinPrimitive valueTag | Improve this Doc View Source CreateEmptyPoco() Declaration public AxoMessage CreateEmptyPoco() Returns Type Description AxoMessage | Improve this Doc View Source GetChildren() Declaration public IEnumerable<ITwinObject> GetChildren() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinObject> | Improve this Doc View Source GetConnector() Declaration public Connector GetConnector() Returns Type Description AXSharp.Connector.Connector | Improve this Doc View Source GetKids() Declaration public IEnumerable<ITwinElement> GetKids() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinElement> | Improve this Doc View Source GetParent() Declaration public ITwinObject GetParent() Returns Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source GetSymbolTail() Declaration public string GetSymbolTail() Returns Type Description string | Improve this Doc View Source GetValueTags() Declaration public IEnumerable<ITwinPrimitive> GetValueTags() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive> | Improve this Doc View Source OnlineToPlain<T>() Declaration public virtual Task<T> OnlineToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<AxoMessage> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoMessage> | Improve this Doc View Source OnlineToPlainAsync(AxoMessage) Declaration protected Task<AxoMessage> OnlineToPlainAsync(AxoMessage plain) Parameters Type Name Description AxoMessage plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoMessage> | Improve this Doc View Source PlainToOnline<T>(T) Declaration public virtual Task PlainToOnline<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source PlainToOnlineAsync(AxoMessage) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoMessage plain) Parameters Type Name Description AxoMessage plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadow<T>(T) Declaration public virtual Task PlainToShadow<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source PlainToShadowAsync(AxoMessage) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoMessage plain) Parameters Type Name Description AxoMessage plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ShadowToPlain<T>() Declaration public virtual Task<T> ShadowToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<AxoMessage> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoMessage> | Improve this Doc View Source ShadowToPlainAsync(AxoMessage) Declaration protected Task<AxoMessage> ShadowToPlainAsync(AxoMessage plain) Parameters Type Name Description AxoMessage plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoMessage> Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement"
  },
  "api/AXOpen.Messaging.Dynamic.AxoMessageDigest.html": {
    "href": "api/AXOpen.Messaging.Dynamic.AxoMessageDigest.html",
    "title": "Class AxoMessageDigest | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoMessageDigest Inheritance object AxoMessageDigest Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Messaging.Dynamic Assembly: ix_ax_axopen_abstractions.dll Syntax public class AxoMessageDigest : ITwinObject, ITwinElement Constructors | Improve this Doc View Source AxoMessageDigest(ITwinObject, string, string) Declaration public AxoMessageDigest(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description AXSharp.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source AttributeName Declaration public string AttributeName { get; set; } Property Value Type Description string | Improve this Doc View Source Category Declaration [EnumeratorDiscriminator(typeof(eAxoMessageCategory))] public OnlinerInt Category { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerInt | Improve this Doc View Source Connector Declaration protected Connector Connector { get; } Property Value Type Description AXSharp.Connector.Connector | Improve this Doc View Source Count Declaration public OnlinerULInt Count { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerULInt | Improve this Doc View Source Cycle Declaration public OnlinerULInt Cycle { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerULInt | Improve this Doc View Source Digest Declaration public OnlinerDWord Digest { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerDWord | Improve this Doc View Source HumanReadable Declaration public string HumanReadable { get; set; } Property Value Type Description string | Improve this Doc View Source Interpreter Declaration public Translator Interpreter { get; } Property Value Type Description AXSharp.Connector.Localizations.Translator | Improve this Doc View Source Parent Declaration protected ITwinObject Parent { get; set; } Property Value Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source Symbol Declaration public string Symbol { get; protected set; } Property Value Type Description string | Improve this Doc View Source SymbolTail Declaration protected string SymbolTail { get; set; } Property Value Type Description string Methods | Improve this Doc View Source AddChild(ITwinObject) Declaration public void AddChild(ITwinObject twinObject) Parameters Type Name Description AXSharp.Connector.ITwinObject twinObject | Improve this Doc View Source AddKid(ITwinElement) Declaration public void AddKid(ITwinElement kid) Parameters Type Name Description AXSharp.Connector.ITwinElement kid | Improve this Doc View Source AddValueTag(ITwinPrimitive) Declaration public void AddValueTag(ITwinPrimitive valueTag) Parameters Type Name Description AXSharp.Connector.ITwinPrimitive valueTag | Improve this Doc View Source CreateEmptyPoco() Declaration public AxoMessageDigest CreateEmptyPoco() Returns Type Description AxoMessageDigest | Improve this Doc View Source GetChildren() Declaration public IEnumerable<ITwinObject> GetChildren() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinObject> | Improve this Doc View Source GetConnector() Declaration public Connector GetConnector() Returns Type Description AXSharp.Connector.Connector | Improve this Doc View Source GetKids() Declaration public IEnumerable<ITwinElement> GetKids() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinElement> | Improve this Doc View Source GetParent() Declaration public ITwinObject GetParent() Returns Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source GetSymbolTail() Declaration public string GetSymbolTail() Returns Type Description string | Improve this Doc View Source GetValueTags() Declaration public IEnumerable<ITwinPrimitive> GetValueTags() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive> | Improve this Doc View Source OnlineToPlain<T>() Declaration public virtual Task<T> OnlineToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<AxoMessageDigest> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoMessageDigest> | Improve this Doc View Source OnlineToPlainAsync(AxoMessageDigest) Declaration protected Task<AxoMessageDigest> OnlineToPlainAsync(AxoMessageDigest plain) Parameters Type Name Description AxoMessageDigest plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoMessageDigest> | Improve this Doc View Source PlainToOnline<T>(T) Declaration public virtual Task PlainToOnline<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source PlainToOnlineAsync(AxoMessageDigest) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoMessageDigest plain) Parameters Type Name Description AxoMessageDigest plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadow<T>(T) Declaration public virtual Task PlainToShadow<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source PlainToShadowAsync(AxoMessageDigest) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoMessageDigest plain) Parameters Type Name Description AxoMessageDigest plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ShadowToPlain<T>() Declaration public virtual Task<T> ShadowToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<AxoMessageDigest> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoMessageDigest> | Improve this Doc View Source ShadowToPlainAsync(AxoMessageDigest) Declaration protected Task<AxoMessageDigest> ShadowToPlainAsync(AxoMessageDigest plain) Parameters Type Name Description AxoMessageDigest plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoMessageDigest> Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement"
  },
  "api/AXOpen.Messaging.Dynamic.AxoMessenger.html": {
    "href": "api/AXOpen.Messaging.Dynamic.AxoMessenger.html",
    "title": "Class AxoMessenger | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoMessenger Inheritance object AxoMessenger Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoMessenger IAxoMessageProperties IAxoMessageTextBuilder IAxoMessageCategorize IAxoMessages Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Messaging.Dynamic Assembly: ix_ax_axopen_messaging.dll Syntax public class AxoMessenger : ITwinObject, ITwinElement, IAxoMessenger, IAxoMessageProperties, IAxoMessageTextBuilder, IAxoMessageCategorize, IAxoMessages Constructors | Improve this Doc View Source AxoMessenger(ITwinObject, string, string) Declaration public AxoMessenger(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description AXSharp.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source AttributeName Declaration public string AttributeName { get; set; } Property Value Type Description string | Improve this Doc View Source Connector Declaration protected Connector Connector { get; } Property Value Type Description AXSharp.Connector.Connector | Improve this Doc View Source HumanReadable Declaration public string HumanReadable { get; set; } Property Value Type Description string | Improve this Doc View Source Interpreter Declaration public Translator Interpreter { get; } Property Value Type Description AXSharp.Connector.Localizations.Translator | Improve this Doc View Source Parent Declaration protected ITwinObject Parent { get; set; } Property Value Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source Symbol Declaration public string Symbol { get; protected set; } Property Value Type Description string | Improve this Doc View Source SymbolTail Declaration protected string SymbolTail { get; set; } Property Value Type Description string Methods | Improve this Doc View Source AddChild(ITwinObject) Declaration public void AddChild(ITwinObject twinObject) Parameters Type Name Description AXSharp.Connector.ITwinObject twinObject | Improve this Doc View Source AddKid(ITwinElement) Declaration public void AddKid(ITwinElement kid) Parameters Type Name Description AXSharp.Connector.ITwinElement kid | Improve this Doc View Source AddValueTag(ITwinPrimitive) Declaration public void AddValueTag(ITwinPrimitive valueTag) Parameters Type Name Description AXSharp.Connector.ITwinPrimitive valueTag | Improve this Doc View Source CreateEmptyPoco() Declaration public AxoMessenger CreateEmptyPoco() Returns Type Description AxoMessenger | Improve this Doc View Source GetChildren() Declaration public IEnumerable<ITwinObject> GetChildren() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinObject> | Improve this Doc View Source GetConnector() Declaration public Connector GetConnector() Returns Type Description AXSharp.Connector.Connector | Improve this Doc View Source GetKids() Declaration public IEnumerable<ITwinElement> GetKids() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinElement> | Improve this Doc View Source GetParent() Declaration public ITwinObject GetParent() Returns Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source GetSymbolTail() Declaration public string GetSymbolTail() Returns Type Description string | Improve this Doc View Source GetValueTags() Declaration public IEnumerable<ITwinPrimitive> GetValueTags() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive> | Improve this Doc View Source OnlineToPlain<T>() Declaration public virtual Task<T> OnlineToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<AxoMessenger> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoMessenger> | Improve this Doc View Source OnlineToPlainAsync(AxoMessenger) Declaration protected Task<AxoMessenger> OnlineToPlainAsync(AxoMessenger plain) Parameters Type Name Description AxoMessenger plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoMessenger> | Improve this Doc View Source PlainToOnline<T>(T) Declaration public virtual Task PlainToOnline<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source PlainToOnlineAsync(AxoMessenger) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoMessenger plain) Parameters Type Name Description AxoMessenger plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadow<T>(T) Declaration public virtual Task PlainToShadow<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source PlainToShadowAsync(AxoMessenger) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoMessenger plain) Parameters Type Name Description AxoMessenger plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ShadowToPlain<T>() Declaration public virtual Task<T> ShadowToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<AxoMessenger> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoMessenger> | Improve this Doc View Source ShadowToPlainAsync(AxoMessenger) Declaration protected Task<AxoMessenger> ShadowToPlainAsync(AxoMessenger plain) Parameters Type Name Description AxoMessenger plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoMessenger> Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoMessenger IAxoMessageProperties IAxoMessageTextBuilder IAxoMessageCategorize IAxoMessages"
  },
  "api/AXOpen.Messaging.Dynamic.AxoMessengerEnv.html": {
    "href": "api/AXOpen.Messaging.Dynamic.AxoMessengerEnv.html",
    "title": "Class AxoMessengerEnv | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoMessengerEnv Inheritance object AxoMessengerEnv Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoMessengerEnv Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Messaging.Dynamic Assembly: ix_ax_axopen_abstractions.dll Syntax public class AxoMessengerEnv : ITwinObject, ITwinElement, IAxoMessengerEnv Constructors | Improve this Doc View Source AxoMessengerEnv(ITwinObject, string, string) Declaration public AxoMessengerEnv(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description AXSharp.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source AttributeName Declaration public string AttributeName { get; set; } Property Value Type Description string | Improve this Doc View Source Connector Declaration protected Connector Connector { get; } Property Value Type Description AXSharp.Connector.Connector | Improve this Doc View Source HumanReadable Declaration public string HumanReadable { get; set; } Property Value Type Description string | Improve this Doc View Source Interpreter Declaration public Translator Interpreter { get; } Property Value Type Description AXSharp.Connector.Localizations.Translator | Improve this Doc View Source Parent Declaration protected ITwinObject Parent { get; set; } Property Value Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source Symbol Declaration public string Symbol { get; protected set; } Property Value Type Description string | Improve this Doc View Source SymbolTail Declaration protected string SymbolTail { get; set; } Property Value Type Description string Methods | Improve this Doc View Source AddChild(ITwinObject) Declaration public void AddChild(ITwinObject twinObject) Parameters Type Name Description AXSharp.Connector.ITwinObject twinObject | Improve this Doc View Source AddKid(ITwinElement) Declaration public void AddKid(ITwinElement kid) Parameters Type Name Description AXSharp.Connector.ITwinElement kid | Improve this Doc View Source AddValueTag(ITwinPrimitive) Declaration public void AddValueTag(ITwinPrimitive valueTag) Parameters Type Name Description AXSharp.Connector.ITwinPrimitive valueTag | Improve this Doc View Source CreateEmptyPoco() Declaration public AxoMessengerEnv CreateEmptyPoco() Returns Type Description AxoMessengerEnv | Improve this Doc View Source GetChildren() Declaration public IEnumerable<ITwinObject> GetChildren() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinObject> | Improve this Doc View Source GetConnector() Declaration public Connector GetConnector() Returns Type Description AXSharp.Connector.Connector | Improve this Doc View Source GetKids() Declaration public IEnumerable<ITwinElement> GetKids() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinElement> | Improve this Doc View Source GetParent() Declaration public ITwinObject GetParent() Returns Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source GetSymbolTail() Declaration public string GetSymbolTail() Returns Type Description string | Improve this Doc View Source GetValueTags() Declaration public IEnumerable<ITwinPrimitive> GetValueTags() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive> | Improve this Doc View Source OnlineToPlain<T>() Declaration public virtual Task<T> OnlineToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<AxoMessengerEnv> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoMessengerEnv> | Improve this Doc View Source OnlineToPlainAsync(AxoMessengerEnv) Declaration protected Task<AxoMessengerEnv> OnlineToPlainAsync(AxoMessengerEnv plain) Parameters Type Name Description AxoMessengerEnv plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoMessengerEnv> | Improve this Doc View Source PlainToOnline<T>(T) Declaration public virtual Task PlainToOnline<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source PlainToOnlineAsync(AxoMessengerEnv) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoMessengerEnv plain) Parameters Type Name Description AxoMessengerEnv plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadow<T>(T) Declaration public virtual Task PlainToShadow<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source PlainToShadowAsync(AxoMessengerEnv) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoMessengerEnv plain) Parameters Type Name Description AxoMessengerEnv plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ShadowToPlain<T>() Declaration public virtual Task<T> ShadowToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<AxoMessengerEnv> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoMessengerEnv> | Improve this Doc View Source ShadowToPlainAsync(AxoMessengerEnv) Declaration protected Task<AxoMessengerEnv> ShadowToPlainAsync(AxoMessengerEnv plain) Parameters Type Name Description AxoMessengerEnv plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoMessengerEnv> Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoMessengerEnv"
  },
  "api/AXOpen.Messaging.Dynamic.eAxoMessageCondition.html": {
    "href": "api/AXOpen.Messaging.Dynamic.eAxoMessageCondition.html",
    "title": "Enum eAxoMessageCondition | System.Dynamic.ExpandoObject",
    "keywords": "Enum eAxoMessageCondition Namespace: AXOpen.Messaging.Dynamic Assembly: ix_ax_axopen_messaging.dll Syntax public enum eAxoMessageCondition : short Fields Name Description Active Inactive Unconditional"
  },
  "api/AXOpen.Messaging.Dynamic.eAxoMessageDigestMethod.html": {
    "href": "api/AXOpen.Messaging.Dynamic.eAxoMessageDigestMethod.html",
    "title": "Enum eAxoMessageDigestMethod | System.Dynamic.ExpandoObject",
    "keywords": "Enum eAxoMessageDigestMethod Namespace: AXOpen.Messaging.Dynamic Assembly: ix_ax_axopen_abstractions.dll Syntax public enum eAxoMessageDigestMethod : short Fields Name Description CRC16 CRC32 CRC8 NONE"
  },
  "api/AXOpen.Messaging.Dynamic.html": {
    "href": "api/AXOpen.Messaging.Dynamic.html",
    "title": "Namespace AXOpen.Messaging.Dynamic | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen.Messaging.Dynamic Classes AxoMessage AxoMessageDigest AxoMessenger AxoMessengerEnv Interfaces IAxoMessageCategorize IAxoMessageProperties IAxoMessages IAxoMessageTextBuilder IAxoMessenger IAxoMessengerEnv Enums eAxoMessageCondition eAxoMessageDigestMethod"
  },
  "api/AXOpen.Messaging.Dynamic.IAxoMessageCategorize.html": {
    "href": "api/AXOpen.Messaging.Dynamic.IAxoMessageCategorize.html",
    "title": "Interface IAxoMessageCategorize | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoMessageCategorize Namespace: AXOpen.Messaging.Dynamic Assembly: ix_ax_axopen_abstractions.dll Syntax public interface IAxoMessageCategorize"
  },
  "api/AXOpen.Messaging.Dynamic.IAxoMessageProperties.html": {
    "href": "api/AXOpen.Messaging.Dynamic.IAxoMessageProperties.html",
    "title": "Interface IAxoMessageProperties | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoMessageProperties Namespace: AXOpen.Messaging.Dynamic Assembly: ix_ax_axopen_abstractions.dll Syntax public interface IAxoMessageProperties"
  },
  "api/AXOpen.Messaging.Dynamic.IAxoMessages.html": {
    "href": "api/AXOpen.Messaging.Dynamic.IAxoMessages.html",
    "title": "Interface IAxoMessages | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoMessages Namespace: AXOpen.Messaging.Dynamic Assembly: ix_ax_axopen_abstractions.dll Syntax public interface IAxoMessages"
  },
  "api/AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder.html": {
    "href": "api/AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder.html",
    "title": "Interface IAxoMessageTextBuilder | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoMessageTextBuilder Namespace: AXOpen.Messaging.Dynamic Assembly: ix_ax_axopen_abstractions.dll Syntax public interface IAxoMessageTextBuilder"
  },
  "api/AXOpen.Messaging.Dynamic.IAxoMessenger.html": {
    "href": "api/AXOpen.Messaging.Dynamic.IAxoMessenger.html",
    "title": "Interface IAxoMessenger | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoMessenger Namespace: AXOpen.Messaging.Dynamic Assembly: ix_ax_axopen_abstractions.dll Syntax public interface IAxoMessenger"
  },
  "api/AXOpen.Messaging.Dynamic.IAxoMessengerEnv.html": {
    "href": "api/AXOpen.Messaging.Dynamic.IAxoMessengerEnv.html",
    "title": "Interface IAxoMessengerEnv | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoMessengerEnv Namespace: AXOpen.Messaging.Dynamic Assembly: ix_ax_axopen_abstractions.dll Syntax public interface IAxoMessengerEnv"
  },
  "api/AXOpen.Messaging.eAxoMessageCategory.html": {
    "href": "api/AXOpen.Messaging.eAxoMessageCategory.html",
    "title": "Enum eAxoMessageCategory | System.Dynamic.ExpandoObject",
    "keywords": "Enum eAxoMessageCategory Namespace: AXOpen.Messaging Assembly: ix_ax_axopen_abstractions.dll Syntax public enum eAxoMessageCategory : short Fields Name Description All Catastrophic Critical Debug Error Fatal Info None Notification ProgrammingError TimedOut Trace Warning"
  },
  "api/AXOpen.Messaging.html": {
    "href": "api/AXOpen.Messaging.html",
    "title": "Namespace AXOpen.Messaging | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen.Messaging Enums AxoIntConstants eAxoMessageCategory"
  },
  "api/AXOpen.Messaging.Static.AxoMessenger.html": {
    "href": "api/AXOpen.Messaging.Static.AxoMessenger.html",
    "title": "Class AxoMessenger | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoMessenger Inheritance object AxoMessenger Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoMessageProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Messaging.Static Assembly: ix_ax_axopen_messaging.dll Syntax public class AxoMessenger : ITwinObject, ITwinElement, IAxoMessageProperties Constructors | Improve this Doc View Source AxoMessenger(ITwinObject, string, string) Declaration public AxoMessenger(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description AXSharp.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source Acknowledged Declaration [ReadOnly] public OnlinerLDateTime Acknowledged { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerLDateTime | Improve this Doc View Source AcknowledgedBeforeFallen Declaration [ReadOnly] public OnlinerBool AcknowledgedBeforeFallen { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerBool | Improve this Doc View Source AcknowledgementRequired Declaration [ReadOnly] public OnlinerBool AcknowledgementRequired { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerBool | Improve this Doc View Source AcknowledgeRequest Declaration public OnlinerBool AcknowledgeRequest { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerBool | Improve this Doc View Source AttributeName Declaration public string AttributeName { get; set; } Property Value Type Description string | Improve this Doc View Source Category Declaration [ReadOnly] [EnumeratorDiscriminator(typeof(eAxoMessageCategory))] public OnlinerInt Category { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerInt | Improve this Doc View Source Connector Declaration protected Connector Connector { get; } Property Value Type Description AXSharp.Connector.Connector | Improve this Doc View Source Fallen Declaration [ReadOnly] public OnlinerLDateTime Fallen { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerLDateTime | Improve this Doc View Source Help Declaration public string Help { get; set; } Property Value Type Description string | Improve this Doc View Source HumanReadable Declaration public string HumanReadable { get; set; } Property Value Type Description string | Improve this Doc View Source Interpreter Declaration public Translator Interpreter { get; } Property Value Type Description AXSharp.Connector.Localizations.Translator | Improve this Doc View Source IsActive Declaration [ReadOnly] public OnlinerBool IsActive { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerBool | Improve this Doc View Source MessageCode Declaration [ReadOnly] public OnlinerULInt MessageCode { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerULInt | Improve this Doc View Source MessageText Declaration public string MessageText { get; set; } Property Value Type Description string | Improve this Doc View Source Parent Declaration protected ITwinObject Parent { get; set; } Property Value Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source Risen Declaration [ReadOnly] public OnlinerLDateTime Risen { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerLDateTime | Improve this Doc View Source Symbol Declaration public string Symbol { get; protected set; } Property Value Type Description string | Improve this Doc View Source SymbolTail Declaration protected string SymbolTail { get; set; } Property Value Type Description string | Improve this Doc View Source WaitingForAcknowledge Declaration [ReadOnly] public OnlinerBool WaitingForAcknowledge { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerBool Methods | Improve this Doc View Source AddChild(ITwinObject) Declaration public void AddChild(ITwinObject twinObject) Parameters Type Name Description AXSharp.Connector.ITwinObject twinObject | Improve this Doc View Source AddKid(ITwinElement) Declaration public void AddKid(ITwinElement kid) Parameters Type Name Description AXSharp.Connector.ITwinElement kid | Improve this Doc View Source AddValueTag(ITwinPrimitive) Declaration public void AddValueTag(ITwinPrimitive valueTag) Parameters Type Name Description AXSharp.Connector.ITwinPrimitive valueTag | Improve this Doc View Source CreateEmptyPoco() Declaration public AxoMessenger CreateEmptyPoco() Returns Type Description AxoMessenger | Improve this Doc View Source GetChildren() Declaration public IEnumerable<ITwinObject> GetChildren() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinObject> | Improve this Doc View Source GetConnector() Declaration public Connector GetConnector() Returns Type Description AXSharp.Connector.Connector | Improve this Doc View Source GetKids() Declaration public IEnumerable<ITwinElement> GetKids() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinElement> | Improve this Doc View Source GetParent() Declaration public ITwinObject GetParent() Returns Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source GetSymbolTail() Declaration public string GetSymbolTail() Returns Type Description string | Improve this Doc View Source GetValueTags() Declaration public IEnumerable<ITwinPrimitive> GetValueTags() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive> | Improve this Doc View Source OnlineToPlain<T>() Declaration public virtual Task<T> OnlineToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<AxoMessenger> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoMessenger> | Improve this Doc View Source OnlineToPlainAsync(AxoMessenger) Declaration protected Task<AxoMessenger> OnlineToPlainAsync(AxoMessenger plain) Parameters Type Name Description AxoMessenger plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoMessenger> | Improve this Doc View Source PlainToOnline<T>(T) Declaration public virtual Task PlainToOnline<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source PlainToOnlineAsync(AxoMessenger) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoMessenger plain) Parameters Type Name Description AxoMessenger plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadow<T>(T) Declaration public virtual Task PlainToShadow<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source PlainToShadowAsync(AxoMessenger) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoMessenger plain) Parameters Type Name Description AxoMessenger plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ShadowToPlain<T>() Declaration public virtual Task<T> ShadowToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<AxoMessenger> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoMessenger> | Improve this Doc View Source ShadowToPlainAsync(AxoMessenger) Declaration protected Task<AxoMessenger> ShadowToPlainAsync(AxoMessenger plain) Parameters Type Name Description AxoMessenger plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoMessenger> Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoMessageProperties"
  },
  "api/AXOpen.Messaging.Static.AxoMessengerCommandView.html": {
    "href": "api/AXOpen.Messaging.Static.AxoMessengerCommandView.html",
    "title": "Class AxoMessengerCommandView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoMessengerCommandView Inheritance object Microsoft.AspNetCore.Components.ComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><AxoMessenger> AxoMessengerView AxoMessengerCommandView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable Inherited Members AxoMessengerView.OnInitialized() AxoMessengerView.Dispose() AxoMessengerView.BuildRenderTree(RenderTreeBuilder) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<AXOpen.Messaging.Static.AxoMessenger>.Component AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ITwinObject, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ValueTypes.OnlinerBase, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinPrimitive) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, AXSharp.Connector.ValueTypes.ValueChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.PollingInterval AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Messaging.Static Assembly: axopen_messaging_blazor.dll Syntax public class AxoMessengerCommandView : AxoMessengerView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Constructors | Improve this Doc View Source AxoMessengerCommandView() Declaration public AxoMessengerCommandView() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable"
  },
  "api/AXOpen.Messaging.Static.AxoMessengerStatusView.html": {
    "href": "api/AXOpen.Messaging.Static.AxoMessengerStatusView.html",
    "title": "Class AxoMessengerStatusView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoMessengerStatusView Inheritance object Microsoft.AspNetCore.Components.ComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><AxoMessenger> AxoMessengerView AxoMessengerStatusView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable Inherited Members AxoMessengerView.OnInitialized() AxoMessengerView.Dispose() AxoMessengerView.BuildRenderTree(RenderTreeBuilder) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<AXOpen.Messaging.Static.AxoMessenger>.Component AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ITwinObject, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ValueTypes.OnlinerBase, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinPrimitive) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, AXSharp.Connector.ValueTypes.ValueChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.PollingInterval AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Messaging.Static Assembly: axopen_messaging_blazor.dll Syntax public class AxoMessengerStatusView : AxoMessengerView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Constructors | Improve this Doc View Source AxoMessengerStatusView() Declaration public AxoMessengerStatusView() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable"
  },
  "api/AXOpen.Messaging.Static.AxoMessengerView.html": {
    "href": "api/AXOpen.Messaging.Static.AxoMessengerView.html",
    "title": "Class AxoMessengerView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoMessengerView Inheritance object Microsoft.AspNetCore.Components.ComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><AxoMessenger> AxoMessengerView AxoMessengerCommandView AxoMessengerStatusView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable Inherited Members AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<AXOpen.Messaging.Static.AxoMessenger>.Component AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ITwinObject, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ValueTypes.OnlinerBase, int) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinPrimitive) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, AXSharp.Connector.ValueTypes.ValueChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.PollingInterval AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Messaging.Static Assembly: axopen_messaging_blazor.dll Syntax public class AxoMessengerView : RenderableComplexComponentBase<AxoMessenger>, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Methods | Improve this Doc View Source BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters Type Name Description Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder Overrides Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source OnInitialized() Declaration protected override void OnInitialized() Overrides Microsoft.AspNetCore.Components.ComponentBase.OnInitialized() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable"
  },
  "api/AXOpen.Messaging.Static.html": {
    "href": "api/AXOpen.Messaging.Static.html",
    "title": "Namespace AXOpen.Messaging.Static | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen.Messaging.Static Classes AxoMessenger AxoMessengerCommandView AxoMessengerStatusView AxoMessengerView Interfaces IAxoMessageProperties"
  },
  "api/AXOpen.Messaging.Static.IAxoMessageProperties.html": {
    "href": "api/AXOpen.Messaging.Static.IAxoMessageProperties.html",
    "title": "Interface IAxoMessageProperties | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoMessageProperties Namespace: AXOpen.Messaging.Static Assembly: ix_ax_axopen_abstractions.dll Syntax public interface IAxoMessageProperties"
  },
  "api/AXOpen.Rtc.html": {
    "href": "api/AXOpen.Rtc.html",
    "title": "Namespace AXOpen.Rtc | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen.Rtc Interfaces IAxoRtc"
  },
  "api/AXOpen.Rtc.IAxoRtc.html": {
    "href": "api/AXOpen.Rtc.IAxoRtc.html",
    "title": "Interface IAxoRtc | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoRtc Namespace: AXOpen.Rtc Assembly: ix_ax_axopen_abstractions.dll Syntax public interface IAxoRtc"
  },
  "api/AXOpen.Utils.AxoStringBuilder.html": {
    "href": "api/AXOpen.Utils.AxoStringBuilder.html",
    "title": "Class AxoStringBuilder | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoStringBuilder Inheritance object AxoStringBuilder Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoStringBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Utils Assembly: ix_ax_axopen_abstractions.dll Syntax public class AxoStringBuilder : ITwinObject, ITwinElement, IAxoStringBuilder Constructors | Improve this Doc View Source AxoStringBuilder(ITwinObject, string, string) Declaration public AxoStringBuilder(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description AXSharp.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source AttributeName Declaration public string AttributeName { get; set; } Property Value Type Description string | Improve this Doc View Source Connector Declaration protected Connector Connector { get; } Property Value Type Description AXSharp.Connector.Connector | Improve this Doc View Source HumanReadable Declaration public string HumanReadable { get; set; } Property Value Type Description string | Improve this Doc View Source Interpreter Declaration public Translator Interpreter { get; } Property Value Type Description AXSharp.Connector.Localizations.Translator | Improve this Doc View Source Parent Declaration protected ITwinObject Parent { get; set; } Property Value Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source Symbol Declaration public string Symbol { get; protected set; } Property Value Type Description string | Improve this Doc View Source SymbolTail Declaration protected string SymbolTail { get; set; } Property Value Type Description string Methods | Improve this Doc View Source AddChild(ITwinObject) Declaration public void AddChild(ITwinObject twinObject) Parameters Type Name Description AXSharp.Connector.ITwinObject twinObject | Improve this Doc View Source AddKid(ITwinElement) Declaration public void AddKid(ITwinElement kid) Parameters Type Name Description AXSharp.Connector.ITwinElement kid | Improve this Doc View Source AddValueTag(ITwinPrimitive) Declaration public void AddValueTag(ITwinPrimitive valueTag) Parameters Type Name Description AXSharp.Connector.ITwinPrimitive valueTag | Improve this Doc View Source CreateEmptyPoco() Declaration public AxoStringBuilder CreateEmptyPoco() Returns Type Description AxoStringBuilder | Improve this Doc View Source GetChildren() Declaration public IEnumerable<ITwinObject> GetChildren() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinObject> | Improve this Doc View Source GetConnector() Declaration public Connector GetConnector() Returns Type Description AXSharp.Connector.Connector | Improve this Doc View Source GetKids() Declaration public IEnumerable<ITwinElement> GetKids() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinElement> | Improve this Doc View Source GetParent() Declaration public ITwinObject GetParent() Returns Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source GetSymbolTail() Declaration public string GetSymbolTail() Returns Type Description string | Improve this Doc View Source GetValueTags() Declaration public IEnumerable<ITwinPrimitive> GetValueTags() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive> | Improve this Doc View Source OnlineToPlain<T>() Declaration public virtual Task<T> OnlineToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<AxoStringBuilder> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoStringBuilder> | Improve this Doc View Source OnlineToPlainAsync(AxoStringBuilder) Declaration protected Task<AxoStringBuilder> OnlineToPlainAsync(AxoStringBuilder plain) Parameters Type Name Description AxoStringBuilder plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoStringBuilder> | Improve this Doc View Source PlainToOnline<T>(T) Declaration public virtual Task PlainToOnline<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source PlainToOnlineAsync(AxoStringBuilder) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoStringBuilder plain) Parameters Type Name Description AxoStringBuilder plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadow<T>(T) Declaration public virtual Task PlainToShadow<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source PlainToShadowAsync(AxoStringBuilder) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoStringBuilder plain) Parameters Type Name Description AxoStringBuilder plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ShadowToPlain<T>() Declaration public virtual Task<T> ShadowToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<AxoStringBuilder> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoStringBuilder> | Improve this Doc View Source ShadowToPlainAsync(AxoStringBuilder) Declaration protected Task<AxoStringBuilder> ShadowToPlainAsync(AxoStringBuilder plain) Parameters Type Name Description AxoStringBuilder plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoStringBuilder> Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoStringBuilder"
  },
  "api/AXOpen.Utils.html": {
    "href": "api/AXOpen.Utils.html",
    "title": "Namespace AXOpen.Utils | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen.Utils Classes AxoStringBuilder Interfaces IAxoStringBuilder"
  },
  "api/AXOpen.Utils.IAxoStringBuilder.html": {
    "href": "api/AXOpen.Utils.IAxoStringBuilder.html",
    "title": "Interface IAxoStringBuilder | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoStringBuilder Namespace: AXOpen.Utils Assembly: ix_ax_axopen_abstractions.dll Syntax public interface IAxoStringBuilder"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "IX API Documentation | System.Dynamic.ExpandoObject",
    "keywords": "IX API Documentation"
  },
  "api/ix_ax_axopen_abstractions.html": {
    "href": "api/ix_ax_axopen_abstractions.html",
    "title": "Namespace ix_ax_axopen_abstractions | System.Dynamic.ExpandoObject",
    "keywords": "Namespace ix_ax_axopen_abstractions Classes PlcTranslator"
  },
  "api/ix_ax_axopen_abstractions.PlcTranslator.html": {
    "href": "api/ix_ax_axopen_abstractions.PlcTranslator.html",
    "title": "Class PlcTranslator | System.Dynamic.ExpandoObject",
    "keywords": "Class PlcTranslator Inheritance object AXSharp.Connector.Localizations.Translator PlcTranslator Inherited Members AXSharp.Connector.Localizations.Translator.Translate(string, AXSharp.Connector.ITwinElement) AXSharp.Connector.Localizations.Translator.SetLocalizationResource(System.Type) AXSharp.Connector.Localizations.Translator.Localize(string, AXSharp.Connector.ITwinElement) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: ix_ax_axopen_abstractions Assembly: ix_ax_axopen_abstractions.dll Syntax public sealed class PlcTranslator : Translator Properties | Improve this Doc View Source Instance Declaration public static PlcTranslator Instance { get; } Property Value Type Description PlcTranslator"
  },
  "api/ix_ax_axopen_core.html": {
    "href": "api/ix_ax_axopen_core.html",
    "title": "Namespace ix_ax_axopen_core | System.Dynamic.ExpandoObject",
    "keywords": "Namespace ix_ax_axopen_core Classes PlcTranslator"
  },
  "api/ix_ax_axopen_core.PlcTranslator.html": {
    "href": "api/ix_ax_axopen_core.PlcTranslator.html",
    "title": "Class PlcTranslator | System.Dynamic.ExpandoObject",
    "keywords": "Class PlcTranslator Inheritance object AXSharp.Connector.Localizations.Translator PlcTranslator Inherited Members AXSharp.Connector.Localizations.Translator.Translate(string, AXSharp.Connector.ITwinElement) AXSharp.Connector.Localizations.Translator.SetLocalizationResource(System.Type) AXSharp.Connector.Localizations.Translator.Localize(string, AXSharp.Connector.ITwinElement) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: ix_ax_axopen_core Assembly: ix_ax_axopen_core.dll Syntax public sealed class PlcTranslator : Translator Properties | Improve this Doc View Source Instance Declaration public static PlcTranslator Instance { get; } Property Value Type Description PlcTranslator"
  },
  "api/ix_ax_axopen_data.html": {
    "href": "api/ix_ax_axopen_data.html",
    "title": "Namespace ix_ax_axopen_data | System.Dynamic.ExpandoObject",
    "keywords": "Namespace ix_ax_axopen_data Classes PlcTranslator"
  },
  "api/ix_ax_axopen_data.PlcTranslator.html": {
    "href": "api/ix_ax_axopen_data.PlcTranslator.html",
    "title": "Class PlcTranslator | System.Dynamic.ExpandoObject",
    "keywords": "Class PlcTranslator Inheritance object AXSharp.Connector.Localizations.Translator PlcTranslator Inherited Members AXSharp.Connector.Localizations.Translator.Translate(string, AXSharp.Connector.ITwinElement) AXSharp.Connector.Localizations.Translator.SetLocalizationResource(System.Type) AXSharp.Connector.Localizations.Translator.Localize(string, AXSharp.Connector.ITwinElement) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: ix_ax_axopen_data Assembly: ix_ax_axopen_data.dll Syntax public sealed class PlcTranslator : Translator Properties | Improve this Doc View Source Instance Declaration public static PlcTranslator Instance { get; } Property Value Type Description PlcTranslator"
  },
  "api/ix_ax_axopen_messaging.html": {
    "href": "api/ix_ax_axopen_messaging.html",
    "title": "Namespace ix_ax_axopen_messaging | System.Dynamic.ExpandoObject",
    "keywords": "Namespace ix_ax_axopen_messaging Classes PlcTranslator"
  },
  "api/ix_ax_axopen_messaging.PlcTranslator.html": {
    "href": "api/ix_ax_axopen_messaging.PlcTranslator.html",
    "title": "Class PlcTranslator | System.Dynamic.ExpandoObject",
    "keywords": "Class PlcTranslator Inheritance object AXSharp.Connector.Localizations.Translator PlcTranslator Inherited Members AXSharp.Connector.Localizations.Translator.Translate(string, AXSharp.Connector.ITwinElement) AXSharp.Connector.Localizations.Translator.SetLocalizationResource(System.Type) AXSharp.Connector.Localizations.Translator.Localize(string, AXSharp.Connector.ITwinElement) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: ix_ax_axopen_messaging Assembly: ix_ax_axopen_messaging.dll Syntax public sealed class PlcTranslator : Translator Properties | Improve this Doc View Source Instance Declaration public static PlcTranslator Instance { get; } Property Value Type Description PlcTranslator"
  },
  "api/Ix.Repository.Json.html": {
    "href": "api/Ix.Repository.Json.html",
    "title": "Namespace Ix.Repository.Json | System.Dynamic.ExpandoObject",
    "keywords": "Namespace Ix.Repository.Json Classes Repository"
  },
  "api/Ix.Repository.Json.Repository.html": {
    "href": "api/Ix.Repository.Json.Repository.html",
    "title": "Class Repository | System.Dynamic.ExpandoObject",
    "keywords": "Class Repository Inheritance object Repository Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Ix.Repository.Json Assembly: AXOpen.Data.Json.dll Syntax public static class Repository Methods | Improve this Doc View Source Factory<T>(JsonRepositorySettings<T>) Declaration public static IRepository<T> Factory<T>(JsonRepositorySettings<T> parameters) where T : IBrowsableDataObject Parameters Type Name Description JsonRepositorySettings<T> parameters Returns Type Description AXOpen.Base.Data.IRepository<T><T> Type Parameters Name Description T"
  },
  "api/Pocos.AXOpen.Core._NULL_CONTEXT.html": {
    "href": "api/Pocos.AXOpen.Core._NULL_CONTEXT.html",
    "title": "Class _NULL_CONTEXT | System.Dynamic.ExpandoObject",
    "keywords": "Class _NULL_CONTEXT Inheritance object _NULL_CONTEXT Implements AXSharp.Connector.IPlain IAxoContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class _NULL_CONTEXT : IPlain, IAxoContext Implements AXSharp.Connector.IPlain IAxoContext"
  },
  "api/Pocos.AXOpen.Core._NULL_OBJECT.html": {
    "href": "api/Pocos.AXOpen.Core._NULL_OBJECT.html",
    "title": "Class _NULL_OBJECT | System.Dynamic.ExpandoObject",
    "keywords": "Class _NULL_OBJECT Inheritance object _NULL_OBJECT Implements AXSharp.Connector.IPlain IAxoObject Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class _NULL_OBJECT : IPlain, IAxoObject Implements AXSharp.Connector.IPlain IAxoObject"
  },
  "api/Pocos.AXOpen.Core._NULL_RTC.html": {
    "href": "api/Pocos.AXOpen.Core._NULL_RTC.html",
    "title": "Class _NULL_RTC | System.Dynamic.ExpandoObject",
    "keywords": "Class _NULL_RTC Inheritance object _NULL_RTC Implements AXSharp.Connector.IPlain IAxoRtc Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class _NULL_RTC : IPlain, IAxoRtc Implements AXSharp.Connector.IPlain IAxoRtc"
  },
  "api/Pocos.AXOpen.Core.AxoComponent.html": {
    "href": "api/Pocos.AXOpen.Core.AxoComponent.html",
    "title": "Class AxoComponent | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoComponent Inheritance object AxoObject AxoComponent Implements IAxoObject AXSharp.Connector.IPlain IAxoComponent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class AxoComponent : AxoObject, IAxoObject, IPlain, IAxoComponent Properties | Improve this Doc View Source _isManuallyControllable Declaration public bool _isManuallyControllable { get; set; } Property Value Type Description bool Implements IAxoObject AXSharp.Connector.IPlain IAxoComponent"
  },
  "api/Pocos.AXOpen.Core.AxoContext.html": {
    "href": "api/Pocos.AXOpen.Core.AxoContext.html",
    "title": "Class AxoContext | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoContext Inheritance object AxoContext Implements AXSharp.Connector.IPlain IAxoContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class AxoContext : IPlain, IAxoContext Implements AXSharp.Connector.IPlain IAxoContext"
  },
  "api/Pocos.AXOpen.Core.AxoContextEnvironment.html": {
    "href": "api/Pocos.AXOpen.Core.AxoContextEnvironment.html",
    "title": "Class AxoContextEnvironment | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoContextEnvironment Inheritance object AxoContextEnvironment Implements AXSharp.Connector.IPlain IAxoContextEnvironment Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class AxoContextEnvironment : IPlain, IAxoContextEnvironment Implements AXSharp.Connector.IPlain IAxoContextEnvironment"
  },
  "api/Pocos.AXOpen.Core.AxoMomentaryTask.html": {
    "href": "api/Pocos.AXOpen.Core.AxoMomentaryTask.html",
    "title": "Class AxoMomentaryTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoMomentaryTask Inheritance object AxoObject AxoMomentaryTask Implements IAxoObject AXSharp.Connector.IPlain IAxoMomentaryTask Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class AxoMomentaryTask : AxoObject, IAxoObject, IPlain, IAxoMomentaryTask Properties | Improve this Doc View Source IsDisabled Declaration public bool IsDisabled { get; set; } Property Value Type Description bool | Improve this Doc View Source RemoteSwitchOn Declaration public bool RemoteSwitchOn { get; set; } Property Value Type Description bool | Improve this Doc View Source State Declaration public bool State { get; set; } Property Value Type Description bool Implements IAxoObject AXSharp.Connector.IPlain IAxoMomentaryTask"
  },
  "api/Pocos.AXOpen.Core.AxoObject.html": {
    "href": "api/Pocos.AXOpen.Core.AxoObject.html",
    "title": "Class AxoObject | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoObject Inheritance object AxoObject AxoComponent AxoMomentaryTask AxoTask AxoToggleTask AxoDataExchangeBase Implements AXSharp.Connector.IPlain IAxoObject Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class AxoObject : IPlain, IAxoObject Implements AXSharp.Connector.IPlain IAxoObject"
  },
  "api/Pocos.AXOpen.Core.AxoRemoteTask.html": {
    "href": "api/Pocos.AXOpen.Core.AxoRemoteTask.html",
    "title": "Class AxoRemoteTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoRemoteTask Inheritance object AxoObject AxoTask AxoRemoteTask AxoDataExchangeTask Implements IAxoObject IAxoTask IAxoTaskState AXSharp.Connector.IPlain Inherited Members AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class AxoRemoteTask : AxoTask, IAxoObject, IAxoTask, IAxoTaskState, IPlain Properties | Improve this Doc View Source DoneSignature Declaration public ulong DoneSignature { get; set; } Property Value Type Description ulong | Improve this Doc View Source HasRemoteException Declaration public bool HasRemoteException { get; set; } Property Value Type Description bool | Improve this Doc View Source IsBeingCalledCounter Declaration public short IsBeingCalledCounter { get; set; } Property Value Type Description short | Improve this Doc View Source IsInitialized Declaration public bool IsInitialized { get; set; } Property Value Type Description bool Implements IAxoObject IAxoTask IAxoTaskState AXSharp.Connector.IPlain"
  },
  "api/Pocos.AXOpen.Core.AxoSequencer.html": {
    "href": "api/Pocos.AXOpen.Core.AxoSequencer.html",
    "title": "Class AxoSequencer | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoSequencer Inheritance object AxoObject AxoTask AxoSequencer AxoSequencerContainer Implements IAxoObject IAxoTask IAxoTaskState AXSharp.Connector.IPlain Inherited Members AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class AxoSequencer : AxoTask, IAxoObject, IAxoTask, IAxoTaskState, IPlain Properties | Improve this Doc View Source CurrentOrder Declaration public ulong CurrentOrder { get; set; } Property Value Type Description ulong | Improve this Doc View Source SequenceMode Declaration public short SequenceMode { get; set; } Property Value Type Description short | Improve this Doc View Source StepBackwardCommand Declaration public AxoTask StepBackwardCommand { get; set; } Property Value Type Description AxoTask | Improve this Doc View Source StepForwardCommand Declaration public AxoTask StepForwardCommand { get; set; } Property Value Type Description AxoTask | Improve this Doc View Source StepIn Declaration public AxoTask StepIn { get; set; } Property Value Type Description AxoTask | Improve this Doc View Source SteppingMode Declaration public short SteppingMode { get; set; } Property Value Type Description short Implements IAxoObject IAxoTask IAxoTaskState AXSharp.Connector.IPlain"
  },
  "api/Pocos.AXOpen.Core.AxoSequencerContainer.html": {
    "href": "api/Pocos.AXOpen.Core.AxoSequencerContainer.html",
    "title": "Class AxoSequencerContainer | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoSequencerContainer Inheritance object AxoObject AxoTask AxoSequencer AxoSequencerContainer Implements IAxoObject IAxoTask IAxoTaskState AXSharp.Connector.IPlain Inherited Members AxoSequencer.SteppingMode AxoSequencer.SequenceMode AxoSequencer.CurrentOrder AxoSequencer.StepForwardCommand AxoSequencer.StepIn AxoSequencer.StepBackwardCommand AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class AxoSequencerContainer : AxoSequencer, IAxoObject, IAxoTask, IAxoTaskState, IPlain Implements IAxoObject IAxoTask IAxoTaskState AXSharp.Connector.IPlain"
  },
  "api/Pocos.AXOpen.Core.AxoStep.html": {
    "href": "api/Pocos.AXOpen.Core.AxoStep.html",
    "title": "Class AxoStep | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoStep Inheritance object AxoObject AxoTask AxoStep Implements IAxoObject IAxoTask IAxoTaskState AXSharp.Connector.IPlain IAxoStep Inherited Members AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class AxoStep : AxoTask, IAxoObject, IAxoTask, IAxoTaskState, IPlain, IAxoStep Properties | Improve this Doc View Source IsActive Declaration public bool IsActive { get; set; } Property Value Type Description bool | Improve this Doc View Source IsEnabled Declaration public bool IsEnabled { get; set; } Property Value Type Description bool | Improve this Doc View Source Order Declaration public ulong Order { get; set; } Property Value Type Description ulong | Improve this Doc View Source StepDescription Declaration public string StepDescription { get; set; } Property Value Type Description string Implements IAxoObject IAxoTask IAxoTaskState AXSharp.Connector.IPlain IAxoStep"
  },
  "api/Pocos.AXOpen.Core.AxoTask.html": {
    "href": "api/Pocos.AXOpen.Core.AxoTask.html",
    "title": "Class AxoTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoTask Inheritance object AxoObject AxoTask AxoRemoteTask AxoSequencer AxoStep Implements IAxoObject AXSharp.Connector.IPlain IAxoTask IAxoTaskState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class AxoTask : AxoObject, IAxoObject, IPlain, IAxoTask, IAxoTaskState Properties | Improve this Doc View Source Duration Declaration public TimeSpan Duration { get; set; } Property Value Type Description System.TimeSpan | Improve this Doc View Source ErrorDetails Declaration public string ErrorDetails { get; set; } Property Value Type Description string | Improve this Doc View Source IsDisabled Declaration public bool IsDisabled { get; set; } Property Value Type Description bool | Improve this Doc View Source RemoteAbort Declaration public bool RemoteAbort { get; set; } Property Value Type Description bool | Improve this Doc View Source RemoteInvoke Declaration public bool RemoteInvoke { get; set; } Property Value Type Description bool | Improve this Doc View Source RemoteRestore Declaration public bool RemoteRestore { get; set; } Property Value Type Description bool | Improve this Doc View Source RemoteResume Declaration public bool RemoteResume { get; set; } Property Value Type Description bool | Improve this Doc View Source StartSignature Declaration public ulong StartSignature { get; set; } Property Value Type Description ulong | Improve this Doc View Source StartTimeStamp Declaration public DateTime StartTimeStamp { get; set; } Property Value Type Description System.DateTime | Improve this Doc View Source Status Declaration public short Status { get; set; } Property Value Type Description short Implements IAxoObject AXSharp.Connector.IPlain IAxoTask IAxoTaskState"
  },
  "api/Pocos.AXOpen.Core.AxoToggleTask.html": {
    "href": "api/Pocos.AXOpen.Core.AxoToggleTask.html",
    "title": "Class AxoToggleTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoToggleTask Inheritance object AxoObject AxoToggleTask Implements IAxoObject AXSharp.Connector.IPlain IAxoToggleTask Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class AxoToggleTask : AxoObject, IAxoObject, IPlain, IAxoToggleTask Properties | Improve this Doc View Source IsDisabled Declaration public bool IsDisabled { get; set; } Property Value Type Description bool | Improve this Doc View Source RemoteToggle Declaration public bool RemoteToggle { get; set; } Property Value Type Description bool | Improve this Doc View Source State Declaration public bool State { get; set; } Property Value Type Description bool Implements IAxoObject AXSharp.Connector.IPlain IAxoToggleTask"
  },
  "api/Pocos.AXOpen.Core.html": {
    "href": "api/Pocos.AXOpen.Core.html",
    "title": "Namespace Pocos.AXOpen.Core | System.Dynamic.ExpandoObject",
    "keywords": "Namespace Pocos.AXOpen.Core Classes _NULL_CONTEXT _NULL_OBJECT _NULL_RTC AxoComponent AxoContext AxoContextEnvironment AxoMomentaryTask AxoObject AxoRemoteTask AxoSequencer AxoSequencerContainer AxoStep AxoTask AxoToggleTask Interfaces IAxoComponent IAxoContext IAxoContextEnvironment IAxoCoordinator IAxoManuallyControllable IAxoMomentaryTask IAxoObject IAxoStep IAxoTask IAxoTaskState IAxoToggleTask"
  },
  "api/Pocos.AXOpen.Core.IAxoComponent.html": {
    "href": "api/Pocos.AXOpen.Core.IAxoComponent.html",
    "title": "Interface IAxoComponent | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoComponent Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoComponent"
  },
  "api/Pocos.AXOpen.Core.IAxoContext.html": {
    "href": "api/Pocos.AXOpen.Core.IAxoContext.html",
    "title": "Interface IAxoContext | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoContext Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoContext"
  },
  "api/Pocos.AXOpen.Core.IAxoContextEnvironment.html": {
    "href": "api/Pocos.AXOpen.Core.IAxoContextEnvironment.html",
    "title": "Interface IAxoContextEnvironment | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoContextEnvironment Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoContextEnvironment"
  },
  "api/Pocos.AXOpen.Core.IAxoCoordinator.html": {
    "href": "api/Pocos.AXOpen.Core.IAxoCoordinator.html",
    "title": "Interface IAxoCoordinator | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoCoordinator Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoCoordinator"
  },
  "api/Pocos.AXOpen.Core.IAxoManuallyControllable.html": {
    "href": "api/Pocos.AXOpen.Core.IAxoManuallyControllable.html",
    "title": "Interface IAxoManuallyControllable | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoManuallyControllable Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoManuallyControllable"
  },
  "api/Pocos.AXOpen.Core.IAxoMomentaryTask.html": {
    "href": "api/Pocos.AXOpen.Core.IAxoMomentaryTask.html",
    "title": "Interface IAxoMomentaryTask | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoMomentaryTask Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoMomentaryTask"
  },
  "api/Pocos.AXOpen.Core.IAxoObject.html": {
    "href": "api/Pocos.AXOpen.Core.IAxoObject.html",
    "title": "Interface IAxoObject | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoObject Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoObject"
  },
  "api/Pocos.AXOpen.Core.IAxoStep.html": {
    "href": "api/Pocos.AXOpen.Core.IAxoStep.html",
    "title": "Interface IAxoStep | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoStep Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoStep"
  },
  "api/Pocos.AXOpen.Core.IAxoTask.html": {
    "href": "api/Pocos.AXOpen.Core.IAxoTask.html",
    "title": "Interface IAxoTask | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoTask Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoTask"
  },
  "api/Pocos.AXOpen.Core.IAxoTaskState.html": {
    "href": "api/Pocos.AXOpen.Core.IAxoTaskState.html",
    "title": "Interface IAxoTaskState | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoTaskState Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoTaskState"
  },
  "api/Pocos.AXOpen.Core.IAxoToggleTask.html": {
    "href": "api/Pocos.AXOpen.Core.IAxoToggleTask.html",
    "title": "Interface IAxoToggleTask | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoToggleTask Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoToggleTask"
  },
  "api/Pocos.AXOpen.Data.AxoDataCrudTask.html": {
    "href": "api/Pocos.AXOpen.Data.AxoDataCrudTask.html",
    "title": "Class AxoDataCrudTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataCrudTask Inheritance object AxoObject AxoTask AxoRemoteTask AxoDataExchangeTask AxoDataCrudTask Implements IAxoObject IAxoTask IAxoTaskState AXSharp.Connector.IPlain Inherited Members AxoDataExchangeTask.DataEntityIdentifier AxoRemoteTask.DoneSignature AxoRemoteTask.IsInitialized AxoRemoteTask.HasRemoteException AxoRemoteTask.IsBeingCalledCounter AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.AXOpen.Data Assembly: ix_ax_axopen_data.dll Syntax public class AxoDataCrudTask : AxoDataExchangeTask, IAxoObject, IAxoTask, IAxoTaskState, IPlain Properties | Improve this Doc View Source CrudOperation Declaration public eCrudOperation CrudOperation { get; set; } Property Value Type Description eCrudOperation Implements IAxoObject IAxoTask IAxoTaskState AXSharp.Connector.IPlain"
  },
  "api/Pocos.AXOpen.Data.AxoDataEntity.html": {
    "href": "api/Pocos.AXOpen.Data.AxoDataEntity.html",
    "title": "Class AxoDataEntity | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataEntity Inheritance object AxoDataEntity Implements IAxoDataEntity AXOpen.Base.Data.IBrowsableDataObject AXSharp.Connector.IPlain Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.AXOpen.Data Assembly: ix_ax_axopen_data.dll Syntax public class AxoDataEntity : IAxoDataEntity, IBrowsableDataObject, IPlain Properties | Improve this Doc View Source Changes Declaration public List<ValueChangeItem> Changes { get; set; } Property Value Type Description System.Collections.Generic.List<T><ValueChangeItem> | Improve this Doc View Source DataEntityId Declaration public string DataEntityId { get; set; } Property Value Type Description string | Improve this Doc View Source RecordId Declaration public dynamic RecordId { get; set; } Property Value Type Description dynamic Implements IAxoDataEntity AXOpen.Base.Data.IBrowsableDataObject AXSharp.Connector.IPlain"
  },
  "api/Pocos.AXOpen.Data.AxoDataExchange.html": {
    "href": "api/Pocos.AXOpen.Data.AxoDataExchange.html",
    "title": "Class AxoDataExchange | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataExchange Inheritance object AxoObject AxoDataExchangeBase AxoDataExchange Implements IAxoObject AXSharp.Connector.IPlain IAxoDataExchange Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.AXOpen.Data Assembly: ix_ax_axopen_data.dll Syntax public class AxoDataExchange : AxoDataExchangeBase, IAxoObject, IPlain, IAxoDataExchange Properties | Improve this Doc View Source CreateTask Declaration public AxoDataExchangeTask CreateTask { get; set; } Property Value Type Description AxoDataExchangeTask | Improve this Doc View Source DeleteTask Declaration public AxoDataExchangeTask DeleteTask { get; set; } Property Value Type Description AxoDataExchangeTask | Improve this Doc View Source ReadTask Declaration public AxoDataExchangeTask ReadTask { get; set; } Property Value Type Description AxoDataExchangeTask | Improve this Doc View Source UpdateTask Declaration public AxoDataExchangeTask UpdateTask { get; set; } Property Value Type Description AxoDataExchangeTask Implements IAxoObject AXSharp.Connector.IPlain IAxoDataExchange"
  },
  "api/Pocos.AXOpen.Data.AxoDataExchangeBase.html": {
    "href": "api/Pocos.AXOpen.Data.AxoDataExchangeBase.html",
    "title": "Class AxoDataExchangeBase | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataExchangeBase Inheritance object AxoObject AxoDataExchangeBase AxoDataExchange AxoDataFragmentExchange Implements IAxoObject AXSharp.Connector.IPlain Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.AXOpen.Data Assembly: ix_ax_axopen_data.dll Syntax public class AxoDataExchangeBase : AxoObject, IAxoObject, IPlain Implements IAxoObject AXSharp.Connector.IPlain"
  },
  "api/Pocos.AXOpen.Data.AxoDataExchangeTask.html": {
    "href": "api/Pocos.AXOpen.Data.AxoDataExchangeTask.html",
    "title": "Class AxoDataExchangeTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataExchangeTask Inheritance object AxoObject AxoTask AxoRemoteTask AxoDataExchangeTask AxoDataCrudTask Implements IAxoObject IAxoTask IAxoTaskState AXSharp.Connector.IPlain Inherited Members AxoRemoteTask.DoneSignature AxoRemoteTask.IsInitialized AxoRemoteTask.HasRemoteException AxoRemoteTask.IsBeingCalledCounter AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.AXOpen.Data Assembly: ix_ax_axopen_data.dll Syntax public class AxoDataExchangeTask : AxoRemoteTask, IAxoObject, IAxoTask, IAxoTaskState, IPlain Properties | Improve this Doc View Source DataEntityIdentifier Declaration public string DataEntityIdentifier { get; set; } Property Value Type Description string Implements IAxoObject IAxoTask IAxoTaskState AXSharp.Connector.IPlain"
  },
  "api/Pocos.AXOpen.Data.AxoDataFragmentExchange.html": {
    "href": "api/Pocos.AXOpen.Data.AxoDataFragmentExchange.html",
    "title": "Class AxoDataFragmentExchange | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataFragmentExchange Inheritance object AxoObject AxoDataExchangeBase AxoDataFragmentExchange Implements IAxoObject AXSharp.Connector.IPlain IAxoDataExchange Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.AXOpen.Data Assembly: ix_ax_axopen_data.dll Syntax public class AxoDataFragmentExchange : AxoDataExchangeBase, IAxoObject, IPlain, IAxoDataExchange Properties | Improve this Doc View Source Operation Declaration public AxoDataCrudTask Operation { get; set; } Property Value Type Description AxoDataCrudTask Implements IAxoObject AXSharp.Connector.IPlain IAxoDataExchange"
  },
  "api/Pocos.AXOpen.Data.html": {
    "href": "api/Pocos.AXOpen.Data.html",
    "title": "Namespace Pocos.AXOpen.Data | System.Dynamic.ExpandoObject",
    "keywords": "Namespace Pocos.AXOpen.Data Classes AxoDataCrudTask AxoDataEntity AxoDataExchange AxoDataExchangeBase AxoDataExchangeTask AxoDataFragmentExchange Interfaces IAxoDataEntity IAxoDataExchange"
  },
  "api/Pocos.AXOpen.Data.IAxoDataEntity.html": {
    "href": "api/Pocos.AXOpen.Data.IAxoDataEntity.html",
    "title": "Interface IAxoDataEntity | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoDataEntity Inherited Members AXOpen.Base.Data.IBrowsableDataObject.RecordId Namespace: Pocos.AXOpen.Data Assembly: ix_ax_axopen_data.dll Syntax public interface IAxoDataEntity : IBrowsableDataObject Properties | Improve this Doc View Source Changes Declaration List<ValueChangeItem> Changes { get; set; } Property Value Type Description System.Collections.Generic.List<T><ValueChangeItem> | Improve this Doc View Source DataEntityId Declaration string DataEntityId { get; set; } Property Value Type Description string"
  },
  "api/Pocos.AXOpen.Data.IAxoDataExchange.html": {
    "href": "api/Pocos.AXOpen.Data.IAxoDataExchange.html",
    "title": "Interface IAxoDataExchange | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoDataExchange Namespace: Pocos.AXOpen.Data Assembly: ix_ax_axopen_data.dll Syntax public interface IAxoDataExchange"
  },
  "api/Pocos.AXOpen.Messaging.Dynamic.AxoMessage.html": {
    "href": "api/Pocos.AXOpen.Messaging.Dynamic.AxoMessage.html",
    "title": "Class AxoMessage | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoMessage Inheritance object AxoMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.AXOpen.Messaging.Dynamic Assembly: ix_ax_axopen_messaging.dll Syntax public class AxoMessage Properties | Improve this Doc View Source Category Declaration public short Category { get; set; } Property Value Type Description short | Improve this Doc View Source Cycle Declaration public ulong Cycle { get; set; } Property Value Type Description ulong | Improve this Doc View Source ExpectDequeing Declaration public bool ExpectDequeing { get; set; } Property Value Type Description bool | Improve this Doc View Source Identity Declaration public ulong Identity { get; set; } Property Value Type Description ulong | Improve this Doc View Source MessageDigest Declaration public uint MessageDigest { get; set; } Property Value Type Description uint | Improve this Doc View Source PerCycleCount Declaration public byte PerCycleCount { get; set; } Property Value Type Description byte | Improve this Doc View Source Pinned Declaration public bool Pinned { get; set; } Property Value Type Description bool | Improve this Doc View Source Text Declaration public string Text { get; set; } Property Value Type Description string | Improve this Doc View Source TimeStamp Declaration public DateTime TimeStamp { get; set; } Property Value Type Description System.DateTime"
  },
  "api/Pocos.AXOpen.Messaging.Dynamic.AxoMessageDigest.html": {
    "href": "api/Pocos.AXOpen.Messaging.Dynamic.AxoMessageDigest.html",
    "title": "Class AxoMessageDigest | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoMessageDigest Inheritance object AxoMessageDigest Implements AXSharp.Connector.IPlain Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.AXOpen.Messaging.Dynamic Assembly: ix_ax_axopen_abstractions.dll Syntax public class AxoMessageDigest : IPlain Properties | Improve this Doc View Source Category Declaration public short Category { get; set; } Property Value Type Description short | Improve this Doc View Source Count Declaration public ulong Count { get; set; } Property Value Type Description ulong | Improve this Doc View Source Cycle Declaration public ulong Cycle { get; set; } Property Value Type Description ulong | Improve this Doc View Source Digest Declaration public uint Digest { get; set; } Property Value Type Description uint Implements AXSharp.Connector.IPlain"
  },
  "api/Pocos.AXOpen.Messaging.Dynamic.AxoMessenger.html": {
    "href": "api/Pocos.AXOpen.Messaging.Dynamic.AxoMessenger.html",
    "title": "Class AxoMessenger | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoMessenger Inheritance object AxoMessenger Implements AXSharp.Connector.IPlain IAxoMessenger IAxoMessageProperties IAxoMessageTextBuilder IAxoMessageCategorize IAxoMessages Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.AXOpen.Messaging.Dynamic Assembly: ix_ax_axopen_messaging.dll Syntax public class AxoMessenger : IPlain, IAxoMessenger, IAxoMessageProperties, IAxoMessageTextBuilder, IAxoMessageCategorize, IAxoMessages Implements AXSharp.Connector.IPlain IAxoMessenger IAxoMessageProperties IAxoMessageTextBuilder IAxoMessageCategorize IAxoMessages"
  },
  "api/Pocos.AXOpen.Messaging.Dynamic.AxoMessengerEnv.html": {
    "href": "api/Pocos.AXOpen.Messaging.Dynamic.AxoMessengerEnv.html",
    "title": "Class AxoMessengerEnv | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoMessengerEnv Inheritance object AxoMessengerEnv Implements AXSharp.Connector.IPlain IAxoMessengerEnv Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.AXOpen.Messaging.Dynamic Assembly: ix_ax_axopen_abstractions.dll Syntax public class AxoMessengerEnv : IPlain, IAxoMessengerEnv Implements AXSharp.Connector.IPlain IAxoMessengerEnv"
  },
  "api/Pocos.AXOpen.Messaging.Dynamic.html": {
    "href": "api/Pocos.AXOpen.Messaging.Dynamic.html",
    "title": "Namespace Pocos.AXOpen.Messaging.Dynamic | System.Dynamic.ExpandoObject",
    "keywords": "Namespace Pocos.AXOpen.Messaging.Dynamic Classes AxoMessage AxoMessageDigest AxoMessenger AxoMessengerEnv Interfaces IAxoMessageCategorize IAxoMessageProperties IAxoMessages IAxoMessageTextBuilder IAxoMessenger IAxoMessengerEnv"
  },
  "api/Pocos.AXOpen.Messaging.Dynamic.IAxoMessageCategorize.html": {
    "href": "api/Pocos.AXOpen.Messaging.Dynamic.IAxoMessageCategorize.html",
    "title": "Interface IAxoMessageCategorize | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoMessageCategorize Namespace: Pocos.AXOpen.Messaging.Dynamic Assembly: ix_ax_axopen_abstractions.dll Syntax public interface IAxoMessageCategorize"
  },
  "api/Pocos.AXOpen.Messaging.Dynamic.IAxoMessageProperties.html": {
    "href": "api/Pocos.AXOpen.Messaging.Dynamic.IAxoMessageProperties.html",
    "title": "Interface IAxoMessageProperties | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoMessageProperties Namespace: Pocos.AXOpen.Messaging.Dynamic Assembly: ix_ax_axopen_abstractions.dll Syntax public interface IAxoMessageProperties"
  },
  "api/Pocos.AXOpen.Messaging.Dynamic.IAxoMessages.html": {
    "href": "api/Pocos.AXOpen.Messaging.Dynamic.IAxoMessages.html",
    "title": "Interface IAxoMessages | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoMessages Namespace: Pocos.AXOpen.Messaging.Dynamic Assembly: ix_ax_axopen_abstractions.dll Syntax public interface IAxoMessages"
  },
  "api/Pocos.AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder.html": {
    "href": "api/Pocos.AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder.html",
    "title": "Interface IAxoMessageTextBuilder | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoMessageTextBuilder Namespace: Pocos.AXOpen.Messaging.Dynamic Assembly: ix_ax_axopen_abstractions.dll Syntax public interface IAxoMessageTextBuilder"
  },
  "api/Pocos.AXOpen.Messaging.Dynamic.IAxoMessenger.html": {
    "href": "api/Pocos.AXOpen.Messaging.Dynamic.IAxoMessenger.html",
    "title": "Interface IAxoMessenger | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoMessenger Namespace: Pocos.AXOpen.Messaging.Dynamic Assembly: ix_ax_axopen_abstractions.dll Syntax public interface IAxoMessenger"
  },
  "api/Pocos.AXOpen.Messaging.Dynamic.IAxoMessengerEnv.html": {
    "href": "api/Pocos.AXOpen.Messaging.Dynamic.IAxoMessengerEnv.html",
    "title": "Interface IAxoMessengerEnv | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoMessengerEnv Namespace: Pocos.AXOpen.Messaging.Dynamic Assembly: ix_ax_axopen_abstractions.dll Syntax public interface IAxoMessengerEnv"
  },
  "api/Pocos.AXOpen.Messaging.Static.AxoMessenger.html": {
    "href": "api/Pocos.AXOpen.Messaging.Static.AxoMessenger.html",
    "title": "Class AxoMessenger | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoMessenger Inheritance object AxoMessenger Implements AXSharp.Connector.IPlain IAxoMessageProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.AXOpen.Messaging.Static Assembly: ix_ax_axopen_messaging.dll Syntax public class AxoMessenger : IPlain, IAxoMessageProperties Properties | Improve this Doc View Source Acknowledged Declaration public DateTime Acknowledged { get; set; } Property Value Type Description System.DateTime | Improve this Doc View Source AcknowledgedBeforeFallen Declaration public bool AcknowledgedBeforeFallen { get; set; } Property Value Type Description bool | Improve this Doc View Source AcknowledgementRequired Declaration public bool AcknowledgementRequired { get; set; } Property Value Type Description bool | Improve this Doc View Source AcknowledgeRequest Declaration public bool AcknowledgeRequest { get; set; } Property Value Type Description bool | Improve this Doc View Source Category Declaration public short Category { get; set; } Property Value Type Description short | Improve this Doc View Source Fallen Declaration public DateTime Fallen { get; set; } Property Value Type Description System.DateTime | Improve this Doc View Source IsActive Declaration public bool IsActive { get; set; } Property Value Type Description bool | Improve this Doc View Source MessageCode Declaration public ulong MessageCode { get; set; } Property Value Type Description ulong | Improve this Doc View Source Risen Declaration public DateTime Risen { get; set; } Property Value Type Description System.DateTime | Improve this Doc View Source WaitingForAcknowledge Declaration public bool WaitingForAcknowledge { get; set; } Property Value Type Description bool Implements AXSharp.Connector.IPlain IAxoMessageProperties"
  },
  "api/Pocos.AXOpen.Messaging.Static.html": {
    "href": "api/Pocos.AXOpen.Messaging.Static.html",
    "title": "Namespace Pocos.AXOpen.Messaging.Static | System.Dynamic.ExpandoObject",
    "keywords": "Namespace Pocos.AXOpen.Messaging.Static Classes AxoMessenger Interfaces IAxoMessageProperties"
  },
  "api/Pocos.AXOpen.Messaging.Static.IAxoMessageProperties.html": {
    "href": "api/Pocos.AXOpen.Messaging.Static.IAxoMessageProperties.html",
    "title": "Interface IAxoMessageProperties | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoMessageProperties Namespace: Pocos.AXOpen.Messaging.Static Assembly: ix_ax_axopen_abstractions.dll Syntax public interface IAxoMessageProperties"
  },
  "api/Pocos.AXOpen.Rtc.html": {
    "href": "api/Pocos.AXOpen.Rtc.html",
    "title": "Namespace Pocos.AXOpen.Rtc | System.Dynamic.ExpandoObject",
    "keywords": "Namespace Pocos.AXOpen.Rtc Interfaces IAxoRtc"
  },
  "api/Pocos.AXOpen.Rtc.IAxoRtc.html": {
    "href": "api/Pocos.AXOpen.Rtc.IAxoRtc.html",
    "title": "Interface IAxoRtc | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoRtc Namespace: Pocos.AXOpen.Rtc Assembly: ix_ax_axopen_abstractions.dll Syntax public interface IAxoRtc"
  },
  "api/Pocos.AXOpen.Utils.AxoStringBuilder.html": {
    "href": "api/Pocos.AXOpen.Utils.AxoStringBuilder.html",
    "title": "Class AxoStringBuilder | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoStringBuilder Inheritance object AxoStringBuilder Implements AXSharp.Connector.IPlain IAxoStringBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.AXOpen.Utils Assembly: ix_ax_axopen_abstractions.dll Syntax public class AxoStringBuilder : IPlain, IAxoStringBuilder Implements AXSharp.Connector.IPlain IAxoStringBuilder"
  },
  "api/Pocos.AXOpen.Utils.html": {
    "href": "api/Pocos.AXOpen.Utils.html",
    "title": "Namespace Pocos.AXOpen.Utils | System.Dynamic.ExpandoObject",
    "keywords": "Namespace Pocos.AXOpen.Utils Classes AxoStringBuilder Interfaces IAxoStringBuilder"
  },
  "api/Pocos.AXOpen.Utils.IAxoStringBuilder.html": {
    "href": "api/Pocos.AXOpen.Utils.IAxoStringBuilder.html",
    "title": "Interface IAxoStringBuilder | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoStringBuilder Namespace: Pocos.AXOpen.Utils Assembly: ix_ax_axopen_abstractions.dll Syntax public interface IAxoStringBuilder"
  },
  "apictrl/index.html": {
    "href": "apictrl/index.html",
    "title": "IX API Documentation | System.Dynamic.ExpandoObject",
    "keywords": "IX API Documentation"
  },
  "apictrl/plc.AXOpen.Core._NULL_CONTEXT.html": {
    "href": "apictrl/plc.AXOpen.Core._NULL_CONTEXT.html",
    "title": "Class _NULL_CONTEXT | System.Dynamic.ExpandoObject",
    "keywords": "Class _NULL_CONTEXT Provides an empty context for uninitialized objects. Inheritance _NULL_CONTEXT Implements IAxoContext Namespace: plc.AXOpen.Core Assembly: .dll Syntax CLASS _NULL_CONTEXT Properties NULL_RTC Declaration NULL_RTC : AXOpen.Core._NULL_RTC Property Value Type Description Methods CreateIdentity Declaration Public ULINT CreateIdentity() Returns Type Description ULINT OpenCycleCount Declaration Public ULINT OpenCycleCount() Returns Type Description ULINT GetRtc Declaration Public AXOpen.Rtc.IAxoRtc GetRtc() Returns Type Description IAxoRtc InjectRtc Declaration Public VOID InjectRtc(in plc.AXOpen.Rtc.IAxoRtc Rtc) Parameters Type Name Description IAxoRtc Rtc Returns Type Description Environment Declaration Public AXOpen.Core.IAxoContextEnvironment Environment() Returns Type Description IAxoContextEnvironment Implements IAxoContext"
  },
  "apictrl/plc.AXOpen.Core._NULL_OBJECT.html": {
    "href": "apictrl/plc.AXOpen.Core._NULL_OBJECT.html",
    "title": "Class _NULL_OBJECT | System.Dynamic.ExpandoObject",
    "keywords": "Class _NULL_OBJECT Provides an empty object for uninitialized objects. Inheritance _NULL_OBJECT Implements IAxoObject Namespace: plc.AXOpen.Core Assembly: .dll Syntax CLASS _NULL_OBJECT Properties NULL_CONTEXT Declaration NULL_CONTEXT : AXOpen.Core._NULL_CONTEXT Property Value Type Description Methods GetIdentity Declaration Public ULINT GetIdentity() Returns Type Description ULINT GetContext Declaration Public AXOpen.Core.IAxoContext GetContext() Returns Type Description IAxoContext Implements IAxoObject"
  },
  "apictrl/plc.AXOpen.Core._NULL_RTC.html": {
    "href": "apictrl/plc.AXOpen.Core._NULL_RTC.html",
    "title": "Class _NULL_RTC | System.Dynamic.ExpandoObject",
    "keywords": "Class _NULL_RTC Provides an empty RTC object for uninitialized RTC. Inheritance _NULL_RTC Implements IAxoRtc Namespace: plc.AXOpen.Core Assembly: .dll Syntax CLASS _NULL_RTC Properties _null_time Declaration _null_time : LDATE_AND_TIME Property Value Type Description Methods NowUTC Declaration Public LDATE_AND_TIME NowUTC() Returns Type Description LDATE_AND_TIME Implements IAxoRtc"
  },
  "apictrl/plc.AXOpen.Core.AxoComponent.html": {
    "href": "apictrl/plc.AXOpen.Core.AxoComponent.html",
    "title": "Class AxoComponent | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoComponent Inheritance AxoObject AxoComponent Implements IAxoComponent Inherited Members Identity GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Environment() Namespace: plc.AXOpen.Core Assembly: .dll Syntax CLASS AxoComponent Properties _manualControlContextCycle Declaration _manualControlContextCycle : ULINT Property Value Type Description _isManuallyControllable Declaration _isManuallyControllable : BOOL Property Value Type Description Methods ActivateManualControl Executes the logic for manual-maintenance control. Declaration Public VOID ActivateManualControl() Returns Type Description IsManuallyControllable Gets whether the AxoComponent is manually controllable.To make the AxoComponent manually controllable, it is necessary to call the ActivateManualMode() method cyclically. Declaration Public BOOL IsManuallyControllable() Returns Type Description BOOL CheckIfManualControlIsActivated Declaration Private VOID CheckIfManualControlIsActivated() Returns Type Description Open Declaration Protected VOID Open() Returns Type Description Run Declaration Public VOID Run() Returns Type Description Close Declaration Protected VOID Close() Returns Type Description Restore Restores this instance. This method must be implemented in derived class. Declaration Protected AXOpen.Core.IAxoTask Restore() Returns Type Description IAxoTask ManualControl Custom logic for manual control of the AxoComponent.This method must be implemented in derived class. Declaration Protected VOID ManualControl() Returns Type Description Implements IAxoComponent"
  },
  "apictrl/plc.AXOpen.Core.AxoContext.html": {
    "href": "apictrl/plc.AXOpen.Core.AxoContext.html",
    "title": "Class AxoContext | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoContext Provides base for contextualized entry of AXOpen application.This class is abstract and must be inherited. Inheritance AxoContext Implements IAxoContext Namespace: plc.AXOpen.Core Assembly: .dll Syntax CLASS AxoContext Properties _openCounter Declaration _openCounter : ULINT Property Value Type Description _closeCounter Declaration _closeCounter : ULINT Property Value Type Description _identityCounter Declaration _identityCounter : ULINT Property Value Type Description _messagingLevel Declaration _messagingLevel : AXOpen.Messaging.eAxoMessageCategory Property Value Type Description _environment Declaration _environment : AXOpen.Core.IAxoContextEnvironment Property Value Type Description NULL_RTC Declaration NULL_RTC : AXOpen.Core._NULL_RTC Property Value Type Description _rtc Declaration _rtc : AXOpen.Rtc.IAxoRtc Property Value Type Description Methods Open Declaration Private ULINT Open() Returns Type Description ULINT Close Declaration Private ULINT Close() Returns Type Description ULINT Run Runs the cycle of this context. This method must be called cyclically in a PLC task. Declaration Public VOID Run() Returns Type Description OpenCycleCount Gets the value of current context cycle counter. Declaration Public ULINT OpenCycleCount() Returns Type Description ULINT ClosedCycleCount Declaration Public ULINT ClosedCycleCount() Returns Type Description ULINT CreateIdentity Declaration Public ULINT CreateIdentity() Returns Type Description ULINT PeekIdentity Declaration Public ULINT PeekIdentity() Returns Type Description ULINT GetRtc Declaration Public AXOpen.Rtc.IAxoRtc GetRtc() Returns Type Description IAxoRtc InjectRtc Declaration Public VOID InjectRtc(in plc.AXOpen.Rtc.IAxoRtc Rtc) Parameters Type Name Description IAxoRtc Rtc Returns Type Description Environment Declaration Public AXOpen.Core.IAxoContextEnvironment Environment() Returns Type Description IAxoContextEnvironment Main The entry point for the context. The call tree of the context start here and all the logic of given contextmust be placed here.This method must be overridden in derived class. Declaration Protected VOID Main() Returns Type Description Implements IAxoContext"
  },
  "apictrl/plc.AXOpen.Core.AxoContextEnvironment.html": {
    "href": "apictrl/plc.AXOpen.Core.AxoContextEnvironment.html",
    "title": "Class AxoContextEnvironment | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoContextEnvironment Inheritance AxoContextEnvironment Implements IAxoContextEnvironment Namespace: plc.AXOpen.Core Assembly: .dll Syntax CLASS AxoContextEnvironment Properties _messenger Declaration _messenger : AXOpen.Messaging.Dynamic.AxoMessengerEnv Property Value Type Description Methods Messaging Declaration Public AXOpen.Messaging.Dynamic.IAxoMessengerEnv Messaging() Returns Type Description IAxoMessengerEnv Implements IAxoContextEnvironment"
  },
  "apictrl/plc.AXOpen.Core.AxoCoordinatorStates.html": {
    "href": "apictrl/plc.AXOpen.Core.AxoCoordinatorStates.html",
    "title": "Enum AxoCoordinatorStates | System.Dynamic.ExpandoObject",
    "keywords": "Enum AxoCoordinatorStates Namespace: plc.AXOpen.Core Assembly: .dll Syntax AxoCoordinatorStates : INT Fields Name Description Idle := 0 Configuring := 1 Running := 2"
  },
  "apictrl/plc.AXOpen.Core.AxoMomentaryTask.html": {
    "href": "apictrl/plc.AXOpen.Core.AxoMomentaryTask.html",
    "title": "Class AxoMomentaryTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoMomentaryTask Provides basic momentary on function.To get the actual state of the toggle task, '''IsSwitchedOn()''', '''IsSwitchedOff()''' AND '''GetState()''' methods are available. Inheritance AxoObject AxoMomentaryTask Implements IAxoMomentaryTask Inherited Members Identity GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Environment() Namespace: plc.AXOpen.Core Assembly: .dll Syntax CLASS AxoMomentaryTask Properties State Declaration State : BOOL Property Value Type Description RemoteSwitchOn Remote request to set the state of this task to '''TRUE'''. Declaration RemoteSwitchOn : BOOL Property Value Type Description IsDisabled Gets or sets whether this task is disabled for any manipulations. Declaration IsDisabled : BOOL Property Value Type Description _openCycleCount Declaration _openCycleCount : ULINT Property Value Type Description Methods GetState Gets the actual state of this task. Declaration Public BOOL GetState() Returns Type Description BOOL IsRunCalledInThisPlcCycle Declaration Private BOOL IsRunCalledInThisPlcCycle() Returns Type Description BOOL WasRunCalledInPreviousPlcCycle Declaration Private BOOL WasRunCalledInPreviousPlcCycle() Returns Type Description BOOL Run This method needs to be called cyclically. Declaration Public BOOL Run() Returns Type Description BOOL SetIsDisabled Sets the value of the IsDisabled variable Declaration Public VOID SetIsDisabled(in plc.BOOL Disabled) Parameters Type Name Description BOOL Disabled Returns Type Description GetIsDisabled Returns the value of the IsDisabled variable Declaration Public BOOL GetIsDisabled() Returns Type Description BOOL IsSwitchedOn Returns TRUE if task is switched on Declaration Public BOOL IsSwitchedOn() Returns Type Description BOOL IsSwitchedOff Returns TRUE if task is switched off Declaration Public BOOL IsSwitchedOff() Returns Type Description BOOL SwitchOff Declaration Private VOID SwitchOff() Returns Type Description SwitchOn Declaration Private VOID SwitchOn() Returns Type Description OnSwitchedOn Executes ones when momentary task changes its state from '''FALSE''' to '''TRUE'''. Declaration Protected VOID OnSwitchedOn() Returns Type Description OnSwitchedOff Executes ones when momentary task changes its state from '''TRUE''' to '''FALSE'''. Declaration Protected VOID OnSwitchedOff() Returns Type Description OnStateChanged Executes ones when momentary task changes its state. Declaration Protected VOID OnStateChanged() Returns Type Description SwitchedOn Executes while the task is in On state. Declaration Protected VOID SwitchedOn() Returns Type Description SwitchedOff Executes while the task is in Off state. Declaration Protected VOID SwitchedOff() Returns Type Description Implements IAxoMomentaryTask"
  },
  "apictrl/plc.AXOpen.Core.AxoObject.html": {
    "href": "apictrl/plc.AXOpen.Core.AxoObject.html",
    "title": "Class AxoObject | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoObject Provides base class for all classes of AXOpen. Inheritance AxoObject Implements IAxoObject Namespace: plc.AXOpen.Core Assembly: .dll Syntax CLASS AxoObject Properties Identity Declaration Identity : ULINT Property Value Type Description _parent Declaration _parent : AXOpen.Core.IAxoObject Property Value Type Description _context Declaration _context : AXOpen.Core.IAxoContext Property Value Type Description NULL_CONTEXT Declaration NULL_CONTEXT : AXOpen.Core._NULL_CONTEXT Property Value Type Description NULL_OBJECT Declaration NULL_OBJECT : AXOpen.Core._NULL_OBJECT Property Value Type Description Methods GetIdentity Gets unique identity of this object in given context. Declaration Public ULINT GetIdentity() Returns Type Description ULINT GetContext Gets context in which this object was initialized. Declaration Public AXOpen.Core.IAxoContext GetContext() Returns Type Description IAxoContext GetParent Gets parent in which this object was initialized. Declaration Public AXOpen.Core.IAxoObject GetParent() Returns Type Description IAxoObject Initialize Initializes this object associating it given parent.This method should be called only once upon the program start.Any subsequent call are ignored. Declaration Public VOID Initialize(in plc.AXOpen.Core.IAxoObject parent) Parameters Type Name Description IAxoObject parent Returns Type Description Initialize Initializes this object associating it given context.This method should be called only once upon the program start.Any subsequent call are ignored. Declaration Public VOID Initialize(in plc.AXOpen.Core.IAxoContext context) Parameters Type Name Description IAxoContext context Returns Type Description Environment Declaration Public AXOpen.Core.IAxoContextEnvironment Environment() Returns Type Description IAxoContextEnvironment Implements IAxoObject"
  },
  "apictrl/plc.AXOpen.Core.AxoRemoteTask.html": {
    "href": "apictrl/plc.AXOpen.Core.AxoRemoteTask.html",
    "title": "Class AxoRemoteTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoRemoteTask Provides a mechanism to exectute a logic from the PLC in an .NET environment. > [!IMPORTANT]> The deferred execution in .NET envornment is not hard-real time nor deterministic. Inheritance AxoTask AxoObject AxoRemoteTask Implements IAxoTask IAxoTaskState Inherited Members Status IsDisabled RemoteInvoke RemoteRestore RemoteAbort RemoteResume StartSignature Duration StartTimeStamp ErrorDetails Identity GetState() GetErrorDetails() IsReady() IsDone() IsBusy() IsAborted() HasError() IsNewInvokeCall() IsInvokeCalledInThisPlcCycle() WasInvokeCalledInPreviousPlcCycle() IsNewExecuteCall() IsExecuteCalledInThisPlcCycle() WasExecuteCalledInPreviousPlcCycle() UpdateState() Invoke() Restore() DoneWhen(BOOL) Execute() ThrowWhen(BOOL) ThrowWhen(BOOL,STRING[254]) SetIsDisabled(BOOL) GetIsDisabled() Abort() Resume() OnAbort() OnResume() OnDone() OnError() OnRestore() OnStart() WhileError() GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Environment() Namespace: plc.AXOpen.Core Assembly: .dll Syntax CLASS AxoRemoteTask Properties DoneSignature Remote system's done signature.When StartSignature and DoneSignature equal the task is considered executed on the remote system. Declaration DoneSignature : ULINT Property Value Type Description IsInitialized Indicates whether this instance's remote procedure is initialized. Declaration IsInitialized : BOOL Property Value Type Description Remarks When the remote task is not initialized, but the execution is invoked, task enters error state. HasRemoteException Declaration HasRemoteException : BOOL Property Value Type Description IsBeingCalledCounter Declaration IsBeingCalledCounter : INT Property Value Type Description Methods Execute Declaration Public BOOL Execute() Returns Type Description BOOL GetStartSignature Declaration Internal ULINT GetStartSignature() Returns Type Description ULINT SetDoneSignature Declaration Internal VOID SetDoneSignature() Returns Type Description Implements IAxoTask IAxoTaskState"
  },
  "apictrl/plc.AXOpen.Core.AxoSequencer.html": {
    "href": "apictrl/plc.AXOpen.Core.AxoSequencer.html",
    "title": "Class AxoSequencer | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoSequencer Inheritance AxoTask AxoObject AxoSequencer Implements IAxoSequencer IAxoTask IAxoTaskState Inherited Members Status IsDisabled RemoteInvoke RemoteRestore RemoteAbort RemoteResume StartSignature Duration StartTimeStamp ErrorDetails Identity GetState() GetErrorDetails() IsReady() IsDone() IsBusy() IsAborted() HasError() IsNewInvokeCall() IsInvokeCalledInThisPlcCycle() WasInvokeCalledInPreviousPlcCycle() IsNewExecuteCall() IsExecuteCalledInThisPlcCycle() WasExecuteCalledInPreviousPlcCycle() UpdateState() Invoke() Restore() DoneWhen(BOOL) Execute() ThrowWhen(BOOL) ThrowWhen(BOOL,STRING[254]) SetIsDisabled(BOOL) GetIsDisabled() Abort() Resume() OnAbort() OnResume() OnDone() OnError() OnRestore() OnStart() WhileError() GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Environment() Namespace: plc.AXOpen.Core Assembly: .dll Syntax CLASS AxoSequencer Properties SteppingMode Declaration SteppingMode : AXOpen.Core.eAxoSteppingMode Property Value Type Description SequenceMode Declaration SequenceMode : AXOpen.Core.eAxoSequenceMode Property Value Type Description CurrentOrder Declaration CurrentOrder : ULINT Property Value Type Description StepForwardCommand Declaration StepForwardCommand : AXOpen.Core.AxoTask Property Value Type Description StepIn Declaration StepIn : AXOpen.Core.AxoTask Property Value Type Description StepBackwardCommand Declaration StepBackwardCommand : AXOpen.Core.AxoTask Property Value Type Description _configurationFlowOrder Declaration _configurationFlowOrder : ULINT Property Value Type Description _numberOfConfiguredSteps Declaration _numberOfConfiguredSteps : ULINT Property Value Type Description _coordinatorState Declaration _coordinatorState : AXOpen.Core.AxoCoordinatorStates Property Value Type Description _step Declaration _step : AXOpen.Core.IAxoStep Property Value Type Description _openCycleCounter Declaration _openCycleCounter : ULINT Property Value Type Description _closeCycleCounter Declaration _closeCycleCounter : ULINT Property Value Type Description Methods Open Opens sequencers operations.This method must be called prior to any other calls of this instance ofsequencer. Declaration Public BOOL Open() Returns Type Description BOOL Execute Declaration Internal BOOL Execute(in plc.AXOpen.Core.IAxoStep step,in plc.BOOL Enable) Parameters Type Name Description IAxoStep step BOOL Enable Returns Type Description BOOL MoveNext Moves the execution to the next step. Declaration Public VOID MoveNext() Returns Type Description RequestStep Terminates the currently executed step and initiates the RequestedStep to be executed Declaration Public VOID RequestStep(in plc.AXOpen.Core.IAxoStep RequestedStep) Parameters Type Name Description IAxoStep RequestedStep Returns Type Description CompleteSequence Completes (finishes) the execution of this sequencer and set the coordination state to Idle.If the SequenceMode of the sequencer is set to RunOnce, terminates also execution of the sequencer itself. Declaration Public VOID CompleteSequence() Returns Type Description OnBeforeSequenceStart Executes once when the sequence starts. Declaration Protected VOID OnBeforeSequenceStart() Returns Type Description OnCompleteSequence Executes once when the sequence is completed. Declaration Protected VOID OnCompleteSequence() Returns Type Description GetCoordinatorState Gets the state of the coordinator Declaration Public AXOpen.Core.AxoCoordinatorStates GetCoordinatorState() Returns Type Description AxoCoordinatorStates DetermineOrder Declaration Protected ULINT DetermineOrder(in plc.AXOpen.Core.IAxoStep step) Parameters Type Name Description IAxoStep step Returns Type Description ULINT GetNumberOfConfiguredSteps Gets the number of the configured steps in the sequence. Declaration Public ULINT GetNumberOfConfiguredSteps() Returns Type Description ULINT InvalidContext Declaration Protected BOOL InvalidContext() Returns Type Description BOOL InvalidContext Declaration Protected BOOL InvalidContext(in plc.AXOpen.Core.IAxoStep step) Parameters Type Name Description IAxoStep step Returns Type Description BOOL DisableAllSteppingComands Declaration Protected VOID DisableAllSteppingComands() Returns Type Description AbortCurrentStep Declaration Protected VOID AbortCurrentStep() Returns Type Description OnRestore Declaration Protected VOID OnRestore() Returns Type Description AndThen Declaration Public VOID AndThen(in plc.AXOpen.Core.IAxoTask tsk) Parameters Type Name Description IAxoTask tsk Returns Type Description Close Declaration Protected VOID Close() Returns Type Description Implements IAxoSequencer IAxoTask IAxoTaskState"
  },
  "apictrl/plc.AXOpen.Core.AxoSequencerContainer.html": {
    "href": "apictrl/plc.AXOpen.Core.AxoSequencerContainer.html",
    "title": "Class AxoSequencerContainer | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoSequencerContainer Inheritance AxoSequencer AxoTask AxoObject AxoSequencerContainer Implements IAxoSequencer IAxoTask IAxoTaskState Inherited Members SteppingMode SequenceMode CurrentOrder StepForwardCommand StepIn StepBackwardCommand Status IsDisabled RemoteInvoke RemoteRestore RemoteAbort RemoteResume StartSignature Duration StartTimeStamp ErrorDetails Identity Open() Execute(IAxoStep,BOOL) MoveNext() RequestStep(IAxoStep) CompleteSequence() OnBeforeSequenceStart() OnCompleteSequence() GetCoordinatorState() DetermineOrder(IAxoStep) GetNumberOfConfiguredSteps() InvalidContext() InvalidContext(IAxoStep) DisableAllSteppingComands() AbortCurrentStep() OnRestore() AndThen(IAxoTask) Close() GetState() GetErrorDetails() IsReady() IsDone() IsBusy() IsAborted() HasError() IsNewInvokeCall() IsInvokeCalledInThisPlcCycle() WasInvokeCalledInPreviousPlcCycle() IsNewExecuteCall() IsExecuteCalledInThisPlcCycle() WasExecuteCalledInPreviousPlcCycle() UpdateState() Invoke() Restore() DoneWhen(BOOL) Execute() ThrowWhen(BOOL) ThrowWhen(BOOL,STRING[254]) SetIsDisabled(BOOL) GetIsDisabled() Abort() Resume() OnAbort() OnResume() OnDone() OnError() OnRestore() OnStart() WhileError() GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Environment() Namespace: plc.AXOpen.Core Assembly: .dll Syntax CLASS AxoSequencerContainer Methods Run Declaration Public VOID Run(in plc.AXOpen.Core.IAxoContext context) Parameters Type Name Description IAxoContext context Returns Type Description Run Declaration Public VOID Run(in plc.AXOpen.Core.IAxoObject object) Parameters Type Name Description IAxoObject object Returns Type Description Main Declaration Protected VOID Main() Returns Type Description Implements IAxoSequencer IAxoTask IAxoTaskState"
  },
  "apictrl/plc.AXOpen.Core.AxoStep.html": {
    "href": "apictrl/plc.AXOpen.Core.AxoStep.html",
    "title": "Class AxoStep | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoStep Inheritance AxoTask AxoObject AxoStep Implements IAxoStep IAxoTaskState Inherited Members Status IsDisabled RemoteInvoke RemoteRestore RemoteAbort RemoteResume StartSignature Duration StartTimeStamp ErrorDetails Identity GetState() GetErrorDetails() IsReady() IsDone() IsBusy() IsAborted() HasError() IsNewInvokeCall() IsInvokeCalledInThisPlcCycle() WasInvokeCalledInPreviousPlcCycle() IsNewExecuteCall() IsExecuteCalledInThisPlcCycle() WasExecuteCalledInPreviousPlcCycle() UpdateState() Invoke() Restore() DoneWhen(BOOL) Execute() ThrowWhen(BOOL) ThrowWhen(BOOL,STRING[254]) SetIsDisabled(BOOL) GetIsDisabled() Abort() Resume() OnAbort() OnResume() OnDone() OnError() OnRestore() OnStart() WhileError() GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Environment() Namespace: plc.AXOpen.Core Assembly: .dll Syntax CLASS AxoStep Properties Order Declaration Order : ULINT Property Value Type Description StepDescription Declaration StepDescription : STRING[120] Property Value Type Description IsActive Declaration IsActive : BOOL Property Value Type Description IsEnabled Declaration IsEnabled : BOOL Property Value Type Description _openCycleCount Declaration _openCycleCount : ULINT Property Value Type Description _isCalledJustOnceInThisPlcCycle Declaration _isCalledJustOnceInThisPlcCycle : BOOL Property Value Type Description _multipleStepCallInThisPlcCycle Declaration _multipleStepCallInThisPlcCycle : BOOL Property Value Type Description _noStepCallInPreviousPlcCycle Declaration _noStepCallInPreviousPlcCycle : BOOL Property Value Type Description Methods GetStepOrder Returns the order of the execution. Declaration Public ULINT GetStepOrder() Returns Type Description ULINT SetStepOrder Sets the order of the execution, if conditions are met. Declaration Public VOID SetStepOrder(in plc.AXOpen.Core.IAxoCoordinator coord,in plc.ULINT StepOrder) Parameters Type Name Description IAxoCoordinator coord ULINT StepOrder Returns Type Description IsCalledJustOnceInThisPlcCycle Returns TRUE if the execution of the step is called only once in this PLC cycle. Declaration Public BOOL IsCalledJustOnceInThisPlcCycle() Returns Type Description BOOL Execute Returns TRUE if instance of THIS step is curently executing Declaration Public BOOL Execute(in plc.AXOpen.Core.IAxoCoordinator coord) Parameters Type Name Description IAxoCoordinator coord Returns Type Description BOOL Execute Returns TRUE if instance of THIS step is curently executing and the step is enabled Declaration Public BOOL Execute(in plc.AXOpen.Core.IAxoCoordinator coord,in plc.BOOL Enable) Parameters Type Name Description IAxoCoordinator coord BOOL Enable Returns Type Description BOOL Execute Returns TRUE if instance of THIS step is curently executing and the step is enabledand sets the description of the step Declaration Public BOOL Execute(in plc.AXOpen.Core.IAxoCoordinator coord,in plc.BOOL Enable,in plc.STRING[120] Description) Parameters Type Name Description IAxoCoordinator coord BOOL Enable STRING[120] Description Returns Type Description BOOL Execute Returns TRUE if instance of THIS step is curently executingand sets the description of the step Declaration Public BOOL Execute(in plc.AXOpen.Core.IAxoCoordinator coord,in plc.STRING[120] Description) Parameters Type Name Description IAxoCoordinator coord STRING[120] Description Returns Type Description BOOL CountCallsOfTheExecuteMethod Declaration Protected VOID CountCallsOfTheExecuteMethod() Returns Type Description ExecuteInternal Declaration Protected BOOL ExecuteInternal(in plc.AXOpen.Core.IAxoCoordinator coord,in plc.BOOL Enable) Parameters Type Name Description IAxoCoordinator coord BOOL Enable Returns Type Description BOOL SetIsActive Sets the value of the IsActive variable Declaration Public VOID SetIsActive(in plc.BOOL Active) Parameters Type Name Description BOOL Active Returns Type Description GetIsActive Returns the value of the IsActive variable Declaration Public BOOL GetIsActive() Returns Type Description BOOL SetIsEnabled Sets the value of the IsEnabled variable Declaration Public VOID SetIsEnabled(in plc.BOOL Enabled) Parameters Type Name Description BOOL Enabled Returns Type Description GetIsEnabled Returns the value of the IsEnabled variable Declaration Public BOOL GetIsEnabled() Returns Type Description BOOL Implements IAxoStep IAxoTaskState"
  },
  "apictrl/plc.AXOpen.Core.AxoTask.html": {
    "href": "apictrl/plc.AXOpen.Core.AxoTask.html",
    "title": "Class AxoTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoTask Inheritance AxoObject AxoTask Implements IAxoTask IAxoTaskState Inherited Members Identity GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Environment() Namespace: plc.AXOpen.Core Assembly: .dll Syntax CLASS AxoTask Properties Status Gets the state of this task. Declaration Status : AXOpen.Core.eAxoTaskState Property Value Type Description IsDisabled Gets or sets whether this task is disabled for execution. Declaration IsDisabled : BOOL Property Value Type Description RemoteInvoke Remote requests for invoke of this task.When 'TRUE' this task will be invoked. Declaration RemoteInvoke : BOOL Property Value Type Description RemoteRestore Remote requests for restore of this task.When 'TRUE' this task will be restored. Declaration RemoteRestore : BOOL Property Value Type Description RemoteAbort Remote requests for abort of this task.When 'TRUE' this task will be aborted. Declaration RemoteAbort : BOOL Property Value Type Description RemoteResume Remote requests for resume of this task.When 'TRUE' this task will be resumed. Declaration RemoteResume : BOOL Property Value Type Description StartSignature Contains contex cycle number when this task started. Declaration StartSignature : ULINT Property Value Type Description Duration Gets elapsed time of last task execution. Declaration Duration : LTIME Property Value Type Description StartTimeStamp Gets date and time when the task started. Declaration StartTimeStamp : LDATE_AND_TIME Property Value Type Description ErrorDetails Contains details about the error. Declaration ErrorDetails : STRING[254] Property Value Type Description _openCycleCountInvoke Declaration _openCycleCountInvoke : ULINT Property Value Type Description _openCycleCountExecute Declaration _openCycleCountExecute : ULINT Property Value Type Description _taskTimer Declaration _taskTimer : UNDEFINED Property Value Type Description Methods GetState Gets the actual state of this task. Declaration Public AXOpen.Core.eAxoTaskState GetState() Returns Type Description eAxoTaskState GetErrorDetails Declaration Public STRING[254] GetErrorDetails() Returns Type Description STRING[254] IsReady Gets true when the task is ready. Declaration Public BOOL IsReady() Returns Type Description BOOL IsDone Gets true when the task is done. Declaration Public BOOL IsDone() Returns Type Description BOOL IsBusy Gets true when the task is busy/executing. Declaration Public BOOL IsBusy() Returns Type Description BOOL IsAborted Gets true when the task is aborted. Declaration Public BOOL IsAborted() Returns Type Description BOOL HasError Gets true when the task has error. Declaration Public BOOL HasError() Returns Type Description BOOL IsNewInvokeCall Declaration Private BOOL IsNewInvokeCall() Returns Type Description BOOL IsInvokeCalledInThisPlcCycle Declaration Private BOOL IsInvokeCalledInThisPlcCycle() Returns Type Description BOOL WasInvokeCalledInPreviousPlcCycle Declaration Private BOOL WasInvokeCalledInPreviousPlcCycle() Returns Type Description BOOL IsNewExecuteCall Declaration Private BOOL IsNewExecuteCall() Returns Type Description BOOL IsExecuteCalledInThisPlcCycle Declaration Private BOOL IsExecuteCalledInThisPlcCycle() Returns Type Description BOOL WasExecuteCalledInPreviousPlcCycle Declaration Private BOOL WasExecuteCalledInPreviousPlcCycle() Returns Type Description BOOL UpdateState Declaration Private VOID UpdateState() Returns Type Description Invoke Invokes this task. Declaration Public AXOpen.Core.IAxoTaskState Invoke() Returns Type Description IAxoTaskState Restore Restores this task. Declaration Public AXOpen.Core.IAxoTaskState Restore() Returns Type Description IAxoTaskState DoneWhen Makes this task to transition in Done statewhen Condition argument is TRUE. Declaration Public VOID DoneWhen(in plc.BOOL Condition) Parameters Type Name Description BOOL Condition Returns Type Description Execute Returns TRUE if the task is Busy, otherwise false.This method needs to be called cyclically. Declaration Public BOOL Execute() Returns Type Description BOOL ThrowWhen Makes this task enter into Error state, when HasErrorState argument is TRUEtask in error state stops its execution. Declaration Public VOID ThrowWhen(in plc.BOOL HasErrorState) Parameters Type Name Description BOOL HasErrorState Returns Type Description ThrowWhen Makes this task enter into Error state, when HasErrorState argument is TRUEtask in error state stops its execution. Declaration Public VOID ThrowWhen(in plc.BOOL HasErrorState,in plc.STRING[254] ErrorDescription) Parameters Type Name Description BOOL HasErrorState STRING[254] ErrorDescription Returns Type Description SetIsDisabled Sets the value of the IsDisabled variable Declaration Public VOID SetIsDisabled(in plc.BOOL Disabled) Parameters Type Name Description BOOL Disabled Returns Type Description GetIsDisabled Returns the value of the IsDisabled variable Declaration Public BOOL GetIsDisabled() Returns Type Description BOOL Abort Aborts the execution of the task if running and sets its state to aborted. Declaration Public VOID Abort() Returns Type Description Resume Resume the execution of the task if aborted and sets its state to busy. Declaration Public VOID Resume() Returns Type Description OnAbort Executes once when the task is aborted. Declaration Protected VOID OnAbort() Returns Type Description OnResume Executes once when the task is resumed. Declaration Protected VOID OnResume() Returns Type Description OnDone Executes once when the task reaches the Done state. Declaration Protected VOID OnDone() Returns Type Description OnError Executes once when the task reaches the Error state. Declaration Protected VOID OnError() Returns Type Description OnRestore Executes once when the task is restored. Declaration Protected VOID OnRestore() Returns Type Description OnStart Executes once when the task starts (at the moment of transition from the Kicking state into the Busy state). Declaration Protected VOID OnStart() Returns Type Description WhileError Executes repeatedly while the task is in Error state (and Execute() method is called). Declaration Protected VOID WhileError() Returns Type Description Implements IAxoTask IAxoTaskState"
  },
  "apictrl/plc.AXOpen.Core.AxoToggleTask.html": {
    "href": "apictrl/plc.AXOpen.Core.AxoToggleTask.html",
    "title": "Class AxoToggleTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoToggleTask Provides basic toggling between two states. The states are triggered by calling the '''Toggle()''' method.To get the actual state of the toggle task, '''IsSwitchedOn()''', '''IsSwitchedOff()''' AND '''GetState()''' methods are available. Inheritance AxoObject AxoToggleTask Implements IAxoToggleTask Inherited Members Identity GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Environment() Namespace: plc.AXOpen.Core Assembly: .dll Syntax CLASS AxoToggleTask Properties State Declaration State : BOOL Property Value Type Description RemoteToggle Remote request to toggle the state of this task. Declaration RemoteToggle : BOOL Property Value Type Description IsDisabled Gets or sets whether this task is disabled for any manipulations. Declaration IsDisabled : BOOL Property Value Type Description _openCycleCount Declaration _openCycleCount : ULINT Property Value Type Description Methods GetState Gets the actual state of this task. Declaration Public BOOL GetState() Returns Type Description BOOL IsRunCalledInThisPlcCycle Declaration Private BOOL IsRunCalledInThisPlcCycle() Returns Type Description BOOL WasRunCalledInPreviousPlcCycle Declaration Private BOOL WasRunCalledInPreviousPlcCycle() Returns Type Description BOOL Run This method needs to be called cyclically. Declaration Public BOOL Run() Returns Type Description BOOL SetIsDisabled Sets the value of the IsDisabled variable Declaration Public VOID SetIsDisabled(in plc.BOOL Disabled) Parameters Type Name Description BOOL Disabled Returns Type Description GetIsDisabled Returns the value of the IsDisabled variable Declaration Public BOOL GetIsDisabled() Returns Type Description BOOL IsSwitchedOn Returns TRUE if task is switched on Declaration Public BOOL IsSwitchedOn() Returns Type Description BOOL IsSwitchedOff Returns TRUE if task is switched off Declaration Public BOOL IsSwitchedOff() Returns Type Description BOOL Toggle Use to toggle the state of the '''AxoToggleTask'''. Declaration Public BOOL Toggle() Returns Type Description BOOL SwitchOff Use to set the state of the '''AxoToggleTask''' to the value '''FALSE'''. Declaration Public BOOL SwitchOff() Returns Type Description BOOL SwitchOn Declaration Public BOOL SwitchOn() Returns Type Description BOOL OnSwitchedOn Executes ones when toggle task changes its state from '''FALSE''' to '''TRUE'''. Declaration Protected VOID OnSwitchedOn() Returns Type Description OnSwitchedOff Executes ones when toggle task changes its state from '''TRUE''' to '''FALSE'''. Declaration Protected VOID OnSwitchedOff() Returns Type Description OnStateChanged Executes ones when toggle task changes its state. Declaration Protected VOID OnStateChanged() Returns Type Description SwitchedOn Executes while the task is in On state. Declaration Protected VOID SwitchedOn() Returns Type Description SwitchedOff Executes while the task is in Off state. Declaration Protected VOID SwitchedOff() Returns Type Description Implements IAxoToggleTask"
  },
  "apictrl/plc.AXOpen.Core.eAxoSequenceMode.html": {
    "href": "apictrl/plc.AXOpen.Core.eAxoSequenceMode.html",
    "title": "Enum eAxoSequenceMode | System.Dynamic.ExpandoObject",
    "keywords": "Enum eAxoSequenceMode Namespace: plc.AXOpen.Core Assembly: .dll Syntax eAxoSequenceMode : INT Fields Name Description None := 0 RunOnce := 1 Cyclic := 2"
  },
  "apictrl/plc.AXOpen.Core.eAxoSteppingMode.html": {
    "href": "apictrl/plc.AXOpen.Core.eAxoSteppingMode.html",
    "title": "Enum eAxoSteppingMode | System.Dynamic.ExpandoObject",
    "keywords": "Enum eAxoSteppingMode Namespace: plc.AXOpen.Core Assembly: .dll Syntax eAxoSteppingMode : INT Fields Name Description None := 0 StepByStep := 1 Continous := 2"
  },
  "apictrl/plc.AXOpen.Core.eAxoTaskState.html": {
    "href": "apictrl/plc.AXOpen.Core.eAxoTaskState.html",
    "title": "Enum eAxoTaskState | System.Dynamic.ExpandoObject",
    "keywords": "Enum eAxoTaskState Namespace: plc.AXOpen.Core Assembly: .dll Syntax eAxoTaskState : INT Fields Name Description Disabled := 0 Ready := 1 Kicking := 2 Busy := 3 Done := 4 Aborted := 5 Error := 10"
  },
  "apictrl/plc.AXOpen.Core.html": {
    "href": "apictrl/plc.AXOpen.Core.html",
    "title": "Namespace plc.AXOpen.Core | System.Dynamic.ExpandoObject",
    "keywords": "Namespace plc.AXOpen.Core Classes AxoComponent AxoContext Provides base for contextualized entry of AXOpen application.This class is abstract and must be inherited. _NULL_RTC Provides an empty RTC object for uninitialized RTC. AxoContextEnvironment AxoMomentaryTask Provides basic momentary on function.To get the actual state of the toggle task, '''IsSwitchedOn()''', '''IsSwitchedOff()''' AND '''GetState()''' methods are available. _NULL_CONTEXT Provides an empty context for uninitialized objects. _NULL_OBJECT Provides an empty object for uninitialized objects. AxoObject Provides base class for all classes of AXOpen. AxoRemoteTask Provides a mechanism to exectute a logic from the PLC in an .NET environment. > [!IMPORTANT]> The deferred execution in .NET envornment is not hard-real time nor deterministic. AxoTask AxoToggleTask Provides basic toggling between two states. The states are triggered by calling the '''Toggle()''' method.To get the actual state of the toggle task, '''IsSwitchedOn()''', '''IsSwitchedOff()''' AND '''GetState()''' methods are available. AxoSequencer AxoSequencerContainer AxoStep Interfaces IAxoComponent IAxoManuallyControllable IAxoContext IAxoContextEnvironment IAxoCoordinator IAxoMomentaryTask IAxoObject IAxoTask IAxoTaskInt IAxoTaskState IAxoToggleTask IAxoSequencer IAxoStep Delegates IsNullContext"
  },
  "apictrl/plc.AXOpen.Core.IAxoComponent.html": {
    "href": "apictrl/plc.AXOpen.Core.IAxoComponent.html",
    "title": "Interface IAxoComponent | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoComponent Namespace: plc.AXOpen.Core Assembly: .dll Syntax INTERFACE IAxoComponent"
  },
  "apictrl/plc.AXOpen.Core.IAxoContext.html": {
    "href": "apictrl/plc.AXOpen.Core.IAxoContext.html",
    "title": "Interface IAxoContext | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoContext Namespace: plc.AXOpen.Core Assembly: .dll Syntax INTERFACE IAxoContext Methods CreateIdentity Declaration Public ULINT CreateIdentity() Returns Type Description ULINT OpenCycleCount Declaration Public ULINT OpenCycleCount() Returns Type Description ULINT GetRtc Declaration Public AXOpen.Rtc.IAxoRtc GetRtc() Returns Type Description IAxoRtc InjectRtc Declaration Public VOID InjectRtc(in plc.AXOpen.Rtc.IAxoRtc Rtc) Parameters Type Name Description IAxoRtc Rtc Returns Type Description Environment Declaration Public AXOpen.Core.IAxoContextEnvironment Environment() Returns Type Description IAxoContextEnvironment"
  },
  "apictrl/plc.AXOpen.Core.IAxoContextEnvironment.html": {
    "href": "apictrl/plc.AXOpen.Core.IAxoContextEnvironment.html",
    "title": "Interface IAxoContextEnvironment | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoContextEnvironment Namespace: plc.AXOpen.Core Assembly: .dll Syntax INTERFACE IAxoContextEnvironment Methods Messaging Declaration Public AXOpen.Messaging.Dynamic.IAxoMessengerEnv Messaging() Returns Type Description IAxoMessengerEnv"
  },
  "apictrl/plc.AXOpen.Core.IAxoCoordinator.html": {
    "href": "apictrl/plc.AXOpen.Core.IAxoCoordinator.html",
    "title": "Interface IAxoCoordinator | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoCoordinator Namespace: plc.AXOpen.Core Assembly: .dll Syntax INTERFACE IAxoCoordinator Methods GetCoordinatorState Declaration Public AXOpen.Core.AxoCoordinatorStates GetCoordinatorState() Returns Type Description AxoCoordinatorStates"
  },
  "apictrl/plc.AXOpen.Core.IAxoManuallyControllable.html": {
    "href": "apictrl/plc.AXOpen.Core.IAxoManuallyControllable.html",
    "title": "Interface IAxoManuallyControllable | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoManuallyControllable Namespace: plc.AXOpen.Core Assembly: .dll Syntax INTERFACE IAxoManuallyControllable Methods ActivateManualControl Declaration Public VOID ActivateManualControl() Returns Type Description IsManuallyControllable Declaration Public BOOL IsManuallyControllable() Returns Type Description BOOL"
  },
  "apictrl/plc.AXOpen.Core.IAxoMomentaryTask.html": {
    "href": "apictrl/plc.AXOpen.Core.IAxoMomentaryTask.html",
    "title": "Interface IAxoMomentaryTask | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoMomentaryTask Namespace: plc.AXOpen.Core Assembly: .dll Syntax INTERFACE IAxoMomentaryTask Methods IsSwitchedOn Returns TRUE if task is switched on Declaration Public BOOL IsSwitchedOn() Returns Type Description BOOL IsSwitchedOff Returns TRUE if task is switched off Declaration Public BOOL IsSwitchedOff() Returns Type Description BOOL"
  },
  "apictrl/plc.AXOpen.Core.IAxoObject.html": {
    "href": "apictrl/plc.AXOpen.Core.IAxoObject.html",
    "title": "Interface IAxoObject | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoObject Namespace: plc.AXOpen.Core Assembly: .dll Syntax INTERFACE IAxoObject Methods GetIdentity Declaration Public ULINT GetIdentity() Returns Type Description ULINT GetContext Declaration Public AXOpen.Core.IAxoContext GetContext() Returns Type Description IAxoContext"
  },
  "apictrl/plc.AXOpen.Core.IAxoSequencer.html": {
    "href": "apictrl/plc.AXOpen.Core.IAxoSequencer.html",
    "title": "Interface IAxoSequencer | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoSequencer Namespace: plc.AXOpen.Core Assembly: .dll Syntax INTERFACE IAxoSequencer"
  },
  "apictrl/plc.AXOpen.Core.IAxoStep.html": {
    "href": "apictrl/plc.AXOpen.Core.IAxoStep.html",
    "title": "Interface IAxoStep | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoStep Namespace: plc.AXOpen.Core Assembly: .dll Syntax INTERFACE IAxoStep Methods GetStepOrder Declaration Public ULINT GetStepOrder() Returns Type Description ULINT SetStepOrder Declaration Public VOID SetStepOrder(in plc.AXOpen.Core.IAxoCoordinator coord,in plc.ULINT StepOrder) Parameters Type Name Description IAxoCoordinator coord ULINT StepOrder Returns Type Description IsCalledJustOnceInThisPlcCycle Declaration Public BOOL IsCalledJustOnceInThisPlcCycle() Returns Type Description BOOL SetIsActive Declaration Public VOID SetIsActive(in plc.BOOL Active) Parameters Type Name Description BOOL Active Returns Type Description GetIsActive Declaration Public BOOL GetIsActive() Returns Type Description BOOL SetIsEnabled Declaration Public VOID SetIsEnabled(in plc.BOOL Enabled) Parameters Type Name Description BOOL Enabled Returns Type Description GetIsEnabled Declaration Public BOOL GetIsEnabled() Returns Type Description BOOL"
  },
  "apictrl/plc.AXOpen.Core.IAxoTask.html": {
    "href": "apictrl/plc.AXOpen.Core.IAxoTask.html",
    "title": "Interface IAxoTask | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoTask Namespace: plc.AXOpen.Core Assembly: .dll Syntax INTERFACE IAxoTask Methods Execute Declaration Public BOOL Execute() Returns Type Description BOOL Invoke Declaration Public AXOpen.Core.IAxoTaskState Invoke() Returns Type Description IAxoTaskState Restore Declaration Public AXOpen.Core.IAxoTaskState Restore() Returns Type Description IAxoTaskState Abort Declaration Public VOID Abort() Returns Type Description Resume Declaration Public VOID Resume() Returns Type Description DoneWhen Declaration Public VOID DoneWhen(in plc.BOOL Condition) Parameters Type Name Description BOOL Condition Returns Type Description ThrowWhen Declaration Public VOID ThrowWhen(in plc.BOOL HasErrorState) Parameters Type Name Description BOOL HasErrorState Returns Type Description IsReady Declaration Public BOOL IsReady() Returns Type Description BOOL IsDone Declaration Public BOOL IsDone() Returns Type Description BOOL IsBusy Declaration Public BOOL IsBusy() Returns Type Description BOOL HasError Declaration Public BOOL HasError() Returns Type Description BOOL"
  },
  "apictrl/plc.AXOpen.Core.IAxoTaskInt.html": {
    "href": "apictrl/plc.AXOpen.Core.IAxoTaskInt.html",
    "title": "Interface IAxoTaskInt | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoTaskInt Namespace: plc.AXOpen.Core Assembly: .dll Syntax INTERFACE IAxoTaskInt Methods SetIsDisabled Declaration Public VOID SetIsDisabled(in plc.BOOL Disabled) Parameters Type Name Description BOOL Disabled Returns Type Description GetIsDisabled Declaration Public BOOL GetIsDisabled() Returns Type Description BOOL"
  },
  "apictrl/plc.AXOpen.Core.IAxoTaskState.html": {
    "href": "apictrl/plc.AXOpen.Core.IAxoTaskState.html",
    "title": "Interface IAxoTaskState | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoTaskState Namespace: plc.AXOpen.Core Assembly: .dll Syntax INTERFACE IAxoTaskState Methods IsDone Declaration Public BOOL IsDone() Returns Type Description BOOL IsBusy Declaration Public BOOL IsBusy() Returns Type Description BOOL IsAborted Declaration Public BOOL IsAborted() Returns Type Description BOOL HasError Declaration Public BOOL HasError() Returns Type Description BOOL GetErrorDetails Declaration Public STRING[254] GetErrorDetails() Returns Type Description STRING[254]"
  },
  "apictrl/plc.AXOpen.Core.IAxoToggleTask.html": {
    "href": "apictrl/plc.AXOpen.Core.IAxoToggleTask.html",
    "title": "Interface IAxoToggleTask | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoToggleTask Namespace: plc.AXOpen.Core Assembly: .dll Syntax INTERFACE IAxoToggleTask Methods Toggle Use to toggle the state of the '''AxoToggleTask'''. Declaration Public BOOL Toggle() Returns Type Description BOOL SwitchOff Use to set the state of the '''AxoToggleTask''' to the value '''FALSE'''. Declaration Public BOOL SwitchOff() Returns Type Description BOOL SwitchOn Use to set the state of the '''AxoToggleTask''' to the value '''TRUE'''. Declaration Public BOOL SwitchOn() Returns Type Description BOOL IsSwitchedOn Returns TRUE if task is switched on Declaration Public BOOL IsSwitchedOn() Returns Type Description BOOL IsSwitchedOff Returns TRUE if task is switched off Declaration Public BOOL IsSwitchedOff() Returns Type Description BOOL"
  },
  "apictrl/plc.AXOpen.Core.IsNullContext(IAxoContext).html": {
    "href": "apictrl/plc.AXOpen.Core.IsNullContext(IAxoContext).html",
    "title": "Delegate IsNullContext | System.Dynamic.ExpandoObject",
    "keywords": "Delegate IsNullContext Namespace: plc.AXOpen.Core Assembly: .dll Syntax Public BOOL IsNullContext(in plc.AXOpen.Core.IAxoContext Context) Parameters Type Name Description IAxoContext Context Returns Type Description BOOL"
  },
  "apictrl/plc.AXOpen.Data.AxoDataCrudTask.html": {
    "href": "apictrl/plc.AXOpen.Data.AxoDataCrudTask.html",
    "title": "Class AxoDataCrudTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataCrudTask Provides remote execution for CRUD operations.> [!NOTE]> This is an extension of AxoTasktask see the documentatio for details about implementation in .NET. Inheritance AxoDataExchangeTask AxoRemoteTask AxoTask AxoObject AxoDataCrudTask Implements IAxoTask IAxoTaskState Inherited Members DataEntityIdentifier DoneSignature IsInitialized HasRemoteException IsBeingCalledCounter Status IsDisabled RemoteInvoke RemoteRestore RemoteAbort RemoteResume StartSignature Duration StartTimeStamp ErrorDetails Identity Invoke(STRING[254]) Execute() GetStartSignature() SetDoneSignature() GetState() GetErrorDetails() IsReady() IsDone() IsBusy() IsAborted() HasError() IsNewInvokeCall() IsInvokeCalledInThisPlcCycle() WasInvokeCalledInPreviousPlcCycle() IsNewExecuteCall() IsExecuteCalledInThisPlcCycle() WasExecuteCalledInPreviousPlcCycle() UpdateState() Invoke() Restore() DoneWhen(BOOL) Execute() ThrowWhen(BOOL) ThrowWhen(BOOL,STRING[254]) SetIsDisabled(BOOL) GetIsDisabled() Abort() Resume() OnAbort() OnResume() OnDone() OnError() OnRestore() OnStart() WhileError() GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Environment() Namespace: plc.AXOpen.Data Assembly: .dll Syntax CLASS AxoDataCrudTask Properties CrudOperation Gets or sets the type of CRUD operation to be perfomed. Declaration CrudOperation : AXOpen.Data.eCrudOperation Property Value Type Description Methods Invoke Invokes this task. Declaration Public AXOpen.Core.IAxoTaskState Invoke(in plc.STRING[254] identifier,in plc.AXOpen.Data.eCrudOperation operation) Parameters Type Name Description STRING[254] identifier Data entity identifier eCrudOperation operation Operation to perfom. Returns Type Description IAxoTaskState Implements IAxoTask IAxoTaskState"
  },
  "apictrl/plc.AXOpen.Data.AxoDataEntity.html": {
    "href": "apictrl/plc.AXOpen.Data.AxoDataEntity.html",
    "title": "Class AxoDataEntity | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataEntity Base class for any exchangable data in AxoDataExchange. Inheritance AxoDataEntity Implements IAxoDataEntity Namespace: plc.AXOpen.Data Assembly: .dll Syntax CLASS AxoDataEntity Properties DataEntityId Gets or sets data entity identifier. Declaration DataEntityId : STRING[254] Property Value Type Description Implements IAxoDataEntity"
  },
  "apictrl/plc.AXOpen.Data.AxoDataExchange.html": {
    "href": "apictrl/plc.AXOpen.Data.AxoDataExchange.html",
    "title": "Class AxoDataExchange | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataExchange Provides base class for any data exchange with an arbitrary remote repository.For configuration and set up see here Inheritance AxoDataExchangeBase AxoObject AxoDataExchange Implements IAxoDataExchange IAxoObject Inherited Members Identity GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Environment() Namespace: plc.AXOpen.Data Assembly: .dll Syntax CLASS AxoDataExchange Properties CreateTask Declaration CreateTask : AXOpen.Data.AxoDataExchangeTask Property Value Type Description ReadTask Declaration ReadTask : AXOpen.Data.AxoDataExchangeTask Property Value Type Description UpdateTask Declaration UpdateTask : AXOpen.Data.AxoDataExchangeTask Property Value Type Description DeleteTask Declaration DeleteTask : AXOpen.Data.AxoDataExchangeTask Property Value Type Description Methods Run Declaration Private VOID Run() Returns Type Description Run Runs intialization and cyclical handling of this AxoDataExchange. Declaration Public VOID Run(in plc.AXOpen.Core.IAxoObject parent) Parameters Type Name Description IAxoObject parent Parent of this object Returns Type Description Run Runs intialization and cyclical handling of this AxoDataExchange. Declaration Public VOID Run(in plc.AXOpen.Core.IAxoContext context) Parameters Type Name Description IAxoContext context Root context of this object Returns Type Description Create Creates new entry into the remote repository from data entity of this AxoDataExchange. Declaration Public AXOpen.Core.IAxoTaskState Create(in plc.STRING[254] identifier) Parameters Type Name Description STRING[254] identifier Data identifier. Returns Type Description IAxoTaskState Read Reads data from remote repository and copies them into data entity of this AxoDataExchange. Declaration Public AXOpen.Core.IAxoTaskState Read(in plc.STRING[254] identifier) Parameters Type Name Description STRING[254] identifier Data identifier. Returns Type Description IAxoTaskState Update Updates data in remote repository from data entiry of this AxoDataExchange. Declaration Public AXOpen.Core.IAxoTaskState Update(in plc.STRING[254] identifier) Parameters Type Name Description STRING[254] identifier Data identifier. Returns Type Description IAxoTaskState Delete Deletes data entry with given ID from remote repository. Declaration Public AXOpen.Core.IAxoTaskState Delete(in plc.STRING[254] identifier) Parameters Type Name Description STRING[254] identifier Data identifier. Returns Type Description IAxoTaskState Restore Restores all tasks associated with this object. Declaration Public VOID Restore() Returns Type Description Implements IAxoDataExchange IAxoObject"
  },
  "apictrl/plc.AXOpen.Data.AxoDataExchangeBase.html": {
    "href": "apictrl/plc.AXOpen.Data.AxoDataExchangeBase.html",
    "title": "Class AxoDataExchangeBase | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataExchangeBase Represents base class of data exchange.This class is used to provide abstract information about the type that can be used in rcc. Inheritance AxoObject AxoDataExchangeBase Implements IAxoObject Inherited Members Identity GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Environment() Namespace: plc.AXOpen.Data Assembly: .dll Syntax CLASS AxoDataExchangeBase Implements IAxoObject"
  },
  "apictrl/plc.AXOpen.Data.AxoDataExchangeTask.html": {
    "href": "apictrl/plc.AXOpen.Data.AxoDataExchangeTask.html",
    "title": "Class AxoDataExchangeTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataExchangeTask Extends AxoRemoteTask for data operation within AxoData Inheritance AxoRemoteTask AxoTask AxoObject AxoDataExchangeTask Implements IAxoTask IAxoTaskState Inherited Members DoneSignature IsInitialized HasRemoteException IsBeingCalledCounter Status IsDisabled RemoteInvoke RemoteRestore RemoteAbort RemoteResume StartSignature Duration StartTimeStamp ErrorDetails Identity Execute() GetStartSignature() SetDoneSignature() GetState() GetErrorDetails() IsReady() IsDone() IsBusy() IsAborted() HasError() IsNewInvokeCall() IsInvokeCalledInThisPlcCycle() WasInvokeCalledInPreviousPlcCycle() IsNewExecuteCall() IsExecuteCalledInThisPlcCycle() WasExecuteCalledInPreviousPlcCycle() UpdateState() Invoke() Restore() DoneWhen(BOOL) Execute() ThrowWhen(BOOL) ThrowWhen(BOOL,STRING[254]) SetIsDisabled(BOOL) GetIsDisabled() Abort() Resume() OnAbort() OnResume() OnDone() OnError() OnRestore() OnStart() WhileError() GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Environment() Namespace: plc.AXOpen.Data Assembly: .dll Syntax CLASS AxoDataExchangeTask Properties DataEntityIdentifier Declaration DataEntityIdentifier : STRING[254] Property Value Type Description Methods Invoke Declaration Public AXOpen.Core.IAxoTaskState Invoke(in plc.STRING[254] identifier) Parameters Type Name Description STRING[254] identifier Returns Type Description IAxoTaskState Implements IAxoTask IAxoTaskState"
  },
  "apictrl/plc.AXOpen.Data.AxoDataFragmentExchange.html": {
    "href": "apictrl/plc.AXOpen.Data.AxoDataFragmentExchange.html",
    "title": "Class AxoDataFragmentExchange | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataFragmentExchange Provides base class for any composite/fragmetes data exchange combining one or more AxoDataExchange object.For configuration and set up see here Inheritance AxoDataExchangeBase AxoObject AxoDataFragmentExchange Implements IAxoDataExchange IAxoObject Inherited Members Identity GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Environment() Namespace: plc.AXOpen.Data Assembly: .dll Syntax CLASS AxoDataFragmentExchange Properties Operation Declaration Operation : AXOpen.Data.AxoDataCrudTask Property Value Type Description Methods Create Creates new entry into each associated remote repository from respective data entity. Declaration Public AXOpen.Core.IAxoTaskState Create(in plc.STRING[254] Identifier) Parameters Type Name Description STRING[254] Identifier Returns Type Description IAxoTaskState Read Reads data from each associated remote repository and copies it into respective data entities. Declaration Public AXOpen.Core.IAxoTaskState Read(in plc.STRING[254] Identifier) Parameters Type Name Description STRING[254] Identifier Returns Type Description IAxoTaskState Update Updates data in each associated remote repository from respective data entities. Declaration Public AXOpen.Core.IAxoTaskState Update(in plc.STRING[254] Identifier) Parameters Type Name Description STRING[254] Identifier Returns Type Description IAxoTaskState Delete Deletes data entry from each associated remote repository with given ID. Declaration Public AXOpen.Core.IAxoTaskState Delete(in plc.STRING[254] Identifier) Parameters Type Name Description STRING[254] Identifier Returns Type Description IAxoTaskState Restore Declaration Public VOID Restore() Returns Type Description Run Runs intialization and cyclical handling of this AxoDataExchange. Declaration Public VOID Run(in plc.AXOpen.Core.IAxoContext context) Parameters Type Name Description IAxoContext context Root context of this object Returns Type Description Run Runs intialization and cyclical handling of this AxoDataExchange. Declaration Public VOID Run(in plc.AXOpen.Core.IAxoObject parent) Parameters Type Name Description IAxoObject parent Parent of this object Returns Type Description Implements IAxoDataExchange IAxoObject"
  },
  "apictrl/plc.AXOpen.Data.eCrudOperation.html": {
    "href": "apictrl/plc.AXOpen.Data.eCrudOperation.html",
    "title": "Enum eCrudOperation | System.Dynamic.ExpandoObject",
    "keywords": "Enum eCrudOperation Namespace: plc.AXOpen.Data Assembly: .dll Syntax eCrudOperation Fields Name Description Create Read Update Delete"
  },
  "apictrl/plc.AXOpen.Data.html": {
    "href": "apictrl/plc.AXOpen.Data.html",
    "title": "Namespace plc.AXOpen.Data | System.Dynamic.ExpandoObject",
    "keywords": "Namespace plc.AXOpen.Data Classes AxoDataCrudTask Provides remote execution for CRUD operations.> [!NOTE]> This is an extension of AxoTasktask see the documentatio for details about implementation in .NET. AxoDataEntity Base class for any exchangable data in AxoDataExchange. AxoDataExchange Provides base class for any data exchange with an arbitrary remote repository.For configuration and set up see here AxoDataExchangeBase Represents base class of data exchange.This class is used to provide abstract information about the type that can be used in rcc. AxoDataExchangeTask Extends AxoRemoteTask for data operation within AxoData AxoDataFragmentExchange Provides base class for any composite/fragmetes data exchange combining one or more AxoDataExchange object.For configuration and set up see here Interfaces IAxoDataEntity IAxoDataExchange Provides abastaction for data exchange. Enums eCrudOperation"
  },
  "apictrl/plc.AXOpen.Data.IAxoDataEntity.html": {
    "href": "apictrl/plc.AXOpen.Data.IAxoDataEntity.html",
    "title": "Interface IAxoDataEntity | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoDataEntity Namespace: plc.AXOpen.Data Assembly: .dll Syntax INTERFACE IAxoDataEntity"
  },
  "apictrl/plc.AXOpen.Data.IAxoDataExchange.html": {
    "href": "apictrl/plc.AXOpen.Data.IAxoDataExchange.html",
    "title": "Interface IAxoDataExchange | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoDataExchange Provides abastaction for data exchange. Namespace: plc.AXOpen.Data Assembly: .dll Syntax INTERFACE IAxoDataExchange Methods Create Declaration Public AXOpen.Core.IAxoTaskState Create(in plc.STRING[254] Identifier) Parameters Type Name Description STRING[254] Identifier Returns Type Description IAxoTaskState Read Declaration Public AXOpen.Core.IAxoTaskState Read(in plc.STRING[254] Identifier) Parameters Type Name Description STRING[254] Identifier Returns Type Description IAxoTaskState Update Declaration Public AXOpen.Core.IAxoTaskState Update(in plc.STRING[254] Identifier) Parameters Type Name Description STRING[254] Identifier Returns Type Description IAxoTaskState Delete Declaration Public AXOpen.Core.IAxoTaskState Delete(in plc.STRING[254] Identifier) Parameters Type Name Description STRING[254] Identifier Returns Type Description IAxoTaskState Restore Declaration Public VOID Restore() Returns Type Description Run Declaration Public VOID Run(in plc.AXOpen.Core.IAxoContext context) Parameters Type Name Description IAxoContext context Returns Type Description Run Declaration Public VOID Run(in plc.AXOpen.Core.IAxoObject parent) Parameters Type Name Description IAxoObject parent Returns Type Description"
  },
  "apictrl/plc.AXOpen.Messaging.AxoIntConstants.html": {
    "href": "apictrl/plc.AXOpen.Messaging.AxoIntConstants.html",
    "title": "Enum AxoIntConstants | System.Dynamic.ExpandoObject",
    "keywords": "Enum AxoIntConstants Namespace: plc.AXOpen.Messaging Assembly: .dll Syntax AxoIntConstants : INT Fields Name Description MAX_MESSAGE_TEXT_LENGHT := 160 MDS_MAX_INDEX := 10"
  },
  "apictrl/plc.AXOpen.Messaging.Dynamic.AxoMessage.html": {
    "href": "apictrl/plc.AXOpen.Messaging.Dynamic.AxoMessage.html",
    "title": "Struct AxoMessage | System.Dynamic.ExpandoObject",
    "keywords": "Struct AxoMessage Complete message details including time stamp, message text, message category, identity of the message provider, context cycle in which the message was posted. Namespace: plc.AXOpen.Messaging.Dynamic Assembly: .dll Syntax STRUCT AxoMessage Properties TimeStamp Time when the message was posted. Declaration TimeStamp : LDATE_AND_TIME Property Value Type Description Text Text of the message. Declaration Text : STRING[160] Property Value Type Description Identity Identity of the TcoObject that posted this message. Declaration Identity : ULINT Property Value Type Description Category Message category of this message. See TcoCore.eMessageCategory for detailed informations. Declaration Category : AXOpen.Messaging.eAxoMessageCategory Property Value Type Description Cycle Context cycle in which the message was posted. Declaration Cycle : ULINT Property Value Type Description PerCycleCount Count of messages of the object in the current cycle. Declaration PerCycleCount : USINT Property Value Type Description ExpectDequeing Indicates that the message is expected to be dequeed from the buffer. Declaration ExpectDequeing : BOOL Property Value Type Description Pinned Indicates that the message must be persisted in the alarm view until acknowledged. Declaration Pinned : BOOL Property Value Type Description MessageDigest Stores message digest of this message text. Declaration MessageDigest : DWORD Property Value Type Description"
  },
  "apictrl/plc.AXOpen.Messaging.Dynamic.AxoMessageDigest.html": {
    "href": "apictrl/plc.AXOpen.Messaging.Dynamic.AxoMessageDigest.html",
    "title": "Class AxoMessageDigest | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoMessageDigest Inheritance AxoMessageDigest Namespace: plc.AXOpen.Messaging.Dynamic Assembly: .dll Syntax CLASS AxoMessageDigest Properties Digest Declaration Digest : DWORD Property Value Type Description Cycle Declaration Cycle : ULINT Property Value Type Description Count Declaration Count : ULINT Property Value Type Description Category Declaration Category : AXOpen.Messaging.eAxoMessageCategory Property Value Type Description"
  },
  "apictrl/plc.AXOpen.Messaging.Dynamic.AxoMessenger.html": {
    "href": "apictrl/plc.AXOpen.Messaging.Dynamic.AxoMessenger.html",
    "title": "Class AxoMessenger | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoMessenger Provides mechanism for delivering static messages to the supervising applications (SCADA/HMI). Each messenger has a single placeholder for the message; it stores the most important message from the last context cycle.If there are more messages in a single cycle for the same messenger then less important messages are discarded and replaced bythe message with the category of higher severity. Messenger can send the data to context logger. There is a maximum limit of 10 different messages per messenger in 2 consecutive context cycles.The messages that exceed this limit won't be logged when OnEventRisen logging is set.Take this behaviour into account when designing your system. Inheritance AxoMessenger Implements IAxoMessenger IAxoMessageProperties IAxoMessageTextBuilder IAxoMessageCategorize IAxoMessages Namespace: plc.AXOpen.Messaging.Dynamic Assembly: .dll Syntax CLASS AxoMessenger Properties _mime Most important message of this instance of messenger; stores the most important message from the last context cycle.If there are more messages in a single cycle for the samemessenger then less important messages are discarded and replaced by the message with the category of higher severity. Declaration _mime : AXOpen.Messaging.Dynamic.AxoMessage Property Value Type Description _Parent Declaration _Parent : AXOpen.Core.IAxoObject Property Value Type Description _contextIdentity Declaration _contextIdentity : ULINT Property Value Type Description _mds Declaration _mds : ARRAY [0..10] OF AXOpen.Messaging.Dynamic.AxoMessageDigest Property Value Type Description _condition Declaration _condition : AXOpen.Messaging.Dynamic.eAxoMessageCondition Property Value Type Description _pinnable Declaration _pinnable : BOOL Property Value Type Description tmpMessageText Declaration tmpMessageText : STRING[160] Property Value Type Description refStringBuilder Declaration refStringBuilder : REF_TO AXOpen.Utils.AxoStringBuilder Property Value Type Description _conflictingStringBuilder Declaration _conflictingStringBuilder : AXOpen.Utils.AxoStringBuilder Property Value Type Description Methods GetMime Gets the Most Important Message of this messenger. Declaration Public AXOpen.Messaging.Dynamic.AxoMessage GetMime() Returns Type Description AxoMessage AsDebug Categorizes and creates the message as 'debug'. Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageProperties AsDebug() Returns Type Description IAxoMessageProperties AsError Categorizes and creates the message as 'error'. Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageProperties AsError() Returns Type Description IAxoMessageProperties AsFatal Categorizes and creates the message as 'fatal'. Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageProperties AsFatal() Returns Type Description IAxoMessageProperties AsInfo Categorizes and creates the message as 'information'. Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageProperties AsInfo() Returns Type Description IAxoMessageProperties AsTrace Categorizes and creates the message as 'trace'. Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageProperties AsTrace() Returns Type Description IAxoMessageProperties AsWarning Categorizes and creates the message as 'warning'. Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageProperties AsWarning() Returns Type Description IAxoMessageProperties Catastrophic Adds message of 'catastrophic' category to the message queue.Use this category when there is a situation when the device cannot continue operations due to irrecoverable failure. Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageProperties Catastrophic(in plc.STRING[160] Message) Parameters Type Name Description STRING[160] Message Returns Type Description IAxoMessageProperties Critical Adds message of 'critical' category to the message queue.Use this category when a critical error occured, that is not recoverable by the means of software (reset/restore) and a detailed inspection is required. Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageProperties Critical(in plc.STRING[160] Message) Parameters Type Name Description STRING[160] Message Returns Type Description IAxoMessageProperties Debug Adds message of 'debug' category to the message queue.Use when you need to report debug information for you as programmer. Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageProperties Debug(in plc.STRING[160] Message) Parameters Type Name Description STRING[160] Message Returns Type Description IAxoMessageProperties Error Adds message of 'error' category to the message queue.Use this categoty when there is a failure that cannot be immediately recovered and an intervention is needed. This is typically a situation when a device failsto deliver expected result.Do not use this category to report information about failed process like measurement or detection. Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageProperties Error(in plc.STRING[160] Message) Parameters Type Name Description STRING[160] Message Returns Type Description IAxoMessageProperties Info Adds message of 'information' category to the message queue.Use when you want to deliver information to the user, that has only informative character and does not adversely affect a process. Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageProperties Info(in plc.STRING[160] Message) Parameters Type Name Description STRING[160] Message Returns Type Description IAxoMessageProperties Notify Adds message of 'notification' category to the message queue.Use this category when you want to report a notification that may be of interest to the user, but does not adveresly affect a process. Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageProperties Notify(in plc.STRING[160] Message) Parameters Type Name Description STRING[160] Message Returns Type Description IAxoMessageProperties Programming Adds message of 'programming error' category to the message queue.Use this category to inform about a possible programming error, defect in settings or missing information at a level of programming or system or process settings. Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageProperties Programming(in plc.STRING[160] Message) Parameters Type Name Description STRING[160] Message Returns Type Description IAxoMessageProperties Trace Adds message of 'trace' category to the message queue.Use when you need to track detailed information about internal states of the program for detailed visibility.This is lowest level of category that can be used in production, for detailed observation of PLC program. Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageProperties Trace(in plc.STRING[160] Message) Parameters Type Name Description STRING[160] Message Returns Type Description IAxoMessageProperties Warning Adds message of 'warning' category to the message queue.Use this category when you want to report to the user an information about a possible problem, that may adversly affect a process.Information in this cateogory aims to help the user to identify a problem, the cause of such problem does not necessarily stops the process. Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageProperties Warning(in plc.STRING[160] Message) Parameters Type Name Description STRING[160] Message Returns Type Description IAxoMessageProperties Append Appends string to the message text. Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.BOOL Data) Parameters Type Name Description BOOL Data Returns Type Description IAxoMessageTextBuilder Remarks The size of the resulting string should not be more than '160' characters. The characters exceeding this size will be truncated. Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.BYTE Data) Parameters Type Name Description BYTE Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.WORD Data) Parameters Type Name Description WORD Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.DWORD Data) Parameters Type Name Description DWORD Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.LWORD Data) Parameters Type Name Description LWORD Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.SINT Data) Parameters Type Name Description SINT Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.INT Data) Parameters Type Name Description INT Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.DINT Data) Parameters Type Name Description DINT Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.LINT Data) Parameters Type Name Description LINT Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.USINT Data) Parameters Type Name Description USINT Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.UINT Data) Parameters Type Name Description UINT Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.UDINT Data) Parameters Type Name Description UDINT Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.ULINT Data) Parameters Type Name Description ULINT Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.REAL Data) Parameters Type Name Description REAL Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.LREAL Data) Parameters Type Name Description LREAL Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.TIME Data) Parameters Type Name Description TIME Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.LTIME Data) Parameters Type Name Description LTIME Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.DATE Data) Parameters Type Name Description DATE Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.LDATE Data) Parameters Type Name Description LDATE Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.TIME_OF_DAY Data) Parameters Type Name Description TIME_OF_DAY Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.LTIME_OF_DAY Data) Parameters Type Name Description LTIME_OF_DAY Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.DATE_AND_TIME Data) Parameters Type Name Description DATE_AND_TIME Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.LDATE_AND_TIME Data) Parameters Type Name Description LDATE_AND_TIME Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.CHAR Data) Parameters Type Name Description CHAR Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.STRING[160] Data) Parameters Type Name Description STRING[160] Data Returns Type Description IAxoMessageTextBuilder As Gets categorization methods for fluent message builder. Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageCategorize As() Returns Type Description IAxoMessageCategorize Build Initiates new message text building for this messenger in fluent-like fashion. Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Build() Returns Type Description IAxoMessageTextBuilder Clear Clears the message content. Declaration Public VOID Clear() Returns Type Description Compose Declaration Protected AXOpen.Messaging.Dynamic.AxoMessage Compose(in plc.STRING[160] Message,in plc.AXOpen.Messaging.eAxoMessageCategory Category) Parameters Type Name Description STRING[160] Message eAxoMessageCategory Category Returns Type Description AxoMessage Digest Declaration Private DWORD Digest(in plc.STRING[254] Message,in plc.AXOpen.Messaging.Dynamic.eAxoMessageDigestMethod inDigestType) Parameters Type Name Description STRING[254] Message eAxoMessageDigestMethod inDigestType Returns Type Description DWORD Initialize Declaration Public VOID Initialize(in plc.AXOpen.Core.IAxoObject ParentObject) Parameters Type Name Description IAxoObject ParentObject Returns Type Description OnCondition Declaration Public AXOpen.Messaging.Dynamic.IAxoMessages OnCondition(in plc.BOOL inCondition) Parameters Type Name Description BOOL inCondition Returns Type Description IAxoMessages Pin Pins this message that no other message will override it.The messenger won't accept new messages until acknowledged in diagnostics view by user, unipenned by Unpin() methods or cleared by Clear() methodof this messenger. Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageProperties Pin() Returns Type Description IAxoMessageProperties IsPinned Gets true when this messenger is pinned (awaiting acknowledgement in diagnostics view). Declaration Public BOOL IsPinned() Returns Type Description BOOL IsActive Gets true when this messenger is active. Declaration Public BOOL IsActive() Returns Type Description BOOL Post Creates message of given category for this messenger. Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageProperties Post(in plc.STRING[160] Message,in plc.AXOpen.Messaging.eAxoMessageCategory Category) Parameters Type Name Description STRING[160] Message eAxoMessageCategory Category Returns Type Description IAxoMessageProperties StringBuilder Declaration Public REF_TO AXOpen.Utils.AxoStringBuilder StringBuilder() Returns Type Description REF_TO AXOpen.Utils.AxoStringBuilder UnPin Declaration Public VOID UnPin() Returns Type Description Implements IAxoMessenger IAxoMessageProperties IAxoMessageTextBuilder IAxoMessageCategorize IAxoMessages"
  },
  "apictrl/plc.AXOpen.Messaging.Dynamic.AxoMessengerEnv.html": {
    "href": "apictrl/plc.AXOpen.Messaging.Dynamic.AxoMessengerEnv.html",
    "title": "Class AxoMessengerEnv | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoMessengerEnv Inheritance AxoMessengerEnv Implements IAxoMessengerEnv Namespace: plc.AXOpen.Messaging.Dynamic Assembly: .dll Syntax CLASS AxoMessengerEnv Properties _minLevel Declaration _minLevel : AXOpen.Messaging.eAxoMessageCategory Property Value Type Description _isMessagingSuspended Declaration _isMessagingSuspended : BOOL Property Value Type Description _messageDigestMethod Declaration _messageDigestMethod : AXOpen.Messaging.Dynamic.eAxoMessageDigestMethod Property Value Type Description _sb Declaration _sb : REF_TO AXOpen.Utils.AxoStringBuilder Property Value Type Description Methods IsSuspended Declaration Public BOOL IsSuspended() Returns Type Description BOOL GetMessageDigestMethod Declaration Public AXOpen.Messaging.Dynamic.eAxoMessageDigestMethod GetMessageDigestMethod() Returns Type Description eAxoMessageDigestMethod SetMessageDigestMethod Declaration Public VOID SetMessageDigestMethod(in plc.AXOpen.Messaging.Dynamic.eAxoMessageDigestMethod inDigestMethod) Parameters Type Name Description eAxoMessageDigestMethod inDigestMethod Returns Type Description GetMinLevel Declaration Public AXOpen.Messaging.eAxoMessageCategory GetMinLevel() Returns Type Description eAxoMessageCategory SetMinLevel Declaration Public VOID SetMinLevel(in plc.AXOpen.Messaging.eAxoMessageCategory inMessageCategory) Parameters Type Name Description eAxoMessageCategory inMessageCategory Returns Type Description Resume Declaration Public VOID Resume() Returns Type Description Suspend Declaration Public VOID Suspend() Returns Type Description GetStringBuilder Declaration Public REF_TO AXOpen.Utils.AxoStringBuilder GetStringBuilder() Returns Type Description REF_TO AXOpen.Utils.AxoStringBuilder Implements IAxoMessengerEnv"
  },
  "apictrl/plc.AXOpen.Messaging.Dynamic.eAxoMessageCondition.html": {
    "href": "apictrl/plc.AXOpen.Messaging.Dynamic.eAxoMessageCondition.html",
    "title": "Enum eAxoMessageCondition | System.Dynamic.ExpandoObject",
    "keywords": "Enum eAxoMessageCondition Namespace: plc.AXOpen.Messaging.Dynamic Assembly: .dll Syntax eAxoMessageCondition : INT Fields Name Description Unconditional := 0 Active := 10 Inactive := 20"
  },
  "apictrl/plc.AXOpen.Messaging.Dynamic.eAxoMessageDigestMethod.html": {
    "href": "apictrl/plc.AXOpen.Messaging.Dynamic.eAxoMessageDigestMethod.html",
    "title": "Enum eAxoMessageDigestMethod | System.Dynamic.ExpandoObject",
    "keywords": "Enum eAxoMessageDigestMethod Message digest methods used to create fingerprint of a message. Namespace: plc.AXOpen.Messaging.Dynamic Assembly: .dll Syntax eAxoMessageDigestMethod : INT Fields Name Description CRC8 := 8 Fastest method with highest probability of colisions. CRC16 := 16 Moderate speed method with lower probability of colisions. CRC32 := 32 Slowest speed method with relatively low probability of colisions. NONE := 32767 Messages are not digested the repeated messages won't be filtered out.Use this option on low performance devices."
  },
  "apictrl/plc.AXOpen.Messaging.Dynamic.html": {
    "href": "apictrl/plc.AXOpen.Messaging.Dynamic.html",
    "title": "Namespace plc.AXOpen.Messaging.Dynamic | System.Dynamic.ExpandoObject",
    "keywords": "Namespace plc.AXOpen.Messaging.Dynamic Classes AxoMessageDigest AxoMessengerEnv AxoMessenger Provides mechanism for delivering static messages to the supervising applications (SCADA/HMI). Each messenger has a single placeholder for the message; it stores the most important message from the last context cycle.If there are more messages in a single cycle for the same messenger then less important messages are discarded and replaced bythe message with the category of higher severity. Messenger can send the data to context logger. There is a maximum limit of 10 different messages per messenger in 2 consecutive context cycles.The messages that exceed this limit won't be logged when OnEventRisen logging is set.Take this behaviour into account when designing your system. Structs AxoMessage Complete message details including time stamp, message text, message category, identity of the message provider, context cycle in which the message was posted. Interfaces IAxoMessageCategorize IAxoMessageProperties IAxoMessages IAxoMessageTextBuilder IAxoMessenger IAxoMessengerEnv"
  },
  "apictrl/plc.AXOpen.Messaging.Dynamic.IAxoMessageCategorize.html": {
    "href": "apictrl/plc.AXOpen.Messaging.Dynamic.IAxoMessageCategorize.html",
    "title": "Interface IAxoMessageCategorize | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoMessageCategorize Namespace: plc.AXOpen.Messaging.Dynamic Assembly: .dll Syntax INTERFACE IAxoMessageCategorize Methods AsDebug Categorizes and creates the message as 'debug'. Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageProperties AsDebug() Returns Type Description IAxoMessageProperties AsError Categorizes and creates the message as 'error'. Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageProperties AsError() Returns Type Description IAxoMessageProperties AsFatal Categorizes and creates the message as 'fatal'. Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageProperties AsFatal() Returns Type Description IAxoMessageProperties AsInfo Categorizes and creates the message as 'info'. Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageProperties AsInfo() Returns Type Description IAxoMessageProperties AsTrace Categorizes and creates the message as 'trace'. Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageProperties AsTrace() Returns Type Description IAxoMessageProperties AsWarning Categorizes and creates the message as 'warning'. Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageProperties AsWarning() Returns Type Description IAxoMessageProperties"
  },
  "apictrl/plc.AXOpen.Messaging.Dynamic.IAxoMessageProperties.html": {
    "href": "apictrl/plc.AXOpen.Messaging.Dynamic.IAxoMessageProperties.html",
    "title": "Interface IAxoMessageProperties | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoMessageProperties Namespace: plc.AXOpen.Messaging.Dynamic Assembly: .dll Syntax INTERFACE IAxoMessageProperties Methods Pin Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageProperties Pin() Returns Type Description IAxoMessageProperties IsPinned Declaration Public BOOL IsPinned() Returns Type Description BOOL"
  },
  "apictrl/plc.AXOpen.Messaging.Dynamic.IAxoMessages.html": {
    "href": "apictrl/plc.AXOpen.Messaging.Dynamic.IAxoMessages.html",
    "title": "Interface IAxoMessages | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoMessages Namespace: plc.AXOpen.Messaging.Dynamic Assembly: .dll Syntax INTERFACE IAxoMessages Methods Debug Adds message of 'debug' category to the message queue. Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageProperties Debug(in plc.STRING[160] Message) Parameters Type Name Description STRING[160] Message Returns Type Description IAxoMessageProperties Error Adds message of 'error' category to the message queue. Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageProperties Error(in plc.STRING[160] Message) Parameters Type Name Description STRING[160] Message Returns Type Description IAxoMessageProperties Info Adds message of 'information' category to the message queue. Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageProperties Info(in plc.STRING[160] Message) Parameters Type Name Description STRING[160] Message Returns Type Description IAxoMessageProperties Notify Adds message of 'notification' category to the message queue. Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageProperties Notify(in plc.STRING[160] Message) Parameters Type Name Description STRING[160] Message Returns Type Description IAxoMessageProperties Programming Adds message of 'programming error' category to the message queue. Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageProperties Programming(in plc.STRING[160] Message) Parameters Type Name Description STRING[160] Message Returns Type Description IAxoMessageProperties Trace Adds message of 'trace' category to the message queue. Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageProperties Trace(in plc.STRING[160] Message) Parameters Type Name Description STRING[160] Message Returns Type Description IAxoMessageProperties Warning Adds message of 'warning' category to the message queue. Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageProperties Warning(in plc.STRING[160] Message) Parameters Type Name Description STRING[160] Message Returns Type Description IAxoMessageProperties Build Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Build() Returns Type Description IAxoMessageTextBuilder Post Adds message of given category to the message queue. Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageProperties Post(in plc.STRING[160] Message,in plc.AXOpen.Messaging.eAxoMessageCategory Category) Parameters Type Name Description STRING[160] Message eAxoMessageCategory Category Returns Type Description IAxoMessageProperties Message index. UnPin Unpins this messenger. Declaration Public VOID UnPin() Returns Type Description"
  },
  "apictrl/plc.AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder.html": {
    "href": "apictrl/plc.AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder.html",
    "title": "Interface IAxoMessageTextBuilder | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoMessageTextBuilder Namespace: plc.AXOpen.Messaging.Dynamic Assembly: .dll Syntax INTERFACE IAxoMessageTextBuilder Methods Append Appends string to the message text. Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.BOOL Data) Parameters Type Name Description BOOL Data Returns Type Description IAxoMessageTextBuilder Remarks The size of the resulting string should not be more than '160' characters. The characters exceeding this size will be truncated. Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.BYTE Data) Parameters Type Name Description BYTE Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.WORD Data) Parameters Type Name Description WORD Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.DWORD Data) Parameters Type Name Description DWORD Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.LWORD Data) Parameters Type Name Description LWORD Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.SINT Data) Parameters Type Name Description SINT Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.INT Data) Parameters Type Name Description INT Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.DINT Data) Parameters Type Name Description DINT Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.LINT Data) Parameters Type Name Description LINT Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.USINT Data) Parameters Type Name Description USINT Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.UINT Data) Parameters Type Name Description UINT Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.UDINT Data) Parameters Type Name Description UDINT Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.ULINT Data) Parameters Type Name Description ULINT Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.REAL Data) Parameters Type Name Description REAL Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.LREAL Data) Parameters Type Name Description LREAL Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.TIME Data) Parameters Type Name Description TIME Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.LTIME Data) Parameters Type Name Description LTIME Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.DATE Data) Parameters Type Name Description DATE Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.LDATE Data) Parameters Type Name Description LDATE Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.TIME_OF_DAY Data) Parameters Type Name Description TIME_OF_DAY Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.LTIME_OF_DAY Data) Parameters Type Name Description LTIME_OF_DAY Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.DATE_AND_TIME Data) Parameters Type Name Description DATE_AND_TIME Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.LDATE_AND_TIME Data) Parameters Type Name Description LDATE_AND_TIME Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.CHAR Data) Parameters Type Name Description CHAR Data Returns Type Description IAxoMessageTextBuilder Append Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Append(in plc.STRING[160] Data) Parameters Type Name Description STRING[160] Data Returns Type Description IAxoMessageTextBuilder As Gets categorization methods for fluent message builder. Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageCategorize As() Returns Type Description IAxoMessageCategorize Build Initiates new message text building for this messenger in fluent-like fashion. Declaration Public AXOpen.Messaging.Dynamic.IAxoMessageTextBuilder Build() Returns Type Description IAxoMessageTextBuilder"
  },
  "apictrl/plc.AXOpen.Messaging.Dynamic.IAxoMessenger.html": {
    "href": "apictrl/plc.AXOpen.Messaging.Dynamic.IAxoMessenger.html",
    "title": "Interface IAxoMessenger | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoMessenger Namespace: plc.AXOpen.Messaging.Dynamic Assembly: .dll Syntax INTERFACE IAxoMessenger Methods Clear Clears the message content. This method is exposed for Rpc calls, for testing purposes. Rpc calls of this method must not be used in production code Declaration Public VOID Clear() Returns Type Description OnCondition Declaration Public AXOpen.Messaging.Dynamic.IAxoMessages OnCondition(in plc.BOOL inCondition) Parameters Type Name Description BOOL inCondition Returns Type Description IAxoMessages"
  },
  "apictrl/plc.AXOpen.Messaging.Dynamic.IAxoMessengerEnv.html": {
    "href": "apictrl/plc.AXOpen.Messaging.Dynamic.IAxoMessengerEnv.html",
    "title": "Interface IAxoMessengerEnv | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoMessengerEnv Namespace: plc.AXOpen.Messaging.Dynamic Assembly: .dll Syntax INTERFACE IAxoMessengerEnv Methods IsSuspended Gets whether the messaging is suspended at this point in program. See also PlcDocu.TcoCore.TcoMessengerSettings.Resume() See also PlcDocu.TcoCore.TcoMessengerSettings.Suspend() See also PlcDocu.TcoCore.TcoMessengerSettings.MinLevel Declaration Public BOOL IsSuspended() Returns Type Description BOOL GetMessageDigestMethod Gets the message digest method.Message digest serves to fingerprint messages. Declaration Public AXOpen.Messaging.Dynamic.eAxoMessageDigestMethod GetMessageDigestMethod() Returns Type Description eAxoMessageDigestMethod SetMessageDigestMethod Sets the message digest method.Message digest serves to fingerprint messages. Declaration Public VOID SetMessageDigestMethod(in plc.AXOpen.Messaging.Dynamic.eAxoMessageDigestMethod inDigestMethod) Parameters Type Name Description eAxoMessageDigestMethod inDigestMethod Returns Type Description GetMinLevel Gets the minimal messaging level, the objects will post only messages for the levels of this or superior severity. See also PlcDocu.TcoCore.TcoMessengerSettings.Resume() See also PlcDocu.TcoCore.TcoMessengerSettings.Suspend() See also PlcDocu.TcoCore.TcoMessengerSettings.MinLevel Declaration Public AXOpen.Messaging.eAxoMessageCategory GetMinLevel() Returns Type Description eAxoMessageCategory SetMinLevel Sets the minimal messaging level, the objects will post only messages for the levels of this or superior severity. See also PlcDocu.TcoCore.TcoMessengerSettings.Resume() See also PlcDocu.TcoCore.TcoMessengerSettings.Suspend() See also PlcDocu.TcoCore.TcoMessengerSettings.MinLevel Declaration Public VOID SetMinLevel(in plc.AXOpen.Messaging.eAxoMessageCategory inMessageCategory) Parameters Type Name Description eAxoMessageCategory inMessageCategory Returns Type Description Resume Resumes messaging from the all objects of this context, when the messaging was previously suspended by Suspend method. See also PlcDocu.TcoCore.TcoMessengerSettings.Suspend() See also PlcDocu.TcoCore.TcoMessengerSettings.MinLevel Declaration Public VOID Resume() Returns Type Description Suspend Suspends messaging from the all objects of this context that would occur from this point in the call tree. See also PlcDocu.TcoCore.TcoMessengerSettings.Resume() See also PlcDocu.TcoCore.TcoMessengerSettings.MinLevel Declaration Public VOID Suspend() Returns Type Description"
  },
  "apictrl/plc.AXOpen.Messaging.eAxoMessageCategory.html": {
    "href": "apictrl/plc.AXOpen.Messaging.eAxoMessageCategory.html",
    "title": "Enum eAxoMessageCategory | System.Dynamic.ExpandoObject",
    "keywords": "Enum eAxoMessageCategory Message categories.ATTENTION: Values must be multiply of 100 Namespace: plc.AXOpen.Messaging Assembly: .dll Syntax eAxoMessageCategory : INT Fields Name Description All := 0 Trace := 100 Trace message to be used for tracing purpose.Use when you need to track detailed information about internal states of the program for detailed visibility.This is lowest level of category that can be used in production, for detailed observation of PLC program. Debug := 200 Debug message to be used for debugging purpose only.Use when you need to report debug information for you as programmer. Info := 300 Info message.Use when you want to deliver information to the user, that has only informative character and does not adversely affect a process. TimedOut := 400 Time-out message.Use this category when you want to report a timed-out information, that may eventually succed. Notification := 500 Notification message.Use this category when you want to report a notification that may be of interest to the user, but does not adversly affect a process. Warning := 600 Warning message.Use this category when you want to report to the user an information about a possible problem, that may adversly affect a process.Information in this cateogory aims to help the user to identify a problem, the cause of such problem does not necessarily stops the process. Error := 700 Error message.Use this categoty when there is a failure that cannot be immediately recovered and an intervention is needed. This is typically a situation when a device failsto deliver expected result.Do not use this category to report information about failed process like measurement or detection. ProgrammingError := 900 Programming issue.Use this category to inform about a possible programming error, defect in settings or missing information at a level of programming or system or process settings. Critical := 1000 Critical error.Use this category when a critical error occured, that is not recoverable by the means of software (reset/restore) but device still operates under such conditions; a detailed inspection and an expert action is required. Fatal := 1100 Fatal error.Use this category when a fatal error occured, that is not recoverable by the means of software (reset/restore) and a detailed inspection is required, the device is not able to continue without special intervention, Catastrophic := 1200 Catastrophic error.Use this category when there is a situation when the device cannot continue operations due to irrecoverable failure. None := 32000"
  },
  "apictrl/plc.AXOpen.Messaging.Static.AxoMessenger.html": {
    "href": "apictrl/plc.AXOpen.Messaging.Static.AxoMessenger.html",
    "title": "Class AxoMessenger | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoMessenger Inheritance AxoMessenger Implements IAxoMessageProperties Namespace: plc.AXOpen.Messaging.Static Assembly: .dll Syntax CLASS AxoMessenger Properties IsActive Declaration IsActive : BOOL Property Value Type Description Category Declaration Category : AXOpen.Messaging.eAxoMessageCategory Property Value Type Description MessageCode Declaration MessageCode : ULINT Property Value Type Description Risen Declaration Risen : LDATE_AND_TIME Property Value Type Description Fallen Declaration Fallen : LDATE_AND_TIME Property Value Type Description WaitingForAcknowledge Declaration WaitingForAcknowledge : BOOL Property Value Type Description AcknowledgementRequired Declaration AcknowledgementRequired : BOOL Property Value Type Description AcknowledgeRequest Declaration AcknowledgeRequest : BOOL Property Value Type Description AcknowledgedBeforeFallen Declaration AcknowledgedBeforeFallen : BOOL Property Value Type Description Acknowledged Declaration Acknowledged : LDATE_AND_TIME Property Value Type Description ActiveContextCount Declaration ActiveContextCount : ULINT Property Value Type Description Context Declaration Context : AXOpen.Core.IAxoContext Property Value Type Description Methods Serve Declaration Public VOID Serve(in plc.AXOpen.Core.IAxoContext _context) Parameters Type Name Description IAxoContext _context Returns Type Description Serve Declaration Public VOID Serve(in plc.AXOpen.Core.IAxoObject _object) Parameters Type Name Description IAxoObject _object Returns Type Description Activate Declaration Public AXOpen.Messaging.Static.IAxoMessageProperties Activate(in plc.AXOpen.Messaging.eAxoMessageCategory _category) Parameters Type Name Description eAxoMessageCategory _category Returns Type Description IAxoMessageProperties ActivateOnCondition Declaration Public AXOpen.Messaging.Static.IAxoMessageProperties ActivateOnCondition(in plc.BOOL _condition,in plc.AXOpen.Messaging.eAxoMessageCategory _category) Parameters Type Name Description BOOL _condition eAxoMessageCategory _category Returns Type Description IAxoMessageProperties Acknowledge Declaration Public VOID Acknowledge() Returns Type Description Deactivate Declaration Private VOID Deactivate() Returns Type Description RequireAcknowledgement Declaration Public AXOpen.Messaging.Static.IAxoMessageProperties RequireAcknowledgement() Returns Type Description IAxoMessageProperties DoNotRequireAcknowledgement Declaration Public AXOpen.Messaging.Static.IAxoMessageProperties DoNotRequireAcknowledgement() Returns Type Description IAxoMessageProperties IsAcknowledgementRequired Declaration Public BOOL IsAcknowledgementRequired() Returns Type Description BOOL Implements IAxoMessageProperties"
  },
  "apictrl/plc.AXOpen.Messaging.Static.html": {
    "href": "apictrl/plc.AXOpen.Messaging.Static.html",
    "title": "Namespace plc.AXOpen.Messaging.Static | System.Dynamic.ExpandoObject",
    "keywords": "Namespace plc.AXOpen.Messaging.Static Classes AxoMessenger Interfaces IAxoMessageProperties"
  },
  "apictrl/plc.AXOpen.Messaging.Static.IAxoMessageProperties.html": {
    "href": "apictrl/plc.AXOpen.Messaging.Static.IAxoMessageProperties.html",
    "title": "Interface IAxoMessageProperties | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoMessageProperties Namespace: plc.AXOpen.Messaging.Static Assembly: .dll Syntax INTERFACE IAxoMessageProperties Methods RequireAcknowledgement Declaration Public AXOpen.Messaging.Static.IAxoMessageProperties RequireAcknowledgement() Returns Type Description IAxoMessageProperties DoNotRequireAcknowledgement Declaration Public AXOpen.Messaging.Static.IAxoMessageProperties DoNotRequireAcknowledgement() Returns Type Description IAxoMessageProperties IsAcknowledgementRequired Declaration Public BOOL IsAcknowledgementRequired() Returns Type Description BOOL"
  },
  "apictrl/plc.AXOpen.Rtc.html": {
    "href": "apictrl/plc.AXOpen.Rtc.html",
    "title": "Namespace plc.AXOpen.Rtc | System.Dynamic.ExpandoObject",
    "keywords": "Namespace plc.AXOpen.Rtc Interfaces IAxoRtc"
  },
  "apictrl/plc.AXOpen.Rtc.IAxoRtc.html": {
    "href": "apictrl/plc.AXOpen.Rtc.IAxoRtc.html",
    "title": "Interface IAxoRtc | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoRtc Namespace: plc.AXOpen.Rtc Assembly: .dll Syntax INTERFACE IAxoRtc Methods NowUTC Declaration Public LDATE_AND_TIME NowUTC() Returns Type Description LDATE_AND_TIME"
  },
  "apictrl/plc.AXOpen.Utils.AxoStringBuilder.html": {
    "href": "apictrl/plc.AXOpen.Utils.AxoStringBuilder.html",
    "title": "Class AxoStringBuilder | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoStringBuilder Allows to concat strings using fluent interface. It's similar to C# StringBuilder classUsage as follows : ErrorString := _stringBuilder.Clear().Append('Error number: ').Append(ErrorNumber).Append('. Message: ').Append(ErrorMessage).Append('.').AsString(); Inspired by Gerhard Barteling blogpost at https://www.plccoder.com/fluent-code/ Inheritance AxoStringBuilder Implements IAxoStringBuilder Namespace: plc.AXOpen.Utils Assembly: .dll Syntax CLASS AxoStringBuilder Properties _workString Declaration _workString : STRING[254] Property Value Type Description Methods Clear Declaration Public AXOpen.Utils.IAxoStringBuilder Clear() Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.BOOL Data) Parameters Type Name Description BOOL Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.BYTE Data) Parameters Type Name Description BYTE Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.WORD Data) Parameters Type Name Description WORD Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.DWORD Data) Parameters Type Name Description DWORD Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.LWORD Data) Parameters Type Name Description LWORD Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.SINT Data) Parameters Type Name Description SINT Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.INT Data) Parameters Type Name Description INT Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.DINT Data) Parameters Type Name Description DINT Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.LINT Data) Parameters Type Name Description LINT Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.USINT Data) Parameters Type Name Description USINT Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.UINT Data) Parameters Type Name Description UINT Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.UDINT Data) Parameters Type Name Description UDINT Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.ULINT Data) Parameters Type Name Description ULINT Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.REAL Data) Parameters Type Name Description REAL Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.LREAL Data) Parameters Type Name Description LREAL Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.TIME Data) Parameters Type Name Description TIME Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.LTIME Data) Parameters Type Name Description LTIME Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.DATE Data) Parameters Type Name Description DATE Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.LDATE Data) Parameters Type Name Description LDATE Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.TIME_OF_DAY Data) Parameters Type Name Description TIME_OF_DAY Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.LTIME_OF_DAY Data) Parameters Type Name Description LTIME_OF_DAY Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.DATE_AND_TIME Data) Parameters Type Name Description DATE_AND_TIME Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.LDATE_AND_TIME Data) Parameters Type Name Description LDATE_AND_TIME Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.CHAR Data) Parameters Type Name Description CHAR Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.STRING[254] Data) Parameters Type Name Description STRING[254] Data Returns Type Description IAxoStringBuilder AsString Declaration Public STRING[254] AsString() Returns Type Description STRING[254] AsString160 Declaration Public STRING[160] AsString160() Returns Type Description STRING[160] Implements IAxoStringBuilder"
  },
  "apictrl/plc.AXOpen.Utils.html": {
    "href": "apictrl/plc.AXOpen.Utils.html",
    "title": "Namespace plc.AXOpen.Utils | System.Dynamic.ExpandoObject",
    "keywords": "Namespace plc.AXOpen.Utils Classes AxoStringBuilder Allows to concat strings using fluent interface. It's similar to C# StringBuilder classUsage as follows : ErrorString := _stringBuilder.Clear().Append('Error number: ').Append(ErrorNumber).Append('. Message: ').Append(ErrorMessage).Append('.').AsString(); Inspired by Gerhard Barteling blogpost at https://www.plccoder.com/fluent-code/ Interfaces IAxoStringBuilder Allows to concat strings using fluent interface. It's similar to C# StringBuilder classUsage as follows : ErrorString := _stringBuilder.Clear().Append('Error number: ').Append(ErrorNumber).Append('. Message: ').Append(ErrorMessage).Append('.').AsString(); Inspired by Gerhard Barteling blogpost at https://www.plccoder.com/fluent-code/"
  },
  "apictrl/plc.AXOpen.Utils.IAxoStringBuilder.html": {
    "href": "apictrl/plc.AXOpen.Utils.IAxoStringBuilder.html",
    "title": "Interface IAxoStringBuilder | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoStringBuilder Allows to concat strings using fluent interface. It's similar to C# StringBuilder classUsage as follows : ErrorString := _stringBuilder.Clear().Append('Error number: ').Append(ErrorNumber).Append('. Message: ').Append(ErrorMessage).Append('.').AsString(); Inspired by Gerhard Barteling blogpost at https://www.plccoder.com/fluent-code/ Namespace: plc.AXOpen.Utils Assembly: .dll Syntax INTERFACE IAxoStringBuilder Methods Clear Declaration Public AXOpen.Utils.IAxoStringBuilder Clear() Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.BOOL Data) Parameters Type Name Description BOOL Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.BYTE Data) Parameters Type Name Description BYTE Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.WORD Data) Parameters Type Name Description WORD Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.DWORD Data) Parameters Type Name Description DWORD Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.LWORD Data) Parameters Type Name Description LWORD Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.SINT Data) Parameters Type Name Description SINT Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.INT Data) Parameters Type Name Description INT Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.DINT Data) Parameters Type Name Description DINT Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.LINT Data) Parameters Type Name Description LINT Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.USINT Data) Parameters Type Name Description USINT Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.UINT Data) Parameters Type Name Description UINT Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.UDINT Data) Parameters Type Name Description UDINT Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.ULINT Data) Parameters Type Name Description ULINT Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.REAL Data) Parameters Type Name Description REAL Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.LREAL Data) Parameters Type Name Description LREAL Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.TIME Data) Parameters Type Name Description TIME Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.LTIME Data) Parameters Type Name Description LTIME Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.DATE Data) Parameters Type Name Description DATE Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.LDATE Data) Parameters Type Name Description LDATE Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.TIME_OF_DAY Data) Parameters Type Name Description TIME_OF_DAY Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.LTIME_OF_DAY Data) Parameters Type Name Description LTIME_OF_DAY Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.DATE_AND_TIME Data) Parameters Type Name Description DATE_AND_TIME Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.LDATE_AND_TIME Data) Parameters Type Name Description LDATE_AND_TIME Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.CHAR Data) Parameters Type Name Description CHAR Data Returns Type Description IAxoStringBuilder Append Declaration Public AXOpen.Utils.IAxoStringBuilder Append(in plc.STRING[254] Data) Parameters Type Name Description STRING[254] Data Returns Type Description IAxoStringBuilder"
  },
  "articles/core/AXOCOMPONENT.html": {
    "href": "articles/core/AXOCOMPONENT.html",
    "title": "AxoComponent | System.Dynamic.ExpandoObject",
    "keywords": "AxoComponent AxoComponent is an abstract class extending the AxoObject, and it is the base building block for the \"hardware-related devices\" like a pneumatic piston, servo drive, robot, etc., so as for the, let's say, \"virtual devices\" like counter, database, etc. AxoComponent is designed to group all possible methods, tasks, settings, and status information into one consistent class. As the AxoComponent is an abstract class, it cannot be instantiated and must be extended. In the extended class, two methods are mandatory. Restore() - inside this method, the logic for resetting the AxoComponent or restoring it from any state to its initial state should be placed. ManualControl() - inside this method, the logic for manual operations with the component should be placed. To be able to control the AxoComponent instance manually, the method ActivateManualControl() of this instance needs to be called cyclically. The base class contains two additional method to deal with the manual control of the AxoComponent. ActivateManualControl() - when this method is called cyclically, the AxoComponent changes its behavior to manually controllable and ensure the call of the ManualControl() method in the derived class. IsManuallyControllable() -returns TRUE when the AxoComponent is manually controllable. Layout attributes ComponentHeader and ComponentDetails The visual view of the extended AxoComponent on the UI side could be done both ways. Manually with complete control over the design or by using the auto-rendering mechanism of the RenderableContentControl (TODO add a link to docu of the RenderableContentControl) element, which is, in most cases, more than perfect. To take full advantage of the auto-rendering mechanism, the base class has implemented the additional layout attributes ComponentHeader and ComponentDetails(TabName). The auto-rendered view is divided into two parts: the fAxoed one and the expandable one. All AxoComponent members with the ComponentHeader layout attribute defined will be displayed in the fixed part. All members with the ComponentDetails(TabName) layout attribute defined will be displayed in the expandable part inside the TabControl with \"TabName\". All members are added in the order in which they are defined, taking into account their layout attributes like Container(Layout.Wrap) or Container(Layout.Stack). How to implement AxoComponent Example of the implementation very simple AxoComponent with members placed only inside the Header. {#ix-attr:[Container(Layout.Stack)]} {#ix-set:AttributeName = \"AxoComponent with header only example\"} CLASS PUBLIC AxoComponentHeaderOnlyExample EXTENDS AXOpen.Core.AxoComponent METHOD PROTECTED OVERRIDE Restore: IAxoTask // Some logic for Restore could be placed here. For Example: valueReal := REAL#1.0; valueDint := DINT#0; END_METHOD METHOD PROTECTED OVERRIDE ManualControl // Some logic for manual control could be placed here. ; END_METHOD // Main method of the `AxoComponent` that must be // called inside the `AxoContext` cyclically. METHOD PUBLIC Run // Declaration of the input and output variables. // In the case of \"hardware-related\" `AxoComponent`, // these would be the variables linked to the hardware. VAR_INPUT inReal : REAL; inDint : DINT; END_VAR VAR_OUTPUT outReal : REAL; outDint : DINT; END_VAR // This must be called first. SUPER.Open(); // Place the custom logic here. valueReal := valueReal * inReal; valueDint := valueDint + inDint; outReal := valueReal; outDint := valueDint; END_METHOD VAR PUBLIC {#ix-attr:[Container(Layout.Wrap)]} {#ix-attr:[ComponentHeader()]} {#ix-set:AttributeName = \"Real product value\"} valueReal : REAL := REAL#1.0; {#ix-attr:[ComponentHeader()]} {#ix-set:AttributeName = \"Dint sum value\"} valueDint : DINT:= DINT#0; END_VAR END_CLASS How to use AxoComponent The instance of the extended AxoComponent must be defined inside the AxoContext. CLASS ComponentHeaderOnlyExampleContext EXTENDS AxoContext VAR PUBLIC {#ix-set:AttributeName = \"Very simple component example with header only defined\"} MyComponentWithHeaderOnly : AxoComponentHeaderOnlyExample; {#ix-set:AttributeName = \"<#Activate manual control#>\"} ActivateManualControl : BOOL; inHwReal : REAL := REAL#1.0001; inHwDint : DINT := DINT#1; outHwReal : REAL; outHwDint : DINT; END_VAR METHOD PROTECTED OVERRIDE Main // The `Initialize()` method must be called before any other method. MyComponentWithHeaderOnly.Initialize(THIS); // Example of the activation of the manual control. IF ActivateManualControl THEN MyComponentWithHeaderOnly.ActivateManualControl(); END_IF; // Calling the main method `Run` with respective input and output variables. MyComponentWithHeaderOnly.Run(inReal := inHwReal, inDint := inHwDint, outReal => outHwReal, outDint => outHwDint); END_METHOD END_CLASS Inside the Main() method of the related AxoContext following rules must be applied. The Initialize() method of the extended instance of the AxoComponent must be called first. The Run() method with the respective input and output variables must be called afterwards. How to visualize AxoComponent On the UI side use the RenderableContentControl and set its Context according the placement of the instance of the AxoComponent. <RenderableContentControl Context=\"@Entry.Plc.myComponentHeaderOnlyExample.MyComponentWithHeaderOnly\" Presentation=\"Command\" /> The rendered result should then looks as follows: In case of more complex AxoComponent the most important members should be placed in the fixed part (Header) and the rest of the members should be placed inside the expandable part (Details). The members inside the expandable part should be organize inside the tabs. More complex AxoComponent Example of the implementation more complex AxoComponent with members placed also in several tabs inside the expandable part (Details). {#ix-attr:[Container(Layout.Stack)]} {#ix-set:AttributeName = \"AxoComponent example name\"} CLASS PUBLIC AxoComponentExample EXTENDS AXOpen.Core.AxoComponent METHOD PROTECTED OVERRIDE Restore: IAxoTask ; END_METHOD METHOD PROTECTED OVERRIDE ManualControl ; END_METHOD METHOD PUBLIC Run VAR_INPUT inReal : REAL; inDint : DINT; END_VAR VAR_OUTPUT outReal : REAL; outDint : DINT; END_VAR // This must be called first. SUPER.Open(); // Place the custom logic here. Status.SomeStatusValue1 := Status.SomeStatusValue1 * inReal; Status.SomeStatusValue2 := Status.SomeStatusValue2 + inDint; outReal := Status.SomeStatusValue1; outDint := Status.SomeStatusValue2; END_METHOD VAR PUBLIC // Complete structure as a part of the component header. // All structure members are going to be displayed in the component header. {#ix-attr:[Container(Layout.Wrap)]} {#ix-attr:[ComponentHeader()]} Header : Header_ComponentExample; // Two separate tasks as a part of the component header. // These tasks are going to be added to the previous members of the component header. {#ix-attr:[ComponentHeader()]} {#ix-set:AttributeName = \"Header task 1\"} HeaderTask1 : AxoTask; // Complete structure as a part of the component details tab `Tasks`. // All structure members are going to be added to the previous members of the component details tab `Tasks`. {#ix-set:AttributeName = \"Tasks\"} {#ix-attr:[Container(Layout.Stack)]} Tasks : Tasks_ComponentExample; // Single task as a part of the component details tab `Tasks`. // This task is going to be displayed in the component details tab `Tasks` {#ix-attr:[ComponentDetails(\"Tasks\")]} {#ix-attr:[Container(Layout.Stack)]} {#ix-set:AttributeName = \"Detail task in Tasks tab\"} DetailTaskInTasksTab : AxoTask; // Additional separate task as a part of the component header. // This task is going to be added to the previous members of the component header. {#ix-attr:[ComponentHeader()]} {#ix-set:AttributeName = \"Header task 2\"} HeaderTask2 : AxoTask; // Complete structure as a part of the component details tab `Status` as the attribute [ComponentDetails(\"Status\")] // is defined on the class Status_ComponentExample. // All structure members are going to be added to the previous members of the component details tab `Status`. {#ix-set:AttributeName = \"Status class\"} Status :Status_ComponentExample; // Single variable as a part of the component details tab `Status`. // This variable is going to be added to the previous members of the component details tab `Status`. {#ix-attr:[ComponentDetails(\"Status\")]} {#ix-attr:[Container(Layout.Stack)]} {#ix-set:AttributeName = \"Status string\"} Status2 : string; // Additional separate task as a part of the component header. // This task is going to be added to the previous members of the component header. {#ix-attr:[ComponentHeader()]} {#ix-set:AttributeName = \"Header task 3\"} HeaderTask3 : AxoTask; // Complete structure as a part of the component details tab `Settings` as the attribute [ComponentDetails(\"Settings\")] // is defined on the class Settings_ComponentExample. // All structure members are going to be added to the previous members of the component details tab `Settings`. {#ix-set:AttributeName = \"Settings\"} Settings : Settings_ComponentExample; // Complete structure as a part of the component details tab `Diagnostics` as the attribute [ComponentDetails(\"Diagnostics\")] // is defined on the class Diagnostics_ComponentExample. git // All structure members are going to be added to the previous members of the component details tab `Diagnostics`. {#ix-set:AttributeName = \"Diagnostics\"} Diagnostics : Diagnostics_ComponentExample; // Complete structure as a part of the component details tab `Help` as the attribute [ComponentDetails(\"Help\")] // is defined on the class Help_ComponentExample. // All structure members are going to be added to the previous members of the component details tab `Help`. {#ix-set:AttributeName = \"Help\"} Help : Help_ComponentExample; END_VAR END_CLASS For the complex types of the AxoComponent it is also recomended to organize partial groups of the members into the classes as it is in this example. CLASS PUBLIC Header_ComponentExample VAR PUBLIC {#ix-set:AttributeName = \"Start\"} Start : AxoTask; {#ix-set:AttributeName = \"Stop\"} Stop : AxoTask; {#ix-set:AttributeName = \"Status\"} Status : STRING:='Some status description'; END_VAR END_CLASS {#ix-attr:[Container(Layout.Stack)]} {#ix-attr:[ComponentDetails(\"Tasks\")]} CLASS PUBLIC Tasks_ComponentExample VAR PUBLIC {#ix-set:AttributeName = \"Some status value 1\"} SomeStatusValue1 : REAL := REAL#45.3; {#ix-set:AttributeName = \"Some advanced component task 1\"} SomeAdvancedComponentTask1 : AxoTask; {#ix-set:AttributeName = \"Some advanced component task 2\"} SomeAdvancedComponentTask2 : AxoTask; {#ix-set:AttributeName = \"Some advanced component task 3\"} SomeAdvancedComponentTask3 : AxoTask; {#ix-set:AttributeName = \"Some advanced component task 4\"} SomeAdvancedComponentTask4 : AxoTask; {#ix-set:AttributeName = \"Some advanced component task 5\"} SomeAdvancedComponentTask5 : AxoTask; END_VAR END_CLASS {#ix-attr:[Container(Layout.Stack)]} {#ix-attr:[ComponentDetails(\"Status\")]} CLASS PUBLIC Status_ComponentExample VAR PUBLIC {#ix-set:AttributeName = \"Some status value 1\"} SomeStatusValue1 : REAL := REAL#45.3; {#ix-set:AttributeName = \"Some status value 2\"} SomeStatusValue2 : DINT := DINT#46587; {#ix-set:AttributeName = \"Some status value 3\"} SomeStatusValue3 : STRING := 'some description'; END_VAR END_CLASS {#ix-attr:[ComponentDetails(\"Settings\")]} {#ix-attr:[Container(Layout.Stack)]} CLASS PUBLIC Settings_ComponentExample VAR PUBLIC {#ix-set:AttributeName = \"Some setting value 1\"} SomeSettingValue1 : REAL := REAL#45.3; {#ix-set:AttributeName = \"Some setting value 2\"} SomeSettingValue2 : DINT := DINT#46587; {#ix-set:AttributeName = \"Some setting value 3\"} SomeSettingValue3 : STRING := 'some setting'; END_VAR END_CLASS {#ix-attr:[ComponentDetails(\"Diagnostics\")]} {#ix-attr:[Container(Layout.Stack)]} CLASS PUBLIC Diagnostics_ComponentExample VAR PUBLIC {#ix-set:AttributeName = \"Some diagnostic message\"} SomeDiagnosticMessage : STRING := 'TODO: Some diagnostic message needs to be placed here'; END_VAR END_CLASS {#ix-attr:[ComponentDetails(\"Help\")]} {#ix-attr:[Container(Layout.Stack)]} CLASS PUBLIC Help_ComponentExample VAR PUBLIC {#ix-set:AttributeName = \"Some help\"} SomeHelp : STRING := 'TODO: Provide some help'; END_VAR END_CLASS Instantiate and call the AxoComponent instance. CLASS ComponentExampleContext EXTENDS AxoContext VAR PUBLIC {#ix-set:AttributeName = \"Component example name\"} MyComponent : AxoComponentExample; {#ix-set:AttributeName = \"<#Activate manual control#>\"} ActivateManualControl : BOOL; inHwReal : REAL := REAL#1.0001; inHwDint : DINT := DINT#1; outHwReal : REAL; outHwDint : DINT; END_VAR METHOD PROTECTED OVERRIDE Main // The `Initialize()` method must be called before any other method. MyComponent.Initialize(THIS); // Example of the activation of the manual control. IF ActivateManualControl THEN MyComponent.ActivateManualControl(); END_IF; // Calling the main method `Run` with respective input and output variables. MyComponent.Run(inReal := inHwReal, inDint := inHwDint, outReal => outHwReal, outDint => outHwDint); END_METHOD END_CLASS UI side of the AxoComponent. <RenderableContentControl Context=\"@Entry.Plc.myComponentExample.MyComponent\" Presentation=\"Command\" /> and the rendered result:"
  },
  "articles/core/AXOCONTEXT.html": {
    "href": "articles/core/AXOCONTEXT.html",
    "title": "AxoContext | System.Dynamic.ExpandoObject",
    "keywords": "AxoContext AxoContext encapsulates entire application or application units. Any solution may contain one or more contexts, however the each should be considered to be an isolated island and any direct inter-context access to members must be avoided. Note Each AxoContext must belong to a single PLC task.Multiple AxoContexts can be however running on the same task. classDiagram class Context{ +Main()* +Run() } In its basic implementation AxoContext has relatively simple interface. Main is the method where we place all calls of our sub-routines. In other words the Run is the root of the call tree of our program. Run method runs the AxoContext. It must be called cyclically within a program unit that is attached to a cyclic task. Why do we need AxoContext AxoContext provides counters, object identification and other information about the execution of the program. These information is then used by the objects contained at different levels of the AxoContext. How AxoContext works When you call Run method on an instance of a AxoContext, it will ensure opening AxoContext, running Main method (root of all your program calls) and AxoContext closing. flowchart LR classDef run fill:#80FF00,stroke:#0080FF,stroke-width:4px,color:#7F00FF,font-size:15px,font-weight:bold classDef main fill:#ff8000,stroke:#0080ff,stroke-width:4px,color:#7F00FF,font-size:15px,font-weight:bold id1(Open):::run-->id2(#Main*):::main-->id3(Close):::run-->id1 How to use AxoContext Base class for the AxoContext is AXOpen.Core.AxoContext. The entry point of call execution of the AxoContext is Main method. Notice that the AxoContext class is abstract and cannot be instantiated if not extended. Main method must be overridden in derived class notice the use of override keyword and also that the method is protected which means the it is visible only from within the AxoContext and derived classes. How to extend AxoContext class CLASS PUBLIC AxoContextExample EXTENDS AXOpen.Core.AxoContext METHOD PROTECTED OVERRIDE Main // Here goes all your logic for given AxoContext. ; END_METHOD END_CLASS Cyclical call of the AxoContext logic (Main method) is ensured when AxoContext Run method is called. Run method is public therefore accessible and visible to any part of the program that whishes to call it. How to start AxoContext's execution PROGRAM ProgramExample VAR MyContext : AxoContextExample; END_VAR MyContext.Run(); END_PROGRAM"
  },
  "articles/core/AXOMOMENTARYTASK.html": {
    "href": "articles/core/AXOMOMENTARYTASK.html",
    "title": "AxoMomentaryTask | System.Dynamic.ExpandoObject",
    "keywords": "AxoMomentaryTask AxoMomentaryTask provides basic momentary function. It is mainly designed for some manual operations from the UI side. AxoMomentaryTask needs to be initialized to set the proper AxoContext. AxoMomentaryTask initialization within a AxoContext CLASS AxoMomentaryTaskDocuExample EXTENDS AXOpen.Core.AxoContext VAR PUBLIC {#ix-set:AttributeName = \"<#Momentary task example#>\"} {#ix-set:AttributeStateOnDesc = \"<#Currently On#>\"} {#ix-set:AttributeStateOffDesc = \"<#Currently Off#>\"} _myMomentaryTask : AxoMomentaryTask; END_VAR METHOD PUBLIC Initialize // Initialization of the context needs to be called first // It does not need to be called cyclically, just once _myMomentaryTask.Initialize(THIS); END_METHOD END_CLASS To check the state of the task there are two methods: IsSwitchOn() - returns TRUE if the state of the task is TRUE. IsSwitchOff() - returns TRUE if the state of the task is FALSE. Example of using IsSwitchOn() method: IF _myMomentaryTask.IsSwitchedOn() THEN ; // do something END_IF; Example of using IsSwitchOff() method: IF _myMomentaryTask.IsSwitchedOff() THEN ; // do something END_IF; Moreover, there are five more \"event-like\" methods that are called when a specific event occurs (see the chart below). To implement any of the already mentioned \"event-like\" methods the new class that extends from the AxoMomentaryTask needs to be created. The required method with PROTECTED OVERRIDE access modifier needs to be created as well, and the custom logic needs to be placed in. These methods are: OnSwitchedOn() - executes once when the task changes its state from FALSE to TRUE. OnSwitchedOff() - executes once when the task changes its state from TRUE to FALSE. OnStateChanged() - executes once when the task changes its state. SwitchedOn() - executes repeatedly while the task is in TRUE state. SwitchedOff() - executes repeatedly while the task is in FALSE state. Example of implementing \"event-like\" methods: CLASS MyMomentaryTaskExample Extends AxoMomentaryTask VAR OnSwitchedOnCounter : ULINT; OnSwitchedOffCounter : ULINT; OnStateChangedCounter : ULINT; SwitchOnExecutionCounter : ULINT; SwitchOffExecutionCounter : ULINT; END_VAR METHOD PROTECTED OVERRIDE OnSwitchedOn OnSwitchedOnCounter := OnSwitchedOnCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnSwitchedOff OnSwitchedOffCounter := OnSwitchedOffCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnStateChanged OnStateChangedCounter := OnStateChangedCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE SwitchedOn SwitchOnExecutionCounter := SwitchOnExecutionCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE SwitchedOff SwitchOffExecutionCounter := SwitchOffExecutionCounter + ULINT#1; END_METHOD END_CLASS How to visualize AxoMomentaryTask On the UI side there are several possibilities how to visualize the AxoMomentaryTask. You use the AxoMomentaryTaskView and set its Component according the placement of the instance of the AxoMomentaryTask. Based on the value of Disable the control element could be controllable: <AxoMomentaryTaskView Component=\"@Entry.Plc.AxoMomentaryTaskDocu._myMomentaryTask\" Disable=\"false\" /> or display only: <AxoMomentaryTaskView Component=\"@Entry.Plc.AxoMomentaryTaskDocu._myMomentaryTask\" Disable=\"true\" /> The next possibility is to use the RenderableContentControl and set its Context according the placement of the instance of the AxoMomentaryTask. Again as before the element could be controlable when the value of the Presentation is Command: <RenderableContentControl Context=\"@Entry.Plc.AxoMomentaryTaskDocu._myMomentaryTask\" Presentation=\"Command\" /> or display only when the value of the Presentation is Status <RenderableContentControl Context=\"@Entry.Plc.AxoMomentaryTaskDocu._myMomentaryTask\" Presentation=\"Status\" /> The displayed result should looks like:"
  },
  "articles/core/AXOOBJECT.html": {
    "href": "articles/core/AXOOBJECT.html",
    "title": "AxoObject | System.Dynamic.ExpandoObject",
    "keywords": "AxoObject AxoObject is the base class for any other classes of AXOpen.Core. It provides access to the parent AxoObject and the AxoContext in which it was initialized. classDiagram class Object{ +Initialize(IAxoContext context) +Initialize(IAxoObject parent) } AxoObject initialization within a AxoContext CLASS PUBLIC MyContext EXTENDS AXOpen.Core.AxoContext VAR _myObject : AxoObject; END_VAR METHOD PROTECTED OVERRIDE Main _myObject.Initialize(THIS); END_METHOD END_CLASS AxoObject initialization within another AxoObject CLASS PUBLIC MyParentObject EXTENDS AxoContext VAR _myChildObject : AxoObject; END_VAR METHOD PROTECTED OVERRIDE Main _myChildObject.Initialize(THIS); END_METHOD END_CLASS"
  },
  "articles/core/AXOREMOTETASK.html": {
    "href": "articles/core/AXOREMOTETASK.html",
    "title": "AxoRemoteTask | System.Dynamic.ExpandoObject",
    "keywords": "AxoRemoteTask AxoRemoteTask provides task execution, where the execution of the task is deferred to .NET environment. AxoRemoteTask derives from AxoTask. AxoRemoteTask needs to be initialized to set the proper AxoContext. Important The deferred execution in .NET environment is not hard-real time nor deterministic. You would typically use the AxoRemoteTask when it would be hard to achieve a goal in the PLC, but you can delegate the access to the non-hard-real and nondeterministic environment. Examples of such use would be database access, complex calculations, and email sending. AxoTask initialization within a AxoContext _remoteTask.Initialize(THIS); // THIS = IAxoContext There are two key methods for managing the AxoRemoteTask: Invoke() fires the execution of the AxoRemoteTask (can be called fire&forget or cyclically) Execute() method must be called cyclically. In contrast to AxoTask the method does not execute any logic. You will need to call the Execute method cyclically which will deffer the logic execution in .NET environment. There are the following differences in behavior of DoneWhen and ThrowWhen methods: DoneWhen(Done_Condition) - Unlike AxoTask Done condition is handled internally. It does not have an effect. ThrowWhen(Error_Condition) - Unlike AxoTask Exception emission is handled internally. It does not have an effect. For termination of the execution of the AxoRemoteTask there are the following methods: Abort() - terminates the execution of the AxoRemoteTask and enters the Ready state if the AxoRemoteTask is in the Busy state; otherwise does nothing. To reset the AxoRemoteTask from any state at any moment, there is the following method: Restore() acts as a reset of the AxoRemoteTask (sets the state into Ready from any state of the AxoRemoteTask). The AxoRemoteTask executes upon the Invoke method call. Invoke fires the execution of Execute logic upon the first call, and Invoke does not need cyclical calling. _remoteTask.Invoke('hello'); Invoke() method returns IAxoTaskState with the following members: IsBusy indicates the execution started and is running. IsDone indicates the execution completed with success. HasError indicates the execution terminated with a failure. IsAborted indicates that the execution of the AxoRemoteTask has been aborted. It should continue by calling the method Resume(). Task initialization in .NET Entry.Plc.AxoRemoteTasks._remoteTask.Initialize(() => Console.WriteLine($\"Remote task executed PLC sent this string: '{Entry.Plc.AxoRemoteTasks._remoteTask.Message.GetAsync().Result}'\")); In this example, when the PLC invokes this task it will write a message into console. You can use arbitrary code in place of the labmda expression. Executing from PLC Invoking the AxoRemoteTask and waiting for its completion at the same place. IF(_remoteTask.Invoke('hello').IsDone()) THEN _doneCounter := _doneCounter + 1; END_IF; Invoking the AxoRemoteTask and waiting for its completion at the different places. // Fire & Forget _remoteTask.Invoke('hello'); // Wait for done somwhere else IF(_remoteTask.IsDone()) THEN _doneCounter := _doneCounter + 1; END_IF; Checking if the AxoRemoteTask is executing. IF(_remoteTask.IsBusy()) THEN ;// Do something after task started END_IF; Check for the AxoRemoteTask's error state. IF(_remoteTask.HasError()) THEN ;// Do something when an exception occurs on remote task. END_IF;"
  },
  "articles/core/AXOSEQUENCER.html": {
    "href": "articles/core/AXOSEQUENCER.html",
    "title": "AxoSequencer | System.Dynamic.ExpandoObject",
    "keywords": "AxoSequencer AxoSequencer is an AxoCordinator class provides triggering the AxoStep-s inside the sequence in the order they are written. AxoSequencer extends from AxoTask so it also has to be initialized by calling its Initialize() method and started using its Invoke() method. AxoSequencer contains following methods: Open(): this method must be called cyclically before any logic. All the logic of the sequencers must be placed inside the if condition. It provides some configuration mechanism that ensures that the steps are going to be executed in the order, they are written. During the very first call of the sequence, no step is executed as the AxoSequencer is in the configuring state. From the second context cycle after the AxoSequencer has been invoked the AxoSequencer change its state to running and starts the execution from the first step upto the last one. When AxoSequencer is in running state, order of the step cannot be changed. MoveNext(): Terminates the currently executed step and moves the AxoSequencer's pointer to the next step in order of execution. RequestStep(): Terminates the currently executed step and set the AxoSequencer's pointer to the order of the RequestedStep. When the order of the RequestedStep is higher than the order of the currently finished step (the requested step is \"after\" the current one) the requested step is started in the same context cycle. When the order of the RequestedStep is lower than the order of the currently finished step (the requested step is \"before\" the current one) the requested step is started in the next context cycle. CompleteSequence(): Terminates the currently executed step, completes (finishes) the execution of this AxoSequencer and set the coordination state to Idle. If the SequenceMode of the AxoSequencer is set to Cyclic, following Open() method call in the next context cycle switch it again into the configuring state, reasign the order of the individual steps (even if the orders have been changed) and subsequently set AxoSequencer back into the running state. If the SequenceMode of the AxoSequencer is set to RunOnce, terminates also execution of the AxoSequencer itself. `GetCoordinatorState()': Returns the current state of the AxoSequencer. Idle Configuring: assigning the orders to the steps, no step is executed. Running: orders to the steps are already assigned, step is executed. SetSteppingMode(): Sets the stepping mode of the AxoSequencer. Following values are possible. None: StepByStep: if this mode is choosen, each step needs to be started by the invocation of the StepIn commmand. Continous: if this mode is choosen (default), each step is started automaticcaly after the previous one has been completed. GetSteppingMode(): Gets the current stepping mode of the AxoSequencer. SetSequenceMode(): Sets the sequence mode of the AxoSequencer. Following values are possible. None: RunOnce: if this mode is choosen, after calling the method CompleteSequence() the execution of the sequence is terminated. Cyclic: if this mode is choosen (default), after calling the method CompleteSequence() the execution of the sequence is \"reordered\" and started from beginning. GetSequenceMode(): Gets the current sequence mode of the AxoSequencer. GetNumberOfConfiguredSteps(): Gets the number of the configured steps in the sequence. Example of using AxoSequencer Example of the declaration of the AxoSequencer and AxoStep CLASS AxoSequencerDocuExample EXTENDS AXOpen.Core.AxoContext VAR PUBLIC _mySequencer : AXOpen.Core.AxoSequencer; _step_1 : AxoStep; _step_2 : AxoStep; _step_3 : AxoStep; _myCounter : ULINT; END_VAR END_CLASS Initialization Initialization of the context needs to be called first. It does not need to be called cyclically, just once. METHOD PUBLIC Initialize _mySequencer.Initialize(THIS); _step_1.Initialize(THIS); _step_2.Initialize(THIS); _step_3.Initialize(THIS); END_METHOD Open The Open() method must be called cyclically before any logic. All the logic of the sequencers must be placed inside the if condition, as follows. THIS.Initialize(); IF _mySequencer.Open() THEN //All sequence logic needs to be placed inside the condition _myCounter := _myCounter + ULINT#1; IF _step_1.Execute(_mySequencer) THEN IF (_myCounter > ULINT#50) THEN _mySequencer.MoveNext(); END_IF; END_IF; IF _step_2.Execute(_mySequencer) THEN IF (_myCounter > ULINT#100) THEN _mySequencer.MoveNext(); END_IF; END_IF; IF _step_3.Execute(_mySequencer) THEN IF (_myCounter > ULINT#150) THEN _myCounter := ULINT#0; _mySequencer.CompleteSequence(); END_IF; END_IF; END_IF; Step Example of the most simple use of the Execute() method of the AxoStep class, only with the AxoCoordinator defined. IF _step_1.Execute(_mySequencer) THEN _myCounter := _myCounter + ULINT#1; // do something IF (_myCounter MOD ULINT#5) = ULINT#0 THEN // continue to the next step of the sequence _mySequencer.MoveNext(); END_IF; END_IF; Example of use of the Execute() method of the AxoStep class with the Enable condition. This step is going to be executed just in the first run of the sequence, as during the second one, the Enable parameter will have the value of FALSE. IF _step_2.Execute(coord := _mySequencer, Enable := _myCounter <= ULINT#20) THEN _myCounter := _myCounter + ULINT#1; IF _myCounter = ULINT#20 THEN // Jumping to step 1. As it is jumping backwards, the execution of step 1 // is going to be started in the next context cycle. _mySequencer.RequestStep(_step_1); END_IF; END_IF; Example of use of the Execute() method of the AxoStep class with all three parameters defined. IF _step_3.Execute(coord := _mySequencer, Enable := TRUE, Description := 'This is a description of the step 3' ) THEN _myCounter := _myCounter + ULINT#1; IF (_myCounter MOD ULINT#7) = ULINT#0 THEN // Finalize the sequence and initiate the execution from the first step. _mySequencer.CompleteSequence(); END_IF; END_IF;"
  },
  "articles/core/AXOSEQUENCERCONTAINER.html": {
    "href": "articles/core/AXOSEQUENCERCONTAINER.html",
    "title": "AxoSequencerContainer | System.Dynamic.ExpandoObject",
    "keywords": "AxoSequencerContainer AxoSequencerContainer is an AxoCordinator class that extends from AxoSequencer. The main difference is that this class is abstract so it is not possible to instantiate it directly. The user-defined class that extends from AxoSequencerContainer needs to be created and then instantiated. In the extended class MAIN() method needs to be created and all sequencer logic needs to be placed there. Then the sequencer is called via Run(IAxoObject) or Run(IAxoContext) methods, that ensure initialization of the sequencer with AxoObject or with AxoContext. Moreover the Run() method also ensures calling the Open() method, so it is not neccessary to call it explicitelly in comparison with AxoSequencer. Example of using AxoSequencerContainer Example of the declaration of the user-defined class that extends from AxoSequencerContainer CLASS AxoSequencerContainerDocuExample EXTENDS AXOpen.Core.AxoSequencerContainer VAR PUBLIC _step_1 : AxoStep; _step_2 : AxoStep; _step_3 : AxoStep; _myCounter : ULINT; END_VAR END_CLASS Example of implementation MAIN method inside the user-defined class that extends from AxoSequencerContainer All the custom logic of the sequencer needs to be placed here. METHOD PROTECTED OVERRIDE MAIN _step_1.Initialize(THIS); _step_2.Initialize(THIS); _step_3.Initialize(THIS); _myCounter := _myCounter + ULINT#1; IF(_step_1.Execute(THIS)) THEN IF(_myCounter >= ULINT#100 ) THEN _myCounter := ULINT#0; THIS.MoveNext(); END_IF; END_IF; IF(_step_2.Execute(THIS)) THEN IF(_myCounter >= ULINT#100) THEN _myCounter := ULINT#0; THIS.MoveNext(); END_IF; END_IF; IF(_step_3.Execute(THIS)) THEN IF(_myCounter >= ULINT#100) THEN _myCounter := ULINT#0; _step_3.ThrowWhen(TRUE); THIS.CompleteSequence(); END_IF; END_IF; END_METHOD Example of declaration of the instance of the user-defined class that extends from AxoSequencerContainer VAR PUBLIC _mySequencerContainer : AxoSequencerContainerDocuExample; END_VAR Example of calling of the instance of the user-defined class that extends from AxoSequencerContainer _mySequencerContainer.Run(THIS);"
  },
  "articles/core/AXOSTEP.html": {
    "href": "articles/core/AXOSTEP.html",
    "title": "AxoStep | System.Dynamic.ExpandoObject",
    "keywords": "AxoStep AxoStep is an extension class of the AxoTask and provides the basics for the coordinated controlled execution of the task in the desired order based on the coordination mechanism used. AxoStep contains the Execute() method so as its base class overloaded and extended by following parameters: coord (mandatory): instance of the coordination controlling the execution of the AxoStep. Enable (optional): if this value is FALSE, AxoStep body is not executed and the current order of the execution is incremented. Description (optional): AxoStep description text describing the action the AxoStep is providing. AxoStep class contains following public members: Order: Order of the AxoStep in the coordination. This value can be set by calling the method SetStepOrder() and read by the method GetStepOrder(). StepDescription: AxoStep description text describing the action the AxoStep is providing. This value can be set by calling the Execute() method with Description parameter. IsActive: if TRUE, the AxoStep is currently executing, or is in the order of the execution, otherwise FALSE. This value can be set by calling the method SetIsActive() and read by the method GetIsActive(). IsEnabled: if FALSE, AxoStep body is not executed and the current order of the execution is incremented. This value can be set by calling the method SetIsEnabled() or calling the Execute() method with Enable parameter and read by the method GetIsEnabled()."
  },
  "articles/core/AXOTASK.html": {
    "href": "articles/core/AXOTASK.html",
    "title": "AxoTask | System.Dynamic.ExpandoObject",
    "keywords": "AxoTask AxoTask provides basic task execution. AxoTask needs to be initialized to set the proper AxoContext. AxoTask initialization within a AxoContext CLASS AxoTaskDocuExample EXTENDS AXOpen.Core.AxoContext VAR PUBLIC {#ix-set:AttributeName = \"<#Task name#>\"} _myTask : AxoTask; _myCounter : ULINT; END_VAR METHOD PUBLIC Initialize // Initialization of the context needs to be called first // It does not need to be called cyclically, just once _myTask.Initialize(THIS); END_METHOD END_CLASS There are two key methods for managing the AxoTask: Invoke() fires the execution of the AxoTask (can be called fire&forget or cyclically) Execute() method must be called cyclically. The method returns TRUE when the AxoTask is required to run until enters Done state or terminates in error. For termination of the execution of the AxoTask there are following methods: DoneWhen(Done_Condition) - terminates the execution of the AxoTask and enters the Done state when the Done_Condition is TRUE. ThrowWhen(Error_Condition) - terminates the execution of the AxoTask and enters the Error state when the Error_Condition is TRUE. Abort() - terminates the execution of the AxoTask and enters the Ready state if the AxoTask is in the Busy state, otherwise does nothing. To reset the AxoTask from any state in any moment there is following method: Restore() acts as reset of the AxoTask (sets the state into Ready state from any state of the AxoTask). Moreover, there are seven more \"event-like\" methods that are called when a specific event occurs (see the chart below). flowchart TD classDef states fill:#80FF00,stroke:#0080FF,stroke-width:4px,color:#7F00FF,font-size:15px,font-weight:bold classDef actions fill:#ff8000,stroke:#0080ff,stroke-width:4px,color:#7F00FF,font-size:15px,font-weight:bold classDef events fill:#80FF00,stroke:#0080ff,stroke-width:4px,color:#7F00FF,font-size:15px,font-weight:bold s1((Ready)):::states s2((Kicking)):::states s3((Busy)):::states s4((Done)):::states s5((Error)):::states s6((Aborted)):::states a1(\"Invoke()#128258;\"):::actions a2(\"Execute()#128260;\"):::actions a3(\"DoneWhen(TRUE)#128258;\"):::actions a4(\"ThrowWhen(TRUE)#128258;\"):::actions a5(\"NOT Invoke() call for at<br>least two Context cycles#128260;\"):::actions a6(\"Restore()#128258;\"):::actions a7(\"Abort()#128258;\"):::actions a8(\"Resume()#128258;\"):::actions e1{{\"OnStart()#128258;\"}}:::events e2{{\"OnError()#128258;\"}}:::events e3{{\"WhileError()#128260;\"}}:::events e4{{\"OnDone()#128258;\"}}:::events e5{{\"OnAbort()#128258;\"}}:::events e6{{\"OnRestore()#128258;\"}}:::events subgraph legend[\" \"] direction LR s((State)):::states ac(\"Action #128260;:called<br>cyclically\"):::actions as(\"Action #128258;:single<br>or cyclical call \"):::actions ec{{\"Event #128260;:called<br>cyclically\"}}:::events es{{\"Event #128258;:triggered<br>once \"}}:::events end subgraph chart[\" \"] direction TB s1 s1-->a1 a1-->s2 s2-->a2 s3-->a3 s3-->a7 a7-->e5 a7-->s6 s6-->a8 a8-->s3 a3-->s4 s4---->a5 a5-->a1 a2--->s3 s3--->a4 a4-->s5 s5-->a6 a6-->e6 a2-->e1 a4-->e2 a4-->e3 a3-->e4 a6-->s1 end Example of using AxoTask: CLASS AxoTaskDocuExample EXTENDS AXOpen.Core.AxoContext VAR PUBLIC {#ix-set:AttributeName = \"<#Task name#>\"} _myTask : AxoTask; _myCounter : ULINT; END_VAR METHOD PUBLIC Initialize // Initialization of the context needs to be called first // It does not need to be called cyclically, just once _myTask.Initialize(THIS); END_METHOD METHOD PROTECTED OVERRIDE Main _myTask.Initialize(THIS); // Cyclicall call of the Execute IF _myTask.Execute() THEN _myCounter := _myCounter + ULINT#1; _myTask.DoneWhen(_myCounter = ULINT#100); END_IF; IF _myTask.IsDone() THEN _myCounter := ULINT#0; END_IF; END_METHOD END_CLASS The AxoTask executes upon the Invoke method call. Invoke fires the execution of Execute logic upon the first call, and it does not need cyclical calling. _myTask.Invoke(); Invoke() method returns IAxoTaskState with the following members: IsBusy indicates the execution started and is running. IsDone indicates the execution completed with success. HasError indicates the execution terminated with a failure. IsAborted indicates that the execution of the AxoTask has been aborted. It should continue by calling the method Resume(). Examples of using: Invoking the AxoTask and waiting for its completion at the same place. IF _myTask.Invoke().IsDone() THEN ; //Do something END_IF; Invoking the AxoTask and waiting for its completion at the different places. _myTask.Invoke(); IF _myTask.IsDone() THEN ; //Do something END_IF; Checking if the AxoTask is executing. IF _myTask.Invoke().IsBusy() THEN ; //Do something END_IF; Check for the AxoTask's error state. IF _myTask.Invoke().HasError() THEN ; //Do something END_IF; The AxoTask can be started only from the Ready state by calling the Invoke() method in the same Context cycle as the Execute() method is called, regardless the order of the methods calls. After AxoTask completion, the state of the AxoTask will remain in Done, unless: 1.) AxoTask's Restore method is called (AxoTask changes it's state to Ready state). 2.) Invoke method is not called for two or more consecutive cycles of its context (that usually means the same as PLC cycle); successive call of Invoke will switch the task into the Ready state and immediately into the Kicking state. The AxoTask may finish also in an Error state. In that case, the only possibility to get out of Error state is by calling the Restore() method. To implement any of the already mentioned \"event-like\" methods the new class that extends from the AxoTask needs to be created. The required method with PROTECTED OVERRIDE access modifier needs to be created as well, and the custom logic needs to be placed in. These methods are: OnAbort() - executes once when the task is aborted. OnResume() - executes once when the task is resumed. OnDone() - executes once when the task reaches the Done state. OnError() - executes once when the task reaches the Error state. OnRestore() - executes once when the task is restored. OnStart() - executes once when the task starts (at the moment of transition from the Kicking state into the Busy state). WhileError() - executes repeatedly while the task is in Error state (and Execute() method is called). Example of implementing \"event-like\" methods: CLASS MyTaskExample EXTENDS AXOpen.Core.AxoTask VAR OnAbortCounter : ULINT; OnResumeCounter : ULINT; OnDoneCounter : ULINT; OnErrorCounter : ULINT; OnRestoreCounter : ULINT; OnStartCounter : ULINT; WhileErrorCounter : ULINT; END_VAR METHOD PROTECTED OVERRIDE OnAbort OnAbortCounter := OnAbortCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnResume OnResumeCounter := OnResumeCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnDone OnDoneCounter := OnDoneCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnError OnErrorCounter := OnErrorCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnRestore OnRestoreCounter := OnRestoreCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnStart OnStartCounter := OnStartCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE WhileError WhileErrorCounter := WhileErrorCounter + ULINT#1; END_METHOD END_CLASS How to visualize AxoTask On the UI side there are several possibilities how to visualize the AxoTask. You use the AxoTaskView and set its Component according the placement of the instance of the AxoTask. Based on the value of Disable the control element could be controllable: <AxoTaskView Component=\"@Entry.Plc.AxoTaskDocu._myTask\" Disable=\"false\" /> or display only: <AxoTaskView Component=\"@Entry.Plc.AxoTaskDocu._myTask\" Disable=\"true\" /> The next possibility is to use the RenderableContentControl and set its Context according the placement of the instance of the AxoTask. Again as before the element could be controlable when the value of the Presentation is Command: <RenderableContentControl Context=\"@Entry.Plc.AxoTaskDocu._myTask\" Presentation=\"Command\" /> or display only when the value of the Presentation is Status <RenderableContentControl Context=\"@Entry.Plc.AxoTaskDocu._myTask\" Presentation=\"Status\"/> The displayed result should looks like:"
  },
  "articles/core/AXOTOGGLETASK.html": {
    "href": "articles/core/AXOTOGGLETASK.html",
    "title": "AxoToggleTask | System.Dynamic.ExpandoObject",
    "keywords": "AxoToggleTask AxoToggleTask provides basic switching on and off functions. AxoToggleTask needs to be initialized to set the proper AxoContext. AxoToggleTask initialization within a AxoContext CLASS AxoToggleTaskDocuExample EXTENDS AXOpen.Core.AxoContext VAR PUBLIC {#ix-set:AttributeName = \"<#Toggle task example#>\"} {#ix-set:AttributeStateOnDesc = \"<#SwitchedOn#>\"} {#ix-set:AttributeStateOffDesc = \"<#SwitchedOff#>\"} _myToggleTask : AxoToggleTask; _myCounter : ULINT; END_VAR METHOD PUBLIC Initialize // Initialization of the context needs to be called first // It does not need to be called cyclically, just once _myToggleTask.Initialize(THIS); END_METHOD END_CLASS There are three key methods for managing the AxoToggleTask: SwitchOn() -ones is called and the AxoToggleTask is not Disabled, changes the state of the AxoToggleTask to TRUE if its previous state was FALSE. (can be called fire&forget or cyclically). The method returns TRUE if the change of the state was performed, otherwise FALSE. SwitchOff() -ones is called and the AxoToggleTask is not Disabled, changes the state of the AxoToggleTask to FALSE if its previous state was TRUE. (can be called fire&forget or cyclically). The method returns TRUE if the change of the state was performed, otherwise FALSE. Toggle() -ones is called and the AxoToggleTask is not Disabled, changes the state of the AxoToggleTask to TRUE if its previous state was FALSE and vice-versa . (can be called fire&forget or cyclically). The method returns TRUE if the change of the state was performed, otherwise FALSE. The methods SwitchOn() and SwitchOff() are designed to be used inside automatic logic, where change to exact value has to be performed, while Toggle() is designed to be used mostly in connection with manual control. Example of using SwitchOn() method with its return value. IF _myToggleTask.SwitchOn() THEN ; // do something on rising edge END_IF; Example of using SwitchOff() method with its return value. IF _myToggleTask.SwitchOff()THEN ; // do something on falling edge END_IF; Example of using Toggle() method with its return value. IF _myToggleTask.Toggle()THEN ; // do something on state change END_IF; To check the state of the task there are two methods: IsSwitchOn() - returns TRUE if the state of the task is TRUE. IsSwitchOff() - returns TRUE if the state of the task is FALSE. Example of using IsSwitchOn() method: IF _myToggleTask.IsSwitchedOn() THEN ; // do something END_IF; Example of using IsSwitchOff() method: IF _myToggleTask.IsSwitchedOff() THEN ; // do something END_IF; Moreover, there are five more \"event-like\" methods that are called when a specific event occurs (see the chart below). To implement any of the already mentioned \"event-like\" methods the new class that extends from the AxoToggleTask needs to be created. The required method with PROTECTED OVERRIDE access modifier needs to be created as well, and the custom logic needs to be placed in. These methods are: OnSwitchedOn() - executes once when the task changes its state from FALSE to TRUE. OnSwitchedOff() - executes once when the task changes its state from TRUE to FALSE. OnStateChanged() - executes once when the task changes its state. SwitchedOn() - executes repeatedly while the task is in TRUE state. SwitchedOff() - executes repeatedly while the task is in FALSE state. Example of implementing \"event-like\" methods: CLASS MyToogleTaskExample Extends AxoToggleTask VAR OnSwitchedOnCounter : ULINT; OnSwitchedOffCounter : ULINT; OnStateChangedCounter : ULINT; SwitchOnExecutionCounter : ULINT; SwitchOffExecutionCounter : ULINT; END_VAR METHOD PROTECTED OVERRIDE OnSwitchedOn OnSwitchedOnCounter := OnSwitchedOnCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnSwitchedOff OnSwitchedOffCounter := OnSwitchedOffCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnStateChanged OnStateChangedCounter := OnStateChangedCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE SwitchedOn SwitchOnExecutionCounter := SwitchOnExecutionCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE SwitchedOff SwitchOffExecutionCounter := SwitchOffExecutionCounter + ULINT#1; END_METHOD END_CLASS How to visualize AxoToggleTask On the UI side there are several possibilities how to visualize the AxoToggleTask. You use the AxoToggleTaskView and set its Component according the placement of the instance of the AxoToggleTask. Based on the value of Disable the control element could be controllable: <AxoToggleTaskView Component=\"@Entry.Plc.AxoToggleTaskDocu._myToggleTask\" Disable=\"false\" /> or display only: <AxoToggleTaskView Component=\"@Entry.Plc.AxoToggleTaskDocu._myToggleTask\" Disable=\"true\" /> The next possibility is to use the RenderableContentControl and set its Context according the placement of the instance of the AxoToggleTask. Again as before the element could be controlable when the value of the Presentation is Command: <RenderableContentControl Context=\"@Entry.Plc.AxoToggleTaskDocu._myToggleTask\" Presentation=\"Command\" /> or display only when the value of the Presentation is Status <RenderableContentControl Context=\"@Entry.Plc.AxoToggleTaskDocu._myToggleTask\" Presentation=\"Status\" /> The displayed result should looks like:"
  },
  "articles/core/README.html": {
    "href": "articles/core/README.html",
    "title": "AXOpen.Core | System.Dynamic.ExpandoObject",
    "keywords": "AXOpen.Core AXOpen.Core provides basic blocks for building AXOpen applications. Basic concepts AxoContext AxoContext encapsulates entire application or application units. Any solution may contain one or more contexts, however the each should be considered to be an isolated island and any direct inter-context access to members must be avoided. Note Each AxoContext must belong to a single PLC task.Multiple AxoContexts can be however running on the same task. classDiagram class Context{ +Main()* +Run() } In its basic implementation AxoContext has relatively simple interface. Main is the method where we place all calls of our sub-routines. In other words the Run is the root of the call tree of our program. Run method runs the AxoContext. It must be called cyclically within a program unit that is attached to a cyclic task. Why do we need AxoContext AxoContext provides counters, object identification and other information about the execution of the program. These information is then used by the objects contained at different levels of the AxoContext. How AxoContext works When you call Run method on an instance of a AxoContext, it will ensure opening AxoContext, running Main method (root of all your program calls) and AxoContext closing. flowchart LR classDef run fill:#80FF00,stroke:#0080FF,stroke-width:4px,color:#7F00FF,font-size:15px,font-weight:bold classDef main fill:#ff8000,stroke:#0080ff,stroke-width:4px,color:#7F00FF,font-size:15px,font-weight:bold id1(Open):::run-->id2(#Main*):::main-->id3(Close):::run-->id1 How to use AxoContext Base class for the AxoContext is AXOpen.Core.AxoContext. The entry point of call execution of the AxoContext is Main method. Notice that the AxoContext class is abstract and cannot be instantiated if not extended. Main method must be overridden in derived class notice the use of override keyword and also that the method is protected which means the it is visible only from within the AxoContext and derived classes. How to extend AxoContext class CLASS PUBLIC AxoContextExample EXTENDS AXOpen.Core.AxoContext METHOD PROTECTED OVERRIDE Main // Here goes all your logic for given AxoContext. ; END_METHOD END_CLASS Cyclical call of the AxoContext logic (Main method) is ensured when AxoContext Run method is called. Run method is public therefore accessible and visible to any part of the program that whishes to call it. How to start AxoContext's execution PROGRAM ProgramExample VAR MyContext : AxoContextExample; END_VAR MyContext.Run(); END_PROGRAM AxoObject AxoObject is the base class for any other classes of AXOpen.Core. It provides access to the parent AxoObject and the AxoContext in which it was initialized. classDiagram class Object{ +Initialize(IAxoContext context) +Initialize(IAxoObject parent) } AxoObject initialization within a AxoContext CLASS PUBLIC MyContext EXTENDS AXOpen.Core.AxoContext VAR _myObject : AxoObject; END_VAR METHOD PROTECTED OVERRIDE Main _myObject.Initialize(THIS); END_METHOD END_CLASS AxoObject initialization within another AxoObject CLASS PUBLIC MyParentObject EXTENDS AxoContext VAR _myChildObject : AxoObject; END_VAR METHOD PROTECTED OVERRIDE Main _myChildObject.Initialize(THIS); END_METHOD END_CLASS AxoTask AxoTask provides basic task execution. AxoTask needs to be initialized to set the proper AxoContext. AxoTask initialization within a AxoContext CLASS AxoTaskDocuExample EXTENDS AXOpen.Core.AxoContext VAR PUBLIC {#ix-set:AttributeName = \"<#Task name#>\"} _myTask : AxoTask; _myCounter : ULINT; END_VAR METHOD PUBLIC Initialize // Initialization of the context needs to be called first // It does not need to be called cyclically, just once _myTask.Initialize(THIS); END_METHOD END_CLASS There are two key methods for managing the AxoTask: Invoke() fires the execution of the AxoTask (can be called fire&forget or cyclically) Execute() method must be called cyclically. The method returns TRUE when the AxoTask is required to run until enters Done state or terminates in error. For termination of the execution of the AxoTask there are following methods: DoneWhen(Done_Condition) - terminates the execution of the AxoTask and enters the Done state when the Done_Condition is TRUE. ThrowWhen(Error_Condition) - terminates the execution of the AxoTask and enters the Error state when the Error_Condition is TRUE. Abort() - terminates the execution of the AxoTask and enters the Ready state if the AxoTask is in the Busy state, otherwise does nothing. To reset the AxoTask from any state in any moment there is following method: Restore() acts as reset of the AxoTask (sets the state into Ready state from any state of the AxoTask). Moreover, there are seven more \"event-like\" methods that are called when a specific event occurs (see the chart below). flowchart TD classDef states fill:#80FF00,stroke:#0080FF,stroke-width:4px,color:#7F00FF,font-size:15px,font-weight:bold classDef actions fill:#ff8000,stroke:#0080ff,stroke-width:4px,color:#7F00FF,font-size:15px,font-weight:bold classDef events fill:#80FF00,stroke:#0080ff,stroke-width:4px,color:#7F00FF,font-size:15px,font-weight:bold s1((Ready)):::states s2((Kicking)):::states s3((Busy)):::states s4((Done)):::states s5((Error)):::states s6((Aborted)):::states a1(\"Invoke()#128258;\"):::actions a2(\"Execute()#128260;\"):::actions a3(\"DoneWhen(TRUE)#128258;\"):::actions a4(\"ThrowWhen(TRUE)#128258;\"):::actions a5(\"NOT Invoke() call for at<br>least two Context cycles#128260;\"):::actions a6(\"Restore()#128258;\"):::actions a7(\"Abort()#128258;\"):::actions a8(\"Resume()#128258;\"):::actions e1{{\"OnStart()#128258;\"}}:::events e2{{\"OnError()#128258;\"}}:::events e3{{\"WhileError()#128260;\"}}:::events e4{{\"OnDone()#128258;\"}}:::events e5{{\"OnAbort()#128258;\"}}:::events e6{{\"OnRestore()#128258;\"}}:::events subgraph legend[\" \"] direction LR s((State)):::states ac(\"Action #128260;:called<br>cyclically\"):::actions as(\"Action #128258;:single<br>or cyclical call \"):::actions ec{{\"Event #128260;:called<br>cyclically\"}}:::events es{{\"Event #128258;:triggered<br>once \"}}:::events end subgraph chart[\" \"] direction TB s1 s1-->a1 a1-->s2 s2-->a2 s3-->a3 s3-->a7 a7-->e5 a7-->s6 s6-->a8 a8-->s3 a3-->s4 s4---->a5 a5-->a1 a2--->s3 s3--->a4 a4-->s5 s5-->a6 a6-->e6 a2-->e1 a4-->e2 a4-->e3 a3-->e4 a6-->s1 end Example of using AxoTask: CLASS AxoTaskDocuExample EXTENDS AXOpen.Core.AxoContext VAR PUBLIC {#ix-set:AttributeName = \"<#Task name#>\"} _myTask : AxoTask; _myCounter : ULINT; END_VAR METHOD PUBLIC Initialize // Initialization of the context needs to be called first // It does not need to be called cyclically, just once _myTask.Initialize(THIS); END_METHOD METHOD PROTECTED OVERRIDE Main _myTask.Initialize(THIS); // Cyclicall call of the Execute IF _myTask.Execute() THEN _myCounter := _myCounter + ULINT#1; _myTask.DoneWhen(_myCounter = ULINT#100); END_IF; IF _myTask.IsDone() THEN _myCounter := ULINT#0; END_IF; END_METHOD END_CLASS The AxoTask executes upon the Invoke method call. Invoke fires the execution of Execute logic upon the first call, and it does not need cyclical calling. _myTask.Invoke(); Invoke() method returns IAxoTaskState with the following members: IsBusy indicates the execution started and is running. IsDone indicates the execution completed with success. HasError indicates the execution terminated with a failure. IsAborted indicates that the execution of the AxoTask has been aborted. It should continue by calling the method Resume(). Examples of using: Invoking the AxoTask and waiting for its completion at the same place. IF _myTask.Invoke().IsDone() THEN ; //Do something END_IF; Invoking the AxoTask and waiting for its completion at the different places. _myTask.Invoke(); IF _myTask.IsDone() THEN ; //Do something END_IF; Checking if the AxoTask is executing. IF _myTask.Invoke().IsBusy() THEN ; //Do something END_IF; Check for the AxoTask's error state. IF _myTask.Invoke().HasError() THEN ; //Do something END_IF; The AxoTask can be started only from the Ready state by calling the Invoke() method in the same Context cycle as the Execute() method is called, regardless the order of the methods calls. After AxoTask completion, the state of the AxoTask will remain in Done, unless: 1.) AxoTask's Restore method is called (AxoTask changes it's state to Ready state). 2.) Invoke method is not called for two or more consecutive cycles of its context (that usually means the same as PLC cycle); successive call of Invoke will switch the task into the Ready state and immediately into the Kicking state. The AxoTask may finish also in an Error state. In that case, the only possibility to get out of Error state is by calling the Restore() method. To implement any of the already mentioned \"event-like\" methods the new class that extends from the AxoTask needs to be created. The required method with PROTECTED OVERRIDE access modifier needs to be created as well, and the custom logic needs to be placed in. These methods are: OnAbort() - executes once when the task is aborted. OnResume() - executes once when the task is resumed. OnDone() - executes once when the task reaches the Done state. OnError() - executes once when the task reaches the Error state. OnRestore() - executes once when the task is restored. OnStart() - executes once when the task starts (at the moment of transition from the Kicking state into the Busy state). WhileError() - executes repeatedly while the task is in Error state (and Execute() method is called). Example of implementing \"event-like\" methods: CLASS MyTaskExample EXTENDS AXOpen.Core.AxoTask VAR OnAbortCounter : ULINT; OnResumeCounter : ULINT; OnDoneCounter : ULINT; OnErrorCounter : ULINT; OnRestoreCounter : ULINT; OnStartCounter : ULINT; WhileErrorCounter : ULINT; END_VAR METHOD PROTECTED OVERRIDE OnAbort OnAbortCounter := OnAbortCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnResume OnResumeCounter := OnResumeCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnDone OnDoneCounter := OnDoneCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnError OnErrorCounter := OnErrorCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnRestore OnRestoreCounter := OnRestoreCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnStart OnStartCounter := OnStartCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE WhileError WhileErrorCounter := WhileErrorCounter + ULINT#1; END_METHOD END_CLASS How to visualize AxoTask On the UI side there are several possibilities how to visualize the AxoTask. You use the AxoTaskView and set its Component according the placement of the instance of the AxoTask. Based on the value of Disable the control element could be controllable: <AxoTaskView Component=\"@Entry.Plc.AxoTaskDocu._myTask\" Disable=\"false\" /> or display only: <AxoTaskView Component=\"@Entry.Plc.AxoTaskDocu._myTask\" Disable=\"true\" /> The next possibility is to use the RenderableContentControl and set its Context according the placement of the instance of the AxoTask. Again as before the element could be controlable when the value of the Presentation is Command: <RenderableContentControl Context=\"@Entry.Plc.AxoTaskDocu._myTask\" Presentation=\"Command\" /> or display only when the value of the Presentation is Status <RenderableContentControl Context=\"@Entry.Plc.AxoTaskDocu._myTask\" Presentation=\"Status\"/> The displayed result should looks like: AxoToggleTask AxoToggleTask provides basic switching on and off functions. AxoToggleTask needs to be initialized to set the proper AxoContext. AxoToggleTask initialization within a AxoContext CLASS AxoToggleTaskDocuExample EXTENDS AXOpen.Core.AxoContext VAR PUBLIC {#ix-set:AttributeName = \"<#Toggle task example#>\"} {#ix-set:AttributeStateOnDesc = \"<#SwitchedOn#>\"} {#ix-set:AttributeStateOffDesc = \"<#SwitchedOff#>\"} _myToggleTask : AxoToggleTask; _myCounter : ULINT; END_VAR METHOD PUBLIC Initialize // Initialization of the context needs to be called first // It does not need to be called cyclically, just once _myToggleTask.Initialize(THIS); END_METHOD END_CLASS There are three key methods for managing the AxoToggleTask: SwitchOn() -ones is called and the AxoToggleTask is not Disabled, changes the state of the AxoToggleTask to TRUE if its previous state was FALSE. (can be called fire&forget or cyclically). The method returns TRUE if the change of the state was performed, otherwise FALSE. SwitchOff() -ones is called and the AxoToggleTask is not Disabled, changes the state of the AxoToggleTask to FALSE if its previous state was TRUE. (can be called fire&forget or cyclically). The method returns TRUE if the change of the state was performed, otherwise FALSE. Toggle() -ones is called and the AxoToggleTask is not Disabled, changes the state of the AxoToggleTask to TRUE if its previous state was FALSE and vice-versa . (can be called fire&forget or cyclically). The method returns TRUE if the change of the state was performed, otherwise FALSE. The methods SwitchOn() and SwitchOff() are designed to be used inside automatic logic, where change to exact value has to be performed, while Toggle() is designed to be used mostly in connection with manual control. Example of using SwitchOn() method with its return value. IF _myToggleTask.SwitchOn() THEN ; // do something on rising edge END_IF; Example of using SwitchOff() method with its return value. IF _myToggleTask.SwitchOff()THEN ; // do something on falling edge END_IF; Example of using Toggle() method with its return value. IF _myToggleTask.Toggle()THEN ; // do something on state change END_IF; To check the state of the task there are two methods: IsSwitchOn() - returns TRUE if the state of the task is TRUE. IsSwitchOff() - returns TRUE if the state of the task is FALSE. Example of using IsSwitchOn() method: IF _myToggleTask.IsSwitchedOn() THEN ; // do something END_IF; Example of using IsSwitchOff() method: IF _myToggleTask.IsSwitchedOff() THEN ; // do something END_IF; Moreover, there are five more \"event-like\" methods that are called when a specific event occurs (see the chart below). To implement any of the already mentioned \"event-like\" methods the new class that extends from the AxoToggleTask needs to be created. The required method with PROTECTED OVERRIDE access modifier needs to be created as well, and the custom logic needs to be placed in. These methods are: OnSwitchedOn() - executes once when the task changes its state from FALSE to TRUE. OnSwitchedOff() - executes once when the task changes its state from TRUE to FALSE. OnStateChanged() - executes once when the task changes its state. SwitchedOn() - executes repeatedly while the task is in TRUE state. SwitchedOff() - executes repeatedly while the task is in FALSE state. Example of implementing \"event-like\" methods: CLASS MyToogleTaskExample Extends AxoToggleTask VAR OnSwitchedOnCounter : ULINT; OnSwitchedOffCounter : ULINT; OnStateChangedCounter : ULINT; SwitchOnExecutionCounter : ULINT; SwitchOffExecutionCounter : ULINT; END_VAR METHOD PROTECTED OVERRIDE OnSwitchedOn OnSwitchedOnCounter := OnSwitchedOnCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnSwitchedOff OnSwitchedOffCounter := OnSwitchedOffCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnStateChanged OnStateChangedCounter := OnStateChangedCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE SwitchedOn SwitchOnExecutionCounter := SwitchOnExecutionCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE SwitchedOff SwitchOffExecutionCounter := SwitchOffExecutionCounter + ULINT#1; END_METHOD END_CLASS How to visualize AxoToggleTask On the UI side there are several possibilities how to visualize the AxoToggleTask. You use the AxoToggleTaskView and set its Component according the placement of the instance of the AxoToggleTask. Based on the value of Disable the control element could be controllable: <AxoToggleTaskView Component=\"@Entry.Plc.AxoToggleTaskDocu._myToggleTask\" Disable=\"false\" /> or display only: <AxoToggleTaskView Component=\"@Entry.Plc.AxoToggleTaskDocu._myToggleTask\" Disable=\"true\" /> The next possibility is to use the RenderableContentControl and set its Context according the placement of the instance of the AxoToggleTask. Again as before the element could be controlable when the value of the Presentation is Command: <RenderableContentControl Context=\"@Entry.Plc.AxoToggleTaskDocu._myToggleTask\" Presentation=\"Command\" /> or display only when the value of the Presentation is Status <RenderableContentControl Context=\"@Entry.Plc.AxoToggleTaskDocu._myToggleTask\" Presentation=\"Status\" /> The displayed result should looks like: AxoMomentaryTask AxoMomentaryTask provides basic momentary function. It is mainly designed for some manual operations from the UI side. AxoMomentaryTask needs to be initialized to set the proper AxoContext. AxoMomentaryTask initialization within a AxoContext CLASS AxoMomentaryTaskDocuExample EXTENDS AXOpen.Core.AxoContext VAR PUBLIC {#ix-set:AttributeName = \"<#Momentary task example#>\"} {#ix-set:AttributeStateOnDesc = \"<#Currently On#>\"} {#ix-set:AttributeStateOffDesc = \"<#Currently Off#>\"} _myMomentaryTask : AxoMomentaryTask; END_VAR METHOD PUBLIC Initialize // Initialization of the context needs to be called first // It does not need to be called cyclically, just once _myMomentaryTask.Initialize(THIS); END_METHOD END_CLASS To check the state of the task there are two methods: IsSwitchOn() - returns TRUE if the state of the task is TRUE. IsSwitchOff() - returns TRUE if the state of the task is FALSE. Example of using IsSwitchOn() method: IF _myMomentaryTask.IsSwitchedOn() THEN ; // do something END_IF; Example of using IsSwitchOff() method: IF _myMomentaryTask.IsSwitchedOff() THEN ; // do something END_IF; Moreover, there are five more \"event-like\" methods that are called when a specific event occurs (see the chart below). To implement any of the already mentioned \"event-like\" methods the new class that extends from the AxoMomentaryTask needs to be created. The required method with PROTECTED OVERRIDE access modifier needs to be created as well, and the custom logic needs to be placed in. These methods are: OnSwitchedOn() - executes once when the task changes its state from FALSE to TRUE. OnSwitchedOff() - executes once when the task changes its state from TRUE to FALSE. OnStateChanged() - executes once when the task changes its state. SwitchedOn() - executes repeatedly while the task is in TRUE state. SwitchedOff() - executes repeatedly while the task is in FALSE state. Example of implementing \"event-like\" methods: CLASS MyMomentaryTaskExample Extends AxoMomentaryTask VAR OnSwitchedOnCounter : ULINT; OnSwitchedOffCounter : ULINT; OnStateChangedCounter : ULINT; SwitchOnExecutionCounter : ULINT; SwitchOffExecutionCounter : ULINT; END_VAR METHOD PROTECTED OVERRIDE OnSwitchedOn OnSwitchedOnCounter := OnSwitchedOnCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnSwitchedOff OnSwitchedOffCounter := OnSwitchedOffCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnStateChanged OnStateChangedCounter := OnStateChangedCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE SwitchedOn SwitchOnExecutionCounter := SwitchOnExecutionCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE SwitchedOff SwitchOffExecutionCounter := SwitchOffExecutionCounter + ULINT#1; END_METHOD END_CLASS How to visualize AxoMomentaryTask On the UI side there are several possibilities how to visualize the AxoMomentaryTask. You use the AxoMomentaryTaskView and set its Component according the placement of the instance of the AxoMomentaryTask. Based on the value of Disable the control element could be controllable: <AxoMomentaryTaskView Component=\"@Entry.Plc.AxoMomentaryTaskDocu._myMomentaryTask\" Disable=\"false\" /> or display only: <AxoMomentaryTaskView Component=\"@Entry.Plc.AxoMomentaryTaskDocu._myMomentaryTask\" Disable=\"true\" /> The next possibility is to use the RenderableContentControl and set its Context according the placement of the instance of the AxoMomentaryTask. Again as before the element could be controlable when the value of the Presentation is Command: <RenderableContentControl Context=\"@Entry.Plc.AxoMomentaryTaskDocu._myMomentaryTask\" Presentation=\"Command\" /> or display only when the value of the Presentation is Status <RenderableContentControl Context=\"@Entry.Plc.AxoMomentaryTaskDocu._myMomentaryTask\" Presentation=\"Status\" /> The displayed result should looks like: AxoRemoteTask AxoRemoteTask provides task execution, where the execution of the task is deferred to .NET environment. AxoRemoteTask derives from AxoTask. AxoRemoteTask needs to be initialized to set the proper AxoContext. Important The deferred execution in .NET environment is not hard-real time nor deterministic. You would typically use the AxoRemoteTask when it would be hard to achieve a goal in the PLC, but you can delegate the access to the non-hard-real and nondeterministic environment. Examples of such use would be database access, complex calculations, and email sending. AxoTask initialization within a AxoContext _remoteTask.Initialize(THIS); // THIS = IAxoContext There are two key methods for managing the AxoRemoteTask: Invoke() fires the execution of the AxoRemoteTask (can be called fire&forget or cyclically) Execute() method must be called cyclically. In contrast to AxoTask the method does not execute any logic. You will need to call the Execute method cyclically which will deffer the logic execution in .NET environment. There are the following differences in behavior of DoneWhen and ThrowWhen methods: DoneWhen(Done_Condition) - Unlike AxoTask Done condition is handled internally. It does not have an effect. ThrowWhen(Error_Condition) - Unlike AxoTask Exception emission is handled internally. It does not have an effect. For termination of the execution of the AxoRemoteTask there are the following methods: Abort() - terminates the execution of the AxoRemoteTask and enters the Ready state if the AxoRemoteTask is in the Busy state; otherwise does nothing. To reset the AxoRemoteTask from any state at any moment, there is the following method: Restore() acts as a reset of the AxoRemoteTask (sets the state into Ready from any state of the AxoRemoteTask). The AxoRemoteTask executes upon the Invoke method call. Invoke fires the execution of Execute logic upon the first call, and Invoke does not need cyclical calling. _remoteTask.Invoke('hello'); Invoke() method returns IAxoTaskState with the following members: IsBusy indicates the execution started and is running. IsDone indicates the execution completed with success. HasError indicates the execution terminated with a failure. IsAborted indicates that the execution of the AxoRemoteTask has been aborted. It should continue by calling the method Resume(). Task initialization in .NET Entry.Plc.AxoRemoteTasks._remoteTask.Initialize(() => Console.WriteLine($\"Remote task executed PLC sent this string: '{Entry.Plc.AxoRemoteTasks._remoteTask.Message.GetAsync().Result}'\")); In this example, when the PLC invokes this task it will write a message into console. You can use arbitrary code in place of the labmda expression. Executing from PLC Invoking the AxoRemoteTask and waiting for its completion at the same place. IF(_remoteTask.Invoke('hello').IsDone()) THEN _doneCounter := _doneCounter + 1; END_IF; Invoking the AxoRemoteTask and waiting for its completion at the different places. // Fire & Forget _remoteTask.Invoke('hello'); // Wait for done somwhere else IF(_remoteTask.IsDone()) THEN _doneCounter := _doneCounter + 1; END_IF; Checking if the AxoRemoteTask is executing. IF(_remoteTask.IsBusy()) THEN ;// Do something after task started END_IF; Check for the AxoRemoteTask's error state. IF(_remoteTask.HasError()) THEN ;// Do something when an exception occurs on remote task. END_IF; AxoStep AxoStep is an extension class of the AxoTask and provides the basics for the coordinated controlled execution of the task in the desired order based on the coordination mechanism used. AxoStep contains the Execute() method so as its base class overloaded and extended by following parameters: coord (mandatory): instance of the coordination controlling the execution of the AxoStep. Enable (optional): if this value is FALSE, AxoStep body is not executed and the current order of the execution is incremented. Description (optional): AxoStep description text describing the action the AxoStep is providing. AxoStep class contains following public members: Order: Order of the AxoStep in the coordination. This value can be set by calling the method SetStepOrder() and read by the method GetStepOrder(). StepDescription: AxoStep description text describing the action the AxoStep is providing. This value can be set by calling the Execute() method with Description parameter. IsActive: if TRUE, the AxoStep is currently executing, or is in the order of the execution, otherwise FALSE. This value can be set by calling the method SetIsActive() and read by the method GetIsActive(). IsEnabled: if FALSE, AxoStep body is not executed and the current order of the execution is incremented. This value can be set by calling the method SetIsEnabled() or calling the Execute() method with Enable parameter and read by the method GetIsEnabled(). AxoSequencer AxoSequencer is an AxoCordinator class provides triggering the AxoStep-s inside the sequence in the order they are written. AxoSequencer extends from AxoTask so it also has to be initialized by calling its Initialize() method and started using its Invoke() method. AxoSequencer contains following methods: Open(): this method must be called cyclically before any logic. All the logic of the sequencers must be placed inside the if condition. It provides some configuration mechanism that ensures that the steps are going to be executed in the order, they are written. During the very first call of the sequence, no step is executed as the AxoSequencer is in the configuring state. From the second context cycle after the AxoSequencer has been invoked the AxoSequencer change its state to running and starts the execution from the first step upto the last one. When AxoSequencer is in running state, order of the step cannot be changed. MoveNext(): Terminates the currently executed step and moves the AxoSequencer's pointer to the next step in order of execution. RequestStep(): Terminates the currently executed step and set the AxoSequencer's pointer to the order of the RequestedStep. When the order of the RequestedStep is higher than the order of the currently finished step (the requested step is \"after\" the current one) the requested step is started in the same context cycle. When the order of the RequestedStep is lower than the order of the currently finished step (the requested step is \"before\" the current one) the requested step is started in the next context cycle. CompleteSequence(): Terminates the currently executed step, completes (finishes) the execution of this AxoSequencer and set the coordination state to Idle. If the SequenceMode of the AxoSequencer is set to Cyclic, following Open() method call in the next context cycle switch it again into the configuring state, reasign the order of the individual steps (even if the orders have been changed) and subsequently set AxoSequencer back into the running state. If the SequenceMode of the AxoSequencer is set to RunOnce, terminates also execution of the AxoSequencer itself. `GetCoordinatorState()': Returns the current state of the AxoSequencer. Idle Configuring: assigning the orders to the steps, no step is executed. Running: orders to the steps are already assigned, step is executed. SetSteppingMode(): Sets the stepping mode of the AxoSequencer. Following values are possible. None: StepByStep: if this mode is choosen, each step needs to be started by the invocation of the StepIn commmand. Continous: if this mode is choosen (default), each step is started automaticcaly after the previous one has been completed. GetSteppingMode(): Gets the current stepping mode of the AxoSequencer. SetSequenceMode(): Sets the sequence mode of the AxoSequencer. Following values are possible. None: RunOnce: if this mode is choosen, after calling the method CompleteSequence() the execution of the sequence is terminated. Cyclic: if this mode is choosen (default), after calling the method CompleteSequence() the execution of the sequence is \"reordered\" and started from beginning. GetSequenceMode(): Gets the current sequence mode of the AxoSequencer. GetNumberOfConfiguredSteps(): Gets the number of the configured steps in the sequence. Example of using AxoSequencer Example of the declaration of the AxoSequencer and AxoStep CLASS AxoSequencerDocuExample EXTENDS AXOpen.Core.AxoContext VAR PUBLIC _mySequencer : AXOpen.Core.AxoSequencer; _step_1 : AxoStep; _step_2 : AxoStep; _step_3 : AxoStep; _myCounter : ULINT; END_VAR END_CLASS Initialization Initialization of the context needs to be called first. It does not need to be called cyclically, just once. METHOD PUBLIC Initialize _mySequencer.Initialize(THIS); _step_1.Initialize(THIS); _step_2.Initialize(THIS); _step_3.Initialize(THIS); END_METHOD Open The Open() method must be called cyclically before any logic. All the logic of the sequencers must be placed inside the if condition, as follows. THIS.Initialize(); IF _mySequencer.Open() THEN //All sequence logic needs to be placed inside the condition _myCounter := _myCounter + ULINT#1; IF _step_1.Execute(_mySequencer) THEN IF (_myCounter > ULINT#50) THEN _mySequencer.MoveNext(); END_IF; END_IF; IF _step_2.Execute(_mySequencer) THEN IF (_myCounter > ULINT#100) THEN _mySequencer.MoveNext(); END_IF; END_IF; IF _step_3.Execute(_mySequencer) THEN IF (_myCounter > ULINT#150) THEN _myCounter := ULINT#0; _mySequencer.CompleteSequence(); END_IF; END_IF; END_IF; Step Example of the most simple use of the Execute() method of the AxoStep class, only with the AxoCoordinator defined. IF _step_1.Execute(_mySequencer) THEN _myCounter := _myCounter + ULINT#1; // do something IF (_myCounter MOD ULINT#5) = ULINT#0 THEN // continue to the next step of the sequence _mySequencer.MoveNext(); END_IF; END_IF; Example of use of the Execute() method of the AxoStep class with the Enable condition. This step is going to be executed just in the first run of the sequence, as during the second one, the Enable parameter will have the value of FALSE. IF _step_2.Execute(coord := _mySequencer, Enable := _myCounter <= ULINT#20) THEN _myCounter := _myCounter + ULINT#1; IF _myCounter = ULINT#20 THEN // Jumping to step 1. As it is jumping backwards, the execution of step 1 // is going to be started in the next context cycle. _mySequencer.RequestStep(_step_1); END_IF; END_IF; Example of use of the Execute() method of the AxoStep class with all three parameters defined. IF _step_3.Execute(coord := _mySequencer, Enable := TRUE, Description := 'This is a description of the step 3' ) THEN _myCounter := _myCounter + ULINT#1; IF (_myCounter MOD ULINT#7) = ULINT#0 THEN // Finalize the sequence and initiate the execution from the first step. _mySequencer.CompleteSequence(); END_IF; END_IF; AxoSequencerContainer AxoSequencerContainer is an AxoCordinator class that extends from AxoSequencer. The main difference is that this class is abstract so it is not possible to instantiate it directly. The user-defined class that extends from AxoSequencerContainer needs to be created and then instantiated. In the extended class MAIN() method needs to be created and all sequencer logic needs to be placed there. Then the sequencer is called via Run(IAxoObject) or Run(IAxoContext) methods, that ensure initialization of the sequencer with AxoObject or with AxoContext. Moreover the Run() method also ensures calling the Open() method, so it is not neccessary to call it explicitelly in comparison with AxoSequencer. Example of using AxoSequencerContainer Example of the declaration of the user-defined class that extends from AxoSequencerContainer CLASS AxoSequencerContainerDocuExample EXTENDS AXOpen.Core.AxoSequencerContainer VAR PUBLIC _step_1 : AxoStep; _step_2 : AxoStep; _step_3 : AxoStep; _myCounter : ULINT; END_VAR END_CLASS Example of implementation MAIN method inside the user-defined class that extends from AxoSequencerContainer All the custom logic of the sequencer needs to be placed here. METHOD PROTECTED OVERRIDE MAIN _step_1.Initialize(THIS); _step_2.Initialize(THIS); _step_3.Initialize(THIS); _myCounter := _myCounter + ULINT#1; IF(_step_1.Execute(THIS)) THEN IF(_myCounter >= ULINT#100 ) THEN _myCounter := ULINT#0; THIS.MoveNext(); END_IF; END_IF; IF(_step_2.Execute(THIS)) THEN IF(_myCounter >= ULINT#100) THEN _myCounter := ULINT#0; THIS.MoveNext(); END_IF; END_IF; IF(_step_3.Execute(THIS)) THEN IF(_myCounter >= ULINT#100) THEN _myCounter := ULINT#0; _step_3.ThrowWhen(TRUE); THIS.CompleteSequence(); END_IF; END_IF; END_METHOD Example of declaration of the instance of the user-defined class that extends from AxoSequencerContainer VAR PUBLIC _mySequencerContainer : AxoSequencerContainerDocuExample; END_VAR Example of calling of the instance of the user-defined class that extends from AxoSequencerContainer _mySequencerContainer.Run(THIS); AxoComponent AxoComponent is an abstract class extending the AxoObject, and it is the base building block for the \"hardware-related devices\" like a pneumatic piston, servo drive, robot, etc., so as for the, let's say, \"virtual devices\" like counter, database, etc. AxoComponent is designed to group all possible methods, tasks, settings, and status information into one consistent class. As the AxoComponent is an abstract class, it cannot be instantiated and must be extended. In the extended class, two methods are mandatory. Restore() - inside this method, the logic for resetting the AxoComponent or restoring it from any state to its initial state should be placed. ManualControl() - inside this method, the logic for manual operations with the component should be placed. To be able to control the AxoComponent instance manually, the method ActivateManualControl() of this instance needs to be called cyclically. The base class contains two additional method to deal with the manual control of the AxoComponent. ActivateManualControl() - when this method is called cyclically, the AxoComponent changes its behavior to manually controllable and ensure the call of the ManualControl() method in the derived class. IsManuallyControllable() -returns TRUE when the AxoComponent is manually controllable. Layout attributes ComponentHeader and ComponentDetails The visual view of the extended AxoComponent on the UI side could be done both ways. Manually with complete control over the design or by using the auto-rendering mechanism of the RenderableContentControl (TODO add a link to docu of the RenderableContentControl) element, which is, in most cases, more than perfect. To take full advantage of the auto-rendering mechanism, the base class has implemented the additional layout attributes ComponentHeader and ComponentDetails(TabName). The auto-rendered view is divided into two parts: the fAxoed one and the expandable one. All AxoComponent members with the ComponentHeader layout attribute defined will be displayed in the fixed part. All members with the ComponentDetails(TabName) layout attribute defined will be displayed in the expandable part inside the TabControl with \"TabName\". All members are added in the order in which they are defined, taking into account their layout attributes like Container(Layout.Wrap) or Container(Layout.Stack). How to implement AxoComponent Example of the implementation very simple AxoComponent with members placed only inside the Header. {#ix-attr:[Container(Layout.Stack)]} {#ix-set:AttributeName = \"AxoComponent with header only example\"} CLASS PUBLIC AxoComponentHeaderOnlyExample EXTENDS AXOpen.Core.AxoComponent METHOD PROTECTED OVERRIDE Restore: IAxoTask // Some logic for Restore could be placed here. For Example: valueReal := REAL#1.0; valueDint := DINT#0; END_METHOD METHOD PROTECTED OVERRIDE ManualControl // Some logic for manual control could be placed here. ; END_METHOD // Main method of the `AxoComponent` that must be // called inside the `AxoContext` cyclically. METHOD PUBLIC Run // Declaration of the input and output variables. // In the case of \"hardware-related\" `AxoComponent`, // these would be the variables linked to the hardware. VAR_INPUT inReal : REAL; inDint : DINT; END_VAR VAR_OUTPUT outReal : REAL; outDint : DINT; END_VAR // This must be called first. SUPER.Open(); // Place the custom logic here. valueReal := valueReal * inReal; valueDint := valueDint + inDint; outReal := valueReal; outDint := valueDint; END_METHOD VAR PUBLIC {#ix-attr:[Container(Layout.Wrap)]} {#ix-attr:[ComponentHeader()]} {#ix-set:AttributeName = \"Real product value\"} valueReal : REAL := REAL#1.0; {#ix-attr:[ComponentHeader()]} {#ix-set:AttributeName = \"Dint sum value\"} valueDint : DINT:= DINT#0; END_VAR END_CLASS How to use AxoComponent The instance of the extended AxoComponent must be defined inside the AxoContext. CLASS ComponentHeaderOnlyExampleContext EXTENDS AxoContext VAR PUBLIC {#ix-set:AttributeName = \"Very simple component example with header only defined\"} MyComponentWithHeaderOnly : AxoComponentHeaderOnlyExample; {#ix-set:AttributeName = \"<#Activate manual control#>\"} ActivateManualControl : BOOL; inHwReal : REAL := REAL#1.0001; inHwDint : DINT := DINT#1; outHwReal : REAL; outHwDint : DINT; END_VAR METHOD PROTECTED OVERRIDE Main // The `Initialize()` method must be called before any other method. MyComponentWithHeaderOnly.Initialize(THIS); // Example of the activation of the manual control. IF ActivateManualControl THEN MyComponentWithHeaderOnly.ActivateManualControl(); END_IF; // Calling the main method `Run` with respective input and output variables. MyComponentWithHeaderOnly.Run(inReal := inHwReal, inDint := inHwDint, outReal => outHwReal, outDint => outHwDint); END_METHOD END_CLASS Inside the Main() method of the related AxoContext following rules must be applied. The Initialize() method of the extended instance of the AxoComponent must be called first. The Run() method with the respective input and output variables must be called afterwards. How to visualize AxoComponent On the UI side use the RenderableContentControl and set its Context according the placement of the instance of the AxoComponent. <RenderableContentControl Context=\"@Entry.Plc.myComponentHeaderOnlyExample.MyComponentWithHeaderOnly\" Presentation=\"Command\" /> The rendered result should then looks as follows: In case of more complex AxoComponent the most important members should be placed in the fixed part (Header) and the rest of the members should be placed inside the expandable part (Details). The members inside the expandable part should be organize inside the tabs. More complex AxoComponent Example of the implementation more complex AxoComponent with members placed also in several tabs inside the expandable part (Details). {#ix-attr:[Container(Layout.Stack)]} {#ix-set:AttributeName = \"AxoComponent example name\"} CLASS PUBLIC AxoComponentExample EXTENDS AXOpen.Core.AxoComponent METHOD PROTECTED OVERRIDE Restore: IAxoTask ; END_METHOD METHOD PROTECTED OVERRIDE ManualControl ; END_METHOD METHOD PUBLIC Run VAR_INPUT inReal : REAL; inDint : DINT; END_VAR VAR_OUTPUT outReal : REAL; outDint : DINT; END_VAR // This must be called first. SUPER.Open(); // Place the custom logic here. Status.SomeStatusValue1 := Status.SomeStatusValue1 * inReal; Status.SomeStatusValue2 := Status.SomeStatusValue2 + inDint; outReal := Status.SomeStatusValue1; outDint := Status.SomeStatusValue2; END_METHOD VAR PUBLIC // Complete structure as a part of the component header. // All structure members are going to be displayed in the component header. {#ix-attr:[Container(Layout.Wrap)]} {#ix-attr:[ComponentHeader()]} Header : Header_ComponentExample; // Two separate tasks as a part of the component header. // These tasks are going to be added to the previous members of the component header. {#ix-attr:[ComponentHeader()]} {#ix-set:AttributeName = \"Header task 1\"} HeaderTask1 : AxoTask; // Complete structure as a part of the component details tab `Tasks`. // All structure members are going to be added to the previous members of the component details tab `Tasks`. {#ix-set:AttributeName = \"Tasks\"} {#ix-attr:[Container(Layout.Stack)]} Tasks : Tasks_ComponentExample; // Single task as a part of the component details tab `Tasks`. // This task is going to be displayed in the component details tab `Tasks` {#ix-attr:[ComponentDetails(\"Tasks\")]} {#ix-attr:[Container(Layout.Stack)]} {#ix-set:AttributeName = \"Detail task in Tasks tab\"} DetailTaskInTasksTab : AxoTask; // Additional separate task as a part of the component header. // This task is going to be added to the previous members of the component header. {#ix-attr:[ComponentHeader()]} {#ix-set:AttributeName = \"Header task 2\"} HeaderTask2 : AxoTask; // Complete structure as a part of the component details tab `Status` as the attribute [ComponentDetails(\"Status\")] // is defined on the class Status_ComponentExample. // All structure members are going to be added to the previous members of the component details tab `Status`. {#ix-set:AttributeName = \"Status class\"} Status :Status_ComponentExample; // Single variable as a part of the component details tab `Status`. // This variable is going to be added to the previous members of the component details tab `Status`. {#ix-attr:[ComponentDetails(\"Status\")]} {#ix-attr:[Container(Layout.Stack)]} {#ix-set:AttributeName = \"Status string\"} Status2 : string; // Additional separate task as a part of the component header. // This task is going to be added to the previous members of the component header. {#ix-attr:[ComponentHeader()]} {#ix-set:AttributeName = \"Header task 3\"} HeaderTask3 : AxoTask; // Complete structure as a part of the component details tab `Settings` as the attribute [ComponentDetails(\"Settings\")] // is defined on the class Settings_ComponentExample. // All structure members are going to be added to the previous members of the component details tab `Settings`. {#ix-set:AttributeName = \"Settings\"} Settings : Settings_ComponentExample; // Complete structure as a part of the component details tab `Diagnostics` as the attribute [ComponentDetails(\"Diagnostics\")] // is defined on the class Diagnostics_ComponentExample. git // All structure members are going to be added to the previous members of the component details tab `Diagnostics`. {#ix-set:AttributeName = \"Diagnostics\"} Diagnostics : Diagnostics_ComponentExample; // Complete structure as a part of the component details tab `Help` as the attribute [ComponentDetails(\"Help\")] // is defined on the class Help_ComponentExample. // All structure members are going to be added to the previous members of the component details tab `Help`. {#ix-set:AttributeName = \"Help\"} Help : Help_ComponentExample; END_VAR END_CLASS For the complex types of the AxoComponent it is also recomended to organize partial groups of the members into the classes as it is in this example. CLASS PUBLIC Header_ComponentExample VAR PUBLIC {#ix-set:AttributeName = \"Start\"} Start : AxoTask; {#ix-set:AttributeName = \"Stop\"} Stop : AxoTask; {#ix-set:AttributeName = \"Status\"} Status : STRING:='Some status description'; END_VAR END_CLASS {#ix-attr:[Container(Layout.Stack)]} {#ix-attr:[ComponentDetails(\"Tasks\")]} CLASS PUBLIC Tasks_ComponentExample VAR PUBLIC {#ix-set:AttributeName = \"Some status value 1\"} SomeStatusValue1 : REAL := REAL#45.3; {#ix-set:AttributeName = \"Some advanced component task 1\"} SomeAdvancedComponentTask1 : AxoTask; {#ix-set:AttributeName = \"Some advanced component task 2\"} SomeAdvancedComponentTask2 : AxoTask; {#ix-set:AttributeName = \"Some advanced component task 3\"} SomeAdvancedComponentTask3 : AxoTask; {#ix-set:AttributeName = \"Some advanced component task 4\"} SomeAdvancedComponentTask4 : AxoTask; {#ix-set:AttributeName = \"Some advanced component task 5\"} SomeAdvancedComponentTask5 : AxoTask; END_VAR END_CLASS {#ix-attr:[Container(Layout.Stack)]} {#ix-attr:[ComponentDetails(\"Status\")]} CLASS PUBLIC Status_ComponentExample VAR PUBLIC {#ix-set:AttributeName = \"Some status value 1\"} SomeStatusValue1 : REAL := REAL#45.3; {#ix-set:AttributeName = \"Some status value 2\"} SomeStatusValue2 : DINT := DINT#46587; {#ix-set:AttributeName = \"Some status value 3\"} SomeStatusValue3 : STRING := 'some description'; END_VAR END_CLASS {#ix-attr:[ComponentDetails(\"Settings\")]} {#ix-attr:[Container(Layout.Stack)]} CLASS PUBLIC Settings_ComponentExample VAR PUBLIC {#ix-set:AttributeName = \"Some setting value 1\"} SomeSettingValue1 : REAL := REAL#45.3; {#ix-set:AttributeName = \"Some setting value 2\"} SomeSettingValue2 : DINT := DINT#46587; {#ix-set:AttributeName = \"Some setting value 3\"} SomeSettingValue3 : STRING := 'some setting'; END_VAR END_CLASS {#ix-attr:[ComponentDetails(\"Diagnostics\")]} {#ix-attr:[Container(Layout.Stack)]} CLASS PUBLIC Diagnostics_ComponentExample VAR PUBLIC {#ix-set:AttributeName = \"Some diagnostic message\"} SomeDiagnosticMessage : STRING := 'TODO: Some diagnostic message needs to be placed here'; END_VAR END_CLASS {#ix-attr:[ComponentDetails(\"Help\")]} {#ix-attr:[Container(Layout.Stack)]} CLASS PUBLIC Help_ComponentExample VAR PUBLIC {#ix-set:AttributeName = \"Some help\"} SomeHelp : STRING := 'TODO: Provide some help'; END_VAR END_CLASS Instantiate and call the AxoComponent instance. CLASS ComponentExampleContext EXTENDS AxoContext VAR PUBLIC {#ix-set:AttributeName = \"Component example name\"} MyComponent : AxoComponentExample; {#ix-set:AttributeName = \"<#Activate manual control#>\"} ActivateManualControl : BOOL; inHwReal : REAL := REAL#1.0001; inHwDint : DINT := DINT#1; outHwReal : REAL; outHwDint : DINT; END_VAR METHOD PROTECTED OVERRIDE Main // The `Initialize()` method must be called before any other method. MyComponent.Initialize(THIS); // Example of the activation of the manual control. IF ActivateManualControl THEN MyComponent.ActivateManualControl(); END_IF; // Calling the main method `Run` with respective input and output variables. MyComponent.Run(inReal := inHwReal, inDint := inHwDint, outReal => outHwReal, outDint => outHwDint); END_METHOD END_CLASS UI side of the AxoComponent. <RenderableContentControl Context=\"@Entry.Plc.myComponentExample.MyComponent\" Presentation=\"Command\" /> and the rendered result:"
  },
  "articles/data/AxoDataExchange.html": {
    "href": "articles/data/AxoDataExchange.html",
    "title": "AxoDataExchange | System.Dynamic.ExpandoObject",
    "keywords": "AxoDataExchange Getting started Data exchange manager For the data exchange to work, we must create a class extending the AxoDataExchange. CLASS AxoProcessDataManager EXTENDS AXOpen.Data.AxoDataExchange VAR PUBLIC {#ix-generic:TOnline} {#ix-generic:TPlain as POCO} {#ix-attr:[AxoDataEntityAttribute]} Data : AxoProductionData; // <- Manager will operate on this member. END_VAR END_CLASS Data exchange object We will also need to add our data entity variable, which contains the data that we want to exchange between PLC and the repository. This variable must be annotated with AxoDataEntityAttribute and #ix-generic:TOnline and #ix-generic:TPlain as POCO attributes that provide type information for the data exchange. Note AxoDataEntityAttribute, #ix-generic:TOnline and #ix-generic:TPlain as POCO must be attributed to only one member AxoDataExchange object and is used to locate data object that contains data to be exchanged between PLC and the target repository. An exception is thrown when DataEntityAttribute is missing or multiple members have the annotation. Note The 'Data' variable must be of a type that extends AxoDataEntity. CLASS AxoProductionData EXTENDS AXOpen.Data.AxoDataEntity VAR PUBLIC {#ix-set:AttributeName = \"Some string data\"} SomeData : STRING; {#ix-set:AttributeName = \"Some number\"} SomeNumber : INT; {#ix-set:AttributeName = \"Some boolean\"} SomeBool : BOOL; END_VAR END_CLASS Data exchange initialization in PLC As mentioned earlier, we use remote calls to execute the CRUD operations. These calls are a variant of AxoTask, which allows for invoking a C# code. We will now need to create an instance of AxoProcessDataManager in a context object (AxoContext) (or as a member of another class that derives from AxoObject). We will also need to call DataManager in the Main method of appropriate context. CLASS PUBLIC Context EXTENDS AXOpen.Core.AxoContext VAR PUBLIC DataManager : AxoProcessDataManager; END_VAR METHOD OVERRIDE Main DataManager.Run(THIS); END_METHOD END_CLASS Instantiate context in a configuration CONFIGURATION MyConfiguration VAR_GLOBAL _myContext : Context; END_VAR END_CONFIGURATION Execute the context in a program PROGRAM MAIN VAR_EXTERNAL _myContext : Context; END_VAR _myContext.Run(); Data exchange initialization in .NET At this point, we have everything ready in the PLC. We must now tell the DataManager what repository we will use. We will work with data stored in files in JSON format. Let's create a configuration for the repository and initialize remote data exchange: var exampleRepositorySettings = new AXOpen.Data.Json.JsonRepositorySettings<Pocos.AxoDataExamplesDocu.AxoProductionData>( Path.Combine(Environment.CurrentDirectory, \"exampledata\")); var exampleRepository = Ix.Repository.Json.Repository.Factory(exampleRepositorySettings); Entry.Plc.AxoDataExamplesDocu.DataManager.InitializeRemoteDataExchange(exampleRepository); Note MyData should be of type from Pocos. Usage Now we can freely shuffle the data between PLC and the local folder. CLASS UseManager VAR _create : BOOL; _read : BOOL; _update : BOOL; _delete : BOOL; _id : STRING; END_VAR METHOD Use VAR_IN_OUT DataManager : AxoProcessDataManager; END_VAR IF(_create) THEN IF(DataManager.Create(_id).IsDone()) THEN _create := FALSE; END_IF; END_IF; IF(_read) THEN IF(DataManager.Read(_id).IsDone()) THEN _read := FALSE; END_IF; END_IF; IF(_update) THEN IF(DataManager.Update(_id).IsDone()) THEN _update := FALSE; END_IF; END_IF; IF(_delete) THEN IF(DataManager.Delete(_id).IsDone()) THEN _delete := FALSE; END_IF; END_IF; END_METHOD END_CLASS Data visualization Automated rendering using RenderableContentControl With Command presentation type, options exist for adding, editing, and deleting records. <RenderableContentControl Context=\"Entry.Plc.AxoDataExamplesDocu.DataManager\" Presentation=\"Command\"></RenderableContentControl> If you use Status presentation type, data will be only displayed and cannot be manipulated. <RenderableContentControl Context=\"Entry.Plc.AxoDataExamplesDocu.DataManager\" Presentation=\"Status\"></RenderableContentControl> Custom columns There is a possibility to add custom columns if it is needed. You must add AXOpen.Data.ColumnData view as a child in DataView. The BindingValue must be set in ColumnData and contains a string representing the attribute name of custom columns. If you want to add a custom header name, you can set the name in HeaderName attribute. Also, there is an attribute to make the column not clickable, which is clickable by default. The example using all attributes: <DataExchangeView Vm=\"VM\" Presentation=\"Command\"> <ColumnData HeaderName=\"Some data\" BindingValue=\"SomeData\" Clickable=\"false\" /> <ColumnData HeaderName=\"A number\" BindingValue=\"SomeNumber\" Clickable=\"false\" /> <ColumnData HeaderName=\"Yes/No\" BindingValue=\"SomeBool\" Clickable=\"false\" /> </DataExchangeView> When adding data view manually, you will need to create ViewModel: @code { protected DataExchangeViewModel VM { get; } = new () { Model = Entry.Plc.AxoDataExamplesDocu.DataManager }; } Modal detail view The Detail View is default shown like modal view. That means if you click on some record, the modal window with a detail view will be shown. If necessary, this option can be changed with ModalDetailView attribute. This change will show a detail view under the record table. Example with ModalDetailView attribute: <DataView Vm=\"@ViewModel.DataViewModel\" Presentation=\"Command\" ModalDetailView=\"false\" />"
  },
  "articles/data/AxoDataFragmentExchange.html": {
    "href": "articles/data/AxoDataFragmentExchange.html",
    "title": "AxoDataFragmentExchange | System.Dynamic.ExpandoObject",
    "keywords": "AxoDataFragmentExchange Fragment data exchange allows to group of multiple data managers into a single object and perform repository operations jointly on all nested repositories. Data fragment exchange manager We must create a class extending the AxoDataFragmentExchange for the data fragment exchange to work. CLASS ProcessDataManager EXTENDS AXOpen.Data.AxoDataFragmentExchange VAR PUBLIC {#ix-attr:[AXOpen.Data.AxoDataFragmentAttribute]} SharedHeader : SharedDataHeaderManger; {#ix-attr:[AXOpen.Data.AxoDataFragmentAttribute]} Station_1 : Station_1_ProcessDataManger; END_VAR END_CLASS Nesting AxoDataExchanger(s) AxoDataFragmenExchange can group several data managers where each can point to a different repository. Nested data managers must be set up as explained here. Note Note that each data manager must be annotated with AXOpen.Data.AxoDataFragmentAttribute that will provide information to the parent manager that the member takes part in data operations. Important First data manager declared as a fragment is considered a master fragment. The overview and list of existing data are retrieved only from the master fragment. Initialization and handling in the controller We will now need to create an instance of AxoDataFragmentExchange in a context object (AxoContext) (or as a member of another class that derives from AxoObject). We will also need to call AxoDataFragmentExchangeContext in the Main method of appropriate context. CLASS AxoDataFragmentExchangeContext EXTENDS AXOpen.Core.AxoContext VAR PUBLIC ProcessData : ProcessDataManager; END_VAR METHOD PROTECTED OVERRIDE Main // This is required to run cyclically. Method provides handling of data exchange tasks. ProcessData.Run(THIS); END_METHOD END_CLASS Instantiate context in a configuration CONFIGURATION MyConfiguration VAR_GLOBAL _myContext : AxoDataFragmentExchangeContext; END_VAR END_CONFIGURATION Execute the context in a program. PROGRAM MAIN VAR_EXTERNAL _myContext : AxoDataFragmentExchangeContext; END_VAR _myContext.Run(); Data exchange initialization in .NET At this point, we have everything ready in the PLC. If the nested data exchange object does not have the repository set previously, we will need to tell the to fragment manager wich repositories we be used by in data exchange. We will work with data stored in files in JSON format. var scatteredDataBuilder = Entry.Plc.AxoDataFragmentExchangeContext.ProcessData.CreateBuilder<AxoDataFramentsExchangeDocuExample.ProcessDataManager>(); // Setting up repositories scatteredDataBuilder.SharedHeader.SetRepository(new JsonRepository<Pocos.AxoDataFramentsExchangeDocuExample.SharedDataHeaderData>( new AXOpen.Data.Json.JsonRepositorySettings<Pocos.AxoDataFramentsExchangeDocuExample.SharedDataHeaderData>(Path.Combine(Environment.CurrentDirectory, \"bin\", \"data-framents-docu\", \"set\")))); scatteredDataBuilder.Station_1.SetRepository( new JsonRepository<Pocos.AxoDataFramentsExchangeDocuExample.Station_1_Data>( new AXOpen.Data.Json.JsonRepositorySettings<Pocos.AxoDataFramentsExchangeDocuExample.Station_1_Data>(Path.Combine(Environment.CurrentDirectory, \"bin\", \"data-framents\", \"fm\")))); Note MyData should be of type from Pocos. Usage Now we can freely shuffle the data between PLC and the local folder. CLASS UseManager VAR _create : BOOL; _read : BOOL; _update : BOOL; _delete : BOOL; _id : STRING; END_VAR METHOD Use VAR_IN_OUT DataFragmentManager : ProcessDataManager; END_VAR IF(_create) THEN IF(DataFragmentManager.Create(_id).IsDone()) THEN _create := FALSE; END_IF; END_IF; IF(_read) THEN IF(DataFragmentManager.Read(_id).IsDone()) THEN _read := FALSE; END_IF; END_IF; IF(_update) THEN IF(DataFragmentManager.Update(_id).IsDone()) THEN _update := FALSE; END_IF; END_IF; IF(_delete) THEN IF(DataFragmentManager.Delete(_id).IsDone()) THEN _delete := FALSE; END_IF; END_IF; END_METHOD END_CLASS Data visualization Automated rendering using RenderableContentControl With Command presentation type, options exist for adding, editing, and deleting records. <RenderableContentControl Context=\"Entry.Plc.AxoDataFragmentExchangeContext.ProcessData\" Presentation=\"Command\"></RenderableContentControl> If you use Status presentation type, data will be only displayed and cannot be manipulated. <RenderableContentControl Context=\"Entry.Plc.AxoDataFragmentExchangeContext.ProcessData\" Presentation=\"Status\"></RenderableContentControl> Custom columns There is a possibility to add custom columns if it is needed. You must add AXOpen.Data.ColumnData view as a child in DataView. The BindingValue must be set in ColumnData and contains a string representing the attribute name of custom columns. If you want to add a custom header name, you can set the name in HeaderName attribute. Also, there is an attribute to make the column not clickable, which is clickable by default. The example using all attributes: <DataExchangeView Vm=\"VM\" Presentation=\"Command\"> <ColumnData HeaderName=\"Some data\" BindingValue=\"SomeData\" Clickable=\"false\" /> <ColumnData HeaderName=\"A number\" BindingValue=\"SomeNumber\" Clickable=\"false\" /> <ColumnData HeaderName=\"Yes/No\" BindingValue=\"SomeBool\" Clickable=\"false\" /> </DataExchangeView> When adding data view manually, you will need to create ViewModel: @code { protected DataExchangeViewModel VM { get; } = new() { Model = Entry.Plc.AxoDataFragmentExchangeContext.ProcessData }; } Note Custom columns can only added from master fragment (first declared repository). Modal detail view The Detail View is default shown like modal view. That means if you click on some record, the modal window with a detail view will be shown. If necessary, this option can be changed with ModalDetailView attribute. This change will show a detail view under the record table. Example with ModalDetailView attribute: <DataExchangeView Vm=\"@ViewModel.DataViewModel\" Presentation=\"Command\" ModalDetailView=\"false\" />"
  },
  "articles/data/README.html": {
    "href": "articles/data/README.html",
    "title": "AXOpen.Data | System.Dynamic.ExpandoObject",
    "keywords": "AXOpen.Data AXOpen.Data provides data exchange between the controller and an arbitrary repository. AXOpen.Data library provides a simple yet powerful data exchange between PLC and an arbitrary data repository. It includes the implementation of a series of repository operations known as CRUD (Create Read Update Delete), accessible directly from the PLC. Benefits The main benefit of this solution is data scalability; once the repository is set up, any modification of the data structure(s) will result in an automatic update of mapped objects. And therefore, there is no need for additional coding and configuration. How it works The basic PLC block is AxoDataExchange, which has its .NET counterpart (or .NET twin) that handles complex repository operations using a modified AxoRemoteTask, which is a form of RPC (Remote Procedure Call), that allows you to execute the code from the PLC in a remote .NET application. Implemented repositories The AxoDataExchange uses a predefined interface, IRepository, that allows for the virtually unlimited implementation of different target repositories. At this point, AXOpen supports these repositories directly: InMemory Json MongoDB RavenDB AxoDataExchange Getting started Data exchange manager For the data exchange to work, we must create a class extending the AxoDataExchange. CLASS AxoProcessDataManager EXTENDS AXOpen.Data.AxoDataExchange VAR PUBLIC {#ix-generic:TOnline} {#ix-generic:TPlain as POCO} {#ix-attr:[AxoDataEntityAttribute]} Data : AxoProductionData; // <- Manager will operate on this member. END_VAR END_CLASS Data exchange object We will also need to add our data entity variable, which contains the data that we want to exchange between PLC and the repository. This variable must be annotated with AxoDataEntityAttribute and #ix-generic:TOnline and #ix-generic:TPlain as POCO attributes that provide type information for the data exchange. Note AxoDataEntityAttribute, #ix-generic:TOnline and #ix-generic:TPlain as POCO must be attributed to only one member AxoDataExchange object and is used to locate data object that contains data to be exchanged between PLC and the target repository. An exception is thrown when DataEntityAttribute is missing or multiple members have the annotation. Note The 'Data' variable must be of a type that extends AxoDataEntity. CLASS AxoProductionData EXTENDS AXOpen.Data.AxoDataEntity VAR PUBLIC {#ix-set:AttributeName = \"Some string data\"} SomeData : STRING; {#ix-set:AttributeName = \"Some number\"} SomeNumber : INT; {#ix-set:AttributeName = \"Some boolean\"} SomeBool : BOOL; END_VAR END_CLASS Data exchange initialization in PLC As mentioned earlier, we use remote calls to execute the CRUD operations. These calls are a variant of AxoTask, which allows for invoking a C# code. We will now need to create an instance of AxoProcessDataManager in a context object (AxoContext) (or as a member of another class that derives from AxoObject). We will also need to call DataManager in the Main method of appropriate context. CLASS PUBLIC Context EXTENDS AXOpen.Core.AxoContext VAR PUBLIC DataManager : AxoProcessDataManager; END_VAR METHOD OVERRIDE Main DataManager.Run(THIS); END_METHOD END_CLASS Instantiate context in a configuration CONFIGURATION MyConfiguration VAR_GLOBAL _myContext : Context; END_VAR END_CONFIGURATION Execute the context in a program PROGRAM MAIN VAR_EXTERNAL _myContext : Context; END_VAR _myContext.Run(); Data exchange initialization in .NET At this point, we have everything ready in the PLC. We must now tell the DataManager what repository we will use. We will work with data stored in files in JSON format. Let's create a configuration for the repository and initialize remote data exchange: var exampleRepositorySettings = new AXOpen.Data.Json.JsonRepositorySettings<Pocos.AxoDataExamplesDocu.AxoProductionData>( Path.Combine(Environment.CurrentDirectory, \"exampledata\")); var exampleRepository = Ix.Repository.Json.Repository.Factory(exampleRepositorySettings); Entry.Plc.AxoDataExamplesDocu.DataManager.InitializeRemoteDataExchange(exampleRepository); Note MyData should be of type from Pocos. Usage Now we can freely shuffle the data between PLC and the local folder. CLASS UseManager VAR _create : BOOL; _read : BOOL; _update : BOOL; _delete : BOOL; _id : STRING; END_VAR METHOD Use VAR_IN_OUT DataManager : AxoProcessDataManager; END_VAR IF(_create) THEN IF(DataManager.Create(_id).IsDone()) THEN _create := FALSE; END_IF; END_IF; IF(_read) THEN IF(DataManager.Read(_id).IsDone()) THEN _read := FALSE; END_IF; END_IF; IF(_update) THEN IF(DataManager.Update(_id).IsDone()) THEN _update := FALSE; END_IF; END_IF; IF(_delete) THEN IF(DataManager.Delete(_id).IsDone()) THEN _delete := FALSE; END_IF; END_IF; END_METHOD END_CLASS Data visualization Automated rendering using RenderableContentControl With Command presentation type, options exist for adding, editing, and deleting records. <RenderableContentControl Context=\"Entry.Plc.AxoDataExamplesDocu.DataManager\" Presentation=\"Command\"></RenderableContentControl> If you use Status presentation type, data will be only displayed and cannot be manipulated. <RenderableContentControl Context=\"Entry.Plc.AxoDataExamplesDocu.DataManager\" Presentation=\"Status\"></RenderableContentControl> Custom columns There is a possibility to add custom columns if it is needed. You must add AXOpen.Data.ColumnData view as a child in DataView. The BindingValue must be set in ColumnData and contains a string representing the attribute name of custom columns. If you want to add a custom header name, you can set the name in HeaderName attribute. Also, there is an attribute to make the column not clickable, which is clickable by default. The example using all attributes: <DataExchangeView Vm=\"VM\" Presentation=\"Command\"> <ColumnData HeaderName=\"Some data\" BindingValue=\"SomeData\" Clickable=\"false\" /> <ColumnData HeaderName=\"A number\" BindingValue=\"SomeNumber\" Clickable=\"false\" /> <ColumnData HeaderName=\"Yes/No\" BindingValue=\"SomeBool\" Clickable=\"false\" /> </DataExchangeView> When adding data view manually, you will need to create ViewModel: @code { protected DataExchangeViewModel VM { get; } = new () { Model = Entry.Plc.AxoDataExamplesDocu.DataManager }; } Modal detail view The Detail View is default shown like modal view. That means if you click on some record, the modal window with a detail view will be shown. If necessary, this option can be changed with ModalDetailView attribute. This change will show a detail view under the record table. Example with ModalDetailView attribute: <DataView Vm=\"@ViewModel.DataViewModel\" Presentation=\"Command\" ModalDetailView=\"false\" /> AxoDataFragmentExchange Fragment data exchange allows to group of multiple data managers into a single object and perform repository operations jointly on all nested repositories. Data fragment exchange manager We must create a class extending the AxoDataFragmentExchange for the data fragment exchange to work. CLASS ProcessDataManager EXTENDS AXOpen.Data.AxoDataFragmentExchange VAR PUBLIC {#ix-attr:[AXOpen.Data.AxoDataFragmentAttribute]} SharedHeader : SharedDataHeaderManger; {#ix-attr:[AXOpen.Data.AxoDataFragmentAttribute]} Station_1 : Station_1_ProcessDataManger; END_VAR END_CLASS Nesting AxoDataExchanger(s) AxoDataFragmenExchange can group several data managers where each can point to a different repository. Nested data managers must be set up as explained here. Note Note that each data manager must be annotated with AXOpen.Data.AxoDataFragmentAttribute that will provide information to the parent manager that the member takes part in data operations. Important First data manager declared as a fragment is considered a master fragment. The overview and list of existing data are retrieved only from the master fragment. Initialization and handling in the controller We will now need to create an instance of AxoDataFragmentExchange in a context object (AxoContext) (or as a member of another class that derives from AxoObject). We will also need to call AxoDataFragmentExchangeContext in the Main method of appropriate context. CLASS AxoDataFragmentExchangeContext EXTENDS AXOpen.Core.AxoContext VAR PUBLIC ProcessData : ProcessDataManager; END_VAR METHOD PROTECTED OVERRIDE Main // This is required to run cyclically. Method provides handling of data exchange tasks. ProcessData.Run(THIS); END_METHOD END_CLASS Instantiate context in a configuration CONFIGURATION MyConfiguration VAR_GLOBAL _myContext : AxoDataFragmentExchangeContext; END_VAR END_CONFIGURATION Execute the context in a program. PROGRAM MAIN VAR_EXTERNAL _myContext : AxoDataFragmentExchangeContext; END_VAR _myContext.Run(); Data exchange initialization in .NET At this point, we have everything ready in the PLC. If the nested data exchange object does not have the repository set previously, we will need to tell the to fragment manager wich repositories we be used by in data exchange. We will work with data stored in files in JSON format. var scatteredDataBuilder = Entry.Plc.AxoDataFragmentExchangeContext.ProcessData.CreateBuilder<AxoDataFramentsExchangeDocuExample.ProcessDataManager>(); // Setting up repositories scatteredDataBuilder.SharedHeader.SetRepository(new JsonRepository<Pocos.AxoDataFramentsExchangeDocuExample.SharedDataHeaderData>( new AXOpen.Data.Json.JsonRepositorySettings<Pocos.AxoDataFramentsExchangeDocuExample.SharedDataHeaderData>(Path.Combine(Environment.CurrentDirectory, \"bin\", \"data-framents-docu\", \"set\")))); scatteredDataBuilder.Station_1.SetRepository( new JsonRepository<Pocos.AxoDataFramentsExchangeDocuExample.Station_1_Data>( new AXOpen.Data.Json.JsonRepositorySettings<Pocos.AxoDataFramentsExchangeDocuExample.Station_1_Data>(Path.Combine(Environment.CurrentDirectory, \"bin\", \"data-framents\", \"fm\")))); Note MyData should be of type from Pocos. Usage Now we can freely shuffle the data between PLC and the local folder. CLASS UseManager VAR _create : BOOL; _read : BOOL; _update : BOOL; _delete : BOOL; _id : STRING; END_VAR METHOD Use VAR_IN_OUT DataFragmentManager : ProcessDataManager; END_VAR IF(_create) THEN IF(DataFragmentManager.Create(_id).IsDone()) THEN _create := FALSE; END_IF; END_IF; IF(_read) THEN IF(DataFragmentManager.Read(_id).IsDone()) THEN _read := FALSE; END_IF; END_IF; IF(_update) THEN IF(DataFragmentManager.Update(_id).IsDone()) THEN _update := FALSE; END_IF; END_IF; IF(_delete) THEN IF(DataFragmentManager.Delete(_id).IsDone()) THEN _delete := FALSE; END_IF; END_IF; END_METHOD END_CLASS Data visualization Automated rendering using RenderableContentControl With Command presentation type, options exist for adding, editing, and deleting records. <RenderableContentControl Context=\"Entry.Plc.AxoDataFragmentExchangeContext.ProcessData\" Presentation=\"Command\"></RenderableContentControl> If you use Status presentation type, data will be only displayed and cannot be manipulated. <RenderableContentControl Context=\"Entry.Plc.AxoDataFragmentExchangeContext.ProcessData\" Presentation=\"Status\"></RenderableContentControl> Custom columns There is a possibility to add custom columns if it is needed. You must add AXOpen.Data.ColumnData view as a child in DataView. The BindingValue must be set in ColumnData and contains a string representing the attribute name of custom columns. If you want to add a custom header name, you can set the name in HeaderName attribute. Also, there is an attribute to make the column not clickable, which is clickable by default. The example using all attributes: <DataExchangeView Vm=\"VM\" Presentation=\"Command\"> <ColumnData HeaderName=\"Some data\" BindingValue=\"SomeData\" Clickable=\"false\" /> <ColumnData HeaderName=\"A number\" BindingValue=\"SomeNumber\" Clickable=\"false\" /> <ColumnData HeaderName=\"Yes/No\" BindingValue=\"SomeBool\" Clickable=\"false\" /> </DataExchangeView> When adding data view manually, you will need to create ViewModel: @code { protected DataExchangeViewModel VM { get; } = new() { Model = Entry.Plc.AxoDataFragmentExchangeContext.ProcessData }; } Note Custom columns can only added from master fragment (first declared repository). Modal detail view The Detail View is default shown like modal view. That means if you click on some record, the modal window with a detail view will be shown. If necessary, this option can be changed with ModalDetailView attribute. This change will show a detail view under the record table. Example with ModalDetailView attribute: <DataExchangeView Vm=\"@ViewModel.DataViewModel\" Presentation=\"Command\" ModalDetailView=\"false\" />"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Source repositories | System.Dynamic.ExpandoObject",
    "keywords": "AXOpen is an open-source application framework project developed by a group of automation engineers. It is based on SIMATIC AX platfrom and AX# technology Source repositories AX# AXOpen Note This project is under development. We periodically release versions that can be used for testing and in non-production environments. Disclaimer Important It is necessary to have a valid license for SIMATIC AX in order to use AX# and AXOpen! SIMATIC AX is currently in a limited sales release in selected European countries only. You will need to request access from the AX team which will check if your use case is suitable for the current state of the product. The first step to getting the approval is contacting your local SIEMENS sales representative or writing an email to simatic-ax@siemens.com."
  },
  "articles/messaging/AXOMESSENGER.html": {
    "href": "articles/messaging/AXOMESSENGER.html",
    "title": "AxoMessenger | System.Dynamic.ExpandoObject",
    "keywords": "AxoMessenger Static AxoMessenger is a class that provides mechanism for delivering static message to the supervising applications (SCADA/HMI). This static messenger uses the text defined in the declaration. This text cannot be changed during runtime as the text is \"transfered\" just once during the compilation and it is not read during the runtime. The PLC code of the AxoMessenger just ensures the activation, deactivation and acknowledgement of the message. AxoMessenger contains following public methods. Serve() - this method must be called cyclically. It ensures the inicialization of the instance, so as the deactivation of the message. classDiagram class AxoMessenger{ +Serve(IAxoContext _context) +Serve(IAxoObject _object) } Activate(category) - this method immediatelly activate the message of the category where category is of the type eAxoMessageCategory. Deactivation is detected after one PLC cycle without calling the method Activate. ActivateOnCondition(condition,category) - this method activate the message of the category where category is of the type eAxoMessageCategory on the rising edge of the condition and imidiatelly deactivate the message on the falling edge of the condition. The ActivateOnCondition method is designed to be called cyclically. Note Do not use the both activation methods on the same AxoMessenger instance, please use just one of them. Acknowledge() - acknowledge the message if required. The message could be acknowledged so as before deactivation so as after. Depending on the eAxoMessageCategory the messenger should require the acknowledgement. By default the acknowledgement is not required for the levels Trace,Debug,Info,TimedOut,Notification and Warning. This could be overwritten by calling the RequireAcknowledgement() method. Contrariwise, the acknowledgement is required for the levels Error,ProgrammingError,Critical,Fatal and Catastrophic by default. This could be overwritten by calling the DoNotRequireAcknowledgement() method. Attributes MessageText and Help These attributes are used to set the values of the static texts of the messenger. These values are read out at the compilation time transfered to .NET counterpart and set as a constant strings. Therefore they can't be changed at the runtime. Example of declaration the instance and defining the attributes MessageText and Help. {#ix-set:MessageText = \"<#Message text for messenger 1#>\"} {#ix-set:Help = \"<#Help text for messenger 1#>\"} _messenger1 : AxoMessenger; How to use AxoMessenger The instance of the AxoMessenger must be defined inside the AxoContext or AxoObject. Inside the Main() method of the related AxoContext or inside the cyclically called method of the AxoObject following rules must be applied. The Serve() method of the instance of the AxoMessenger must be called cyclically. The Activate method should be used called the required condition or the AcitvateOnCondition should be called cyclically. Avoid to mix using the both methods with the same instance. CLASS Messengers EXTENDS AXOpen.Core.AxoContext VAR PUBLIC {#ix-set:MessageText = \"<#Message text for messenger 1#>\"} {#ix-set:Help = \"<#Help text for messenger 1#>\"} _messenger1 : AxoMessenger; _messenger1condition : BOOL; {#ix-set:MessageText = \"<#Message text for messenger 2#>\"} {#ix-set:MessageText = \"<#Message text for messenger 2#>\"} _messenger2 : AxoMessenger; _messenger2condition : BOOL; END_VAR METHOD PROTECTED OVERRIDE Main _messenger1.Serve(THIS); IF _messenger1condition THEN _messenger1.Activate(eAxoMessageCategory#Error); END_IF; _messenger2.Serve(THIS); _messenger2.ActivateOnCondition(_messenger2condition,eAxoMessageCategory#Warning); END_METHOD END_CLASS If neccessary, the default behaviour of the acknowledgeable messenger should be changed as follows. _messenger2.ActivateOnCondition(_messenger2condition,eAxoMessageCategory#Error).DoNotRequireAcknowledgement(); Contrariwise, the default behaviour of the unacknowledgeable messenger should be changed as follows. _messenger2.ActivateOnCondition(_messenger2condition,eAxoMessageCategory#Warning).RequireAcknowledgement(); How to visualize AxoMessenger On the UI side use the RenderableContentControl and set its Context according the placement of the instance of the AxoMessenger. <RenderableContentControl Context=\"@Entry.Plc.AxoMessengersDocu._messenger1\" Presentation=\"Command-Control\" Class=\"ps-2\"/>"
  },
  "articles/messaging/README.html": {
    "href": "articles/messaging/README.html",
    "title": "AXOpen.Messaging | System.Dynamic.ExpandoObject",
    "keywords": "AXOpen.Messaging AXOpen.Messaging provides basic blocks for providing messaging. Basic concepts AxoMessenger Static AxoMessenger is a class that provides mechanism for delivering static message to the supervising applications (SCADA/HMI). This static messenger uses the text defined in the declaration. This text cannot be changed during runtime as the text is \"transfered\" just once during the compilation and it is not read during the runtime. The PLC code of the AxoMessenger just ensures the activation, deactivation and acknowledgement of the message. AxoMessenger contains following public methods. Serve() - this method must be called cyclically. It ensures the inicialization of the instance, so as the deactivation of the message. classDiagram class AxoMessenger{ +Serve(IAxoContext _context) +Serve(IAxoObject _object) } Activate(category) - this method immediatelly activate the message of the category where category is of the type eAxoMessageCategory. Deactivation is detected after one PLC cycle without calling the method Activate. ActivateOnCondition(condition,category) - this method activate the message of the category where category is of the type eAxoMessageCategory on the rising edge of the condition and imidiatelly deactivate the message on the falling edge of the condition. The ActivateOnCondition method is designed to be called cyclically. Note Do not use the both activation methods on the same AxoMessenger instance, please use just one of them. Acknowledge() - acknowledge the message if required. The message could be acknowledged so as before deactivation so as after. Depending on the eAxoMessageCategory the messenger should require the acknowledgement. By default the acknowledgement is not required for the levels Trace,Debug,Info,TimedOut,Notification and Warning. This could be overwritten by calling the RequireAcknowledgement() method. Contrariwise, the acknowledgement is required for the levels Error,ProgrammingError,Critical,Fatal and Catastrophic by default. This could be overwritten by calling the DoNotRequireAcknowledgement() method. Attributes MessageText and Help These attributes are used to set the values of the static texts of the messenger. These values are read out at the compilation time transfered to .NET counterpart and set as a constant strings. Therefore they can't be changed at the runtime. Example of declaration the instance and defining the attributes MessageText and Help. {#ix-set:MessageText = \"<#Message text for messenger 1#>\"} {#ix-set:Help = \"<#Help text for messenger 1#>\"} _messenger1 : AxoMessenger; How to use AxoMessenger The instance of the AxoMessenger must be defined inside the AxoContext or AxoObject. Inside the Main() method of the related AxoContext or inside the cyclically called method of the AxoObject following rules must be applied. The Serve() method of the instance of the AxoMessenger must be called cyclically. The Activate method should be used called the required condition or the AcitvateOnCondition should be called cyclically. Avoid to mix using the both methods with the same instance. CLASS Messengers EXTENDS AXOpen.Core.AxoContext VAR PUBLIC {#ix-set:MessageText = \"<#Message text for messenger 1#>\"} {#ix-set:Help = \"<#Help text for messenger 1#>\"} _messenger1 : AxoMessenger; _messenger1condition : BOOL; {#ix-set:MessageText = \"<#Message text for messenger 2#>\"} {#ix-set:MessageText = \"<#Message text for messenger 2#>\"} _messenger2 : AxoMessenger; _messenger2condition : BOOL; END_VAR METHOD PROTECTED OVERRIDE Main _messenger1.Serve(THIS); IF _messenger1condition THEN _messenger1.Activate(eAxoMessageCategory#Error); END_IF; _messenger2.Serve(THIS); _messenger2.ActivateOnCondition(_messenger2condition,eAxoMessageCategory#Warning); END_METHOD END_CLASS If neccessary, the default behaviour of the acknowledgeable messenger should be changed as follows. _messenger2.ActivateOnCondition(_messenger2condition,eAxoMessageCategory#Error).DoNotRequireAcknowledgement(); Contrariwise, the default behaviour of the unacknowledgeable messenger should be changed as follows. _messenger2.ActivateOnCondition(_messenger2condition,eAxoMessageCategory#Warning).RequireAcknowledgement(); How to visualize AxoMessenger On the UI side use the RenderableContentControl and set its Context according the placement of the instance of the AxoMessenger. <RenderableContentControl Context=\"@Entry.Plc.AxoMessengersDocu._messenger1\" Presentation=\"Command-Control\" Class=\"ps-2\"/>"
  },
  "articles/rendering/intro.html": {
    "href": "articles/rendering/intro.html",
    "title": "Automatic rendering in IXF | System.Dynamic.ExpandoObject",
    "keywords": "Automatic rendering in IXF IFX uses IX rendering for many advanced features. This document describes basic information about presentation used in IXF. Renderable content control Presentation type Description Command Provides access to UI control with ability to control/modfiy the component. Status Provides access to UI control with no ability to modify and control the component."
  },
  "articles/security/INSTALLATION.html": {
    "href": "articles/security/INSTALLATION.html",
    "title": "Installation | System.Dynamic.ExpandoObject",
    "keywords": "Installation All necessary logic for security is located in AxOpen.Security library. 1. Install AxOpen.Security NuGet package or add reference to this project 2. Add reference to AxOpen.Security assembly. Go to App.razor and add AdditionalAssemblies as parameter of Router component. The following line must be added to Router component: AdditionalAssemblies=\"new[] { typeof(BlazorSecurity).Assembly}\"> Also, make sure, that Router component is wrapped inside CascadingAuthenticationState component. At the end, the Router component should look like this: <CascadingAuthenticationState> <Router AppAssembly=\"@typeof(App).Assembly\" AdditionalAssemblies=\"new[] { typeof(BlazorSecurity).Assembly}\"> ... </Router> </CascadingAuthenticationState> 3. Configure Ax Blazor security services in dependency injection container of Blazor application located in Program.cs file. To correctly configure security services you must: configure repository create in-app roles configure AxBlazorSecurity in DI container Configuring repository The security requires 2 instances of repositories: for persistence of user data for persistence of groups of roles Within AXOpen 4 different types of repositories are available: InMemory Json MongoDB RavenDB For example, the Json repository can be configured as follows: static (IRepository<User>, IRepository<Group>) SetUpJSon(string path = \"..\\\\..\\\\..\\\\..\\\\..\\\\JSONREPOS\\\\\") { var executingAssemblyFile = new FileInfo(Assembly.GetExecutingAssembly().Location); var repositoryDirectory = Path.GetFullPath($\"{executingAssemblyFile.Directory}{path}\"); if (!Directory.Exists(repositoryDirectory)) { Directory.CreateDirectory(repositoryDirectory); } IRepository<User> userRepo = new JsonRepository<User>(new JsonRepositorySettings<User>(Path.Combine(repositoryDirectory, \"Users\"))); IRepository<Group> groupRepo = new JsonRepository<Group>(new JsonRepositorySettings<Group>(Path.Combine(repositoryDirectory, \"Groups\"))); return (userRepo, groupRepo); } Add SetUpJson method in Program.cs file. Creating in-app roles In your Blazor application create new static class Roles and specify the roles, that will be used in your application. You can add as many roles as you want. The Roles class can be defined like this: public static class Roles { public static List<Role> CreateRoles() { var roles = new List<Role> { new Role(process_settings_access), new Role(process_traceability_access), }; return roles; } public const string process_settings_access = nameof(process_settings_access); public const string process_traceability_access = nameof(process_traceability_access); } Configure AxBlazorSecurity services Finally, the AxBlazorSecurity security can be configured in DI container of Blazor application. Go to Program.cs file and add following line to builder: builder.Services.ConfigureAxBlazorSecurity(SetUpJSon(), Roles.CreateRoles()); The first parameter is set up repository and the second parameter are created roles. 4. Add security views to application Go to MainLayout.razor located in Shared folder and add LoginDisplay view inside top bar. <main> <div class=\"top-row px-4 auth\"> <AxOpen.Security.Views.LoginDisplay/> </div> <article class=\"content px-4\"> @Body </article> </main> Within Pages of the Blazor application, create new Security.razor page and add there SecurityManagementView. @page \"/Security\" <h3>Security</h3> <AxOpen.Security.Views.SecurityManagementView /> Add you security view inside the navigation menu in NavMenu.razor: <div class=\"nav-item px-3\"> <NavLink class=\"nav-link\" href=\"security\"> <span class=\"oi oi-list-rich\" aria-hidden=\"true\"></span> Security </NavLink> </div> Default login If everything done correctly, now security should be available in Blazor application. Now it should be possible to log-in with default user. The default user is created on application startup with following credentials: Username: admin Password: admin The user has default Administrator role and is in default AdminGroup."
  },
  "articles/security/README.html": {
    "href": "articles/security/README.html",
    "title": "AXOpen.Security | System.Dynamic.ExpandoObject",
    "keywords": "AXOpen.Security AxOpen.Security is library which provides authentication and authorization in Blazor AX applications. It is based on a default solution for authentication in Blazor, which is extended by using implemented repositories within Ax.Open.Data. As a result, multiple storage providers for security can be used. Installation The security library is available in form of NuGet package. Detailed installation instructions of security into empty Blazor project is located in security installation article. Basic concepts Each user is limited to having just a single group. A group is formed by a collection of multiple roles. When a user is assigned to a group, they possess all the roles associated with that group. It is possible for a single role to be assigned to multiple groups. Security views SecurityManagementView component serves for managing users. It is available only if user is logged in with administrator rights. When user is logged in with administrator rights, it is possible to modify all available users and groups. Administrator can delete users or change group. User management The SecurityManagementView component includes a tab dedicated to user management. Within this tab, users can be updated or newly created. When a user is selected, a card is displayed showing the current data for that user, there is an option to update or delete user. Group Management The SecurityManagementView component includes a tab for group management. Within this tab, groups can be updated or newly created. When a group is selected, a card is displayed showing the assigned roles for that group. Users have the option assigned or unassign roles or delete group. Account Management In account management view is possible to change the your user data, like email address or password. User Create In user create view is possible to new user. AuthorizeView and AuthenticationContext There are two ways how to work with authentication and authorization. Use of the AuthorizeView component in Blazor component Use of the AuthenticationStateProvider within a C# class Use of AuthorizeView The AuthorizeView is used to create a secure views within a Blazor application. It contains two child components Authorized and NotAuthorized, which serves for visualizing view in a corresponded views. In addition, the parameter Roles can be used to specified roles, based on which the authorized view is shown. The AuthorizeView contain base class named context, which is used to access identity of currently logged in user. The example of usage of AuthorizeView within a Blazor component is shown below: <AuthorizeView Roles=\"Administrator\"> <Authorized> <h4>You have role Administrator.</h4> <h4>Your name is: @context.User.Identity.Name</h4> </Authorized> <NotAuthorized> <h4>You dont have role Administrator.</h4> </NotAuthorized> </AuthorizeView> If the user is authenticated and is also authorized with the Administrator role, the authorized view is shown. Otherwise, non-authorized view is displayed. Also, there is a possibility to call method from RoleGroupManager called GetRoles, which takes as parameter name of the group and returns corresponded roles. RoleGroupManager is accessible from IRepositoryService. @inject IRepositoryService rs <AuthorizeView Roles=\"@rs.RoleGroupManager.GetRoles(\"AdminGroup\")\"> Use of AuthenticationStateProvider The AuthenticationStateProvider serves for accessing current logged in user and his claims. This provider can be injected to any C# class (either from constructor injection (in ViewModel) or with Inject attribute in Blazor component), where user need to work with authentication context. The authentication context of current user can be accessed in following way: @page \"/mypage\" @inject AuthenticationStateProvider _asp @code { protected override async Task OnInitializedAsync() { var context = await _asp.GetAuthenticationStateAsync(); var isAuth = context.User.Identity.IsAuthenticated; if (isAuth) { Console.Writeline(\"I'm authenticated\"); } } }"
  },
  "index.html": {
    "href": "index.html",
    "title": "Source repositories | System.Dynamic.ExpandoObject",
    "keywords": "AXOpen is an open-source application framework project developed by a group of automation engineers. It is based on SIMATIC AX platfrom and AX# technology Source repositories AX# AXOpen Note This project is under development. We periodically release versions that can be used for testing and in non-production environments. Disclaimer Important It is necessary to have a valid license for SIMATIC AX in order to use AX# and AXOpen! SIMATIC AX is currently in a limited sales release in selected European countries only. You will need to request access from the AX team which will check if your use case is suitable for the current state of the product. The first step to getting the approval is contacting your local SIEMENS sales representative or writing an email to simatic-ax@siemens.com."
  }
}