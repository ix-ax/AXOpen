{
  "NUGET-README.html": {
    "href": "NUGET-README.html",
    "title": "AXOpen | System.Dynamic.ExpandoObject",
    "keywords": "AXOpen This package is part of AXOpen."
  },
  "README.html": {
    "href": "README.html",
    "title": "About this Repository | System.Dynamic.ExpandoObject",
    "keywords": "About this Repository Pre-requisites APAX 2.0.0 AXCODE DOTNET 6.0, 7.0 VSCODE or VS2022 Add package source To get access to the packages from AX# and AXOpen you will need to authenticate to a dedicated package feed hosted on GitHub. Authentication is free. If you do not have a GitHub account please consider creating one by signing up at https://github.com. dotnet nuget add source --username GITHUBUSERNAME --password PAT --store-password-in-clear-text --name gh-packages-ix-ax \"https://nuget.pkg.github.com/ix-ax/index.json\" Replace GITHUBUSERNAME with your github name Replace PAT with your Personal Access Token (how to create your PAT) Checking pre-requisites using script To check pre-requisites in your enviroment run check_requisites.ps1 script. # cd into your `axopen` folder .\\scripts\\check_requisites.ps1 Build this repository In order to build this repostory run build.ps1 script. # cd into your `axopen` folder .\\build.ps1 Directory Structure docfx Contains documentation for this repository. docfx/ │ ├── api/ │ └── API for .NET part of the framework (autogenerated from code) │ ├── apictlr/ │ └── API for controller part of the framework (autogenerated from code) │ ├── apidoc/ │ └── Table of contents for API documentation │ ├── articles/ │ └── Various articles │ ├── components/ │ ├── Documentation for components │ └── toc.yml (new component library doc ref needs to be added here) │ ├── framework/ │ ├── Documentation for framework │ └── toc.yml (new framework library doc ref needs to be added here) │ ├── images/ │ └── Icons and images (some are used in articles) │ └── templates/ └── Documentation site templates Note When adding a new library, update components/toc.yml for components and framework/toc.yml for framework libraries manually. To test the documentation, run the following script from the repository root folder: .\\scripts\\build_test_docu.ps1 It will create docs-test folder that is git-ignored. docs The docs folder contains the documentation site. It should be generated on the appropriate branch used to publish the documentation. Important Never commit changes to the docs directory! scripts Contains various scripts. src Contains all source code related to AXOpen. Each library is placed in a separate directory which has: library/ │ ├── app/ │ └── Sandbox for testing the library, integration tests, and documentation code (linked to the library's actual documentation) │ ├── ctrl/ │ ├── src/ # Library source code │ ├── tests/ # Unit tests │ └── docs/ # (optional) Controller code documentation │ ├── src/ # .NET twin and Blazor twin │ ├── tests/ # Tests of various levels │ ├── docs/ # Library documentation │ ├── this.proj # Traversal project. Use to create a solution file for this library [see](README.md#creating-solution-file-from-traversal-project-file) │ └── slngen.ps # Generates solution file from `this.proj` APAX Package Versions Important All apax packages on the default branch (dev) have a fixed version '0.0.0-dev.0'. This version must not be changed by any commit. The version is assigned at build time in the CI/CD pipeline. Central Package Management System This project's NuGet packages versions are organized centrally. You shouldn't assign a package version in your project file. In exceptional cases, you can use a version override. Actual versions are defined in src/Directory.Packages.props. For more information on central package management, visit here. Directory-Based Build Some build aspects of all .NET projects are defined in src/Directory.Build.props. Learn more here. Creating Solution File from Traversal Project File You will find several traversal *.proj files. These are used in the CI/CD process in place of solution *.sln files. To create solution files from traversal files, use: dotnet slngen [traversal-project-name].proj -o [output-solution-file].sln --folders true --launch false Important Re-create your solution whenever the repository changes to refresh newly added, removed, or modified projects. You can then open the solution file in Visual Studio as needed. Creating a New Library from Template Use script Run the following script from the repository root folder: .\\scripts\\create_template_library.ps1 -OutputDirectory OutputFolder -ProjectNamespace Project.Namespace For example: .\\scripts\\create_template_library.ps1 -OutputDirectory components.elements -ProjectNamespace AXOpen.Components.Elements Manual create Navigate to the src/ folder of this repository. Run the following command to update the library template: dotnet new install .\\template.axolibrary\\ --force Create a library template using: dotnet new axolibrary -o OutputFolder -p ProjectName For example: dotnet new axolibrary -o components.elements -p AXOpen.Components.Elements Note Make sure you run apax install -L and apax build after new library is created. Important Ensure you run all commands from the src folder of the repository. The -o OutputFolder parameter must be within the src folder. Important The -p ProjectName parameter must contain ONLY alphanumeric characters and dots. Otherwise, inconsistencies may occur. Creating an AXOpen Application Scaffolding the application in AXOpen repository Introduction When developing new applications using the AXOpen framework, there are multiple avenues developers can consider. The script described here provides path to one of the methods, and it's a preferred choice for AXOpen contributors. This technique grants developers the privilege of working directly with the AXOpen framework's source code. Leveraging this script ensures a streamlined process of scaffolding new applications, integrating them with the AXOpen Source Repository, and maintaining them in a dedicated directory. It's important to recognize, however, that directly interacting with the source repository can lead to slower compile and build times due to the overhead associated with managing the complete framework's source code. Leveraging the AXOpen Source Repository It's noteworthy that the .application directory is deliberately excluded from the source control of the primary repository. This design choice allows developers the flexibility to initiate their own repositories within this space, ensuring direct access and reference to the AXOpen library's source code. Scaffolding Your Application To begin scaffolding your application, you should run the scripts/create_application.ps1 command. Note While this script assists in setting up your application in the src/.application folder, it doesn't handle the initialization of source control for this directory. This step must be managed independently. Note Ensure that the src/.application directory is vacant before executing the script to prevent potential issues. .\\scripts\\create_application.ps1 -ProjectName MyNewProject When prompted Template is configured to run the following action: Actual command: install.cmd Do you want to run this action [Y(yes)|N(no)]? Answer Yes or revise the script and run it manually later from the target folder. Warning Please ensure you understand the implications of running scripts on your system. Follow the instruction in the README.md file."
  },
  "abstractions/app/ix-blazor/librarytemplate.blazor/wwwroot/css/open-iconic/README.html": {
    "href": "abstractions/app/ix-blazor/librarytemplate.blazor/wwwroot/css/open-iconic/README.html",
    "title": "Open Iconic v1.1.1 | System.Dynamic.ExpandoObject",
    "keywords": "Open Iconic v1.1.1 Open Iconic is the open source sibling of Iconic. It is a hyper-legible collection of 223 icons with a tiny footprint—ready to use with Bootstrap and Foundation. View the collection What's in Open Iconic? 223 icons designed to be legible down to 8 pixels Super-light SVG files - 61.8 for the entire set SVG sprite—the modern replacement for icon fonts Webfont (EOT, OTF, SVG, TTF, WOFF), PNG and WebP formats Webfont stylesheets (including versions for Bootstrap and Foundation) in CSS, LESS, SCSS and Stylus formats PNG and WebP raster images in 8px, 16px, 24px, 32px, 48px and 64px. Getting Started For code samples and everything else you need to get started with Open Iconic, check out our Icons and Reference sections. General Usage Using Open Iconic's SVGs We like SVGs and we think they're the way to display icons on the web. Since Open Iconic are just basic SVGs, we suggest you display them like you would any other image (don't forget the alt attribute). <img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\"> Using Open Iconic's SVG Sprite Open Iconic also comes in a SVG sprite which allows you to display all the icons in the set with a single request. It's like an icon font, without being a hack. Adding an icon from an SVG sprite is a little different than what you're used to, but it's still a piece of cake. Tip: To make your icons easily style able, we suggest adding a general class to the <svg> tag and a unique class name for each different icon in the <use> tag. <svg class=\"icon\"> <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use> </svg> Sizing icons only needs basic CSS. All the icons are in a square format, so just set the <svg> tag with equal width and height dimensions. .icon { width: 16px; height: 16px; } Coloring icons is even easier. All you need to do is set the fill rule on the <use> tag. .icon-account-login { fill: #f00; } To learn more about SVG Sprites, read Chris Coyier's guide. Using Open Iconic's Icon Font... …with Bootstrap You can find our Bootstrap stylesheets in font/css/open-iconic-bootstrap.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\"> <span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …with Foundation You can find our Foundation stylesheets in font/css/open-iconic-foundation.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\"> <span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …on its own You can find our default stylesheets in font/css/open-iconic.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\"> <span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> License Icons All code (including SVG markup) is under the MIT License. Fonts All fonts are under the SIL Licensed."
  },
  "api/AXOpen.AxoApplication.html": {
    "href": "api/AXOpen.AxoApplication.html",
    "title": "Class AxoApplication | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoApplication Namespace AXOpen Assembly AXOpen.Base.Abstractions.dll Provides application services and configuration builder for an AxoApplication. public class AxoApplication : IAxoApplication, IAxoApplicationBuilder Inheritance object AxoApplication Implements IAxoApplication IAxoApplicationBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties Current Get currently running application. public static IAxoApplication Current { get; } Property Value IAxoApplication Logger Gets logger configured for this application. public ILogger Logger { get; } Property Value ILogger Methods Build() Builds an AxoApplication. public IAxoApplication Build() Returns IAxoApplication AxoApplication ConfigureLogger(ILogger) Configures logger for an AxoApplication public IAxoApplicationBuilder ConfigureLogger(ILogger logger) Parameters logger ILogger AxoLogger Returns IAxoApplicationBuilder Application builder. CreateBuilder() public static IAxoApplicationBuilder CreateBuilder() Returns IAxoApplicationBuilder"
  },
  "api/AXOpen.Base.Data.DataBrowser-1.html": {
    "href": "api/AXOpen.Base.Data.DataBrowser-1.html",
    "title": "Class DataBrowser<T> | System.Dynamic.ExpandoObject",
    "keywords": "Class DataBrowser<T> Namespace AXOpen.Base.Data Assembly AXOpen.Base.Abstractions.dll public class DataBrowser<T> : IDataBrowser where T : IBrowsableDataObject, new() Type Parameters T Inheritance object DataBrowser<T> Implements IDataBrowser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors DataBrowser(IRepository<T>) public DataBrowser(IRepository<T> repository) Parameters repository IRepository<T> Properties Count public long Count { get; } Property Value long Records public IList<T> Records { get; protected set; } Property Value IList<T> Repository protected IRepository<T> Repository { get; set; } Property Value IRepository<T> Methods AddRecord(T) public void AddRecord(T data) Parameters data T Delete(T) public void Delete(T data) Parameters data T Export(Expression<Func<T, bool>>, char) public IEnumerable<string> Export(Expression<Func<T, bool>> expression, char separator = ';') Parameters expression Expression<Func<T, bool>> separator char Returns IEnumerable<string> Filter(string, int, int, eSearchMode) public void Filter(string identifier, int limit = 10, int skip = 0, eSearchMode searchMode = eSearchMode.Exact) Parameters identifier string limit int skip int searchMode eSearchMode FilteredCount(string, eSearchMode) public long FilteredCount(string id, eSearchMode searchMode = eSearchMode.Exact) Parameters id string searchMode eSearchMode Returns long FindByCreatedRange(DateTime, DateTime) public IEnumerable<T> FindByCreatedRange(DateTime start, DateTime end) Parameters start DateTime end DateTime Returns IEnumerable<T> FindById(string) public T FindById(string id) Parameters id string Returns T FindByModifiedRange(DateTime, DateTime) public IEnumerable<T> FindByModifiedRange(DateTime start, DateTime end) Parameters start DateTime end DateTime Returns IEnumerable<T> GetRecords(Expression<Func<T, bool>>) public IQueryable<T> GetRecords(Expression<Func<T, bool>> expression) Parameters expression Expression<Func<T, bool>> Returns IQueryable<T> Import(IEnumerable<string>, ITwinObject, char) public void Import(IEnumerable<string> records, ITwinObject crudDataObject = null, char separator = ';') Parameters records IEnumerable<string> crudDataObject ITwinObject separator char UpdateRecord(T) public IEnumerable<DataItemValidation> UpdateRecord(T data) Parameters data T Returns IEnumerable<DataItemValidation>"
  },
  "api/AXOpen.Base.Data.DataBrowser.html": {
    "href": "api/AXOpen.Base.Data.DataBrowser.html",
    "title": "Class DataBrowser | System.Dynamic.ExpandoObject",
    "keywords": "Class DataBrowser Namespace AXOpen.Base.Data Assembly AXOpen.Base.Abstractions.dll public static class DataBrowser Inheritance object DataBrowser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create<T>(IRepository<T>) public static DataBrowser<T> Create<T>(IRepository<T> repository) where T : IBrowsableDataObject, new() Parameters repository IRepository<T> Returns DataBrowser<T> Type Parameters T Factory<T>(IRepository<T>) public static DataBrowser<T> Factory<T>(IRepository<T> repository) where T : IBrowsableDataObject, new() Parameters repository IRepository<T> Returns DataBrowser<T> Type Parameters T"
  },
  "api/AXOpen.Base.Data.DataHelpers.html": {
    "href": "api/AXOpen.Base.Data.DataHelpers.html",
    "title": "Class DataHelpers | System.Dynamic.ExpandoObject",
    "keywords": "Class DataHelpers Namespace AXOpen.Base.Data Assembly AXOpen.Base.Abstractions.dll public static class DataHelpers Inheritance object DataHelpers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateUid() public static Guid CreateUid() Returns Guid"
  },
  "api/AXOpen.Base.Data.DataItemValidation.html": {
    "href": "api/AXOpen.Base.Data.DataItemValidation.html",
    "title": "Class DataItemValidation | System.Dynamic.ExpandoObject",
    "keywords": "Class DataItemValidation Namespace AXOpen.Base.Data Assembly AXOpen.Base.Abstractions.dll Provides basic information about the validation state. public class DataItemValidation Inheritance object DataItemValidation Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors DataItemValidation(string, bool) Creates new instance of DataItemValidation public DataItemValidation(string error, bool failed) Parameters error string Error message providing details about failed validation. failed bool Indicates that the valiation failed. Properties Error Get validation error description. public string Error { get; } Property Value string Failed Gets failed when the validation failed. public bool Failed { get; } Property Value bool"
  },
  "api/AXOpen.Base.Data.DateTimeProviderBase.html": {
    "href": "api/AXOpen.Base.Data.DateTimeProviderBase.html",
    "title": "Class DateTimeProviderBase | System.Dynamic.ExpandoObject",
    "keywords": "Class DateTimeProviderBase Namespace AXOpen.Base.Data Assembly AXOpen.Base.Abstractions.dll public abstract class DateTimeProviderBase Inheritance object DateTimeProviderBase Derived StandardDateTimeProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors DateTimeProviderBase() protected DateTimeProviderBase() Properties Now public abstract DateTime Now { get; } Property Value DateTime"
  },
  "api/AXOpen.Base.Data.DateTimeProviders.html": {
    "href": "api/AXOpen.Base.Data.DateTimeProviders.html",
    "title": "Class DateTimeProviders | System.Dynamic.ExpandoObject",
    "keywords": "Class DateTimeProviders Namespace AXOpen.Base.Data Assembly AXOpen.Base.Abstractions.dll public static class DateTimeProviders Inheritance object DateTimeProviders Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DateTimeProvider public static DateTimeProviderBase DateTimeProvider { get; set; } Property Value DateTimeProviderBase"
  },
  "api/AXOpen.Base.Data.DelegateAlreadySetException.html": {
    "href": "api/AXOpen.Base.Data.DelegateAlreadySetException.html",
    "title": "Class DelegateAlreadySetException | System.Dynamic.ExpandoObject",
    "keywords": "Class DelegateAlreadySetException Namespace AXOpen.Base.Data Assembly AXOpen.Base.Abstractions.dll public class DelegateAlreadySetException : Exception, ISerializable Inheritance object Exception DelegateAlreadySetException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors DelegateAlreadySetException() When you try to set a delegate that has already been set elsewhere this exception will occur. Investigate what was the purpose of the delegate you want to override, and make sure that you don't need the functionality anymore. If you need the functionality, be sure to include it in the new delegate. public DelegateAlreadySetException()"
  },
  "api/AXOpen.Base.Data.DuplicateIdException.html": {
    "href": "api/AXOpen.Base.Data.DuplicateIdException.html",
    "title": "Class DuplicateIdException | System.Dynamic.ExpandoObject",
    "keywords": "Class DuplicateIdException Namespace AXOpen.Base.Data Assembly AXOpen.Base.Abstractions.dll public class DuplicateIdException : Exception, ISerializable Inheritance object Exception DuplicateIdException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors DuplicateIdException(string, Exception) public DuplicateIdException(string message, Exception innerException) Parameters message string innerException Exception"
  },
  "api/AXOpen.Base.Data.IBrowsableDataObject.html": {
    "href": "api/AXOpen.Base.Data.IBrowsableDataObject.html",
    "title": "Interface IBrowsableDataObject | System.Dynamic.ExpandoObject",
    "keywords": "Interface IBrowsableDataObject Namespace AXOpen.Base.Data Assembly AXOpen.Base.Abstractions.dll public interface IBrowsableDataObject Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties DataEntityId string DataEntityId { get; set; } Property Value string RecordId dynamic RecordId { get; set; } Property Value dynamic"
  },
  "api/AXOpen.Base.Data.IDataBrowser.html": {
    "href": "api/AXOpen.Base.Data.IDataBrowser.html",
    "title": "Interface IDataBrowser | System.Dynamic.ExpandoObject",
    "keywords": "Interface IDataBrowser Namespace AXOpen.Base.Data Assembly AXOpen.Base.Abstractions.dll public interface IDataBrowser Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties Count long Count { get; } Property Value long Records IList<object> Records { get; } Property Value IList<object> Methods AddRecord(object) void AddRecord(object data) Parameters data object CreateEmpty() object CreateEmpty() Returns object Delete(object) void Delete(object data) Parameters data object Filter(string, int, int, eSearchMode) void Filter(string identifier, int limit, int skip, eSearchMode searchMode) Parameters identifier string limit int skip int searchMode eSearchMode FilteredCount(string, eSearchMode) long FilteredCount(string id, eSearchMode searchMode) Parameters id string searchMode eSearchMode Returns long FindByCreatedRange(DateTime, DateTime) IEnumerable<object> FindByCreatedRange(DateTime start, DateTime end) Parameters start DateTime end DateTime Returns IEnumerable<object> FindById(string) object FindById(string id) Parameters id string Returns object FindByModifiedRange(DateTime, DateTime) IEnumerable<object> FindByModifiedRange(DateTime start, DateTime end) Parameters start DateTime end DateTime Returns IEnumerable<object> UpdateRecord(object) void UpdateRecord(object data) Parameters data object"
  },
  "api/AXOpen.Base.Data.IPlainExtensions.html": {
    "href": "api/AXOpen.Base.Data.IPlainExtensions.html",
    "title": "Class IPlainExtensions | System.Dynamic.ExpandoObject",
    "keywords": "Class IPlainExtensions Namespace AXOpen.Base.Data Assembly AXOpen.Base.Abstractions.dll public static class IPlainExtensions Inheritance object IPlainExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ShadowToPlain1<T>(object, ITwinObject) public static T ShadowToPlain1<T>(this object obj, ITwinObject twin) Parameters obj object twin ITwinObject Returns T Type Parameters T"
  },
  "api/AXOpen.Base.Data.IRepository-1.html": {
    "href": "api/AXOpen.Base.Data.IRepository-1.html",
    "title": "Interface IRepository<T> | System.Dynamic.ExpandoObject",
    "keywords": "Interface IRepository<T> Namespace AXOpen.Base.Data Assembly AXOpen.Base.Abstractions.dll public interface IRepository<T> where T : IBrowsableDataObject Type Parameters T Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties Count long Count { get; } Property Value long OnCreate OnCreateDelegate<T> OnCreate { get; set; } Property Value OnCreateDelegate<T> OnCreateDone OnCreateDoneDelegate<T> OnCreateDone { get; set; } Property Value OnCreateDoneDelegate<T> OnCreateFailed OnCreateFailedDelegate<T> OnCreateFailed { get; set; } Property Value OnCreateFailedDelegate<T> OnDelete OnDeleteDelegate OnDelete { get; set; } Property Value OnDeleteDelegate OnDeleteDone OnDeleteDoneDelegate OnDeleteDone { get; set; } Property Value OnDeleteDoneDelegate OnDeleteFailed OnDeleteFailedDelegate OnDeleteFailed { get; set; } Property Value OnDeleteFailedDelegate OnRead OnReadDelegate OnRead { get; set; } Property Value OnReadDelegate OnReadDone OnReadDoneDelegate<T> OnReadDone { get; set; } Property Value OnReadDoneDelegate<T> OnReadFailed OnReadFailedDelegate OnReadFailed { get; set; } Property Value OnReadFailedDelegate OnRecordUpdateValidation ValidateDataDelegate<T> OnRecordUpdateValidation { get; set; } Property Value ValidateDataDelegate<T> OnUpdate OnUpdateDelegate<T> OnUpdate { get; set; } Property Value OnUpdateDelegate<T> OnUpdateDone OnUpdateDoneDelegate<T> OnUpdateDone { get; set; } Property Value OnUpdateDoneDelegate<T> OnUpdateFailed OnUpdateFailedDelegate<T> OnUpdateFailed { get; set; } Property Value OnUpdateFailedDelegate<T> Queryable IQueryable<T> Queryable { get; } Property Value IQueryable<T> Methods Create(string, T) void Create(string identifier, T data) Parameters identifier string data T Delete(string) void Delete(string identifier) Parameters identifier string Exists(string) bool Exists(string identifier) Parameters identifier string Returns bool FilteredCount(string, eSearchMode) long FilteredCount(string id, eSearchMode searchMode = eSearchMode.Exact) Parameters id string searchMode eSearchMode Returns long GetRecords(string, int, int, eSearchMode) IEnumerable<T> GetRecords(string identifier = \"*\", int limit = 100, int skip = 0, eSearchMode searchMode = eSearchMode.Exact) Parameters identifier string limit int skip int searchMode eSearchMode Returns IEnumerable<T> Read(string) T Read(string identifier) Parameters identifier string Returns T Update(string, T) void Update(string identifier, T data) Parameters identifier string data T"
  },
  "api/AXOpen.Base.Data.IRepository.html": {
    "href": "api/AXOpen.Base.Data.IRepository.html",
    "title": "Interface IRepository | System.Dynamic.ExpandoObject",
    "keywords": "Interface IRepository Namespace AXOpen.Base.Data Assembly AXOpen.Base.Abstractions.dll public interface IRepository Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties Count long Count { get; } Property Value long Methods Create(string, object) void Create(string identifier, object data) Parameters identifier string data object Delete(string) void Delete(string identifier) Parameters identifier string Exists(string) bool Exists(string identifier) Parameters identifier string Returns bool FilteredCount(string, eSearchMode) long FilteredCount(string id, eSearchMode searchMode = eSearchMode.Exact) Parameters id string searchMode eSearchMode Returns long Read(string) dynamic Read(string identifier) Parameters identifier string Returns dynamic Update(string, object) void Update(string identifier, object data) Parameters identifier string data object"
  },
  "api/AXOpen.Base.Data.IdentifierValueMismatchedException.html": {
    "href": "api/AXOpen.Base.Data.IdentifierValueMismatchedException.html",
    "title": "Class IdentifierValueMismatchedException | System.Dynamic.ExpandoObject",
    "keywords": "Class IdentifierValueMismatchedException Namespace AXOpen.Base.Data Assembly AXOpen.Base.Abstractions.dll Thrown when the id of the data structure does not match the required record/document id. public class IdentifierValueMismatchedException : Exception, ISerializable Inheritance object Exception IdentifierValueMismatchedException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors IdentifierValueMismatchedException() public IdentifierValueMismatchedException() IdentifierValueMismatchedException(SerializationInfo, StreamingContext) Initializes a new instance of the IdentifierValueMismatchedException class with serialized data. protected IdentifierValueMismatchedException(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. context StreamingContext The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. Exceptions System.ArgumentNullException The info parameter is null. System.Runtime.Serialization.SerializationException The class name is null or System.Exception.HResult is zero (0). IdentifierValueMismatchedException(string, Exception) Initializes a new instance of the IdentifierValueMismatchedException class with a specified error message and a reference to the inner exception that is the cause of this exception. public IdentifierValueMismatchedException(string message, Exception innerException) Parameters message string The error message that explains the reason for the exception. innerException Exception The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. IdentifierValueMismatchedException(string) Initializes a new instance of the IdentifierValueMismatchedException class with a specified error message. public IdentifierValueMismatchedException(string message) Parameters message string The message that describes the error."
  },
  "api/AXOpen.Base.Data.OnCreateDelegate-1.html": {
    "href": "api/AXOpen.Base.Data.OnCreateDelegate-1.html",
    "title": "Delegate OnCreateDelegate<T> | System.Dynamic.ExpandoObject",
    "keywords": "Delegate OnCreateDelegate<T> Namespace AXOpen.Base.Data Assembly AXOpen.Base.Abstractions.dll public delegate void OnCreateDelegate<T>(string id, T data) Parameters id string data T Type Parameters T Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/AXOpen.Base.Data.OnCreateDoneDelegate-1.html": {
    "href": "api/AXOpen.Base.Data.OnCreateDoneDelegate-1.html",
    "title": "Delegate OnCreateDoneDelegate<T> | System.Dynamic.ExpandoObject",
    "keywords": "Delegate OnCreateDoneDelegate<T> Namespace AXOpen.Base.Data Assembly AXOpen.Base.Abstractions.dll public delegate void OnCreateDoneDelegate<T>(string id, T data) Parameters id string data T Type Parameters T Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/AXOpen.Base.Data.OnCreateFailedDelegate-1.html": {
    "href": "api/AXOpen.Base.Data.OnCreateFailedDelegate-1.html",
    "title": "Delegate OnCreateFailedDelegate<T> | System.Dynamic.ExpandoObject",
    "keywords": "Delegate OnCreateFailedDelegate<T> Namespace AXOpen.Base.Data Assembly AXOpen.Base.Abstractions.dll public delegate void OnCreateFailedDelegate<T>(string id, T data, Exception ex) Parameters id string data T ex Exception Type Parameters T Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/AXOpen.Base.Data.OnDeleteDelegate.html": {
    "href": "api/AXOpen.Base.Data.OnDeleteDelegate.html",
    "title": "Delegate OnDeleteDelegate | System.Dynamic.ExpandoObject",
    "keywords": "Delegate OnDeleteDelegate Namespace AXOpen.Base.Data Assembly AXOpen.Base.Abstractions.dll public delegate void OnDeleteDelegate(string id) Parameters id string Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/AXOpen.Base.Data.OnDeleteDoneDelegate.html": {
    "href": "api/AXOpen.Base.Data.OnDeleteDoneDelegate.html",
    "title": "Delegate OnDeleteDoneDelegate | System.Dynamic.ExpandoObject",
    "keywords": "Delegate OnDeleteDoneDelegate Namespace AXOpen.Base.Data Assembly AXOpen.Base.Abstractions.dll public delegate void OnDeleteDoneDelegate(string id) Parameters id string Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/AXOpen.Base.Data.OnDeleteFailedDelegate.html": {
    "href": "api/AXOpen.Base.Data.OnDeleteFailedDelegate.html",
    "title": "Delegate OnDeleteFailedDelegate | System.Dynamic.ExpandoObject",
    "keywords": "Delegate OnDeleteFailedDelegate Namespace AXOpen.Base.Data Assembly AXOpen.Base.Abstractions.dll public delegate void OnDeleteFailedDelegate(string id, Exception ex) Parameters id string ex Exception Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/AXOpen.Base.Data.OnReadDelegate.html": {
    "href": "api/AXOpen.Base.Data.OnReadDelegate.html",
    "title": "Delegate OnReadDelegate | System.Dynamic.ExpandoObject",
    "keywords": "Delegate OnReadDelegate Namespace AXOpen.Base.Data Assembly AXOpen.Base.Abstractions.dll public delegate void OnReadDelegate(string id) Parameters id string Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/AXOpen.Base.Data.OnReadDoneDelegate-1.html": {
    "href": "api/AXOpen.Base.Data.OnReadDoneDelegate-1.html",
    "title": "Delegate OnReadDoneDelegate<T> | System.Dynamic.ExpandoObject",
    "keywords": "Delegate OnReadDoneDelegate<T> Namespace AXOpen.Base.Data Assembly AXOpen.Base.Abstractions.dll public delegate void OnReadDoneDelegate<T>(string id, T data) Parameters id string data T Type Parameters T Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/AXOpen.Base.Data.OnReadFailedDelegate.html": {
    "href": "api/AXOpen.Base.Data.OnReadFailedDelegate.html",
    "title": "Delegate OnReadFailedDelegate | System.Dynamic.ExpandoObject",
    "keywords": "Delegate OnReadFailedDelegate Namespace AXOpen.Base.Data Assembly AXOpen.Base.Abstractions.dll public delegate void OnReadFailedDelegate(string id, Exception ex) Parameters id string ex Exception Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/AXOpen.Base.Data.OnUpdateDelegate-1.html": {
    "href": "api/AXOpen.Base.Data.OnUpdateDelegate-1.html",
    "title": "Delegate OnUpdateDelegate<T> | System.Dynamic.ExpandoObject",
    "keywords": "Delegate OnUpdateDelegate<T> Namespace AXOpen.Base.Data Assembly AXOpen.Base.Abstractions.dll public delegate void OnUpdateDelegate<T>(string id, T data) Parameters id string data T Type Parameters T Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/AXOpen.Base.Data.OnUpdateDoneDelegate-1.html": {
    "href": "api/AXOpen.Base.Data.OnUpdateDoneDelegate-1.html",
    "title": "Delegate OnUpdateDoneDelegate<T> | System.Dynamic.ExpandoObject",
    "keywords": "Delegate OnUpdateDoneDelegate<T> Namespace AXOpen.Base.Data Assembly AXOpen.Base.Abstractions.dll public delegate void OnUpdateDoneDelegate<T>(string id, T data) Parameters id string data T Type Parameters T Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/AXOpen.Base.Data.OnUpdateFailedDelegate-1.html": {
    "href": "api/AXOpen.Base.Data.OnUpdateFailedDelegate-1.html",
    "title": "Delegate OnUpdateFailedDelegate<T> | System.Dynamic.ExpandoObject",
    "keywords": "Delegate OnUpdateFailedDelegate<T> Namespace AXOpen.Base.Data Assembly AXOpen.Base.Abstractions.dll public delegate void OnUpdateFailedDelegate<T>(string id, T data, Exception ex) Parameters id string data T ex Exception Type Parameters T Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/AXOpen.Base.Data.RepositoryBase-1.html": {
    "href": "api/AXOpen.Base.Data.RepositoryBase-1.html",
    "title": "Class RepositoryBase<T> | System.Dynamic.ExpandoObject",
    "keywords": "Class RepositoryBase<T> Namespace AXOpen.Base.Data Assembly AXOpen.Base.Abstractions.dll Base class for data repositories. public abstract class RepositoryBase<T> : IRepository<T>, IRepository where T : IBrowsableDataObject Type Parameters T Type of data object. Inheritance object RepositoryBase<T> Implements IRepository<T> IRepository Derived InMemoryRepository<T> JsonRepository<T> MongoDbRepository<T> RavenDbRepository<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties Count Gets the number of records/documents in the repository. public long Count { get; } Property Value long CountNvi Counts the records/documents in the repository. (Concrete implementation of given repository type) protected abstract long CountNvi { get; } Property Value long OnCreate Gets or sets delegate that executes prior to new entry into repository. public OnCreateDelegate<T> OnCreate { get; set; } Property Value OnCreateDelegate<T> OnCreateDone Gets or sets delegate that executes after a new entry has been added sucesfully. public OnCreateDoneDelegate<T> OnCreateDone { get; set; } Property Value OnCreateDoneDelegate<T> OnCreateFailed Gets or sets delegate that executes after a new entry has NOT been added sucesfully. public OnCreateFailedDelegate<T> OnCreateFailed { get; set; } Property Value OnCreateFailedDelegate<T> OnDelete Gets or sets delegate that executes prior to deleting existing record. public OnDeleteDelegate OnDelete { get; set; } Property Value OnDeleteDelegate OnDeleteDone Gets or sets delegate that executes after an entry has been deleted sucesfully. public OnDeleteDoneDelegate OnDeleteDone { get; set; } Property Value OnDeleteDoneDelegate OnDeleteFailed Gets or sets delegate that executes after an entry has NOT been deleted sucesfully. public OnDeleteFailedDelegate OnDeleteFailed { get; set; } Property Value OnDeleteFailedDelegate OnRead Gets or sets delegate that executes prior to new reading data from repository public OnReadDelegate OnRead { get; set; } Property Value OnReadDelegate OnReadDone Gets or sets delegate that executes after an entry has been read sucesfully. public OnReadDoneDelegate<T> OnReadDone { get; set; } Property Value OnReadDoneDelegate<T> OnReadFailed Gets or sets delegate that executes after an entry has NOT been read sucesfully. public OnReadFailedDelegate OnReadFailed { get; set; } Property Value OnReadFailedDelegate OnRecordUpdateValidation public ValidateDataDelegate<T> OnRecordUpdateValidation { get; set; } Property Value ValidateDataDelegate<T> OnUpdate Gets or sets delegate that executes prior to updating existing record. public OnUpdateDelegate<T> OnUpdate { get; set; } Property Value OnUpdateDelegate<T> OnUpdateDone Gets or sets delegate that executes after an entry has been updated sucesfully. public OnUpdateDoneDelegate<T> OnUpdateDone { get; set; } Property Value OnUpdateDoneDelegate<T> OnUpdateFailed Gets or sets delegate that executes after an entry has NOT been updated sucesfully. public OnUpdateFailedDelegate<T> OnUpdateFailed { get; set; } Property Value OnUpdateFailedDelegate<T> Queryable Gets System.Linq.IQueryable of given repository. public abstract IQueryable<T> Queryable { get; } Property Value IQueryable<T> Methods Create(string, T) Creates a new record/document in the repository. public void Create(string identifier, T data) Parameters identifier string Unique identifier of the record/repository data T Data object. CreateNvi(string, T) Creates a new record/document in the repository. (Concrete implementation of given repository type) protected abstract void CreateNvi(string identifier, T data) Parameters identifier string Unique identifier of the record/repository data T Data object. Delete(string) Deletes an existing record/document. (Concrete implementation of given repository type) public void Delete(string identifier) Parameters identifier string Unique identifier of the record/document to delete. DeleteNvi(string) Deletes an existing record/document. (Concrete implementation of given repository type) protected abstract void DeleteNvi(string identifier) Parameters identifier string Unique identifier of the record/document to delete. Exists(string) public bool Exists(string identifier) Parameters identifier string Returns bool ExistsNvi(string) Checks that the record with given identifier exists in the repository. protected abstract bool ExistsNvi(string identifier) Parameters identifier string Entity id to check for existence. Returns bool FilteredCount(string, eSearchMode) Gets the count of the records/documents that contain given string in the identifier. public long FilteredCount(string identifierContent, eSearchMode searchMode) Parameters identifierContent string String required to be contained in the identifier of the records/documents. searchMode eSearchMode Returns long FilteredCountNvi(string, eSearchMode) Counts records that contain given string in the id. (Concrete implementation of given repository type) protected abstract long FilteredCountNvi(string identifierContent, eSearchMode searchMode) Parameters identifierContent string String required to be contained in the identifier of the records/documents. searchMode eSearchMode Returns long GetRecords(string, int, int, eSearchMode) Gets System.Collections.Generic.IEnumerable<T> of repository entries that match the identifier. public IEnumerable<T> GetRecords(string identifier, int limit = 10, int skip = 0, eSearchMode searchMode = eSearchMode.Exact) Parameters identifier string limit int skip int searchMode eSearchMode Returns IEnumerable<T> GetRecordsNvi(string, int, int, eSearchMode) Retrieves records/documents that contain given string in the identifier. (Concrete implementation of given repository type) protected abstract IEnumerable<T> GetRecordsNvi(string identifierContent, int limit, int skip, eSearchMode searchMode) Parameters identifierContent string String required to be contained in the identifier of records/documents. limit int Limit of documents to retrieve. skip int Number of documents to be skipped. searchMode eSearchMode Returns IEnumerable<T> Read(string) Reads en existing record/document from the repository. public T Read(string identifier) Parameters identifier string Unique identifier of the record/document to read. Returns T Retrieved data object. ReadNvi(string) Reads en existing record/document from the repository. (Concrete implementation of given repository type) protected abstract T ReadNvi(string identifier) Parameters identifier string Unique identifier of the record/document to read. Returns T Retrieved data object. Update(string, T) Updates an existing record/document. public void Update(string identifier, T data) Parameters identifier string Unique identifier of the record/document to update. data T Data object with updated content. UpdateNvi(string, T) Updates an existing record/document. (Concrete implementation of given repository type) protected abstract void UpdateNvi(string identifier, T data) Parameters identifier string Unique identifier of the record/document to update. data T Data object with updated content."
  },
  "api/AXOpen.Base.Data.RepositoryNotInitializedException.html": {
    "href": "api/AXOpen.Base.Data.RepositoryNotInitializedException.html",
    "title": "Class RepositoryNotInitializedException | System.Dynamic.ExpandoObject",
    "keywords": "Class RepositoryNotInitializedException Namespace AXOpen.Base.Data Assembly AXOpen.Base.Abstractions.dll public class RepositoryNotInitializedException : Exception, ISerializable Inheritance object Exception RepositoryNotInitializedException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors RepositoryNotInitializedException() Initializes a new instance of the RepositoryNotInitializedException class. public RepositoryNotInitializedException() RepositoryNotInitializedException(SerializationInfo, StreamingContext) Initializes a new instance of the RepositoryNotInitializedException class with serialized data. protected RepositoryNotInitializedException(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. context StreamingContext The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. Exceptions System.ArgumentNullException The info parameter is null. System.Runtime.Serialization.SerializationException The class name is null or System.Exception.HResult is zero (0). RepositoryNotInitializedException(string, Exception) Initializes a new instance of the RepositoryNotInitializedException class with a specified error message and a reference to the inner exception that is the cause of this exception. public RepositoryNotInitializedException(string message, Exception innerException) Parameters message string The error message that explains the reason for the exception. innerException Exception The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. RepositoryNotInitializedException(string) Initializes a new instance of the RepositoryNotInitializedException class with a specified error message. public RepositoryNotInitializedException(string message) Parameters message string The message that describes the error."
  },
  "api/AXOpen.Base.Data.RepositorySettings.html": {
    "href": "api/AXOpen.Base.Data.RepositorySettings.html",
    "title": "Class RepositorySettings | System.Dynamic.ExpandoObject",
    "keywords": "Class RepositorySettings Namespace AXOpen.Base.Data Assembly AXOpen.Base.Abstractions.dll public abstract class RepositorySettings Inheritance object RepositorySettings Derived InMemoryRepositorySettings<T> JsonRepositorySettings<T> MongoDbRepositorySettings<T> RavenDbRepositorySettingsBase<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/AXOpen.Base.Data.SearchOptions.html": {
    "href": "api/AXOpen.Base.Data.SearchOptions.html",
    "title": "Class SearchOptions | System.Dynamic.ExpandoObject",
    "keywords": "Class SearchOptions Namespace AXOpen.Base.Data Assembly AXOpen.Base.Abstractions.dll public class SearchOptions Inheritance object SearchOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties SearchMode public eSearchMode SearchMode { get; set; } Property Value eSearchMode"
  },
  "api/AXOpen.Base.Data.StandardDateTimeProvider.html": {
    "href": "api/AXOpen.Base.Data.StandardDateTimeProvider.html",
    "title": "Class StandardDateTimeProvider | System.Dynamic.ExpandoObject",
    "keywords": "Class StandardDateTimeProvider Namespace AXOpen.Base.Data Assembly AXOpen.Base.Abstractions.dll public class StandardDateTimeProvider : DateTimeProviderBase Inheritance object DateTimeProviderBase StandardDateTimeProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties Now public override DateTime Now { get; } Property Value DateTime"
  },
  "api/AXOpen.Base.Data.UnableToLocateRecordId.html": {
    "href": "api/AXOpen.Base.Data.UnableToLocateRecordId.html",
    "title": "Class UnableToLocateRecordId | System.Dynamic.ExpandoObject",
    "keywords": "Class UnableToLocateRecordId Namespace AXOpen.Base.Data Assembly AXOpen.Base.Abstractions.dll public class UnableToLocateRecordId : Exception, ISerializable Inheritance object Exception UnableToLocateRecordId Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors UnableToLocateRecordId(string, Exception) public UnableToLocateRecordId(string message, Exception innerException) Parameters message string innerException Exception"
  },
  "api/AXOpen.Base.Data.UnableToUpdateRecord.html": {
    "href": "api/AXOpen.Base.Data.UnableToUpdateRecord.html",
    "title": "Class UnableToUpdateRecord | System.Dynamic.ExpandoObject",
    "keywords": "Class UnableToUpdateRecord Namespace AXOpen.Base.Data Assembly AXOpen.Base.Abstractions.dll public class UnableToUpdateRecord : Exception, ISerializable Inheritance object Exception UnableToUpdateRecord Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors UnableToUpdateRecord(string, Exception) public UnableToUpdateRecord(string message, Exception innerException) Parameters message string innerException Exception"
  },
  "api/AXOpen.Base.Data.ValidateDataDelegate-1.html": {
    "href": "api/AXOpen.Base.Data.ValidateDataDelegate-1.html",
    "title": "Delegate ValidateDataDelegate<T> | System.Dynamic.ExpandoObject",
    "keywords": "Delegate ValidateDataDelegate<T> Namespace AXOpen.Base.Data Assembly AXOpen.Base.Abstractions.dll public delegate IEnumerable<DataItemValidation> ValidateDataDelegate<T>(T data) Parameters data T Returns IEnumerable<DataItemValidation> Type Parameters T Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/AXOpen.Base.Data.eSearchMode.html": {
    "href": "api/AXOpen.Base.Data.eSearchMode.html",
    "title": "Enum eSearchMode | System.Dynamic.ExpandoObject",
    "keywords": "Enum eSearchMode Namespace AXOpen.Base.Data Assembly AXOpen.Base.Abstractions.dll public enum eSearchMode Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Fields Contains = 2 Exact = 0 StartsWith = 1"
  },
  "api/AXOpen.Base.Data.html": {
    "href": "api/AXOpen.Base.Data.html",
    "title": "Namespace AXOpen.Base.Data | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen.Base.Data Classes DataBrowser DataBrowser<T> DataHelpers DataItemValidation Provides basic information about the validation state. DateTimeProviderBase DateTimeProviders DelegateAlreadySetException DuplicateIdException IdentifierValueMismatchedException Thrown when the id of the data structure does not match the required record/document id. IPlainExtensions RepositoryBase<T> Base class for data repositories. RepositoryNotInitializedException RepositorySettings SearchOptions StandardDateTimeProvider UnableToLocateRecordId UnableToUpdateRecord Interfaces IBrowsableDataObject IDataBrowser IRepository IRepository<T> Enums eSearchMode Delegates OnCreateDelegate<T> OnCreateDoneDelegate<T> OnCreateFailedDelegate<T> OnDeleteDelegate OnDeleteDoneDelegate OnDeleteFailedDelegate OnReadDelegate OnReadDoneDelegate<T> OnReadFailedDelegate OnUpdateDelegate<T> OnUpdateDoneDelegate<T> OnUpdateFailedDelegate<T> ValidateDataDelegate<T>"
  },
  "api/AXOpen.Base.Dialogs.IAlertDialog.html": {
    "href": "api/AXOpen.Base.Dialogs.IAlertDialog.html",
    "title": "Interface IAlertDialog | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAlertDialog Namespace AXOpen.Base.Dialogs Assembly AXOpen.Base.Abstractions.dll public interface IAlertDialog Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties Id Guid Id { get; set; } Property Value Guid Message string Message { get; set; } Property Value string Posted DateTimeOffset Posted { get; set; } Property Value DateTimeOffset TimeToBurn DateTimeOffset TimeToBurn { get; set; } Property Value DateTimeOffset Title string Title { get; set; } Property Value string Type eAlertDialogType Type { get; set; } Property Value eAlertDialogType"
  },
  "api/AXOpen.Base.Dialogs.IAlertDialogService.html": {
    "href": "api/AXOpen.Base.Dialogs.IAlertDialogService.html",
    "title": "Interface IAlertDialogService | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAlertDialogService Namespace AXOpen.Base.Dialogs Assembly AXOpen.Base.Abstractions.dll public interface IAlertDialogService Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Methods AddAlertDialog(eAlertDialogType, string, string, int) void AddAlertDialog(eAlertDialogType type, string title, string message, int time) Parameters type eAlertDialogType title string message string time int AddAlertDialog(IAlertDialog) void AddAlertDialog(IAlertDialog toast) Parameters toast IAlertDialog GetAlertDialogs() List<IAlertDialog> GetAlertDialogs() Returns List<IAlertDialog> RemoveAlertDialog(IAlertDialog) void RemoveAlertDialog(IAlertDialog toast) Parameters toast IAlertDialog RemoveAllAlertDialogs() void RemoveAllAlertDialogs() Events AlertDialogChanged event EventHandler? AlertDialogChanged Event Type EventHandler"
  },
  "api/AXOpen.Base.Dialogs.IsAlertDialogType.html": {
    "href": "api/AXOpen.Base.Dialogs.IsAlertDialogType.html",
    "title": "Interface IsAlertDialogType | System.Dynamic.ExpandoObject",
    "keywords": "Interface IsAlertDialogType Namespace AXOpen.Base.Dialogs Assembly AXOpen.Base.Abstractions.dll public interface IsAlertDialogType : IsDialogType, ITwinObject, ITwinElement Inherited Members IsDialogType.DialogId IsDialogType.Initialize(Action) IsDialogType.DeInitialize() ITwinObject.GetChildren() ITwinObject.GetKids() ITwinObject.GetValueTags() ITwinObject.AddChild(ITwinObject) ITwinObject.AddValueTag(ITwinPrimitive) ITwinObject.AddKid(ITwinElement) ITwinObject.GetConnector() ITwinObject.OnlineToPlain<T>() ITwinObject.PlainToOnline<T>(T) ITwinObject.ShadowToPlain<T>() ITwinObject.PlainToShadow<T>(T) ITwinElement.GetParent() ITwinElement.GetSymbolTail() ITwinElement.Poll() ITwinElement.Symbol ITwinElement.AttributeName ITwinElement.HumanReadable ITwinElement.Interpreter Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/AXOpen.Base.Dialogs.IsDialogType.html": {
    "href": "api/AXOpen.Base.Dialogs.IsDialogType.html",
    "title": "Interface IsDialogType | System.Dynamic.ExpandoObject",
    "keywords": "Interface IsDialogType Namespace AXOpen.Base.Dialogs Assembly AXOpen.Base.Abstractions.dll public interface IsDialogType : ITwinObject, ITwinElement Inherited Members ITwinObject.GetChildren() ITwinObject.GetKids() ITwinObject.GetValueTags() ITwinObject.AddChild(ITwinObject) ITwinObject.AddValueTag(ITwinPrimitive) ITwinObject.AddKid(ITwinElement) ITwinObject.GetConnector() ITwinObject.OnlineToPlain<T>() ITwinObject.PlainToOnline<T>(T) ITwinObject.ShadowToPlain<T>() ITwinObject.PlainToShadow<T>(T) ITwinElement.GetParent() ITwinElement.GetSymbolTail() ITwinElement.Poll() ITwinElement.Symbol ITwinElement.AttributeName ITwinElement.HumanReadable ITwinElement.Interpreter Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties DialogId Gets or sets dialog locator id. string DialogId { get; set; } Property Value string Methods DeInitialize() Removes handling of this dialogue, unsubscribing from polling and removed all event handler. void DeInitialize() Initialize(Action) Initialized remote task for this dialog, with polling instead of cyclic subscription. void Initialize(Action dialogAction) Parameters dialogAction Action Action that will be performed on remove call."
  },
  "api/AXOpen.Base.Dialogs.IsModalDialogType.html": {
    "href": "api/AXOpen.Base.Dialogs.IsModalDialogType.html",
    "title": "Interface IsModalDialogType | System.Dynamic.ExpandoObject",
    "keywords": "Interface IsModalDialogType Namespace AXOpen.Base.Dialogs Assembly AXOpen.Base.Abstractions.dll public interface IsModalDialogType : IsDialogType, ITwinObject, ITwinElement Inherited Members IsDialogType.DialogId IsDialogType.Initialize(Action) IsDialogType.DeInitialize() ITwinObject.GetChildren() ITwinObject.GetKids() ITwinObject.GetValueTags() ITwinObject.AddChild(ITwinObject) ITwinObject.AddValueTag(ITwinPrimitive) ITwinObject.AddKid(ITwinElement) ITwinObject.GetConnector() ITwinObject.OnlineToPlain<T>() ITwinObject.PlainToOnline<T>(T) ITwinObject.ShadowToPlain<T>() ITwinObject.PlainToShadow<T>(T) ITwinElement.GetParent() ITwinElement.GetSymbolTail() ITwinElement.Poll() ITwinElement.Symbol ITwinElement.AttributeName ITwinElement.HumanReadable ITwinElement.Interpreter Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/AXOpen.Base.Dialogs.eAlertDialogType.html": {
    "href": "api/AXOpen.Base.Dialogs.eAlertDialogType.html",
    "title": "Enum eAlertDialogType | System.Dynamic.ExpandoObject",
    "keywords": "Enum eAlertDialogType Namespace AXOpen.Base.Dialogs Assembly AXOpen.Base.Abstractions.dll public enum eAlertDialogType Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Fields Danger = 30 Info = 10 Success = 20 Undefined = 0 Warning = 40"
  },
  "api/AXOpen.Base.Dialogs.html": {
    "href": "api/AXOpen.Base.Dialogs.html",
    "title": "Namespace AXOpen.Base.Dialogs | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen.Base.Dialogs Interfaces IAlertDialog IAlertDialogService IsAlertDialogType IsDialogType IsModalDialogType Enums eAlertDialogType"
  },
  "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoBoolArray8.html": {
    "href": "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoBoolArray8.html",
    "title": "Class AxoBoolArray8 | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoBoolArray8 Namespace AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoBoolArray8 : AxoBoolArray, ITwinObject, ITwinElement Inheritance object AxoBoolArray AxoBoolArray8 Implements ITwinObject ITwinElement Inherited Members AxoBoolArray.DataChanged AxoBoolArray.OnlineToPlainAsync(AxoBoolArray) AxoBoolArray.PlainToOnlineAsync(AxoBoolArray) AxoBoolArray.ShadowToPlainAsync(AxoBoolArray) AxoBoolArray.PlainToShadowAsync(AxoBoolArray) AxoBoolArray.GetChildren() AxoBoolArray.GetKids() AxoBoolArray.GetValueTags() AxoBoolArray.AddValueTag(ITwinPrimitive) AxoBoolArray.AddKid(ITwinElement) AxoBoolArray.AddChild(ITwinObject) AxoBoolArray.Connector AxoBoolArray.GetConnector() AxoBoolArray.GetSymbolTail() AxoBoolArray.GetParent() AxoBoolArray.Symbol AxoBoolArray.AttributeName AxoBoolArray.HumanReadable AxoBoolArray.SymbolTail AxoBoolArray.Parent AxoBoolArray.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoBoolArray8(ITwinObject, string, string) public AxoBoolArray8(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties Data public OnlinerBool[] Data { get; } Property Value OnlinerBool[] Methods CreateEmptyPoco() public AxoBoolArray8 CreateEmptyPoco() Returns AxoBoolArray8 OnlineToPlain<T>() public override Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoBoolArray8> OnlineToPlainAsync() Returns Task<AxoBoolArray8> OnlineToPlainAsync(AxoBoolArray8) protected Task<AxoBoolArray8> OnlineToPlainAsync(AxoBoolArray8 plain) Parameters plain AxoBoolArray8 Returns Task<AxoBoolArray8> PlainToOnline<T>(T) public override Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoBoolArray8) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoBoolArray8 plain) Parameters plain AxoBoolArray8 Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public override Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoBoolArray8) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoBoolArray8 plain) Parameters plain AxoBoolArray8 Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public override Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoBoolArray8> ShadowToPlainAsync() Returns Task<AxoBoolArray8> ShadowToPlainAsync(AxoBoolArray8) protected Task<AxoBoolArray8> ShadowToPlainAsync(AxoBoolArray8 plain) Parameters plain AxoBoolArray8 Returns Task<AxoBoolArray8>"
  },
  "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman.html": {
    "href": "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman.html",
    "title": "Class AxoDataman | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataman Namespace AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoDataman : AxoComponent, ITwinIdentity, ITwinObject, ITwinElement, IAxoObject, IAxoComponent, IAxoCodeReader Inheritance object AxoObject AxoComponent AxoDataman Implements ITwinIdentity ITwinObject ITwinElement IAxoObject IAxoComponent IAxoCodeReader Inherited Members AxoComponent._isManuallyControllable AxoComponent.OnlineToPlainAsync(AxoComponent) AxoComponent.PlainToOnlineAsync(AxoComponent) AxoComponent.ShadowToPlainAsync(AxoComponent) AxoComponent.PlainToShadowAsync(AxoComponent) AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoDataman(ITwinObject, string, string) public AxoDataman(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties _Messenger public AxoMessenger _Messenger { get; } Property Value AxoMessenger _TaskMessenger public AxoMessenger _TaskMessenger { get; } Property Value AxoMessenger AcquisitionControl [Container(Layout.Wrap)] [Group(GroupLayout.GroupBox)] [ComponentDetails(\"Status\")] [ReadOnly] public AxoDataman_AcquisitionControl AcquisitionControl { get; } Property Value AxoDataman_AcquisitionControl AcquisitionStatus [Container(Layout.Wrap)] [Group(GroupLayout.GroupBox)] [ComponentDetails(\"Status\")] [ReadOnly] public AxoDataman_AcquisitionStatus AcquisitionStatus { get; } Property Value AxoDataman_AcquisitionStatus ClearResultDataTask [ComponentDetails(\"Tasks\")] public AxoDatamanClearResultData ClearResultDataTask { get; } Property Value AxoDatamanClearResultData Config [Container(Layout.Wrap)] [ComponentDetails(\"Config\")] public AxoDataman_Config Config { get; } Property Value AxoDataman_Config ReadTask [Container(Layout.Wrap)] [ComponentHeader] public AxoDatamanRead ReadTask { get; } Property Value AxoDatamanRead RestoreTask [Container(Layout.Wrap)] [ComponentDetails(\"Tasks\")] public AxoTask RestoreTask { get; } Property Value AxoTask ResultData [ComponentHeader] [ReadOnly] public AxoDataman_ResultData ResultData { get; } Property Value AxoDataman_ResultData Results [Container(Layout.Wrap)] [Group(GroupLayout.GroupBox)] [ComponentDetails(\"Status\")] [ReadOnly] public AxoDataman_Results Results { get; } Property Value AxoDataman_Results ResultsControl [Container(Layout.Wrap)] [Group(GroupLayout.GroupBox)] [ComponentDetails(\"Status\")] [ReadOnly] public AxoDataman_ResultsControl ResultsControl { get; } Property Value AxoDataman_ResultsControl ResultsStatus [Container(Layout.Wrap)] [Group(GroupLayout.GroupBox)] [ComponentDetails(\"Status\")] [ReadOnly] public AxoDataman_ResultsStatus ResultsStatus { get; } Property Value AxoDataman_ResultsStatus SoftEventControl [Container(Layout.Wrap)] [Group(GroupLayout.GroupBox)] [ComponentDetails(\"Status\")] [ReadOnly] public AxoDataman_SoftEventControl SoftEventControl { get; } Property Value AxoDataman_SoftEventControl SoftEventStatus [Container(Layout.Wrap)] [Group(GroupLayout.GroupBox)] [ComponentDetails(\"Status\")] [ReadOnly] public AxoDataman_SoftEventStatus SoftEventStatus { get; } Property Value AxoDataman_SoftEventStatus Status [Container(Layout.Stack)] [ComponentDetails(\"Status\")] [ReadOnly] public AxoDataman_Status Status { get; } Property Value AxoDataman_Status User [Container(Layout.Wrap)] [Group(GroupLayout.GroupBox)] [ComponentDetails(\"Status\")] [ReadOnly] public AxoDataman_User User { get; } Property Value AxoDataman_User UserData [ReadOnly] public AxoDataman_UserData UserData { get; } Property Value AxoDataman_UserData Methods CreateEmptyPoco() public AxoDataman CreateEmptyPoco() Returns AxoDataman OnlineToPlain<T>() public override Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoDataman> OnlineToPlainAsync() Returns Task<AxoDataman> OnlineToPlainAsync(AxoDataman) protected Task<AxoDataman> OnlineToPlainAsync(AxoDataman plain) Parameters plain AxoDataman Returns Task<AxoDataman> PlainToOnline<T>(T) public override Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoDataman) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoDataman plain) Parameters plain AxoDataman Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public override Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoDataman) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoDataman plain) Parameters plain AxoDataman Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public override Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoDataman> ShadowToPlainAsync() Returns Task<AxoDataman> ShadowToPlainAsync(AxoDataman) protected Task<AxoDataman> ShadowToPlainAsync(AxoDataman plain) Parameters plain AxoDataman Returns Task<AxoDataman>"
  },
  "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDatamanClearResultData.html": {
    "href": "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDatamanClearResultData.html",
    "title": "Class AxoDatamanClearResultData | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDatamanClearResultData Namespace AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoDatamanClearResultData : AxoTask, ITwinIdentity, ITwinObject, ITwinElement, IAxoObject, IAxoTask, IAxoTaskState Inheritance object AxoObject AxoTask AxoDatamanClearResultData Implements ITwinIdentity ITwinObject ITwinElement IAxoObject IAxoTask IAxoTaskState Inherited Members AxoTask.Restore() AxoTask.Abort() AxoTask.ResumeTask() AxoTask.ExecuteAsync(object) AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails AxoTask._CyclicExecuteIsNotCalled AxoTask.OnlineToPlainAsync(AxoTask) AxoTask.PlainToOnlineAsync(AxoTask) AxoTask.ShadowToPlainAsync(AxoTask) AxoTask.PlainToShadowAsync(AxoTask) AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoDatamanClearResultData(ITwinObject, string, string) public AxoDatamanClearResultData(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Methods CreateEmptyPoco() public AxoDatamanClearResultData CreateEmptyPoco() Returns AxoDatamanClearResultData OnlineToPlain<T>() public override Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoDatamanClearResultData> OnlineToPlainAsync() Returns Task<AxoDatamanClearResultData> OnlineToPlainAsync(AxoDatamanClearResultData) protected Task<AxoDatamanClearResultData> OnlineToPlainAsync(AxoDatamanClearResultData plain) Parameters plain AxoDatamanClearResultData Returns Task<AxoDatamanClearResultData> PlainToOnline<T>(T) public override Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoDatamanClearResultData) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoDatamanClearResultData plain) Parameters plain AxoDatamanClearResultData Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public override Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoDatamanClearResultData) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoDatamanClearResultData plain) Parameters plain AxoDatamanClearResultData Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public override Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoDatamanClearResultData> ShadowToPlainAsync() Returns Task<AxoDatamanClearResultData> ShadowToPlainAsync(AxoDatamanClearResultData) protected Task<AxoDatamanClearResultData> ShadowToPlainAsync(AxoDatamanClearResultData plain) Parameters plain AxoDatamanClearResultData Returns Task<AxoDatamanClearResultData>"
  },
  "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDatamanRead.html": {
    "href": "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDatamanRead.html",
    "title": "Class AxoDatamanRead | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDatamanRead Namespace AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoDatamanRead : AxoTask, ITwinIdentity, ITwinObject, ITwinElement, IAxoObject, IAxoTask, IAxoTaskState Inheritance object AxoObject AxoTask AxoDatamanRead Implements ITwinIdentity ITwinObject ITwinElement IAxoObject IAxoTask IAxoTaskState Inherited Members AxoTask.Restore() AxoTask.Abort() AxoTask.ResumeTask() AxoTask.ExecuteAsync(object) AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails AxoTask._CyclicExecuteIsNotCalled AxoTask.OnlineToPlainAsync(AxoTask) AxoTask.PlainToOnlineAsync(AxoTask) AxoTask.ShadowToPlainAsync(AxoTask) AxoTask.PlainToShadowAsync(AxoTask) AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoDatamanRead(ITwinObject, string, string) public AxoDatamanRead(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Methods CreateEmptyPoco() public AxoDatamanRead CreateEmptyPoco() Returns AxoDatamanRead OnlineToPlain<T>() public override Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoDatamanRead> OnlineToPlainAsync() Returns Task<AxoDatamanRead> OnlineToPlainAsync(AxoDatamanRead) protected Task<AxoDatamanRead> OnlineToPlainAsync(AxoDatamanRead plain) Parameters plain AxoDatamanRead Returns Task<AxoDatamanRead> PlainToOnline<T>(T) public override Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoDatamanRead) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoDatamanRead plain) Parameters plain AxoDatamanRead Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public override Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoDatamanRead) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoDatamanRead plain) Parameters plain AxoDatamanRead Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public override Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoDatamanRead> ShadowToPlainAsync() Returns Task<AxoDatamanRead> ShadowToPlainAsync(AxoDatamanRead) protected Task<AxoDatamanRead> ShadowToPlainAsync(AxoDatamanRead plain) Parameters plain AxoDatamanRead Returns Task<AxoDatamanRead>"
  },
  "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_AcquisitionControl.html": {
    "href": "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_AcquisitionControl.html",
    "title": "Class AxoDataman_AcquisitionControl | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataman_AcquisitionControl Namespace AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoDataman_AcquisitionControl : ITwinObject, ITwinElement Inheritance object AxoDataman_AcquisitionControl Implements ITwinObject ITwinElement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoDataman_AcquisitionControl(ITwinObject, string, string) public AxoDataman_AcquisitionControl(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties AttributeName public string AttributeName { get; set; } Property Value string Connector protected Connector Connector { get; } Property Value Connector HumanReadable public string HumanReadable { get; set; } Property Value string Interpreter public Translator Interpreter { get; } Property Value Translator Parent protected ITwinObject Parent { get; set; } Property Value ITwinObject Symbol public string Symbol { get; protected set; } Property Value string SymbolTail protected string SymbolTail { get; set; } Property Value string Trigger public OnlinerBool Trigger { get; } Property Value OnlinerBool TriggerEnable public OnlinerBool TriggerEnable { get; } Property Value OnlinerBool Methods AddChild(ITwinObject) public void AddChild(ITwinObject twinObject) Parameters twinObject ITwinObject AddKid(ITwinElement) public void AddKid(ITwinElement kid) Parameters kid ITwinElement AddValueTag(ITwinPrimitive) public void AddValueTag(ITwinPrimitive valueTag) Parameters valueTag ITwinPrimitive CreateEmptyPoco() public AxoDataman_AcquisitionControl CreateEmptyPoco() Returns AxoDataman_AcquisitionControl GetChildren() public IEnumerable<ITwinObject> GetChildren() Returns IEnumerable<ITwinObject> GetConnector() public Connector GetConnector() Returns Connector GetKids() public IEnumerable<ITwinElement> GetKids() Returns IEnumerable<ITwinElement> GetParent() public ITwinObject GetParent() Returns ITwinObject GetSymbolTail() public string GetSymbolTail() Returns string GetValueTags() public IEnumerable<ITwinPrimitive> GetValueTags() Returns IEnumerable<ITwinPrimitive> OnlineToPlain<T>() public virtual Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoDataman_AcquisitionControl> OnlineToPlainAsync() Returns Task<AxoDataman_AcquisitionControl> OnlineToPlainAsync(AxoDataman_AcquisitionControl) protected Task<AxoDataman_AcquisitionControl> OnlineToPlainAsync(AxoDataman_AcquisitionControl plain) Parameters plain AxoDataman_AcquisitionControl Returns Task<AxoDataman_AcquisitionControl> PlainToOnline<T>(T) public virtual Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoDataman_AcquisitionControl) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoDataman_AcquisitionControl plain) Parameters plain AxoDataman_AcquisitionControl Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public virtual Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoDataman_AcquisitionControl) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoDataman_AcquisitionControl plain) Parameters plain AxoDataman_AcquisitionControl Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public virtual Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoDataman_AcquisitionControl> ShadowToPlainAsync() Returns Task<AxoDataman_AcquisitionControl> ShadowToPlainAsync(AxoDataman_AcquisitionControl) protected Task<AxoDataman_AcquisitionControl> ShadowToPlainAsync(AxoDataman_AcquisitionControl plain) Parameters plain AxoDataman_AcquisitionControl Returns Task<AxoDataman_AcquisitionControl>"
  },
  "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_AcquisitionStatus.html": {
    "href": "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_AcquisitionStatus.html",
    "title": "Class AxoDataman_AcquisitionStatus | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataman_AcquisitionStatus Namespace AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoDataman_AcquisitionStatus : ITwinObject, ITwinElement Inheritance object AxoDataman_AcquisitionStatus Implements ITwinObject ITwinElement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoDataman_AcquisitionStatus(ITwinObject, string, string) public AxoDataman_AcquisitionStatus(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties Acquiring public OnlinerBool Acquiring { get; } Property Value OnlinerBool AttributeName public string AttributeName { get; set; } Property Value string Connector protected Connector Connector { get; } Property Value Connector HumanReadable public string HumanReadable { get; set; } Property Value string Interpreter public Translator Interpreter { get; } Property Value Translator MissedAcquisition public OnlinerBool MissedAcquisition { get; } Property Value OnlinerBool Parent protected ITwinObject Parent { get; set; } Property Value ITwinObject Symbol public string Symbol { get; protected set; } Property Value string SymbolTail protected string SymbolTail { get; set; } Property Value string TriggerAcknowledge public OnlinerBool TriggerAcknowledge { get; } Property Value OnlinerBool TriggerID public OnlinerUInt TriggerID { get; } Property Value OnlinerUInt TriggerReady public OnlinerBool TriggerReady { get; } Property Value OnlinerBool Methods AddChild(ITwinObject) public void AddChild(ITwinObject twinObject) Parameters twinObject ITwinObject AddKid(ITwinElement) public void AddKid(ITwinElement kid) Parameters kid ITwinElement AddValueTag(ITwinPrimitive) public void AddValueTag(ITwinPrimitive valueTag) Parameters valueTag ITwinPrimitive CreateEmptyPoco() public AxoDataman_AcquisitionStatus CreateEmptyPoco() Returns AxoDataman_AcquisitionStatus GetChildren() public IEnumerable<ITwinObject> GetChildren() Returns IEnumerable<ITwinObject> GetConnector() public Connector GetConnector() Returns Connector GetKids() public IEnumerable<ITwinElement> GetKids() Returns IEnumerable<ITwinElement> GetParent() public ITwinObject GetParent() Returns ITwinObject GetSymbolTail() public string GetSymbolTail() Returns string GetValueTags() public IEnumerable<ITwinPrimitive> GetValueTags() Returns IEnumerable<ITwinPrimitive> OnlineToPlain<T>() public virtual Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoDataman_AcquisitionStatus> OnlineToPlainAsync() Returns Task<AxoDataman_AcquisitionStatus> OnlineToPlainAsync(AxoDataman_AcquisitionStatus) protected Task<AxoDataman_AcquisitionStatus> OnlineToPlainAsync(AxoDataman_AcquisitionStatus plain) Parameters plain AxoDataman_AcquisitionStatus Returns Task<AxoDataman_AcquisitionStatus> PlainToOnline<T>(T) public virtual Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoDataman_AcquisitionStatus) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoDataman_AcquisitionStatus plain) Parameters plain AxoDataman_AcquisitionStatus Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public virtual Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoDataman_AcquisitionStatus) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoDataman_AcquisitionStatus plain) Parameters plain AxoDataman_AcquisitionStatus Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public virtual Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoDataman_AcquisitionStatus> ShadowToPlainAsync() Returns Task<AxoDataman_AcquisitionStatus> ShadowToPlainAsync(AxoDataman_AcquisitionStatus) protected Task<AxoDataman_AcquisitionStatus> ShadowToPlainAsync(AxoDataman_AcquisitionStatus plain) Parameters plain AxoDataman_AcquisitionStatus Returns Task<AxoDataman_AcquisitionStatus>"
  },
  "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_Config.html": {
    "href": "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_Config.html",
    "title": "Class AxoDataman_Config | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataman_Config Namespace AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll [Container(Layout.Stack)] public class AxoDataman_Config : ITwinObject, ITwinElement Inheritance object AxoDataman_Config Implements ITwinObject ITwinElement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoDataman_Config(ITwinObject, string, string) public AxoDataman_Config(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties AttributeName public string AttributeName { get; set; } Property Value string Connector protected Connector Connector { get; } Property Value Connector ContinuousReading public OnlinerBool ContinuousReading { get; } Property Value OnlinerBool ErrorTime public OnlinerLTime ErrorTime { get; } Property Value OnlinerLTime HumanReadable public string HumanReadable { get; set; } Property Value string InfoTime public OnlinerLTime InfoTime { get; } Property Value OnlinerLTime Interpreter public Translator Interpreter { get; } Property Value Translator Parent protected ITwinObject Parent { get; set; } Property Value ITwinObject Symbol public string Symbol { get; protected set; } Property Value string SymbolTail protected string SymbolTail { get; set; } Property Value string Methods AddChild(ITwinObject) public void AddChild(ITwinObject twinObject) Parameters twinObject ITwinObject AddKid(ITwinElement) public void AddKid(ITwinElement kid) Parameters kid ITwinElement AddValueTag(ITwinPrimitive) public void AddValueTag(ITwinPrimitive valueTag) Parameters valueTag ITwinPrimitive CreateEmptyPoco() public AxoDataman_Config CreateEmptyPoco() Returns AxoDataman_Config GetChildren() public IEnumerable<ITwinObject> GetChildren() Returns IEnumerable<ITwinObject> GetConnector() public Connector GetConnector() Returns Connector GetKids() public IEnumerable<ITwinElement> GetKids() Returns IEnumerable<ITwinElement> GetParent() public ITwinObject GetParent() Returns ITwinObject GetSymbolTail() public string GetSymbolTail() Returns string GetValueTags() public IEnumerable<ITwinPrimitive> GetValueTags() Returns IEnumerable<ITwinPrimitive> OnlineToPlain<T>() public virtual Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoDataman_Config> OnlineToPlainAsync() Returns Task<AxoDataman_Config> OnlineToPlainAsync(AxoDataman_Config) protected Task<AxoDataman_Config> OnlineToPlainAsync(AxoDataman_Config plain) Parameters plain AxoDataman_Config Returns Task<AxoDataman_Config> PlainToOnline<T>(T) public virtual Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoDataman_Config) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoDataman_Config plain) Parameters plain AxoDataman_Config Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public virtual Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoDataman_Config) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoDataman_Config plain) Parameters plain AxoDataman_Config Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public virtual Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoDataman_Config> ShadowToPlainAsync() Returns Task<AxoDataman_Config> ShadowToPlainAsync(AxoDataman_Config) protected Task<AxoDataman_Config> ShadowToPlainAsync(AxoDataman_Config plain) Parameters plain AxoDataman_Config Returns Task<AxoDataman_Config>"
  },
  "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_ResultData.html": {
    "href": "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_ResultData.html",
    "title": "Class AxoDataman_ResultData | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataman_ResultData Namespace AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoDataman_ResultData : AxoByteArray, ITwinObject, ITwinElement Inheritance object AxoByteArray AxoDataman_ResultData Implements ITwinObject ITwinElement Inherited Members AxoByteArray.DisplayFormat AxoByteArray.DataChanged AxoByteArray.OnlineToPlainAsync(AxoByteArray) AxoByteArray.PlainToOnlineAsync(AxoByteArray) AxoByteArray.ShadowToPlainAsync(AxoByteArray) AxoByteArray.PlainToShadowAsync(AxoByteArray) AxoByteArray.GetChildren() AxoByteArray.GetKids() AxoByteArray.GetValueTags() AxoByteArray.AddValueTag(ITwinPrimitive) AxoByteArray.AddKid(ITwinElement) AxoByteArray.AddChild(ITwinObject) AxoByteArray.Connector AxoByteArray.GetConnector() AxoByteArray.GetSymbolTail() AxoByteArray.GetParent() AxoByteArray.Symbol AxoByteArray.AttributeName AxoByteArray.HumanReadable AxoByteArray.SymbolTail AxoByteArray.Parent AxoByteArray.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoDataman_ResultData(ITwinObject, string, string) public AxoDataman_ResultData(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties Data public OnlinerByte[] Data { get; } Property Value OnlinerByte[] Methods CreateEmptyPoco() public AxoDataman_ResultData CreateEmptyPoco() Returns AxoDataman_ResultData OnlineToPlain<T>() public override Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoDataman_ResultData> OnlineToPlainAsync() Returns Task<AxoDataman_ResultData> OnlineToPlainAsync(AxoDataman_ResultData) protected Task<AxoDataman_ResultData> OnlineToPlainAsync(AxoDataman_ResultData plain) Parameters plain AxoDataman_ResultData Returns Task<AxoDataman_ResultData> PlainToOnline<T>(T) public override Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoDataman_ResultData) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoDataman_ResultData plain) Parameters plain AxoDataman_ResultData Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public override Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoDataman_ResultData) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoDataman_ResultData plain) Parameters plain AxoDataman_ResultData Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public override Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoDataman_ResultData> ShadowToPlainAsync() Returns Task<AxoDataman_ResultData> ShadowToPlainAsync(AxoDataman_ResultData) protected Task<AxoDataman_ResultData> ShadowToPlainAsync(AxoDataman_ResultData plain) Parameters plain AxoDataman_ResultData Returns Task<AxoDataman_ResultData>"
  },
  "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_Results.html": {
    "href": "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_Results.html",
    "title": "Class AxoDataman_Results | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataman_Results Namespace AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoDataman_Results : ITwinObject, ITwinElement Inheritance object AxoDataman_Results Implements ITwinObject ITwinElement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoDataman_Results(ITwinObject, string, string) public AxoDataman_Results(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties AttributeName public string AttributeName { get; set; } Property Value string Code public OnlinerUInt Code { get; } Property Value OnlinerUInt Connector protected Connector Connector { get; } Property Value Connector Extended public OnlinerUInt Extended { get; } Property Value OnlinerUInt HumanReadable public string HumanReadable { get; set; } Property Value string Id public OnlinerUInt Id { get; } Property Value OnlinerUInt Interpreter public Translator Interpreter { get; } Property Value Translator Length public OnlinerUInt Length { get; } Property Value OnlinerUInt Parent protected ITwinObject Parent { get; set; } Property Value ITwinObject Symbol public string Symbol { get; protected set; } Property Value string SymbolTail protected string SymbolTail { get; set; } Property Value string Methods AddChild(ITwinObject) public void AddChild(ITwinObject twinObject) Parameters twinObject ITwinObject AddKid(ITwinElement) public void AddKid(ITwinElement kid) Parameters kid ITwinElement AddValueTag(ITwinPrimitive) public void AddValueTag(ITwinPrimitive valueTag) Parameters valueTag ITwinPrimitive CreateEmptyPoco() public AxoDataman_Results CreateEmptyPoco() Returns AxoDataman_Results GetChildren() public IEnumerable<ITwinObject> GetChildren() Returns IEnumerable<ITwinObject> GetConnector() public Connector GetConnector() Returns Connector GetKids() public IEnumerable<ITwinElement> GetKids() Returns IEnumerable<ITwinElement> GetParent() public ITwinObject GetParent() Returns ITwinObject GetSymbolTail() public string GetSymbolTail() Returns string GetValueTags() public IEnumerable<ITwinPrimitive> GetValueTags() Returns IEnumerable<ITwinPrimitive> OnlineToPlain<T>() public virtual Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoDataman_Results> OnlineToPlainAsync() Returns Task<AxoDataman_Results> OnlineToPlainAsync(AxoDataman_Results) protected Task<AxoDataman_Results> OnlineToPlainAsync(AxoDataman_Results plain) Parameters plain AxoDataman_Results Returns Task<AxoDataman_Results> PlainToOnline<T>(T) public virtual Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoDataman_Results) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoDataman_Results plain) Parameters plain AxoDataman_Results Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public virtual Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoDataman_Results) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoDataman_Results plain) Parameters plain AxoDataman_Results Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public virtual Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoDataman_Results> ShadowToPlainAsync() Returns Task<AxoDataman_Results> ShadowToPlainAsync(AxoDataman_Results) protected Task<AxoDataman_Results> ShadowToPlainAsync(AxoDataman_Results plain) Parameters plain AxoDataman_Results Returns Task<AxoDataman_Results>"
  },
  "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_ResultsControl.html": {
    "href": "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_ResultsControl.html",
    "title": "Class AxoDataman_ResultsControl | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataman_ResultsControl Namespace AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoDataman_ResultsControl : ITwinObject, ITwinElement Inheritance object AxoDataman_ResultsControl Implements ITwinObject ITwinElement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoDataman_ResultsControl(ITwinObject, string, string) public AxoDataman_ResultsControl(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties AttributeName public string AttributeName { get; set; } Property Value string Connector protected Connector Connector { get; } Property Value Connector EnableResultBuffering public OnlinerBool EnableResultBuffering { get; } Property Value OnlinerBool HumanReadable public string HumanReadable { get; set; } Property Value string Interpreter public Translator Interpreter { get; } Property Value Translator Parent protected ITwinObject Parent { get; set; } Property Value ITwinObject ResultsAcknowledge public OnlinerBool ResultsAcknowledge { get; } Property Value OnlinerBool Symbol public string Symbol { get; protected set; } Property Value string SymbolTail protected string SymbolTail { get; set; } Property Value string Methods AddChild(ITwinObject) public void AddChild(ITwinObject twinObject) Parameters twinObject ITwinObject AddKid(ITwinElement) public void AddKid(ITwinElement kid) Parameters kid ITwinElement AddValueTag(ITwinPrimitive) public void AddValueTag(ITwinPrimitive valueTag) Parameters valueTag ITwinPrimitive CreateEmptyPoco() public AxoDataman_ResultsControl CreateEmptyPoco() Returns AxoDataman_ResultsControl GetChildren() public IEnumerable<ITwinObject> GetChildren() Returns IEnumerable<ITwinObject> GetConnector() public Connector GetConnector() Returns Connector GetKids() public IEnumerable<ITwinElement> GetKids() Returns IEnumerable<ITwinElement> GetParent() public ITwinObject GetParent() Returns ITwinObject GetSymbolTail() public string GetSymbolTail() Returns string GetValueTags() public IEnumerable<ITwinPrimitive> GetValueTags() Returns IEnumerable<ITwinPrimitive> OnlineToPlain<T>() public virtual Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoDataman_ResultsControl> OnlineToPlainAsync() Returns Task<AxoDataman_ResultsControl> OnlineToPlainAsync(AxoDataman_ResultsControl) protected Task<AxoDataman_ResultsControl> OnlineToPlainAsync(AxoDataman_ResultsControl plain) Parameters plain AxoDataman_ResultsControl Returns Task<AxoDataman_ResultsControl> PlainToOnline<T>(T) public virtual Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoDataman_ResultsControl) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoDataman_ResultsControl plain) Parameters plain AxoDataman_ResultsControl Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public virtual Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoDataman_ResultsControl) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoDataman_ResultsControl plain) Parameters plain AxoDataman_ResultsControl Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public virtual Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoDataman_ResultsControl> ShadowToPlainAsync() Returns Task<AxoDataman_ResultsControl> ShadowToPlainAsync(AxoDataman_ResultsControl) protected Task<AxoDataman_ResultsControl> ShadowToPlainAsync(AxoDataman_ResultsControl plain) Parameters plain AxoDataman_ResultsControl Returns Task<AxoDataman_ResultsControl>"
  },
  "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_ResultsStatus.html": {
    "href": "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_ResultsStatus.html",
    "title": "Class AxoDataman_ResultsStatus | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataman_ResultsStatus Namespace AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoDataman_ResultsStatus : ITwinObject, ITwinElement Inheritance object AxoDataman_ResultsStatus Implements ITwinObject ITwinElement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoDataman_ResultsStatus(ITwinObject, string, string) public AxoDataman_ResultsStatus(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties AttributeName public string AttributeName { get; set; } Property Value string Connector protected Connector Connector { get; } Property Value Connector DecodeComplete public OnlinerBool DecodeComplete { get; } Property Value OnlinerBool Decoding public OnlinerBool Decoding { get; } Property Value OnlinerBool ErrorDetected public OnlinerBool ErrorDetected { get; } Property Value OnlinerBool HumanReadable public string HumanReadable { get; set; } Property Value string Interpreter public Translator Interpreter { get; } Property Value Translator Parent protected ITwinObject Parent { get; set; } Property Value ITwinObject ResultsAvailable public OnlinerBool ResultsAvailable { get; } Property Value OnlinerBool ResultsBufferOverrun public OnlinerBool ResultsBufferOverrun { get; } Property Value OnlinerBool Symbol public string Symbol { get; protected set; } Property Value string SymbolTail protected string SymbolTail { get; set; } Property Value string Methods AddChild(ITwinObject) public void AddChild(ITwinObject twinObject) Parameters twinObject ITwinObject AddKid(ITwinElement) public void AddKid(ITwinElement kid) Parameters kid ITwinElement AddValueTag(ITwinPrimitive) public void AddValueTag(ITwinPrimitive valueTag) Parameters valueTag ITwinPrimitive CreateEmptyPoco() public AxoDataman_ResultsStatus CreateEmptyPoco() Returns AxoDataman_ResultsStatus GetChildren() public IEnumerable<ITwinObject> GetChildren() Returns IEnumerable<ITwinObject> GetConnector() public Connector GetConnector() Returns Connector GetKids() public IEnumerable<ITwinElement> GetKids() Returns IEnumerable<ITwinElement> GetParent() public ITwinObject GetParent() Returns ITwinObject GetSymbolTail() public string GetSymbolTail() Returns string GetValueTags() public IEnumerable<ITwinPrimitive> GetValueTags() Returns IEnumerable<ITwinPrimitive> OnlineToPlain<T>() public virtual Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoDataman_ResultsStatus> OnlineToPlainAsync() Returns Task<AxoDataman_ResultsStatus> OnlineToPlainAsync(AxoDataman_ResultsStatus) protected Task<AxoDataman_ResultsStatus> OnlineToPlainAsync(AxoDataman_ResultsStatus plain) Parameters plain AxoDataman_ResultsStatus Returns Task<AxoDataman_ResultsStatus> PlainToOnline<T>(T) public virtual Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoDataman_ResultsStatus) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoDataman_ResultsStatus plain) Parameters plain AxoDataman_ResultsStatus Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public virtual Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoDataman_ResultsStatus) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoDataman_ResultsStatus plain) Parameters plain AxoDataman_ResultsStatus Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public virtual Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoDataman_ResultsStatus> ShadowToPlainAsync() Returns Task<AxoDataman_ResultsStatus> ShadowToPlainAsync(AxoDataman_ResultsStatus) protected Task<AxoDataman_ResultsStatus> ShadowToPlainAsync(AxoDataman_ResultsStatus plain) Parameters plain AxoDataman_ResultsStatus Returns Task<AxoDataman_ResultsStatus>"
  },
  "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_SoftEventControl.html": {
    "href": "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_SoftEventControl.html",
    "title": "Class AxoDataman_SoftEventControl | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataman_SoftEventControl Namespace AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoDataman_SoftEventControl : ITwinObject, ITwinElement Inheritance object AxoDataman_SoftEventControl Implements ITwinObject ITwinElement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoDataman_SoftEventControl(ITwinObject, string, string) public AxoDataman_SoftEventControl(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties AttributeName public string AttributeName { get; set; } Property Value string Connector protected Connector Connector { get; } Property Value Connector ExecuteDMCC public OnlinerBool ExecuteDMCC { get; } Property Value OnlinerBool HumanReadable public string HumanReadable { get; set; } Property Value string Interpreter public Translator Interpreter { get; } Property Value Translator Parent protected ITwinObject Parent { get; set; } Property Value ITwinObject SetMatchString public OnlinerBool SetMatchString { get; } Property Value OnlinerBool Symbol public string Symbol { get; protected set; } Property Value string SymbolTail protected string SymbolTail { get; set; } Property Value string TrainBrightness public OnlinerBool TrainBrightness { get; } Property Value OnlinerBool TrainCode public OnlinerBool TrainCode { get; } Property Value OnlinerBool TrainFocus public OnlinerBool TrainFocus { get; } Property Value OnlinerBool TrainMatchString public OnlinerBool TrainMatchString { get; } Property Value OnlinerBool Untrain public OnlinerBool Untrain { get; } Property Value OnlinerBool Methods AddChild(ITwinObject) public void AddChild(ITwinObject twinObject) Parameters twinObject ITwinObject AddKid(ITwinElement) public void AddKid(ITwinElement kid) Parameters kid ITwinElement AddValueTag(ITwinPrimitive) public void AddValueTag(ITwinPrimitive valueTag) Parameters valueTag ITwinPrimitive CreateEmptyPoco() public AxoDataman_SoftEventControl CreateEmptyPoco() Returns AxoDataman_SoftEventControl GetChildren() public IEnumerable<ITwinObject> GetChildren() Returns IEnumerable<ITwinObject> GetConnector() public Connector GetConnector() Returns Connector GetKids() public IEnumerable<ITwinElement> GetKids() Returns IEnumerable<ITwinElement> GetParent() public ITwinObject GetParent() Returns ITwinObject GetSymbolTail() public string GetSymbolTail() Returns string GetValueTags() public IEnumerable<ITwinPrimitive> GetValueTags() Returns IEnumerable<ITwinPrimitive> OnlineToPlain<T>() public virtual Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoDataman_SoftEventControl> OnlineToPlainAsync() Returns Task<AxoDataman_SoftEventControl> OnlineToPlainAsync(AxoDataman_SoftEventControl) protected Task<AxoDataman_SoftEventControl> OnlineToPlainAsync(AxoDataman_SoftEventControl plain) Parameters plain AxoDataman_SoftEventControl Returns Task<AxoDataman_SoftEventControl> PlainToOnline<T>(T) public virtual Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoDataman_SoftEventControl) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoDataman_SoftEventControl plain) Parameters plain AxoDataman_SoftEventControl Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public virtual Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoDataman_SoftEventControl) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoDataman_SoftEventControl plain) Parameters plain AxoDataman_SoftEventControl Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public virtual Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoDataman_SoftEventControl> ShadowToPlainAsync() Returns Task<AxoDataman_SoftEventControl> ShadowToPlainAsync(AxoDataman_SoftEventControl) protected Task<AxoDataman_SoftEventControl> ShadowToPlainAsync(AxoDataman_SoftEventControl plain) Parameters plain AxoDataman_SoftEventControl Returns Task<AxoDataman_SoftEventControl>"
  },
  "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_SoftEventStatus.html": {
    "href": "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_SoftEventStatus.html",
    "title": "Class AxoDataman_SoftEventStatus | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataman_SoftEventStatus Namespace AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoDataman_SoftEventStatus : ITwinObject, ITwinElement Inheritance object AxoDataman_SoftEventStatus Implements ITwinObject ITwinElement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoDataman_SoftEventStatus(ITwinObject, string, string) public AxoDataman_SoftEventStatus(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties AttributeName public string AttributeName { get; set; } Property Value string Connector protected Connector Connector { get; } Property Value Connector ExecuteDMCCAcknowledge public OnlinerBool ExecuteDMCCAcknowledge { get; } Property Value OnlinerBool HumanReadable public string HumanReadable { get; set; } Property Value string Interpreter public Translator Interpreter { get; } Property Value Translator Parent protected ITwinObject Parent { get; set; } Property Value ITwinObject SetMatchStringAcknowledge public OnlinerBool SetMatchStringAcknowledge { get; } Property Value OnlinerBool Symbol public string Symbol { get; protected set; } Property Value string SymbolTail protected string SymbolTail { get; set; } Property Value string TrainBrightnessAcknowledge public OnlinerBool TrainBrightnessAcknowledge { get; } Property Value OnlinerBool TrainCodeAcknowledge public OnlinerBool TrainCodeAcknowledge { get; } Property Value OnlinerBool TrainFocusAcknowledge public OnlinerBool TrainFocusAcknowledge { get; } Property Value OnlinerBool TrainMatchStringAcknowledge public OnlinerBool TrainMatchStringAcknowledge { get; } Property Value OnlinerBool UntrainAcknowledge public OnlinerBool UntrainAcknowledge { get; } Property Value OnlinerBool Methods AddChild(ITwinObject) public void AddChild(ITwinObject twinObject) Parameters twinObject ITwinObject AddKid(ITwinElement) public void AddKid(ITwinElement kid) Parameters kid ITwinElement AddValueTag(ITwinPrimitive) public void AddValueTag(ITwinPrimitive valueTag) Parameters valueTag ITwinPrimitive CreateEmptyPoco() public AxoDataman_SoftEventStatus CreateEmptyPoco() Returns AxoDataman_SoftEventStatus GetChildren() public IEnumerable<ITwinObject> GetChildren() Returns IEnumerable<ITwinObject> GetConnector() public Connector GetConnector() Returns Connector GetKids() public IEnumerable<ITwinElement> GetKids() Returns IEnumerable<ITwinElement> GetParent() public ITwinObject GetParent() Returns ITwinObject GetSymbolTail() public string GetSymbolTail() Returns string GetValueTags() public IEnumerable<ITwinPrimitive> GetValueTags() Returns IEnumerable<ITwinPrimitive> OnlineToPlain<T>() public virtual Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoDataman_SoftEventStatus> OnlineToPlainAsync() Returns Task<AxoDataman_SoftEventStatus> OnlineToPlainAsync(AxoDataman_SoftEventStatus) protected Task<AxoDataman_SoftEventStatus> OnlineToPlainAsync(AxoDataman_SoftEventStatus plain) Parameters plain AxoDataman_SoftEventStatus Returns Task<AxoDataman_SoftEventStatus> PlainToOnline<T>(T) public virtual Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoDataman_SoftEventStatus) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoDataman_SoftEventStatus plain) Parameters plain AxoDataman_SoftEventStatus Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public virtual Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoDataman_SoftEventStatus) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoDataman_SoftEventStatus plain) Parameters plain AxoDataman_SoftEventStatus Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public virtual Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoDataman_SoftEventStatus> ShadowToPlainAsync() Returns Task<AxoDataman_SoftEventStatus> ShadowToPlainAsync(AxoDataman_SoftEventStatus) protected Task<AxoDataman_SoftEventStatus> ShadowToPlainAsync(AxoDataman_SoftEventStatus plain) Parameters plain AxoDataman_SoftEventStatus Returns Task<AxoDataman_SoftEventStatus>"
  },
  "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_Status.html": {
    "href": "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_Status.html",
    "title": "Class AxoDataman_Status | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataman_Status Namespace AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll [Container(Layout.Stack)] public class AxoDataman_Status : AxoComponent_Status, ITwinObject, ITwinElement Inheritance object AxoComponent_Status AxoDataman_Status Implements ITwinObject ITwinElement Inherited Members AxoComponent_Status.Action AxoComponent_Status.Error AxoComponent_Status.OnlineToPlainAsync(AxoComponent_Status) AxoComponent_Status.PlainToOnlineAsync(AxoComponent_Status) AxoComponent_Status.ShadowToPlainAsync(AxoComponent_Status) AxoComponent_Status.PlainToShadowAsync(AxoComponent_Status) AxoComponent_Status.GetChildren() AxoComponent_Status.GetKids() AxoComponent_Status.GetValueTags() AxoComponent_Status.AddValueTag(ITwinPrimitive) AxoComponent_Status.AddKid(ITwinElement) AxoComponent_Status.AddChild(ITwinObject) AxoComponent_Status.Connector AxoComponent_Status.GetConnector() AxoComponent_Status.GetSymbolTail() AxoComponent_Status.GetParent() AxoComponent_Status.Symbol AxoComponent_Status.AttributeName AxoComponent_Status.HumanReadable AxoComponent_Status.SymbolTail AxoComponent_Status.Parent AxoComponent_Status.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoDataman_Status(ITwinObject, string, string) public AxoDataman_Status(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties ActionDescription public string ActionDescription { get; } Property Value string ErrorDescription public string ErrorDescription { get; } Property Value string ResultDataSize [Container(Layout.Wrap)] [EnumeratorDiscriminator(typeof(eAxoDataman_ResultDataSize))] public OnlinerInt ResultDataSize { get; } Property Value OnlinerInt Methods CreateEmptyPoco() public AxoDataman_Status CreateEmptyPoco() Returns AxoDataman_Status OnlineToPlain<T>() public override Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoDataman_Status> OnlineToPlainAsync() Returns Task<AxoDataman_Status> OnlineToPlainAsync(AxoDataman_Status) protected Task<AxoDataman_Status> OnlineToPlainAsync(AxoDataman_Status plain) Parameters plain AxoDataman_Status Returns Task<AxoDataman_Status> PlainToOnline<T>(T) public override Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoDataman_Status) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoDataman_Status plain) Parameters plain AxoDataman_Status Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public override Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoDataman_Status) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoDataman_Status plain) Parameters plain AxoDataman_Status Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public override Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoDataman_Status> ShadowToPlainAsync() Returns Task<AxoDataman_Status> ShadowToPlainAsync(AxoDataman_Status) protected Task<AxoDataman_Status> ShadowToPlainAsync(AxoDataman_Status plain) Parameters plain AxoDataman_Status Returns Task<AxoDataman_Status>"
  },
  "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_User.html": {
    "href": "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_User.html",
    "title": "Class AxoDataman_User | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataman_User Namespace AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoDataman_User : ITwinObject, ITwinElement Inheritance object AxoDataman_User Implements ITwinObject ITwinElement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoDataman_User(ITwinObject, string, string) public AxoDataman_User(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties AttributeName public string AttributeName { get; set; } Property Value string Connector protected Connector Connector { get; } Property Value Connector HumanReadable public string HumanReadable { get; set; } Property Value string Interpreter public Translator Interpreter { get; } Property Value Translator Length public OnlinerUInt Length { get; } Property Value OnlinerUInt Option public OnlinerUInt Option { get; } Property Value OnlinerUInt Parent protected ITwinObject Parent { get; set; } Property Value ITwinObject Symbol public string Symbol { get; protected set; } Property Value string SymbolTail protected string SymbolTail { get; set; } Property Value string Methods AddChild(ITwinObject) public void AddChild(ITwinObject twinObject) Parameters twinObject ITwinObject AddKid(ITwinElement) public void AddKid(ITwinElement kid) Parameters kid ITwinElement AddValueTag(ITwinPrimitive) public void AddValueTag(ITwinPrimitive valueTag) Parameters valueTag ITwinPrimitive CreateEmptyPoco() public AxoDataman_User CreateEmptyPoco() Returns AxoDataman_User GetChildren() public IEnumerable<ITwinObject> GetChildren() Returns IEnumerable<ITwinObject> GetConnector() public Connector GetConnector() Returns Connector GetKids() public IEnumerable<ITwinElement> GetKids() Returns IEnumerable<ITwinElement> GetParent() public ITwinObject GetParent() Returns ITwinObject GetSymbolTail() public string GetSymbolTail() Returns string GetValueTags() public IEnumerable<ITwinPrimitive> GetValueTags() Returns IEnumerable<ITwinPrimitive> OnlineToPlain<T>() public virtual Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoDataman_User> OnlineToPlainAsync() Returns Task<AxoDataman_User> OnlineToPlainAsync(AxoDataman_User) protected Task<AxoDataman_User> OnlineToPlainAsync(AxoDataman_User plain) Parameters plain AxoDataman_User Returns Task<AxoDataman_User> PlainToOnline<T>(T) public virtual Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoDataman_User) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoDataman_User plain) Parameters plain AxoDataman_User Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public virtual Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoDataman_User) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoDataman_User plain) Parameters plain AxoDataman_User Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public virtual Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoDataman_User> ShadowToPlainAsync() Returns Task<AxoDataman_User> ShadowToPlainAsync(AxoDataman_User) protected Task<AxoDataman_User> ShadowToPlainAsync(AxoDataman_User plain) Parameters plain AxoDataman_User Returns Task<AxoDataman_User>"
  },
  "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_UserData.html": {
    "href": "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_UserData.html",
    "title": "Class AxoDataman_UserData | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataman_UserData Namespace AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoDataman_UserData : AxoByteArray, ITwinObject, ITwinElement Inheritance object AxoByteArray AxoDataman_UserData Implements ITwinObject ITwinElement Inherited Members AxoByteArray.DisplayFormat AxoByteArray.DataChanged AxoByteArray.OnlineToPlainAsync(AxoByteArray) AxoByteArray.PlainToOnlineAsync(AxoByteArray) AxoByteArray.ShadowToPlainAsync(AxoByteArray) AxoByteArray.PlainToShadowAsync(AxoByteArray) AxoByteArray.GetChildren() AxoByteArray.GetKids() AxoByteArray.GetValueTags() AxoByteArray.AddValueTag(ITwinPrimitive) AxoByteArray.AddKid(ITwinElement) AxoByteArray.AddChild(ITwinObject) AxoByteArray.Connector AxoByteArray.GetConnector() AxoByteArray.GetSymbolTail() AxoByteArray.GetParent() AxoByteArray.Symbol AxoByteArray.AttributeName AxoByteArray.HumanReadable AxoByteArray.SymbolTail AxoByteArray.Parent AxoByteArray.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoDataman_UserData(ITwinObject, string, string) public AxoDataman_UserData(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties Data public OnlinerByte[] Data { get; } Property Value OnlinerByte[] Methods CreateEmptyPoco() public AxoDataman_UserData CreateEmptyPoco() Returns AxoDataman_UserData OnlineToPlain<T>() public override Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoDataman_UserData> OnlineToPlainAsync() Returns Task<AxoDataman_UserData> OnlineToPlainAsync(AxoDataman_UserData) protected Task<AxoDataman_UserData> OnlineToPlainAsync(AxoDataman_UserData plain) Parameters plain AxoDataman_UserData Returns Task<AxoDataman_UserData> PlainToOnline<T>(T) public override Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoDataman_UserData) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoDataman_UserData plain) Parameters plain AxoDataman_UserData Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public override Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoDataman_UserData) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoDataman_UserData plain) Parameters plain AxoDataman_UserData Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public override Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoDataman_UserData> ShadowToPlainAsync() Returns Task<AxoDataman_UserData> ShadowToPlainAsync(AxoDataman_UserData) protected Task<AxoDataman_UserData> ShadowToPlainAsync(AxoDataman_UserData plain) Parameters plain AxoDataman_UserData Returns Task<AxoDataman_UserData>"
  },
  "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight.html": {
    "href": "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight.html",
    "title": "Class AxoInsight | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsight Namespace AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll [Container(Layout.Wrap)] public class AxoInsight : AxoComponent, ITwinIdentity, ITwinObject, ITwinElement, IAxoObject, IAxoComponent, IAxoVisionSensor Inheritance object AxoObject AxoComponent AxoInsight Implements ITwinIdentity ITwinObject ITwinElement IAxoObject IAxoComponent IAxoVisionSensor Inherited Members AxoComponent._isManuallyControllable AxoComponent.OnlineToPlainAsync(AxoComponent) AxoComponent.PlainToOnlineAsync(AxoComponent) AxoComponent.ShadowToPlainAsync(AxoComponent) AxoComponent.PlainToShadowAsync(AxoComponent) AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoInsight(ITwinObject, string, string) public AxoInsight(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties _Messenger public AxoMessenger _Messenger { get; } Property Value AxoMessenger _TaskMessenger public AxoMessenger _TaskMessenger { get; } Property Value AxoMessenger AcquisitionControl [Container(Layout.Wrap)] [Group(GroupLayout.GroupBox)] [ComponentDetails(\"Status\")] [ReadOnly] public AxoInsight_AcquisitionControl AcquisitionControl { get; } Property Value AxoInsight_AcquisitionControl AcquisitionStatus [Container(Layout.Wrap)] [Group(GroupLayout.GroupBox)] [ComponentDetails(\"Status\")] [ReadOnly] public AxoInsight_AcquisitionStatus AcquisitionStatus { get; } Property Value AxoInsight_AcquisitionStatus ChangeJobByNameTask [ComponentDetails(\"Tasks\")] public AxoInsightChangeJobByName ChangeJobByNameTask { get; } Property Value AxoInsightChangeJobByName ChangeJobByNumberTask [ComponentDetails(\"Tasks\")] public AxoInsightChangeJobByNumber ChangeJobByNumberTask { get; } Property Value AxoInsightChangeJobByNumber ClearInspectionResultsTask [ComponentDetails(\"Tasks\")] public AxoInsightClearInspectionResults ClearInspectionResultsTask { get; } Property Value AxoInsightClearInspectionResults CommandControl [Container(Layout.Wrap)] [Group(GroupLayout.GroupBox)] [ComponentDetails(\"Status\")] [ReadOnly] public AxoInsight_CommandControl CommandControl { get; } Property Value AxoInsight_CommandControl CommandStatus [Container(Layout.Wrap)] [Group(GroupLayout.GroupBox)] [ComponentDetails(\"Status\")] [ReadOnly] public AxoInsight_CommandStatus CommandStatus { get; } Property Value AxoInsight_CommandStatus Config [Container(Layout.Wrap)] [ComponentDetails(\"Config\")] public AxoInsight_Config Config { get; } Property Value AxoInsight_Config InspectionControl [Container(Layout.Wrap)] [Group(GroupLayout.GroupBox)] [ComponentDetails(\"Status\")] [ReadOnly] public AxoInsight_InspectionControl InspectionControl { get; } Property Value AxoInsight_InspectionControl InspectionResults [Container(Layout.Wrap)] [ComponentHeader] public AxoInsight_ResultData InspectionResults { get; } Property Value AxoInsight_ResultData InspectionStatus [Container(Layout.Wrap)] [Group(GroupLayout.GroupBox)] [ComponentDetails(\"Status\")] [ReadOnly] public AxoInsight_InspectionStatus InspectionStatus { get; } Property Value AxoInsight_InspectionStatus RequiredJobName [Container(Layout.UniformGrid)] [Group(GroupLayout.GroupBox)] [ComponentDetails(\"Tasks\")] public OnlinerString RequiredJobName { get; } Property Value OnlinerString RequiredJobNumber [Group(GroupLayout.GroupBox)] [ComponentDetails(\"Tasks\")] public OnlinerUInt RequiredJobNumber { get; } Property Value OnlinerUInt RequiredSoftEventNumber [Group(GroupLayout.GroupBox)] [ComponentDetails(\"Tasks\")] public OnlinerUInt RequiredSoftEventNumber { get; } Property Value OnlinerUInt RestoreTask [Container(Layout.Wrap)] [ComponentDetails(\"Tasks\")] public AxoTask RestoreTask { get; } Property Value AxoTask Results [Container(Layout.Wrap)] [Group(GroupLayout.GroupBox)] [ComponentDetails(\"Status\")] [ReadOnly] public AxoInsight_Results Results { get; } Property Value AxoInsight_Results SoftEventControl [Container(Layout.Wrap)] [Group(GroupLayout.GroupBox)] [ComponentDetails(\"Status\")] [ReadOnly] public AxoInsight_SoftEventControl SoftEventControl { get; } Property Value AxoInsight_SoftEventControl SoftEventStatus [Container(Layout.Wrap)] [Group(GroupLayout.GroupBox)] [ComponentDetails(\"Status\")] [ReadOnly] public AxoInsight_SoftEventStatus SoftEventStatus { get; } Property Value AxoInsight_SoftEventStatus SoftEventTask [ComponentDetails(\"Tasks\")] public AxoInsightSoftEvent SoftEventTask { get; } Property Value AxoInsightSoftEvent Status [Container(Layout.Stack)] [ComponentDetails(\"Status\")] [ReadOnly] public AxoInsight_Status Status { get; } Property Value AxoInsight_Status TriggerTask [Container(Layout.Wrap)] [ComponentHeader] public AxoInsightTrigger TriggerTask { get; } Property Value AxoInsightTrigger UserData [Container(Layout.Wrap)] [Group(GroupLayout.GroupBox)] [ComponentDetails(\"Status\")] [ReadOnly] public AxoInsight_UserData UserData { get; } Property Value AxoInsight_UserData Methods CreateEmptyPoco() public AxoInsight CreateEmptyPoco() Returns AxoInsight OnlineToPlain<T>() public override Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoInsight> OnlineToPlainAsync() Returns Task<AxoInsight> OnlineToPlainAsync(AxoInsight) protected Task<AxoInsight> OnlineToPlainAsync(AxoInsight plain) Parameters plain AxoInsight Returns Task<AxoInsight> PlainToOnline<T>(T) public override Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoInsight) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoInsight plain) Parameters plain AxoInsight Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public override Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoInsight) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoInsight plain) Parameters plain AxoInsight Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public override Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoInsight> ShadowToPlainAsync() Returns Task<AxoInsight> ShadowToPlainAsync(AxoInsight) protected Task<AxoInsight> ShadowToPlainAsync(AxoInsight plain) Parameters plain AxoInsight Returns Task<AxoInsight>"
  },
  "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsightChangeJobByName.html": {
    "href": "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsightChangeJobByName.html",
    "title": "Class AxoInsightChangeJobByName | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsightChangeJobByName Namespace AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoInsightChangeJobByName : AxoTask, ITwinIdentity, ITwinObject, ITwinElement, IAxoObject, IAxoTask, IAxoTaskState Inheritance object AxoObject AxoTask AxoInsightChangeJobByName Implements ITwinIdentity ITwinObject ITwinElement IAxoObject IAxoTask IAxoTaskState Inherited Members AxoTask.Restore() AxoTask.Abort() AxoTask.ResumeTask() AxoTask.ExecuteAsync(object) AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails AxoTask._CyclicExecuteIsNotCalled AxoTask.OnlineToPlainAsync(AxoTask) AxoTask.PlainToOnlineAsync(AxoTask) AxoTask.ShadowToPlainAsync(AxoTask) AxoTask.PlainToShadowAsync(AxoTask) AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoInsightChangeJobByName(ITwinObject, string, string) public AxoInsightChangeJobByName(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Methods CreateEmptyPoco() public AxoInsightChangeJobByName CreateEmptyPoco() Returns AxoInsightChangeJobByName OnlineToPlain<T>() public override Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoInsightChangeJobByName> OnlineToPlainAsync() Returns Task<AxoInsightChangeJobByName> OnlineToPlainAsync(AxoInsightChangeJobByName) protected Task<AxoInsightChangeJobByName> OnlineToPlainAsync(AxoInsightChangeJobByName plain) Parameters plain AxoInsightChangeJobByName Returns Task<AxoInsightChangeJobByName> PlainToOnline<T>(T) public override Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoInsightChangeJobByName) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoInsightChangeJobByName plain) Parameters plain AxoInsightChangeJobByName Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public override Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoInsightChangeJobByName) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoInsightChangeJobByName plain) Parameters plain AxoInsightChangeJobByName Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public override Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoInsightChangeJobByName> ShadowToPlainAsync() Returns Task<AxoInsightChangeJobByName> ShadowToPlainAsync(AxoInsightChangeJobByName) protected Task<AxoInsightChangeJobByName> ShadowToPlainAsync(AxoInsightChangeJobByName plain) Parameters plain AxoInsightChangeJobByName Returns Task<AxoInsightChangeJobByName>"
  },
  "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsightChangeJobByNumber.html": {
    "href": "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsightChangeJobByNumber.html",
    "title": "Class AxoInsightChangeJobByNumber | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsightChangeJobByNumber Namespace AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoInsightChangeJobByNumber : AxoTask, ITwinIdentity, ITwinObject, ITwinElement, IAxoObject, IAxoTask, IAxoTaskState Inheritance object AxoObject AxoTask AxoInsightChangeJobByNumber Implements ITwinIdentity ITwinObject ITwinElement IAxoObject IAxoTask IAxoTaskState Inherited Members AxoTask.Restore() AxoTask.Abort() AxoTask.ResumeTask() AxoTask.ExecuteAsync(object) AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails AxoTask._CyclicExecuteIsNotCalled AxoTask.OnlineToPlainAsync(AxoTask) AxoTask.PlainToOnlineAsync(AxoTask) AxoTask.ShadowToPlainAsync(AxoTask) AxoTask.PlainToShadowAsync(AxoTask) AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoInsightChangeJobByNumber(ITwinObject, string, string) public AxoInsightChangeJobByNumber(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Methods CreateEmptyPoco() public AxoInsightChangeJobByNumber CreateEmptyPoco() Returns AxoInsightChangeJobByNumber OnlineToPlain<T>() public override Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoInsightChangeJobByNumber> OnlineToPlainAsync() Returns Task<AxoInsightChangeJobByNumber> OnlineToPlainAsync(AxoInsightChangeJobByNumber) protected Task<AxoInsightChangeJobByNumber> OnlineToPlainAsync(AxoInsightChangeJobByNumber plain) Parameters plain AxoInsightChangeJobByNumber Returns Task<AxoInsightChangeJobByNumber> PlainToOnline<T>(T) public override Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoInsightChangeJobByNumber) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoInsightChangeJobByNumber plain) Parameters plain AxoInsightChangeJobByNumber Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public override Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoInsightChangeJobByNumber) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoInsightChangeJobByNumber plain) Parameters plain AxoInsightChangeJobByNumber Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public override Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoInsightChangeJobByNumber> ShadowToPlainAsync() Returns Task<AxoInsightChangeJobByNumber> ShadowToPlainAsync(AxoInsightChangeJobByNumber) protected Task<AxoInsightChangeJobByNumber> ShadowToPlainAsync(AxoInsightChangeJobByNumber plain) Parameters plain AxoInsightChangeJobByNumber Returns Task<AxoInsightChangeJobByNumber>"
  },
  "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsightClearInspectionResults.html": {
    "href": "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsightClearInspectionResults.html",
    "title": "Class AxoInsightClearInspectionResults | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsightClearInspectionResults Namespace AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoInsightClearInspectionResults : AxoTask, ITwinIdentity, ITwinObject, ITwinElement, IAxoObject, IAxoTask, IAxoTaskState Inheritance object AxoObject AxoTask AxoInsightClearInspectionResults Implements ITwinIdentity ITwinObject ITwinElement IAxoObject IAxoTask IAxoTaskState Inherited Members AxoTask.Restore() AxoTask.Abort() AxoTask.ResumeTask() AxoTask.ExecuteAsync(object) AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails AxoTask._CyclicExecuteIsNotCalled AxoTask.OnlineToPlainAsync(AxoTask) AxoTask.PlainToOnlineAsync(AxoTask) AxoTask.ShadowToPlainAsync(AxoTask) AxoTask.PlainToShadowAsync(AxoTask) AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoInsightClearInspectionResults(ITwinObject, string, string) public AxoInsightClearInspectionResults(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Methods CreateEmptyPoco() public AxoInsightClearInspectionResults CreateEmptyPoco() Returns AxoInsightClearInspectionResults OnlineToPlain<T>() public override Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoInsightClearInspectionResults> OnlineToPlainAsync() Returns Task<AxoInsightClearInspectionResults> OnlineToPlainAsync(AxoInsightClearInspectionResults) protected Task<AxoInsightClearInspectionResults> OnlineToPlainAsync(AxoInsightClearInspectionResults plain) Parameters plain AxoInsightClearInspectionResults Returns Task<AxoInsightClearInspectionResults> PlainToOnline<T>(T) public override Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoInsightClearInspectionResults) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoInsightClearInspectionResults plain) Parameters plain AxoInsightClearInspectionResults Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public override Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoInsightClearInspectionResults) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoInsightClearInspectionResults plain) Parameters plain AxoInsightClearInspectionResults Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public override Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoInsightClearInspectionResults> ShadowToPlainAsync() Returns Task<AxoInsightClearInspectionResults> ShadowToPlainAsync(AxoInsightClearInspectionResults) protected Task<AxoInsightClearInspectionResults> ShadowToPlainAsync(AxoInsightClearInspectionResults plain) Parameters plain AxoInsightClearInspectionResults Returns Task<AxoInsightClearInspectionResults>"
  },
  "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsightSoftEvent.html": {
    "href": "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsightSoftEvent.html",
    "title": "Class AxoInsightSoftEvent | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsightSoftEvent Namespace AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoInsightSoftEvent : AxoTask, ITwinIdentity, ITwinObject, ITwinElement, IAxoObject, IAxoTask, IAxoTaskState Inheritance object AxoObject AxoTask AxoInsightSoftEvent Implements ITwinIdentity ITwinObject ITwinElement IAxoObject IAxoTask IAxoTaskState Inherited Members AxoTask.Restore() AxoTask.Abort() AxoTask.ResumeTask() AxoTask.ExecuteAsync(object) AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails AxoTask._CyclicExecuteIsNotCalled AxoTask.OnlineToPlainAsync(AxoTask) AxoTask.PlainToOnlineAsync(AxoTask) AxoTask.ShadowToPlainAsync(AxoTask) AxoTask.PlainToShadowAsync(AxoTask) AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoInsightSoftEvent(ITwinObject, string, string) public AxoInsightSoftEvent(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Methods CreateEmptyPoco() public AxoInsightSoftEvent CreateEmptyPoco() Returns AxoInsightSoftEvent OnlineToPlain<T>() public override Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoInsightSoftEvent> OnlineToPlainAsync() Returns Task<AxoInsightSoftEvent> OnlineToPlainAsync(AxoInsightSoftEvent) protected Task<AxoInsightSoftEvent> OnlineToPlainAsync(AxoInsightSoftEvent plain) Parameters plain AxoInsightSoftEvent Returns Task<AxoInsightSoftEvent> PlainToOnline<T>(T) public override Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoInsightSoftEvent) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoInsightSoftEvent plain) Parameters plain AxoInsightSoftEvent Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public override Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoInsightSoftEvent) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoInsightSoftEvent plain) Parameters plain AxoInsightSoftEvent Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public override Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoInsightSoftEvent> ShadowToPlainAsync() Returns Task<AxoInsightSoftEvent> ShadowToPlainAsync(AxoInsightSoftEvent) protected Task<AxoInsightSoftEvent> ShadowToPlainAsync(AxoInsightSoftEvent plain) Parameters plain AxoInsightSoftEvent Returns Task<AxoInsightSoftEvent>"
  },
  "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsightTrigger.html": {
    "href": "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsightTrigger.html",
    "title": "Class AxoInsightTrigger | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsightTrigger Namespace AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoInsightTrigger : AxoTask, ITwinIdentity, ITwinObject, ITwinElement, IAxoObject, IAxoTask, IAxoTaskState Inheritance object AxoObject AxoTask AxoInsightTrigger Implements ITwinIdentity ITwinObject ITwinElement IAxoObject IAxoTask IAxoTaskState Inherited Members AxoTask.Restore() AxoTask.Abort() AxoTask.ResumeTask() AxoTask.ExecuteAsync(object) AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails AxoTask._CyclicExecuteIsNotCalled AxoTask.OnlineToPlainAsync(AxoTask) AxoTask.PlainToOnlineAsync(AxoTask) AxoTask.ShadowToPlainAsync(AxoTask) AxoTask.PlainToShadowAsync(AxoTask) AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoInsightTrigger(ITwinObject, string, string) public AxoInsightTrigger(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Methods CreateEmptyPoco() public AxoInsightTrigger CreateEmptyPoco() Returns AxoInsightTrigger OnlineToPlain<T>() public override Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoInsightTrigger> OnlineToPlainAsync() Returns Task<AxoInsightTrigger> OnlineToPlainAsync(AxoInsightTrigger) protected Task<AxoInsightTrigger> OnlineToPlainAsync(AxoInsightTrigger plain) Parameters plain AxoInsightTrigger Returns Task<AxoInsightTrigger> PlainToOnline<T>(T) public override Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoInsightTrigger) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoInsightTrigger plain) Parameters plain AxoInsightTrigger Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public override Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoInsightTrigger) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoInsightTrigger plain) Parameters plain AxoInsightTrigger Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public override Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoInsightTrigger> ShadowToPlainAsync() Returns Task<AxoInsightTrigger> ShadowToPlainAsync(AxoInsightTrigger) protected Task<AxoInsightTrigger> ShadowToPlainAsync(AxoInsightTrigger plain) Parameters plain AxoInsightTrigger Returns Task<AxoInsightTrigger>"
  },
  "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_AcquisitionControl.html": {
    "href": "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_AcquisitionControl.html",
    "title": "Class AxoInsight_AcquisitionControl | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsight_AcquisitionControl Namespace AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll [Container(Layout.Wrap)] public class AxoInsight_AcquisitionControl : ITwinObject, ITwinElement Inheritance object AxoInsight_AcquisitionControl Implements ITwinObject ITwinElement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoInsight_AcquisitionControl(ITwinObject, string, string) public AxoInsight_AcquisitionControl(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties AttributeName public string AttributeName { get; set; } Property Value string ClearExposureComplete public OnlinerBool ClearExposureComplete { get; } Property Value OnlinerBool Connector protected Connector Connector { get; } Property Value Connector HumanReadable public string HumanReadable { get; set; } Property Value string Interpreter public Translator Interpreter { get; } Property Value Translator Parent protected ITwinObject Parent { get; set; } Property Value ITwinObject SetOffline public OnlinerBool SetOffline { get; } Property Value OnlinerBool Symbol public string Symbol { get; protected set; } Property Value string SymbolTail protected string SymbolTail { get; set; } Property Value string Trigger public OnlinerBool Trigger { get; } Property Value OnlinerBool TriggerEnable public OnlinerBool TriggerEnable { get; } Property Value OnlinerBool Methods AddChild(ITwinObject) public void AddChild(ITwinObject twinObject) Parameters twinObject ITwinObject AddKid(ITwinElement) public void AddKid(ITwinElement kid) Parameters kid ITwinElement AddValueTag(ITwinPrimitive) public void AddValueTag(ITwinPrimitive valueTag) Parameters valueTag ITwinPrimitive CreateEmptyPoco() public AxoInsight_AcquisitionControl CreateEmptyPoco() Returns AxoInsight_AcquisitionControl GetChildren() public IEnumerable<ITwinObject> GetChildren() Returns IEnumerable<ITwinObject> GetConnector() public Connector GetConnector() Returns Connector GetKids() public IEnumerable<ITwinElement> GetKids() Returns IEnumerable<ITwinElement> GetParent() public ITwinObject GetParent() Returns ITwinObject GetSymbolTail() public string GetSymbolTail() Returns string GetValueTags() public IEnumerable<ITwinPrimitive> GetValueTags() Returns IEnumerable<ITwinPrimitive> OnlineToPlain<T>() public virtual Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoInsight_AcquisitionControl> OnlineToPlainAsync() Returns Task<AxoInsight_AcquisitionControl> OnlineToPlainAsync(AxoInsight_AcquisitionControl) protected Task<AxoInsight_AcquisitionControl> OnlineToPlainAsync(AxoInsight_AcquisitionControl plain) Parameters plain AxoInsight_AcquisitionControl Returns Task<AxoInsight_AcquisitionControl> PlainToOnline<T>(T) public virtual Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoInsight_AcquisitionControl) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoInsight_AcquisitionControl plain) Parameters plain AxoInsight_AcquisitionControl Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public virtual Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoInsight_AcquisitionControl) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoInsight_AcquisitionControl plain) Parameters plain AxoInsight_AcquisitionControl Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public virtual Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoInsight_AcquisitionControl> ShadowToPlainAsync() Returns Task<AxoInsight_AcquisitionControl> ShadowToPlainAsync(AxoInsight_AcquisitionControl) protected Task<AxoInsight_AcquisitionControl> ShadowToPlainAsync(AxoInsight_AcquisitionControl plain) Parameters plain AxoInsight_AcquisitionControl Returns Task<AxoInsight_AcquisitionControl>"
  },
  "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_AcquisitionStatus.html": {
    "href": "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_AcquisitionStatus.html",
    "title": "Class AxoInsight_AcquisitionStatus | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsight_AcquisitionStatus Namespace AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll [Container(Layout.Wrap)] public class AxoInsight_AcquisitionStatus : ITwinObject, ITwinElement Inheritance object AxoInsight_AcquisitionStatus Implements ITwinObject ITwinElement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoInsight_AcquisitionStatus(ITwinObject, string, string) public AxoInsight_AcquisitionStatus(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties AcquisitionID public OnlinerUInt AcquisitionID { get; } Property Value OnlinerUInt AttributeName public string AttributeName { get; set; } Property Value string Connector protected Connector Connector { get; } Property Value Connector ExposureComplete public OnlinerBool ExposureComplete { get; } Property Value OnlinerBool HumanReadable public string HumanReadable { get; set; } Property Value string Interpreter public Translator Interpreter { get; } Property Value Translator MissedAcquisition public OnlinerBool MissedAcquisition { get; } Property Value OnlinerBool OfflineReason0 public OnlinerBool OfflineReason0 { get; } Property Value OnlinerBool OfflineReason1 public OnlinerBool OfflineReason1 { get; } Property Value OnlinerBool OfflineReason2 public OnlinerBool OfflineReason2 { get; } Property Value OnlinerBool Online public OnlinerBool Online { get; } Property Value OnlinerBool Parent protected ITwinObject Parent { get; set; } Property Value ITwinObject Symbol public string Symbol { get; protected set; } Property Value string SymbolTail protected string SymbolTail { get; set; } Property Value string TriggerAcknowledge public OnlinerBool TriggerAcknowledge { get; } Property Value OnlinerBool TriggerReady public OnlinerBool TriggerReady { get; } Property Value OnlinerBool Methods AddChild(ITwinObject) public void AddChild(ITwinObject twinObject) Parameters twinObject ITwinObject AddKid(ITwinElement) public void AddKid(ITwinElement kid) Parameters kid ITwinElement AddValueTag(ITwinPrimitive) public void AddValueTag(ITwinPrimitive valueTag) Parameters valueTag ITwinPrimitive CreateEmptyPoco() public AxoInsight_AcquisitionStatus CreateEmptyPoco() Returns AxoInsight_AcquisitionStatus GetChildren() public IEnumerable<ITwinObject> GetChildren() Returns IEnumerable<ITwinObject> GetConnector() public Connector GetConnector() Returns Connector GetKids() public IEnumerable<ITwinElement> GetKids() Returns IEnumerable<ITwinElement> GetParent() public ITwinObject GetParent() Returns ITwinObject GetSymbolTail() public string GetSymbolTail() Returns string GetValueTags() public IEnumerable<ITwinPrimitive> GetValueTags() Returns IEnumerable<ITwinPrimitive> OnlineToPlain<T>() public virtual Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoInsight_AcquisitionStatus> OnlineToPlainAsync() Returns Task<AxoInsight_AcquisitionStatus> OnlineToPlainAsync(AxoInsight_AcquisitionStatus) protected Task<AxoInsight_AcquisitionStatus> OnlineToPlainAsync(AxoInsight_AcquisitionStatus plain) Parameters plain AxoInsight_AcquisitionStatus Returns Task<AxoInsight_AcquisitionStatus> PlainToOnline<T>(T) public virtual Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoInsight_AcquisitionStatus) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoInsight_AcquisitionStatus plain) Parameters plain AxoInsight_AcquisitionStatus Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public virtual Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoInsight_AcquisitionStatus) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoInsight_AcquisitionStatus plain) Parameters plain AxoInsight_AcquisitionStatus Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public virtual Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoInsight_AcquisitionStatus> ShadowToPlainAsync() Returns Task<AxoInsight_AcquisitionStatus> ShadowToPlainAsync(AxoInsight_AcquisitionStatus) protected Task<AxoInsight_AcquisitionStatus> ShadowToPlainAsync(AxoInsight_AcquisitionStatus plain) Parameters plain AxoInsight_AcquisitionStatus Returns Task<AxoInsight_AcquisitionStatus>"
  },
  "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_CommandControl.html": {
    "href": "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_CommandControl.html",
    "title": "Class AxoInsight_CommandControl | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsight_CommandControl Namespace AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll [Container(Layout.Wrap)] public class AxoInsight_CommandControl : ITwinObject, ITwinElement Inheritance object AxoInsight_CommandControl Implements ITwinObject ITwinElement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoInsight_CommandControl(ITwinObject, string, string) public AxoInsight_CommandControl(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties AttributeName public string AttributeName { get; set; } Property Value string Command public OnlinerUInt Command { get; } Property Value OnlinerUInt Connector protected Connector Connector { get; } Property Value Connector HumanReadable public string HumanReadable { get; set; } Property Value string Interpreter public Translator Interpreter { get; } Property Value Translator Parent protected ITwinObject Parent { get; set; } Property Value ITwinObject Symbol public string Symbol { get; protected set; } Property Value string SymbolTail protected string SymbolTail { get; set; } Property Value string Methods AddChild(ITwinObject) public void AddChild(ITwinObject twinObject) Parameters twinObject ITwinObject AddKid(ITwinElement) public void AddKid(ITwinElement kid) Parameters kid ITwinElement AddValueTag(ITwinPrimitive) public void AddValueTag(ITwinPrimitive valueTag) Parameters valueTag ITwinPrimitive CreateEmptyPoco() public AxoInsight_CommandControl CreateEmptyPoco() Returns AxoInsight_CommandControl GetChildren() public IEnumerable<ITwinObject> GetChildren() Returns IEnumerable<ITwinObject> GetConnector() public Connector GetConnector() Returns Connector GetKids() public IEnumerable<ITwinElement> GetKids() Returns IEnumerable<ITwinElement> GetParent() public ITwinObject GetParent() Returns ITwinObject GetSymbolTail() public string GetSymbolTail() Returns string GetValueTags() public IEnumerable<ITwinPrimitive> GetValueTags() Returns IEnumerable<ITwinPrimitive> OnlineToPlain<T>() public virtual Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoInsight_CommandControl> OnlineToPlainAsync() Returns Task<AxoInsight_CommandControl> OnlineToPlainAsync(AxoInsight_CommandControl) protected Task<AxoInsight_CommandControl> OnlineToPlainAsync(AxoInsight_CommandControl plain) Parameters plain AxoInsight_CommandControl Returns Task<AxoInsight_CommandControl> PlainToOnline<T>(T) public virtual Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoInsight_CommandControl) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoInsight_CommandControl plain) Parameters plain AxoInsight_CommandControl Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public virtual Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoInsight_CommandControl) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoInsight_CommandControl plain) Parameters plain AxoInsight_CommandControl Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public virtual Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoInsight_CommandControl> ShadowToPlainAsync() Returns Task<AxoInsight_CommandControl> ShadowToPlainAsync(AxoInsight_CommandControl) protected Task<AxoInsight_CommandControl> ShadowToPlainAsync(AxoInsight_CommandControl plain) Parameters plain AxoInsight_CommandControl Returns Task<AxoInsight_CommandControl>"
  },
  "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_CommandStatus.html": {
    "href": "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_CommandStatus.html",
    "title": "Class AxoInsight_CommandStatus | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsight_CommandStatus Namespace AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll [Container(Layout.Wrap)] public class AxoInsight_CommandStatus : ITwinObject, ITwinElement Inheritance object AxoInsight_CommandStatus Implements ITwinObject ITwinElement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoInsight_CommandStatus(ITwinObject, string, string) public AxoInsight_CommandStatus(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties AttributeName public string AttributeName { get; set; } Property Value string Connector protected Connector Connector { get; } Property Value Connector CurrentJobID public OnlinerUInt CurrentJobID { get; } Property Value OnlinerUInt HumanReadable public string HumanReadable { get; set; } Property Value string Interpreter public Translator Interpreter { get; } Property Value Translator Parent protected ITwinObject Parent { get; set; } Property Value ITwinObject Symbol public string Symbol { get; protected set; } Property Value string SymbolTail protected string SymbolTail { get; set; } Property Value string Methods AddChild(ITwinObject) public void AddChild(ITwinObject twinObject) Parameters twinObject ITwinObject AddKid(ITwinElement) public void AddKid(ITwinElement kid) Parameters kid ITwinElement AddValueTag(ITwinPrimitive) public void AddValueTag(ITwinPrimitive valueTag) Parameters valueTag ITwinPrimitive CreateEmptyPoco() public AxoInsight_CommandStatus CreateEmptyPoco() Returns AxoInsight_CommandStatus GetChildren() public IEnumerable<ITwinObject> GetChildren() Returns IEnumerable<ITwinObject> GetConnector() public Connector GetConnector() Returns Connector GetKids() public IEnumerable<ITwinElement> GetKids() Returns IEnumerable<ITwinElement> GetParent() public ITwinObject GetParent() Returns ITwinObject GetSymbolTail() public string GetSymbolTail() Returns string GetValueTags() public IEnumerable<ITwinPrimitive> GetValueTags() Returns IEnumerable<ITwinPrimitive> OnlineToPlain<T>() public virtual Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoInsight_CommandStatus> OnlineToPlainAsync() Returns Task<AxoInsight_CommandStatus> OnlineToPlainAsync(AxoInsight_CommandStatus) protected Task<AxoInsight_CommandStatus> OnlineToPlainAsync(AxoInsight_CommandStatus plain) Parameters plain AxoInsight_CommandStatus Returns Task<AxoInsight_CommandStatus> PlainToOnline<T>(T) public virtual Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoInsight_CommandStatus) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoInsight_CommandStatus plain) Parameters plain AxoInsight_CommandStatus Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public virtual Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoInsight_CommandStatus) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoInsight_CommandStatus plain) Parameters plain AxoInsight_CommandStatus Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public virtual Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoInsight_CommandStatus> ShadowToPlainAsync() Returns Task<AxoInsight_CommandStatus> ShadowToPlainAsync(AxoInsight_CommandStatus) protected Task<AxoInsight_CommandStatus> ShadowToPlainAsync(AxoInsight_CommandStatus plain) Parameters plain AxoInsight_CommandStatus Returns Task<AxoInsight_CommandStatus>"
  },
  "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Config.html": {
    "href": "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Config.html",
    "title": "Class AxoInsight_Config | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsight_Config Namespace AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll [Container(Layout.Wrap)] public class AxoInsight_Config : ITwinObject, ITwinElement Inheritance object AxoInsight_Config Implements ITwinObject ITwinElement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoInsight_Config(ITwinObject, string, string) public AxoInsight_Config(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties AttributeName public string AttributeName { get; set; } Property Value string Connector protected Connector Connector { get; } Property Value Connector ErrorTime public OnlinerLTime ErrorTime { get; } Property Value OnlinerLTime HumanReadable public string HumanReadable { get; set; } Property Value string InfoTime public OnlinerLTime InfoTime { get; } Property Value OnlinerLTime Interpreter public Translator Interpreter { get; } Property Value Translator MaxJobNumber public OnlinerUInt MaxJobNumber { get; } Property Value OnlinerUInt Parent protected ITwinObject Parent { get; set; } Property Value ITwinObject Symbol public string Symbol { get; protected set; } Property Value string SymbolTail protected string SymbolTail { get; set; } Property Value string Methods AddChild(ITwinObject) public void AddChild(ITwinObject twinObject) Parameters twinObject ITwinObject AddKid(ITwinElement) public void AddKid(ITwinElement kid) Parameters kid ITwinElement AddValueTag(ITwinPrimitive) public void AddValueTag(ITwinPrimitive valueTag) Parameters valueTag ITwinPrimitive CreateEmptyPoco() public AxoInsight_Config CreateEmptyPoco() Returns AxoInsight_Config GetChildren() public IEnumerable<ITwinObject> GetChildren() Returns IEnumerable<ITwinObject> GetConnector() public Connector GetConnector() Returns Connector GetKids() public IEnumerable<ITwinElement> GetKids() Returns IEnumerable<ITwinElement> GetParent() public ITwinObject GetParent() Returns ITwinObject GetSymbolTail() public string GetSymbolTail() Returns string GetValueTags() public IEnumerable<ITwinPrimitive> GetValueTags() Returns IEnumerable<ITwinPrimitive> OnlineToPlain<T>() public virtual Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoInsight_Config> OnlineToPlainAsync() Returns Task<AxoInsight_Config> OnlineToPlainAsync(AxoInsight_Config) protected Task<AxoInsight_Config> OnlineToPlainAsync(AxoInsight_Config plain) Parameters plain AxoInsight_Config Returns Task<AxoInsight_Config> PlainToOnline<T>(T) public virtual Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoInsight_Config) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoInsight_Config plain) Parameters plain AxoInsight_Config Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public virtual Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoInsight_Config) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoInsight_Config plain) Parameters plain AxoInsight_Config Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public virtual Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoInsight_Config> ShadowToPlainAsync() Returns Task<AxoInsight_Config> ShadowToPlainAsync(AxoInsight_Config) protected Task<AxoInsight_Config> ShadowToPlainAsync(AxoInsight_Config plain) Parameters plain AxoInsight_Config Returns Task<AxoInsight_Config>"
  },
  "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_InspectionControl.html": {
    "href": "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_InspectionControl.html",
    "title": "Class AxoInsight_InspectionControl | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsight_InspectionControl Namespace AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll [Container(Layout.Wrap)] public class AxoInsight_InspectionControl : ITwinObject, ITwinElement Inheritance object AxoInsight_InspectionControl Implements ITwinObject ITwinElement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoInsight_InspectionControl(ITwinObject, string, string) public AxoInsight_InspectionControl(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties AcknowledgeInspectionResults public OnlinerBool AcknowledgeInspectionResults { get; } Property Value OnlinerBool AttributeName public string AttributeName { get; set; } Property Value string ClearError public OnlinerBool ClearError { get; } Property Value OnlinerBool Connector protected Connector Connector { get; } Property Value Connector EnableResultsBuffering public OnlinerBool EnableResultsBuffering { get; } Property Value OnlinerBool ExecuteCommand public OnlinerBool ExecuteCommand { get; } Property Value OnlinerBool ExtendedUserDataSet public OnlinerBool ExtendedUserDataSet { get; } Property Value OnlinerBool HumanReadable public string HumanReadable { get; set; } Property Value string Interpreter public Translator Interpreter { get; } Property Value Translator Parent protected ITwinObject Parent { get; set; } Property Value ITwinObject Symbol public string Symbol { get; protected set; } Property Value string SymbolTail protected string SymbolTail { get; set; } Property Value string Methods AddChild(ITwinObject) public void AddChild(ITwinObject twinObject) Parameters twinObject ITwinObject AddKid(ITwinElement) public void AddKid(ITwinElement kid) Parameters kid ITwinElement AddValueTag(ITwinPrimitive) public void AddValueTag(ITwinPrimitive valueTag) Parameters valueTag ITwinPrimitive CreateEmptyPoco() public AxoInsight_InspectionControl CreateEmptyPoco() Returns AxoInsight_InspectionControl GetChildren() public IEnumerable<ITwinObject> GetChildren() Returns IEnumerable<ITwinObject> GetConnector() public Connector GetConnector() Returns Connector GetKids() public IEnumerable<ITwinElement> GetKids() Returns IEnumerable<ITwinElement> GetParent() public ITwinObject GetParent() Returns ITwinObject GetSymbolTail() public string GetSymbolTail() Returns string GetValueTags() public IEnumerable<ITwinPrimitive> GetValueTags() Returns IEnumerable<ITwinPrimitive> OnlineToPlain<T>() public virtual Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoInsight_InspectionControl> OnlineToPlainAsync() Returns Task<AxoInsight_InspectionControl> OnlineToPlainAsync(AxoInsight_InspectionControl) protected Task<AxoInsight_InspectionControl> OnlineToPlainAsync(AxoInsight_InspectionControl plain) Parameters plain AxoInsight_InspectionControl Returns Task<AxoInsight_InspectionControl> PlainToOnline<T>(T) public virtual Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoInsight_InspectionControl) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoInsight_InspectionControl plain) Parameters plain AxoInsight_InspectionControl Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public virtual Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoInsight_InspectionControl) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoInsight_InspectionControl plain) Parameters plain AxoInsight_InspectionControl Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public virtual Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoInsight_InspectionControl> ShadowToPlainAsync() Returns Task<AxoInsight_InspectionControl> ShadowToPlainAsync(AxoInsight_InspectionControl) protected Task<AxoInsight_InspectionControl> ShadowToPlainAsync(AxoInsight_InspectionControl plain) Parameters plain AxoInsight_InspectionControl Returns Task<AxoInsight_InspectionControl>"
  },
  "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_InspectionStatus.html": {
    "href": "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_InspectionStatus.html",
    "title": "Class AxoInsight_InspectionStatus | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsight_InspectionStatus Namespace AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll [Container(Layout.Wrap)] public class AxoInsight_InspectionStatus : ITwinObject, ITwinElement Inheritance object AxoInsight_InspectionStatus Implements ITwinObject ITwinElement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoInsight_InspectionStatus(ITwinObject, string, string) public AxoInsight_InspectionStatus(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties AttributeName public string AttributeName { get; set; } Property Value string CommandComplete public OnlinerBool CommandComplete { get; } Property Value OnlinerBool CommandExecuting public OnlinerBool CommandExecuting { get; } Property Value OnlinerBool CommandFailed public OnlinerBool CommandFailed { get; } Property Value OnlinerBool Connector protected Connector Connector { get; } Property Value Connector Error public OnlinerBool Error { get; } Property Value OnlinerBool ErrorCode public OnlinerUInt ErrorCode { get; } Property Value OnlinerUInt ExtendedUserDataSetAcknowledge public OnlinerBool ExtendedUserDataSetAcknowledge { get; } Property Value OnlinerBool HumanReadable public string HumanReadable { get; set; } Property Value string InspectionCompleted public OnlinerBool InspectionCompleted { get; } Property Value OnlinerBool Interpreter public Translator Interpreter { get; } Property Value Translator OverallJobPassFail public OnlinerBool OverallJobPassFail { get; } Property Value OnlinerBool Parent protected ITwinObject Parent { get; set; } Property Value ITwinObject ResultsBufferOverrun public OnlinerBool ResultsBufferOverrun { get; } Property Value OnlinerBool ResultsValid public OnlinerBool ResultsValid { get; } Property Value OnlinerBool Symbol public string Symbol { get; protected set; } Property Value string SymbolTail protected string SymbolTail { get; set; } Property Value string SystemBusy public OnlinerBool SystemBusy { get; } Property Value OnlinerBool TestRunReady public OnlinerBool TestRunReady { get; } Property Value OnlinerBool Methods AddChild(ITwinObject) public void AddChild(ITwinObject twinObject) Parameters twinObject ITwinObject AddKid(ITwinElement) public void AddKid(ITwinElement kid) Parameters kid ITwinElement AddValueTag(ITwinPrimitive) public void AddValueTag(ITwinPrimitive valueTag) Parameters valueTag ITwinPrimitive CreateEmptyPoco() public AxoInsight_InspectionStatus CreateEmptyPoco() Returns AxoInsight_InspectionStatus GetChildren() public IEnumerable<ITwinObject> GetChildren() Returns IEnumerable<ITwinObject> GetConnector() public Connector GetConnector() Returns Connector GetKids() public IEnumerable<ITwinElement> GetKids() Returns IEnumerable<ITwinElement> GetParent() public ITwinObject GetParent() Returns ITwinObject GetSymbolTail() public string GetSymbolTail() Returns string GetValueTags() public IEnumerable<ITwinPrimitive> GetValueTags() Returns IEnumerable<ITwinPrimitive> OnlineToPlain<T>() public virtual Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoInsight_InspectionStatus> OnlineToPlainAsync() Returns Task<AxoInsight_InspectionStatus> OnlineToPlainAsync(AxoInsight_InspectionStatus) protected Task<AxoInsight_InspectionStatus> OnlineToPlainAsync(AxoInsight_InspectionStatus plain) Parameters plain AxoInsight_InspectionStatus Returns Task<AxoInsight_InspectionStatus> PlainToOnline<T>(T) public virtual Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoInsight_InspectionStatus) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoInsight_InspectionStatus plain) Parameters plain AxoInsight_InspectionStatus Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public virtual Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoInsight_InspectionStatus) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoInsight_InspectionStatus plain) Parameters plain AxoInsight_InspectionStatus Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public virtual Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoInsight_InspectionStatus> ShadowToPlainAsync() Returns Task<AxoInsight_InspectionStatus> ShadowToPlainAsync(AxoInsight_InspectionStatus) protected Task<AxoInsight_InspectionStatus> ShadowToPlainAsync(AxoInsight_InspectionStatus plain) Parameters plain AxoInsight_InspectionStatus Returns Task<AxoInsight_InspectionStatus>"
  },
  "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_ResultData.html": {
    "href": "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_ResultData.html",
    "title": "Class AxoInsight_ResultData | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsight_ResultData Namespace AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoInsight_ResultData : AxoByteArray, ITwinObject, ITwinElement Inheritance object AxoByteArray AxoInsight_ResultData Implements ITwinObject ITwinElement Inherited Members AxoByteArray.DisplayFormat AxoByteArray.DataChanged AxoByteArray.OnlineToPlainAsync(AxoByteArray) AxoByteArray.PlainToOnlineAsync(AxoByteArray) AxoByteArray.ShadowToPlainAsync(AxoByteArray) AxoByteArray.PlainToShadowAsync(AxoByteArray) AxoByteArray.GetChildren() AxoByteArray.GetKids() AxoByteArray.GetValueTags() AxoByteArray.AddValueTag(ITwinPrimitive) AxoByteArray.AddKid(ITwinElement) AxoByteArray.AddChild(ITwinObject) AxoByteArray.Connector AxoByteArray.GetConnector() AxoByteArray.GetSymbolTail() AxoByteArray.GetParent() AxoByteArray.Symbol AxoByteArray.AttributeName AxoByteArray.HumanReadable AxoByteArray.SymbolTail AxoByteArray.Parent AxoByteArray.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoInsight_ResultData(ITwinObject, string, string) public AxoInsight_ResultData(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties Data public OnlinerByte[] Data { get; } Property Value OnlinerByte[] Methods CreateEmptyPoco() public AxoInsight_ResultData CreateEmptyPoco() Returns AxoInsight_ResultData OnlineToPlain<T>() public override Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoInsight_ResultData> OnlineToPlainAsync() Returns Task<AxoInsight_ResultData> OnlineToPlainAsync(AxoInsight_ResultData) protected Task<AxoInsight_ResultData> OnlineToPlainAsync(AxoInsight_ResultData plain) Parameters plain AxoInsight_ResultData Returns Task<AxoInsight_ResultData> PlainToOnline<T>(T) public override Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoInsight_ResultData) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoInsight_ResultData plain) Parameters plain AxoInsight_ResultData Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public override Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoInsight_ResultData) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoInsight_ResultData plain) Parameters plain AxoInsight_ResultData Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public override Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoInsight_ResultData> ShadowToPlainAsync() Returns Task<AxoInsight_ResultData> ShadowToPlainAsync(AxoInsight_ResultData) protected Task<AxoInsight_ResultData> ShadowToPlainAsync(AxoInsight_ResultData plain) Parameters plain AxoInsight_ResultData Returns Task<AxoInsight_ResultData>"
  },
  "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Results.html": {
    "href": "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Results.html",
    "title": "Class AxoInsight_Results | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsight_Results Namespace AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll [Container(Layout.Wrap)] public class AxoInsight_Results : ITwinObject, ITwinElement Inheritance object AxoInsight_Results Implements ITwinObject ITwinElement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoInsight_Results(ITwinObject, string, string) public AxoInsight_Results(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties AttributeName public string AttributeName { get; set; } Property Value string Connector protected Connector Connector { get; } Property Value Connector HumanReadable public string HumanReadable { get; set; } Property Value string InspectionID public OnlinerUInt InspectionID { get; } Property Value OnlinerUInt Interpreter public Translator Interpreter { get; } Property Value Translator Parent protected ITwinObject Parent { get; set; } Property Value ITwinObject ResultCode public OnlinerUInt ResultCode { get; } Property Value OnlinerUInt Symbol public string Symbol { get; protected set; } Property Value string SymbolTail protected string SymbolTail { get; set; } Property Value string Methods AddChild(ITwinObject) public void AddChild(ITwinObject twinObject) Parameters twinObject ITwinObject AddKid(ITwinElement) public void AddKid(ITwinElement kid) Parameters kid ITwinElement AddValueTag(ITwinPrimitive) public void AddValueTag(ITwinPrimitive valueTag) Parameters valueTag ITwinPrimitive CreateEmptyPoco() public AxoInsight_Results CreateEmptyPoco() Returns AxoInsight_Results GetChildren() public IEnumerable<ITwinObject> GetChildren() Returns IEnumerable<ITwinObject> GetConnector() public Connector GetConnector() Returns Connector GetKids() public IEnumerable<ITwinElement> GetKids() Returns IEnumerable<ITwinElement> GetParent() public ITwinObject GetParent() Returns ITwinObject GetSymbolTail() public string GetSymbolTail() Returns string GetValueTags() public IEnumerable<ITwinPrimitive> GetValueTags() Returns IEnumerable<ITwinPrimitive> OnlineToPlain<T>() public virtual Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoInsight_Results> OnlineToPlainAsync() Returns Task<AxoInsight_Results> OnlineToPlainAsync(AxoInsight_Results) protected Task<AxoInsight_Results> OnlineToPlainAsync(AxoInsight_Results plain) Parameters plain AxoInsight_Results Returns Task<AxoInsight_Results> PlainToOnline<T>(T) public virtual Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoInsight_Results) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoInsight_Results plain) Parameters plain AxoInsight_Results Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public virtual Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoInsight_Results) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoInsight_Results plain) Parameters plain AxoInsight_Results Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public virtual Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoInsight_Results> ShadowToPlainAsync() Returns Task<AxoInsight_Results> ShadowToPlainAsync(AxoInsight_Results) protected Task<AxoInsight_Results> ShadowToPlainAsync(AxoInsight_Results plain) Parameters plain AxoInsight_Results Returns Task<AxoInsight_Results>"
  },
  "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_SoftEventControl.html": {
    "href": "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_SoftEventControl.html",
    "title": "Class AxoInsight_SoftEventControl | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsight_SoftEventControl Namespace AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll [Container(Layout.Wrap)] public class AxoInsight_SoftEventControl : ITwinObject, ITwinElement Inheritance object AxoInsight_SoftEventControl Implements ITwinObject ITwinElement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoInsight_SoftEventControl(ITwinObject, string, string) public AxoInsight_SoftEventControl(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties AttributeName public string AttributeName { get; set; } Property Value string Connector protected Connector Connector { get; } Property Value Connector HumanReadable public string HumanReadable { get; set; } Property Value string Interpreter public Translator Interpreter { get; } Property Value Translator Parent protected ITwinObject Parent { get; set; } Property Value ITwinObject Symbol public string Symbol { get; protected set; } Property Value string SymbolTail protected string SymbolTail { get; set; } Property Value string TriggerSoftEvent public AxoBoolArray8 TriggerSoftEvent { get; } Property Value AxoBoolArray8 Methods AddChild(ITwinObject) public void AddChild(ITwinObject twinObject) Parameters twinObject ITwinObject AddKid(ITwinElement) public void AddKid(ITwinElement kid) Parameters kid ITwinElement AddValueTag(ITwinPrimitive) public void AddValueTag(ITwinPrimitive valueTag) Parameters valueTag ITwinPrimitive CreateEmptyPoco() public AxoInsight_SoftEventControl CreateEmptyPoco() Returns AxoInsight_SoftEventControl GetChildren() public IEnumerable<ITwinObject> GetChildren() Returns IEnumerable<ITwinObject> GetConnector() public Connector GetConnector() Returns Connector GetKids() public IEnumerable<ITwinElement> GetKids() Returns IEnumerable<ITwinElement> GetParent() public ITwinObject GetParent() Returns ITwinObject GetSymbolTail() public string GetSymbolTail() Returns string GetValueTags() public IEnumerable<ITwinPrimitive> GetValueTags() Returns IEnumerable<ITwinPrimitive> OnlineToPlain<T>() public virtual Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoInsight_SoftEventControl> OnlineToPlainAsync() Returns Task<AxoInsight_SoftEventControl> OnlineToPlainAsync(AxoInsight_SoftEventControl) protected Task<AxoInsight_SoftEventControl> OnlineToPlainAsync(AxoInsight_SoftEventControl plain) Parameters plain AxoInsight_SoftEventControl Returns Task<AxoInsight_SoftEventControl> PlainToOnline<T>(T) public virtual Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoInsight_SoftEventControl) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoInsight_SoftEventControl plain) Parameters plain AxoInsight_SoftEventControl Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public virtual Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoInsight_SoftEventControl) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoInsight_SoftEventControl plain) Parameters plain AxoInsight_SoftEventControl Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public virtual Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoInsight_SoftEventControl> ShadowToPlainAsync() Returns Task<AxoInsight_SoftEventControl> ShadowToPlainAsync(AxoInsight_SoftEventControl) protected Task<AxoInsight_SoftEventControl> ShadowToPlainAsync(AxoInsight_SoftEventControl plain) Parameters plain AxoInsight_SoftEventControl Returns Task<AxoInsight_SoftEventControl>"
  },
  "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_SoftEventStatus.html": {
    "href": "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_SoftEventStatus.html",
    "title": "Class AxoInsight_SoftEventStatus | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsight_SoftEventStatus Namespace AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll [Container(Layout.Wrap)] public class AxoInsight_SoftEventStatus : ITwinObject, ITwinElement Inheritance object AxoInsight_SoftEventStatus Implements ITwinObject ITwinElement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoInsight_SoftEventStatus(ITwinObject, string, string) public AxoInsight_SoftEventStatus(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties AttributeName public string AttributeName { get; set; } Property Value string Connector protected Connector Connector { get; } Property Value Connector HumanReadable public string HumanReadable { get; set; } Property Value string Interpreter public Translator Interpreter { get; } Property Value Translator Parent protected ITwinObject Parent { get; set; } Property Value ITwinObject Symbol public string Symbol { get; protected set; } Property Value string SymbolTail protected string SymbolTail { get; set; } Property Value string TriggerSoftEventAcknowledge public AxoBoolArray8 TriggerSoftEventAcknowledge { get; } Property Value AxoBoolArray8 Methods AddChild(ITwinObject) public void AddChild(ITwinObject twinObject) Parameters twinObject ITwinObject AddKid(ITwinElement) public void AddKid(ITwinElement kid) Parameters kid ITwinElement AddValueTag(ITwinPrimitive) public void AddValueTag(ITwinPrimitive valueTag) Parameters valueTag ITwinPrimitive CreateEmptyPoco() public AxoInsight_SoftEventStatus CreateEmptyPoco() Returns AxoInsight_SoftEventStatus GetChildren() public IEnumerable<ITwinObject> GetChildren() Returns IEnumerable<ITwinObject> GetConnector() public Connector GetConnector() Returns Connector GetKids() public IEnumerable<ITwinElement> GetKids() Returns IEnumerable<ITwinElement> GetParent() public ITwinObject GetParent() Returns ITwinObject GetSymbolTail() public string GetSymbolTail() Returns string GetValueTags() public IEnumerable<ITwinPrimitive> GetValueTags() Returns IEnumerable<ITwinPrimitive> OnlineToPlain<T>() public virtual Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoInsight_SoftEventStatus> OnlineToPlainAsync() Returns Task<AxoInsight_SoftEventStatus> OnlineToPlainAsync(AxoInsight_SoftEventStatus) protected Task<AxoInsight_SoftEventStatus> OnlineToPlainAsync(AxoInsight_SoftEventStatus plain) Parameters plain AxoInsight_SoftEventStatus Returns Task<AxoInsight_SoftEventStatus> PlainToOnline<T>(T) public virtual Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoInsight_SoftEventStatus) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoInsight_SoftEventStatus plain) Parameters plain AxoInsight_SoftEventStatus Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public virtual Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoInsight_SoftEventStatus) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoInsight_SoftEventStatus plain) Parameters plain AxoInsight_SoftEventStatus Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public virtual Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoInsight_SoftEventStatus> ShadowToPlainAsync() Returns Task<AxoInsight_SoftEventStatus> ShadowToPlainAsync(AxoInsight_SoftEventStatus) protected Task<AxoInsight_SoftEventStatus> ShadowToPlainAsync(AxoInsight_SoftEventStatus plain) Parameters plain AxoInsight_SoftEventStatus Returns Task<AxoInsight_SoftEventStatus>"
  },
  "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Status.html": {
    "href": "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Status.html",
    "title": "Class AxoInsight_Status | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsight_Status Namespace AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll [Container(Layout.Stack)] public class AxoInsight_Status : AxoComponent_Status, ITwinObject, ITwinElement Inheritance object AxoComponent_Status AxoInsight_Status Implements ITwinObject ITwinElement Inherited Members AxoComponent_Status.Action AxoComponent_Status.Error AxoComponent_Status.OnlineToPlainAsync(AxoComponent_Status) AxoComponent_Status.PlainToOnlineAsync(AxoComponent_Status) AxoComponent_Status.ShadowToPlainAsync(AxoComponent_Status) AxoComponent_Status.PlainToShadowAsync(AxoComponent_Status) AxoComponent_Status.GetChildren() AxoComponent_Status.GetKids() AxoComponent_Status.GetValueTags() AxoComponent_Status.AddValueTag(ITwinPrimitive) AxoComponent_Status.AddKid(ITwinElement) AxoComponent_Status.AddChild(ITwinObject) AxoComponent_Status.Connector AxoComponent_Status.GetConnector() AxoComponent_Status.GetSymbolTail() AxoComponent_Status.GetParent() AxoComponent_Status.Symbol AxoComponent_Status.AttributeName AxoComponent_Status.HumanReadable AxoComponent_Status.SymbolTail AxoComponent_Status.Parent AxoComponent_Status.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoInsight_Status(ITwinObject, string, string) public AxoInsight_Status(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties ActionDescription public string ActionDescription { get; } Property Value string CurrentJobName [Container(Layout.Wrap)] public OnlinerString CurrentJobName { get; } Property Value OnlinerString CurrentJobNumber public OnlinerUInt CurrentJobNumber { get; } Property Value OnlinerUInt ErrorDescription public string ErrorDescription { get; } Property Value string ResultDataSize [EnumeratorDiscriminator(typeof(eAxoInsight_ResultDataSize))] public OnlinerInt ResultDataSize { get; } Property Value OnlinerInt UserDataSize [EnumeratorDiscriminator(typeof(eAxoInsight_UserDataSize))] public OnlinerInt UserDataSize { get; } Property Value OnlinerInt Methods CreateEmptyPoco() public AxoInsight_Status CreateEmptyPoco() Returns AxoInsight_Status OnlineToPlain<T>() public override Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoInsight_Status> OnlineToPlainAsync() Returns Task<AxoInsight_Status> OnlineToPlainAsync(AxoInsight_Status) protected Task<AxoInsight_Status> OnlineToPlainAsync(AxoInsight_Status plain) Parameters plain AxoInsight_Status Returns Task<AxoInsight_Status> PlainToOnline<T>(T) public override Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoInsight_Status) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoInsight_Status plain) Parameters plain AxoInsight_Status Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public override Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoInsight_Status) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoInsight_Status plain) Parameters plain AxoInsight_Status Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public override Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoInsight_Status> ShadowToPlainAsync() Returns Task<AxoInsight_Status> ShadowToPlainAsync(AxoInsight_Status) protected Task<AxoInsight_Status> ShadowToPlainAsync(AxoInsight_Status plain) Parameters plain AxoInsight_Status Returns Task<AxoInsight_Status>"
  },
  "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_UserData.html": {
    "href": "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_UserData.html",
    "title": "Class AxoInsight_UserData | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsight_UserData Namespace AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoInsight_UserData : AxoByteArray, ITwinObject, ITwinElement Inheritance object AxoByteArray AxoInsight_UserData Implements ITwinObject ITwinElement Inherited Members AxoByteArray.DisplayFormat AxoByteArray.DataChanged AxoByteArray.OnlineToPlainAsync(AxoByteArray) AxoByteArray.PlainToOnlineAsync(AxoByteArray) AxoByteArray.ShadowToPlainAsync(AxoByteArray) AxoByteArray.PlainToShadowAsync(AxoByteArray) AxoByteArray.GetChildren() AxoByteArray.GetKids() AxoByteArray.GetValueTags() AxoByteArray.AddValueTag(ITwinPrimitive) AxoByteArray.AddKid(ITwinElement) AxoByteArray.AddChild(ITwinObject) AxoByteArray.Connector AxoByteArray.GetConnector() AxoByteArray.GetSymbolTail() AxoByteArray.GetParent() AxoByteArray.Symbol AxoByteArray.AttributeName AxoByteArray.HumanReadable AxoByteArray.SymbolTail AxoByteArray.Parent AxoByteArray.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoInsight_UserData(ITwinObject, string, string) public AxoInsight_UserData(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties Data public OnlinerByte[] Data { get; } Property Value OnlinerByte[] Methods CreateEmptyPoco() public AxoInsight_UserData CreateEmptyPoco() Returns AxoInsight_UserData OnlineToPlain<T>() public override Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoInsight_UserData> OnlineToPlainAsync() Returns Task<AxoInsight_UserData> OnlineToPlainAsync(AxoInsight_UserData) protected Task<AxoInsight_UserData> OnlineToPlainAsync(AxoInsight_UserData plain) Parameters plain AxoInsight_UserData Returns Task<AxoInsight_UserData> PlainToOnline<T>(T) public override Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoInsight_UserData) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoInsight_UserData plain) Parameters plain AxoInsight_UserData Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public override Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoInsight_UserData) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoInsight_UserData plain) Parameters plain AxoInsight_UserData Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public override Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoInsight_UserData> ShadowToPlainAsync() Returns Task<AxoInsight_UserData> ShadowToPlainAsync(AxoInsight_UserData) protected Task<AxoInsight_UserData> ShadowToPlainAsync(AxoInsight_UserData plain) Parameters plain AxoInsight_UserData Returns Task<AxoInsight_UserData>"
  },
  "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.eAxoDataman_ResultDataSize.html": {
    "href": "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.eAxoDataman_ResultDataSize.html",
    "title": "Enum eAxoDataman_ResultDataSize | System.Dynamic.ExpandoObject",
    "keywords": "Enum eAxoDataman_ResultDataSize Namespace AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public enum eAxoDataman_ResultDataSize : short Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Fields RESULT_DATA_128B = 128 RESULT_DATA_16B = 16 RESULT_DATA_246B = 246 RESULT_DATA_32B = 32 RESULT_DATA_64B = 64 RESULT_DATA_SIZE_INVALID = 0"
  },
  "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.eAxoDataman_UserDataSize.html": {
    "href": "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.eAxoDataman_UserDataSize.html",
    "title": "Enum eAxoDataman_UserDataSize | System.Dynamic.ExpandoObject",
    "keywords": "Enum eAxoDataman_UserDataSize Namespace AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public enum eAxoDataman_UserDataSize : short Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Fields USER_DATA_128B = 128 USER_DATA_16B = 16 USER_DATA_250B = 250 USER_DATA_32B = 32 USER_DATA_64B = 64 USER_DATA_SIZE_INVALID = 0"
  },
  "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.eAxoInsight_ResultDataSize.html": {
    "href": "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.eAxoInsight_ResultDataSize.html",
    "title": "Enum eAxoInsight_ResultDataSize | System.Dynamic.ExpandoObject",
    "keywords": "Enum eAxoInsight_ResultDataSize Namespace AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public enum eAxoInsight_ResultDataSize : short Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Fields RESULT_DATA_128B = 128 RESULT_DATA_16B = 16 RESULT_DATA_250B = 250 RESULT_DATA_32B = 32 RESULT_DATA_64B = 64 RESULT_DATA_SIZE_INVALID = 0"
  },
  "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.eAxoInsight_UserDataSize.html": {
    "href": "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.eAxoInsight_UserDataSize.html",
    "title": "Enum eAxoInsight_UserDataSize | System.Dynamic.ExpandoObject",
    "keywords": "Enum eAxoInsight_UserDataSize Namespace AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public enum eAxoInsight_UserDataSize : short Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Fields USER_DATA_128B = 128 USER_DATA_16B = 16 USER_DATA_254B = 254 USER_DATA_32B = 32 USER_DATA_64B = 64 USER_DATA_SIZE_INVALID = 0"
  },
  "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.html": {
    "href": "api/AXOpen.Components.Cognex.Vision.v_6_0_0_0.html",
    "title": "Namespace AXOpen.Components.Cognex.Vision.v_6_0_0_0 | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen.Components.Cognex.Vision.v_6_0_0_0 Classes AxoBoolArray8 AxoDataman AxoDataman_AcquisitionControl AxoDataman_AcquisitionStatus AxoDataman_Config AxoDataman_ResultData AxoDataman_Results AxoDataman_ResultsControl AxoDataman_ResultsStatus AxoDataman_SoftEventControl AxoDataman_SoftEventStatus AxoDataman_Status AxoDataman_User AxoDataman_UserData AxoDatamanClearResultData AxoDatamanRead AxoInsight AxoInsight_AcquisitionControl AxoInsight_AcquisitionStatus AxoInsight_CommandControl AxoInsight_CommandStatus AxoInsight_Config AxoInsight_InspectionControl AxoInsight_InspectionStatus AxoInsight_ResultData AxoInsight_Results AxoInsight_SoftEventControl AxoInsight_SoftEventStatus AxoInsight_Status AxoInsight_UserData AxoInsightChangeJobByName AxoInsightChangeJobByNumber AxoInsightClearInspectionResults AxoInsightSoftEvent AxoInsightTrigger Enums eAxoDataman_ResultDataSize eAxoDataman_UserDataSize eAxoInsight_ResultDataSize eAxoInsight_UserDataSize"
  },
  "api/AXOpen.Components.Pneumatics.AxoCylinder.html": {
    "href": "api/AXOpen.Components.Pneumatics.AxoCylinder.html",
    "title": "Class AxoCylinder | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoCylinder Namespace AXOpen.Components.Pneumatics Assembly ix_ax_axopen_components_pneumatics.dll public class AxoCylinder : AxoComponent, ITwinIdentity, ITwinObject, ITwinElement, IAxoObject, IAxoComponent Inheritance object AxoObject AxoComponent AxoCylinder Implements ITwinIdentity ITwinObject ITwinElement IAxoObject IAxoComponent Inherited Members AxoComponent._isManuallyControllable AxoComponent.OnlineToPlainAsync(AxoComponent) AxoComponent.PlainToOnlineAsync(AxoComponent) AxoComponent.ShadowToPlainAsync(AxoComponent) AxoComponent.PlainToShadowAsync(AxoComponent) AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoCylinder(ITwinObject, string, string) public AxoCylinder(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties _HomeSensor [Container(Layout.Stack)] [ComponentDetails(\"Signals\")] [ReadOnly] public OnlinerBool _HomeSensor { get; } Property Value OnlinerBool _Messenger public AxoMessenger _Messenger { get; } Property Value AxoMessenger _MoveHomeSignal [Container(Layout.Stack)] [ComponentDetails(\"Signals\")] [ReadOnly] public OnlinerBool _MoveHomeSignal { get; } Property Value OnlinerBool _MoveToHomeTask [ComponentHeader] public AxoTask _MoveToHomeTask { get; } Property Value AxoTask _MoveToWorkTask [Container(Layout.Wrap)] [ComponentHeader] public AxoTask _MoveToWorkTask { get; } Property Value AxoTask _MoveWorkSignal [ComponentDetails(\"Signals\")] [ReadOnly] public OnlinerBool _MoveWorkSignal { get; } Property Value OnlinerBool _StopTask [ComponentDetails(\"Tasks\")] public AxoTask _StopTask { get; } Property Value AxoTask _WorkSensor [ComponentDetails(\"Signals\")] [ReadOnly] public OnlinerBool _WorkSensor { get; } Property Value OnlinerBool Methods CreateEmptyPoco() public AxoCylinder CreateEmptyPoco() Returns AxoCylinder OnlineToPlain<T>() public override Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoCylinder> OnlineToPlainAsync() Returns Task<AxoCylinder> OnlineToPlainAsync(AxoCylinder) protected Task<AxoCylinder> OnlineToPlainAsync(AxoCylinder plain) Parameters plain AxoCylinder Returns Task<AxoCylinder> PlainToOnline<T>(T) public override Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoCylinder) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoCylinder plain) Parameters plain AxoCylinder Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public override Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoCylinder) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoCylinder plain) Parameters plain AxoCylinder Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public override Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoCylinder> ShadowToPlainAsync() Returns Task<AxoCylinder> ShadowToPlainAsync(AxoCylinder) protected Task<AxoCylinder> ShadowToPlainAsync(AxoCylinder plain) Parameters plain AxoCylinder Returns Task<AxoCylinder>"
  },
  "api/AXOpen.Components.Pneumatics.html": {
    "href": "api/AXOpen.Components.Pneumatics.html",
    "title": "Namespace AXOpen.Components.Pneumatics | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen.Components.Pneumatics Classes AxoCylinder"
  },
  "api/AXOpen.Core.AxoAlertDialog.html": {
    "href": "api/AXOpen.Core.AxoAlertDialog.html",
    "title": "Class AxoAlertDialog | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoAlertDialog Namespace AXOpen.Core Assembly ix_ax_axopen_core.dll public class AxoAlertDialog : AxoRemoteTask, ITwinIdentity, IAxoObject, IAxoTask, IAxoTaskState, IsAlertDialogType, IsDialogType, ITwinObject, ITwinElement, IAxoAlertDialogFormat Inheritance object AxoObject AxoTask AxoRemoteTask AxoAlertDialog Implements ITwinIdentity IAxoObject IAxoTask IAxoTaskState IsAlertDialogType IsDialogType ITwinObject ITwinElement IAxoAlertDialogFormat Inherited Members AxoRemoteTask.DeferredAction AxoRemoteTask.PropertyChanged AxoRemoteTask.Initialize(Func<bool>) AxoRemoteTask._defferedActionCount AxoRemoteTask.InitializeExclusively(Action) AxoRemoteTask.InitializeExclusively(Func<bool>) AxoRemoteTask.ExecuteAsync(ITwinPrimitive, ValueChangedEventArgs) AxoRemoteTask.RemoteExecutionException AxoRemoteTask.RemoteExceptionDetails AxoRemoteTask.ResetExecution() AxoRemoteTask.DoneSignature AxoRemoteTask.IsInitialized AxoRemoteTask.HasRemoteException AxoRemoteTask.IsBeingCalledCounter AxoRemoteTask.TaskNotInitialized AxoRemoteTask.TaskHasRemoteException AxoRemoteTask.OnlineToPlainAsync(AxoRemoteTask) AxoRemoteTask.PlainToOnlineAsync(AxoRemoteTask) AxoRemoteTask.ShadowToPlainAsync(AxoRemoteTask) AxoRemoteTask.PlainToShadowAsync(AxoRemoteTask) AxoTask.Restore() AxoTask.Abort() AxoTask.ResumeTask() AxoTask.ExecuteAsync(object) AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails AxoTask._CyclicExecuteIsNotCalled AxoTask.OnlineToPlainAsync(AxoTask) AxoTask.PlainToOnlineAsync(AxoTask) AxoTask.ShadowToPlainAsync(AxoTask) AxoTask.PlainToShadowAsync(AxoTask) AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoAlertDialog(ITwinObject, string, string) public AxoAlertDialog(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties _dialogType [EnumeratorDiscriminator(typeof(eDialogType))] public OnlinerInt _dialogType { get; } Property Value OnlinerInt _message public OnlinerString _message { get; } Property Value OnlinerString _timeToBurn public OnlinerUInt _timeToBurn { get; } Property Value OnlinerUInt _title public OnlinerString _title { get; } Property Value OnlinerString DialogId Gets or sets dialog locator id. public string DialogId { get; set; } Property Value string Methods CreateEmptyPoco() public AxoAlertDialog CreateEmptyPoco() Returns AxoAlertDialog DeInitialize() Removes handling of this dialogue, unsubscribing from polling and removed all event handler. public void DeInitialize() Dispose() Releases additional resources allocated byt his dialog. public void Dispose() Initialize(Action) Initialized remote task for this dialog, with polling instead of cyclic subscription. public void Initialize(Action dialogAction) Parameters dialogAction Action Action that will be performed on remove call. OnlineToPlain<T>() public override Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoAlertDialog> OnlineToPlainAsync() Returns Task<AxoAlertDialog> OnlineToPlainAsync(AxoAlertDialog) protected Task<AxoAlertDialog> OnlineToPlainAsync(AxoAlertDialog plain) Parameters plain AxoAlertDialog Returns Task<AxoAlertDialog> PlainToOnline<T>(T) public override Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoAlertDialog) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoAlertDialog plain) Parameters plain AxoAlertDialog Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public override Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoAlertDialog) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoAlertDialog plain) Parameters plain AxoAlertDialog Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public override Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoAlertDialog> ShadowToPlainAsync() Returns Task<AxoAlertDialog> ShadowToPlainAsync(AxoAlertDialog) protected Task<AxoAlertDialog> ShadowToPlainAsync(AxoAlertDialog plain) Parameters plain AxoAlertDialog Returns Task<AxoAlertDialog>"
  },
  "api/AXOpen.Core.AxoBoolArray.html": {
    "href": "api/AXOpen.Core.AxoBoolArray.html",
    "title": "Class AxoBoolArray | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoBoolArray Namespace AXOpen.Core Assembly ix_ax_axopen_core.dll public class AxoBoolArray : ITwinObject, ITwinElement Inheritance object AxoBoolArray Implements ITwinObject ITwinElement Derived AxoBoolArray8 Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoBoolArray(ITwinObject, string, string) public AxoBoolArray(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties AttributeName public string AttributeName { get; set; } Property Value string Connector protected Connector Connector { get; } Property Value Connector DataChanged public OnlinerBool DataChanged { get; } Property Value OnlinerBool HumanReadable public string HumanReadable { get; set; } Property Value string Interpreter public Translator Interpreter { get; } Property Value Translator Parent protected ITwinObject Parent { get; set; } Property Value ITwinObject Symbol public string Symbol { get; protected set; } Property Value string SymbolTail protected string SymbolTail { get; set; } Property Value string Methods AddChild(ITwinObject) public void AddChild(ITwinObject twinObject) Parameters twinObject ITwinObject AddKid(ITwinElement) public void AddKid(ITwinElement kid) Parameters kid ITwinElement AddValueTag(ITwinPrimitive) public void AddValueTag(ITwinPrimitive valueTag) Parameters valueTag ITwinPrimitive CreateEmptyPoco() public AxoBoolArray CreateEmptyPoco() Returns AxoBoolArray GetChildren() public IEnumerable<ITwinObject> GetChildren() Returns IEnumerable<ITwinObject> GetConnector() public Connector GetConnector() Returns Connector GetKids() public IEnumerable<ITwinElement> GetKids() Returns IEnumerable<ITwinElement> GetParent() public ITwinObject GetParent() Returns ITwinObject GetSymbolTail() public string GetSymbolTail() Returns string GetValueTags() public IEnumerable<ITwinPrimitive> GetValueTags() Returns IEnumerable<ITwinPrimitive> OnlineToPlain<T>() public virtual Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoBoolArray> OnlineToPlainAsync() Returns Task<AxoBoolArray> OnlineToPlainAsync(AxoBoolArray) protected Task<AxoBoolArray> OnlineToPlainAsync(AxoBoolArray plain) Parameters plain AxoBoolArray Returns Task<AxoBoolArray> PlainToOnline<T>(T) public virtual Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoBoolArray) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoBoolArray plain) Parameters plain AxoBoolArray Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public virtual Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoBoolArray) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoBoolArray plain) Parameters plain AxoBoolArray Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public virtual Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoBoolArray> ShadowToPlainAsync() Returns Task<AxoBoolArray> ShadowToPlainAsync(AxoBoolArray) protected Task<AxoBoolArray> ShadowToPlainAsync(AxoBoolArray plain) Parameters plain AxoBoolArray Returns Task<AxoBoolArray>"
  },
  "api/AXOpen.Core.AxoBoolArrayCommandView.html": {
    "href": "api/AXOpen.Core.AxoBoolArrayCommandView.html",
    "title": "Class AxoBoolArrayCommandView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoBoolArrayCommandView Namespace AXOpen.Core Assembly axopen_core_blazor.dll public class AxoBoolArrayCommandView : AxoBoolArrayView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Inheritance object ComponentBase RenderableComponentBase RenderableComplexComponentBase<AxoBoolArray> AxoBoolArrayView AxoBoolArrayCommandView Implements IComponent IHandleEvent IHandleAfterRender IRenderableComponent IRenderableComplexComponentBase IDisposable Inherited Members AxoBoolArrayView.Data AxoBoolArrayView.AddToPolling(ITwinElement, int) AxoBoolArrayView.OnInitialized() AxoBoolArrayView.Dispose() RenderableComplexComponentBase<AxoBoolArray>.Component RenderableComponentBase.RemovePolledElements() RenderableComponentBase.UpdateValuesOnChange(ITwinElement, int) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinObject) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinPrimitive) RenderableComponentBase.UpdateValuesOnChangeOutFocus(OnlinerBase) RenderableComponentBase.HandlePropertyChanged(object, PropertyChangedEventArgs) RenderableComponentBase.HandleShadowPropertyChanged(object, ValueChangedEventArgs) RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, PropertyChangedEventArgs) RenderableComponentBase.PollingInterval RenderableComponentBase.PolledElements RenderableComponentBase.HasFocus ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoBoolArrayCommandView() public AxoBoolArrayCommandView()"
  },
  "api/AXOpen.Core.AxoBoolArrayControlView.html": {
    "href": "api/AXOpen.Core.AxoBoolArrayControlView.html",
    "title": "Class AxoBoolArrayControlView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoBoolArrayControlView Namespace AXOpen.Core Assembly axopen_core_blazor.dll public class AxoBoolArrayControlView : AxoBoolArrayView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Inheritance object ComponentBase RenderableComponentBase RenderableComplexComponentBase<AxoBoolArray> AxoBoolArrayView AxoBoolArrayControlView Implements IComponent IHandleEvent IHandleAfterRender IRenderableComponent IRenderableComplexComponentBase IDisposable Inherited Members AxoBoolArrayView.Data AxoBoolArrayView.AddToPolling(ITwinElement, int) AxoBoolArrayView.OnInitialized() AxoBoolArrayView.Dispose() RenderableComplexComponentBase<AxoBoolArray>.Component RenderableComponentBase.RemovePolledElements() RenderableComponentBase.UpdateValuesOnChange(ITwinElement, int) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinObject) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinPrimitive) RenderableComponentBase.UpdateValuesOnChangeOutFocus(OnlinerBase) RenderableComponentBase.HandlePropertyChanged(object, PropertyChangedEventArgs) RenderableComponentBase.HandleShadowPropertyChanged(object, ValueChangedEventArgs) RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, PropertyChangedEventArgs) RenderableComponentBase.PollingInterval RenderableComponentBase.PolledElements RenderableComponentBase.HasFocus ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoBoolArrayControlView() public AxoBoolArrayControlView()"
  },
  "api/AXOpen.Core.AxoBoolArrayDisplayView.html": {
    "href": "api/AXOpen.Core.AxoBoolArrayDisplayView.html",
    "title": "Class AxoBoolArrayDisplayView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoBoolArrayDisplayView Namespace AXOpen.Core Assembly axopen_core_blazor.dll public class AxoBoolArrayDisplayView : AxoBoolArrayView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Inheritance object ComponentBase RenderableComponentBase RenderableComplexComponentBase<AxoBoolArray> AxoBoolArrayView AxoBoolArrayDisplayView Implements IComponent IHandleEvent IHandleAfterRender IRenderableComponent IRenderableComplexComponentBase IDisposable Inherited Members AxoBoolArrayView.Data AxoBoolArrayView.AddToPolling(ITwinElement, int) AxoBoolArrayView.OnInitialized() AxoBoolArrayView.Dispose() RenderableComplexComponentBase<AxoBoolArray>.Component RenderableComponentBase.RemovePolledElements() RenderableComponentBase.UpdateValuesOnChange(ITwinElement, int) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinObject) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinPrimitive) RenderableComponentBase.UpdateValuesOnChangeOutFocus(OnlinerBase) RenderableComponentBase.HandlePropertyChanged(object, PropertyChangedEventArgs) RenderableComponentBase.HandleShadowPropertyChanged(object, ValueChangedEventArgs) RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, PropertyChangedEventArgs) RenderableComponentBase.PollingInterval RenderableComponentBase.PolledElements RenderableComponentBase.HasFocus ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoBoolArrayDisplayView() public AxoBoolArrayDisplayView()"
  },
  "api/AXOpen.Core.AxoBoolArrayStatusView.html": {
    "href": "api/AXOpen.Core.AxoBoolArrayStatusView.html",
    "title": "Class AxoBoolArrayStatusView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoBoolArrayStatusView Namespace AXOpen.Core Assembly axopen_core_blazor.dll public class AxoBoolArrayStatusView : AxoBoolArrayView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Inheritance object ComponentBase RenderableComponentBase RenderableComplexComponentBase<AxoBoolArray> AxoBoolArrayView AxoBoolArrayStatusView Implements IComponent IHandleEvent IHandleAfterRender IRenderableComponent IRenderableComplexComponentBase IDisposable Inherited Members AxoBoolArrayView.Data AxoBoolArrayView.AddToPolling(ITwinElement, int) AxoBoolArrayView.OnInitialized() AxoBoolArrayView.Dispose() RenderableComplexComponentBase<AxoBoolArray>.Component RenderableComponentBase.RemovePolledElements() RenderableComponentBase.UpdateValuesOnChange(ITwinElement, int) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinObject) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinPrimitive) RenderableComponentBase.UpdateValuesOnChangeOutFocus(OnlinerBase) RenderableComponentBase.HandlePropertyChanged(object, PropertyChangedEventArgs) RenderableComponentBase.HandleShadowPropertyChanged(object, ValueChangedEventArgs) RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, PropertyChangedEventArgs) RenderableComponentBase.PollingInterval RenderableComponentBase.PolledElements RenderableComponentBase.HasFocus ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoBoolArrayStatusView() public AxoBoolArrayStatusView()"
  },
  "api/AXOpen.Core.AxoBoolArrayView.html": {
    "href": "api/AXOpen.Core.AxoBoolArrayView.html",
    "title": "Class AxoBoolArrayView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoBoolArrayView Namespace AXOpen.Core Assembly axopen_core_blazor.dll public class AxoBoolArrayView : RenderableComplexComponentBase<AxoBoolArray>, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Inheritance object ComponentBase RenderableComponentBase RenderableComplexComponentBase<AxoBoolArray> AxoBoolArrayView Implements IComponent IHandleEvent IHandleAfterRender IRenderableComponent IRenderableComplexComponentBase IDisposable Derived AxoBoolArrayCommandView AxoBoolArrayControlView AxoBoolArrayDisplayView AxoBoolArrayStatusView Inherited Members RenderableComplexComponentBase<AxoBoolArray>.Component RenderableComponentBase.RemovePolledElements() RenderableComponentBase.UpdateValuesOnChange(ITwinElement, int) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinObject) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinPrimitive) RenderableComponentBase.UpdateValuesOnChangeOutFocus(OnlinerBase) RenderableComponentBase.HandlePropertyChanged(object, PropertyChangedEventArgs) RenderableComponentBase.HandleShadowPropertyChanged(object, ValueChangedEventArgs) RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, PropertyChangedEventArgs) RenderableComponentBase.PollingInterval RenderableComponentBase.PolledElements RenderableComponentBase.HasFocus ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties Data public IndexedData<bool>[] Data { get; } Property Value IndexedData<bool>[] Methods AddToPolling(ITwinElement, int) public override void AddToPolling(ITwinElement element, int pollingInterval = 250) Parameters element ITwinElement pollingInterval int Dispose() public override void Dispose() OnInitialized() protected override void OnInitialized()"
  },
  "api/AXOpen.Core.AxoByteArray.html": {
    "href": "api/AXOpen.Core.AxoByteArray.html",
    "title": "Class AxoByteArray | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoByteArray Namespace AXOpen.Core Assembly ix_ax_axopen_core.dll public class AxoByteArray : ITwinObject, ITwinElement Inheritance object AxoByteArray Implements ITwinObject ITwinElement Derived AxoDataman_ResultData AxoDataman_UserData AxoInsight_ResultData AxoInsight_UserData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoByteArray(ITwinObject, string, string) public AxoByteArray(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties AttributeName public string AttributeName { get; set; } Property Value string Connector protected Connector Connector { get; } Property Value Connector DataChanged public OnlinerBool DataChanged { get; } Property Value OnlinerBool DisplayFormat public string DisplayFormat { get; set; } Property Value string HumanReadable public string HumanReadable { get; set; } Property Value string Interpreter public Translator Interpreter { get; } Property Value Translator Parent protected ITwinObject Parent { get; set; } Property Value ITwinObject Symbol public string Symbol { get; protected set; } Property Value string SymbolTail protected string SymbolTail { get; set; } Property Value string Methods AddChild(ITwinObject) public void AddChild(ITwinObject twinObject) Parameters twinObject ITwinObject AddKid(ITwinElement) public void AddKid(ITwinElement kid) Parameters kid ITwinElement AddValueTag(ITwinPrimitive) public void AddValueTag(ITwinPrimitive valueTag) Parameters valueTag ITwinPrimitive CreateEmptyPoco() public AxoByteArray CreateEmptyPoco() Returns AxoByteArray GetChildren() public IEnumerable<ITwinObject> GetChildren() Returns IEnumerable<ITwinObject> GetConnector() public Connector GetConnector() Returns Connector GetKids() public IEnumerable<ITwinElement> GetKids() Returns IEnumerable<ITwinElement> GetParent() public ITwinObject GetParent() Returns ITwinObject GetSymbolTail() public string GetSymbolTail() Returns string GetValueTags() public IEnumerable<ITwinPrimitive> GetValueTags() Returns IEnumerable<ITwinPrimitive> OnlineToPlain<T>() public virtual Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoByteArray> OnlineToPlainAsync() Returns Task<AxoByteArray> OnlineToPlainAsync(AxoByteArray) protected Task<AxoByteArray> OnlineToPlainAsync(AxoByteArray plain) Parameters plain AxoByteArray Returns Task<AxoByteArray> PlainToOnline<T>(T) public virtual Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoByteArray) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoByteArray plain) Parameters plain AxoByteArray Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public virtual Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoByteArray) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoByteArray plain) Parameters plain AxoByteArray Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public virtual Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoByteArray> ShadowToPlainAsync() Returns Task<AxoByteArray> ShadowToPlainAsync(AxoByteArray) protected Task<AxoByteArray> ShadowToPlainAsync(AxoByteArray plain) Parameters plain AxoByteArray Returns Task<AxoByteArray>"
  },
  "api/AXOpen.Core.AxoByteArrayCommandView.html": {
    "href": "api/AXOpen.Core.AxoByteArrayCommandView.html",
    "title": "Class AxoByteArrayCommandView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoByteArrayCommandView Namespace AXOpen.Core Assembly axopen_core_blazor.dll public class AxoByteArrayCommandView : AxoByteArrayView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Inheritance object ComponentBase RenderableComponentBase RenderableComplexComponentBase<AxoByteArray> AxoByteArrayView AxoByteArrayCommandView Implements IComponent IHandleEvent IHandleAfterRender IRenderableComponent IRenderableComplexComponentBase IDisposable Inherited Members AxoByteArrayView.CurrentDisplayFormat AxoByteArrayView.Data AxoByteArrayView.AddToPolling(ITwinElement, int) AxoByteArrayView.OnInitialized() AxoByteArrayView.OnInitializedAsync() AxoByteArrayView.Dispose() RenderableComplexComponentBase<AxoByteArray>.Component RenderableComponentBase.RemovePolledElements() RenderableComponentBase.UpdateValuesOnChange(ITwinElement, int) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinObject) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinPrimitive) RenderableComponentBase.UpdateValuesOnChangeOutFocus(OnlinerBase) RenderableComponentBase.HandlePropertyChanged(object, PropertyChangedEventArgs) RenderableComponentBase.HandleShadowPropertyChanged(object, ValueChangedEventArgs) RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, PropertyChangedEventArgs) RenderableComponentBase.PollingInterval RenderableComponentBase.PolledElements RenderableComponentBase.HasFocus ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoByteArrayCommandView() public AxoByteArrayCommandView()"
  },
  "api/AXOpen.Core.AxoByteArrayControlView.html": {
    "href": "api/AXOpen.Core.AxoByteArrayControlView.html",
    "title": "Class AxoByteArrayControlView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoByteArrayControlView Namespace AXOpen.Core Assembly axopen_core_blazor.dll public class AxoByteArrayControlView : AxoByteArrayView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Inheritance object ComponentBase RenderableComponentBase RenderableComplexComponentBase<AxoByteArray> AxoByteArrayView AxoByteArrayControlView Implements IComponent IHandleEvent IHandleAfterRender IRenderableComponent IRenderableComplexComponentBase IDisposable Inherited Members AxoByteArrayView.CurrentDisplayFormat AxoByteArrayView.Data AxoByteArrayView.AddToPolling(ITwinElement, int) AxoByteArrayView.OnInitialized() AxoByteArrayView.OnInitializedAsync() AxoByteArrayView.Dispose() RenderableComplexComponentBase<AxoByteArray>.Component RenderableComponentBase.RemovePolledElements() RenderableComponentBase.UpdateValuesOnChange(ITwinElement, int) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinObject) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinPrimitive) RenderableComponentBase.UpdateValuesOnChangeOutFocus(OnlinerBase) RenderableComponentBase.HandlePropertyChanged(object, PropertyChangedEventArgs) RenderableComponentBase.HandleShadowPropertyChanged(object, ValueChangedEventArgs) RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, PropertyChangedEventArgs) RenderableComponentBase.PollingInterval RenderableComponentBase.PolledElements RenderableComponentBase.HasFocus ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoByteArrayControlView() public AxoByteArrayControlView()"
  },
  "api/AXOpen.Core.AxoByteArrayDisplayView.html": {
    "href": "api/AXOpen.Core.AxoByteArrayDisplayView.html",
    "title": "Class AxoByteArrayDisplayView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoByteArrayDisplayView Namespace AXOpen.Core Assembly axopen_core_blazor.dll public class AxoByteArrayDisplayView : AxoByteArrayView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Inheritance object ComponentBase RenderableComponentBase RenderableComplexComponentBase<AxoByteArray> AxoByteArrayView AxoByteArrayDisplayView Implements IComponent IHandleEvent IHandleAfterRender IRenderableComponent IRenderableComplexComponentBase IDisposable Inherited Members AxoByteArrayView.CurrentDisplayFormat AxoByteArrayView.Data AxoByteArrayView.AddToPolling(ITwinElement, int) AxoByteArrayView.OnInitialized() AxoByteArrayView.OnInitializedAsync() AxoByteArrayView.Dispose() RenderableComplexComponentBase<AxoByteArray>.Component RenderableComponentBase.RemovePolledElements() RenderableComponentBase.UpdateValuesOnChange(ITwinElement, int) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinObject) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinPrimitive) RenderableComponentBase.UpdateValuesOnChangeOutFocus(OnlinerBase) RenderableComponentBase.HandlePropertyChanged(object, PropertyChangedEventArgs) RenderableComponentBase.HandleShadowPropertyChanged(object, ValueChangedEventArgs) RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, PropertyChangedEventArgs) RenderableComponentBase.PollingInterval RenderableComponentBase.PolledElements RenderableComponentBase.HasFocus ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoByteArrayDisplayView() public AxoByteArrayDisplayView()"
  },
  "api/AXOpen.Core.AxoByteArrayStatusView.html": {
    "href": "api/AXOpen.Core.AxoByteArrayStatusView.html",
    "title": "Class AxoByteArrayStatusView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoByteArrayStatusView Namespace AXOpen.Core Assembly axopen_core_blazor.dll public class AxoByteArrayStatusView : AxoByteArrayView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Inheritance object ComponentBase RenderableComponentBase RenderableComplexComponentBase<AxoByteArray> AxoByteArrayView AxoByteArrayStatusView Implements IComponent IHandleEvent IHandleAfterRender IRenderableComponent IRenderableComplexComponentBase IDisposable Inherited Members AxoByteArrayView.CurrentDisplayFormat AxoByteArrayView.Data AxoByteArrayView.AddToPolling(ITwinElement, int) AxoByteArrayView.OnInitialized() AxoByteArrayView.OnInitializedAsync() AxoByteArrayView.Dispose() RenderableComplexComponentBase<AxoByteArray>.Component RenderableComponentBase.RemovePolledElements() RenderableComponentBase.UpdateValuesOnChange(ITwinElement, int) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinObject) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinPrimitive) RenderableComponentBase.UpdateValuesOnChangeOutFocus(OnlinerBase) RenderableComponentBase.HandlePropertyChanged(object, PropertyChangedEventArgs) RenderableComponentBase.HandleShadowPropertyChanged(object, ValueChangedEventArgs) RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, PropertyChangedEventArgs) RenderableComponentBase.PollingInterval RenderableComponentBase.PolledElements RenderableComponentBase.HasFocus ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoByteArrayStatusView() public AxoByteArrayStatusView()"
  },
  "api/AXOpen.Core.AxoByteArrayView.html": {
    "href": "api/AXOpen.Core.AxoByteArrayView.html",
    "title": "Class AxoByteArrayView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoByteArrayView Namespace AXOpen.Core Assembly axopen_core_blazor.dll public class AxoByteArrayView : RenderableComplexComponentBase<AxoByteArray>, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Inheritance object ComponentBase RenderableComponentBase RenderableComplexComponentBase<AxoByteArray> AxoByteArrayView Implements IComponent IHandleEvent IHandleAfterRender IRenderableComponent IRenderableComplexComponentBase IDisposable Derived AxoByteArrayCommandView AxoByteArrayControlView AxoByteArrayDisplayView AxoByteArrayStatusView Inherited Members RenderableComplexComponentBase<AxoByteArray>.Component RenderableComponentBase.RemovePolledElements() RenderableComponentBase.UpdateValuesOnChange(ITwinElement, int) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinObject) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinPrimitive) RenderableComponentBase.UpdateValuesOnChangeOutFocus(OnlinerBase) RenderableComponentBase.HandlePropertyChanged(object, PropertyChangedEventArgs) RenderableComponentBase.HandleShadowPropertyChanged(object, ValueChangedEventArgs) RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, PropertyChangedEventArgs) RenderableComponentBase.PollingInterval RenderableComponentBase.PolledElements RenderableComponentBase.HasFocus ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties CurrentDisplayFormat public eDisplayFormat CurrentDisplayFormat { get; set; } Property Value eDisplayFormat Data public IndexedData<string>[] Data { get; } Property Value IndexedData<string>[] Methods AddToPolling(ITwinElement, int) public override void AddToPolling(ITwinElement element, int pollingInterval = 250) Parameters element ITwinElement pollingInterval int Dispose() public override void Dispose() OnInitialized() protected override void OnInitialized() OnInitializedAsync() protected override Task OnInitializedAsync() Returns Task"
  },
  "api/AXOpen.Core.AxoComponent.html": {
    "href": "api/AXOpen.Core.AxoComponent.html",
    "title": "Class AxoComponent | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoComponent Namespace AXOpen.Core Assembly ix_ax_axopen_core.dll public class AxoComponent : AxoObject, ITwinIdentity, ITwinObject, ITwinElement, IAxoObject, IAxoComponent Inheritance object AxoObject AxoComponent Implements ITwinIdentity ITwinObject ITwinElement IAxoObject IAxoComponent Derived AxoDataman AxoInsight AxoCylinder AxoAi AxoAo AxoDi AxoDo Inherited Members AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoComponent(ITwinObject, string, string) public AxoComponent(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties _isManuallyControllable [ReadOnly] public OnlinerBool _isManuallyControllable { get; } Property Value OnlinerBool Methods CreateEmptyPoco() public AxoComponent CreateEmptyPoco() Returns AxoComponent OnlineToPlain<T>() public override Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoComponent> OnlineToPlainAsync() Returns Task<AxoComponent> OnlineToPlainAsync(AxoComponent) protected Task<AxoComponent> OnlineToPlainAsync(AxoComponent plain) Parameters plain AxoComponent Returns Task<AxoComponent> PlainToOnline<T>(T) public override Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoComponent) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoComponent plain) Parameters plain AxoComponent Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public override Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoComponent) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoComponent plain) Parameters plain AxoComponent Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public override Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoComponent> ShadowToPlainAsync() Returns Task<AxoComponent> ShadowToPlainAsync(AxoComponent) protected Task<AxoComponent> ShadowToPlainAsync(AxoComponent plain) Parameters plain AxoComponent Returns Task<AxoComponent>"
  },
  "api/AXOpen.Core.AxoComponentCommandView.html": {
    "href": "api/AXOpen.Core.AxoComponentCommandView.html",
    "title": "Class AxoComponentCommandView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoComponentCommandView Namespace AXOpen.Core Assembly axopen_core_blazor.dll public class AxoComponentCommandView : AxoComponentView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Inheritance object ComponentBase RenderableComponentBase RenderableComplexComponentBase<AxoComponent> AxoComponentView AxoComponentCommandView Implements IComponent IHandleEvent IHandleAfterRender IRenderableComponent IRenderableComplexComponentBase IDisposable Inherited Members AxoComponentView.IsControllable AxoComponentView.AddToPolling(ITwinElement, int) AxoComponentView.OnInitialized() AxoComponentView.OnInitializedAsync() RenderableComplexComponentBase<AxoComponent>.Component RenderableComponentBase.Dispose() RenderableComponentBase.RemovePolledElements() RenderableComponentBase.UpdateValuesOnChange(ITwinElement, int) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinObject) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinPrimitive) RenderableComponentBase.UpdateValuesOnChangeOutFocus(OnlinerBase) RenderableComponentBase.HandlePropertyChanged(object, PropertyChangedEventArgs) RenderableComponentBase.HandleShadowPropertyChanged(object, ValueChangedEventArgs) RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, PropertyChangedEventArgs) RenderableComponentBase.PollingInterval RenderableComponentBase.PolledElements RenderableComponentBase.HasFocus ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoComponentCommandView() public AxoComponentCommandView()"
  },
  "api/AXOpen.Core.AxoComponentStatusView.html": {
    "href": "api/AXOpen.Core.AxoComponentStatusView.html",
    "title": "Class AxoComponentStatusView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoComponentStatusView Namespace AXOpen.Core Assembly axopen_core_blazor.dll public class AxoComponentStatusView : AxoComponentView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Inheritance object ComponentBase RenderableComponentBase RenderableComplexComponentBase<AxoComponent> AxoComponentView AxoComponentStatusView Implements IComponent IHandleEvent IHandleAfterRender IRenderableComponent IRenderableComplexComponentBase IDisposable Inherited Members AxoComponentView.IsControllable AxoComponentView.AddToPolling(ITwinElement, int) AxoComponentView.OnInitialized() AxoComponentView.OnInitializedAsync() RenderableComplexComponentBase<AxoComponent>.Component RenderableComponentBase.Dispose() RenderableComponentBase.RemovePolledElements() RenderableComponentBase.UpdateValuesOnChange(ITwinElement, int) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinObject) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinPrimitive) RenderableComponentBase.UpdateValuesOnChangeOutFocus(OnlinerBase) RenderableComponentBase.HandlePropertyChanged(object, PropertyChangedEventArgs) RenderableComponentBase.HandleShadowPropertyChanged(object, ValueChangedEventArgs) RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, PropertyChangedEventArgs) RenderableComponentBase.PollingInterval RenderableComponentBase.PolledElements RenderableComponentBase.HasFocus ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoComponentStatusView() public AxoComponentStatusView()"
  },
  "api/AXOpen.Core.AxoComponentView.eAlarmLevel.html": {
    "href": "api/AXOpen.Core.AxoComponentView.eAlarmLevel.html",
    "title": "Enum AxoComponentView.eAlarmLevel | System.Dynamic.ExpandoObject",
    "keywords": "Enum AxoComponentView.eAlarmLevel Namespace AXOpen.Core Assembly axopen_core_blazor.dll public enum AxoComponentView.eAlarmLevel Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Fields ActiveErrors = 4 ActiveInfo = 2 ActiveWarnings = 3 NoAlarms = 0 Unacknowledged = 1"
  },
  "api/AXOpen.Core.AxoComponentView.html": {
    "href": "api/AXOpen.Core.AxoComponentView.html",
    "title": "Class AxoComponentView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoComponentView Namespace AXOpen.Core Assembly axopen_core_blazor.dll public class AxoComponentView : RenderableComplexComponentBase<AxoComponent>, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Inheritance object ComponentBase RenderableComponentBase RenderableComplexComponentBase<AxoComponent> AxoComponentView Implements IComponent IHandleEvent IHandleAfterRender IRenderableComponent IRenderableComplexComponentBase IDisposable Derived AxoComponentCommandView AxoComponentStatusView Inherited Members RenderableComplexComponentBase<AxoComponent>.Component RenderableComponentBase.Dispose() RenderableComponentBase.RemovePolledElements() RenderableComponentBase.UpdateValuesOnChange(ITwinElement, int) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinObject) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinPrimitive) RenderableComponentBase.UpdateValuesOnChangeOutFocus(OnlinerBase) RenderableComponentBase.HandlePropertyChanged(object, PropertyChangedEventArgs) RenderableComponentBase.HandleShadowPropertyChanged(object, ValueChangedEventArgs) RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, PropertyChangedEventArgs) RenderableComponentBase.PollingInterval RenderableComponentBase.PolledElements RenderableComponentBase.HasFocus ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties IsControllable [Parameter] public bool IsControllable { get; set; } Property Value bool Methods AddToPolling(ITwinElement, int) public override void AddToPolling(ITwinElement element, int pollingInterval = 250) Parameters element ITwinElement pollingInterval int OnInitialized() protected override void OnInitialized() OnInitializedAsync() protected override Task OnInitializedAsync() Returns Task"
  },
  "api/AXOpen.Core.AxoContext.html": {
    "href": "api/AXOpen.Core.AxoContext.html",
    "title": "Class AxoContext | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoContext Namespace AXOpen.Core Assembly ix_ax_axopen_core.dll public class AxoContext : ITwinObject, ITwinElement, IAxoContext Inheritance object AxoContext Implements ITwinObject ITwinElement IAxoContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoContext(ITwinObject, string, string) public AxoContext(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties AttributeName public string AttributeName { get; set; } Property Value string Connector protected Connector Connector { get; } Property Value Connector HumanReadable public string HumanReadable { get; set; } Property Value string Interpreter public Translator Interpreter { get; } Property Value Translator Parent protected ITwinObject Parent { get; set; } Property Value ITwinObject Symbol public string Symbol { get; protected set; } Property Value string SymbolTail protected string SymbolTail { get; set; } Property Value string Methods AddChild(ITwinObject) public void AddChild(ITwinObject twinObject) Parameters twinObject ITwinObject AddKid(ITwinElement) public void AddKid(ITwinElement kid) Parameters kid ITwinElement AddValueTag(ITwinPrimitive) public void AddValueTag(ITwinPrimitive valueTag) Parameters valueTag ITwinPrimitive CreateEmptyPoco() public AxoContext CreateEmptyPoco() Returns AxoContext GetChildren() public IEnumerable<ITwinObject> GetChildren() Returns IEnumerable<ITwinObject> GetConnector() public Connector GetConnector() Returns Connector GetKids() public IEnumerable<ITwinElement> GetKids() Returns IEnumerable<ITwinElement> GetParent() public ITwinObject GetParent() Returns ITwinObject GetSymbolTail() public string GetSymbolTail() Returns string GetValueTags() public IEnumerable<ITwinPrimitive> GetValueTags() Returns IEnumerable<ITwinPrimitive> OnlineToPlain<T>() public virtual Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoContext> OnlineToPlainAsync() Returns Task<AxoContext> OnlineToPlainAsync(AxoContext) protected Task<AxoContext> OnlineToPlainAsync(AxoContext plain) Parameters plain AxoContext Returns Task<AxoContext> PlainToOnline<T>(T) public virtual Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoContext) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoContext plain) Parameters plain AxoContext Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public virtual Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoContext) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoContext plain) Parameters plain AxoContext Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public virtual Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoContext> ShadowToPlainAsync() Returns Task<AxoContext> ShadowToPlainAsync(AxoContext) protected Task<AxoContext> ShadowToPlainAsync(AxoContext plain) Parameters plain AxoContext Returns Task<AxoContext>"
  },
  "api/AXOpen.Core.AxoCoordinatorStates.html": {
    "href": "api/AXOpen.Core.AxoCoordinatorStates.html",
    "title": "Enum AxoCoordinatorStates | System.Dynamic.ExpandoObject",
    "keywords": "Enum AxoCoordinatorStates Namespace AXOpen.Core Assembly ix_ax_axopen_core.dll public enum AxoCoordinatorStates : short Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Fields Configuring = 1 Idle = 0 Running = 2"
  },
  "api/AXOpen.Core.AxoDialog.html": {
    "href": "api/AXOpen.Core.AxoDialog.html",
    "title": "Class AxoDialog | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDialog Namespace AXOpen.Core Assembly ix_ax_axopen_core.dll public class AxoDialog : AxoDialogBase, ITwinIdentity, IAxoObject, IAxoTask, IAxoTaskState, IsModalDialogType, IsDialogType, ITwinObject, ITwinElement, IAxoDialogFormat, IAxoDialogAnswer Inheritance object AxoObject AxoTask AxoRemoteTask AxoDialogBase AxoDialog Implements ITwinIdentity IAxoObject IAxoTask IAxoTaskState IsModalDialogType IsDialogType ITwinObject ITwinElement IAxoDialogFormat IAxoDialogAnswer Inherited Members AxoDialogBase.DialogId AxoDialogBase.Initialize(Action) AxoDialogBase.DeInitialize() AxoDialogBase.Dispose() AxoDialogBase.OnlineToPlainAsync(AxoDialogBase) AxoDialogBase.PlainToOnlineAsync(AxoDialogBase) AxoDialogBase.ShadowToPlainAsync(AxoDialogBase) AxoDialogBase.PlainToShadowAsync(AxoDialogBase) AxoRemoteTask.DeferredAction AxoRemoteTask.PropertyChanged AxoRemoteTask.Initialize(Func<bool>) AxoRemoteTask._defferedActionCount AxoRemoteTask.InitializeExclusively(Action) AxoRemoteTask.InitializeExclusively(Func<bool>) AxoRemoteTask.ExecuteAsync(ITwinPrimitive, ValueChangedEventArgs) AxoRemoteTask.RemoteExecutionException AxoRemoteTask.RemoteExceptionDetails AxoRemoteTask.ResetExecution() AxoRemoteTask.DoneSignature AxoRemoteTask.IsInitialized AxoRemoteTask.HasRemoteException AxoRemoteTask.IsBeingCalledCounter AxoRemoteTask.TaskNotInitialized AxoRemoteTask.TaskHasRemoteException AxoRemoteTask.OnlineToPlainAsync(AxoRemoteTask) AxoRemoteTask.PlainToOnlineAsync(AxoRemoteTask) AxoRemoteTask.ShadowToPlainAsync(AxoRemoteTask) AxoRemoteTask.PlainToShadowAsync(AxoRemoteTask) AxoTask.Restore() AxoTask.Abort() AxoTask.ResumeTask() AxoTask.ExecuteAsync(object) AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails AxoTask._CyclicExecuteIsNotCalled AxoTask.OnlineToPlainAsync(AxoTask) AxoTask.PlainToOnlineAsync(AxoTask) AxoTask.ShadowToPlainAsync(AxoTask) AxoTask.PlainToShadowAsync(AxoTask) AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoDialog(ITwinObject, string, string) public AxoDialog(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties _answer [EnumeratorDiscriminator(typeof(eDialogAnswer))] public OnlinerInt _answer { get; } Property Value OnlinerInt _caption public OnlinerString _caption { get; } Property Value OnlinerString _closeSignal public OnlinerBool _closeSignal { get; } Property Value OnlinerBool _dialogType [EnumeratorDiscriminator(typeof(eDialogType))] public OnlinerInt _dialogType { get; } Property Value OnlinerInt _externalCloseReq public OnlinerBool _externalCloseReq { get; } Property Value OnlinerBool _hasCancel public OnlinerBool _hasCancel { get; } Property Value OnlinerBool _hasNo public OnlinerBool _hasNo { get; } Property Value OnlinerBool _hasOK public OnlinerBool _hasOK { get; } Property Value OnlinerBool _hasYes public OnlinerBool _hasYes { get; } Property Value OnlinerBool _risingEdge public OnlinerBool _risingEdge { get; } Property Value OnlinerBool _text public OnlinerString _text { get; } Property Value OnlinerString Methods CreateEmptyPoco() public AxoDialog CreateEmptyPoco() Returns AxoDialog OnlineToPlain<T>() public override Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoDialog> OnlineToPlainAsync() Returns Task<AxoDialog> OnlineToPlainAsync(AxoDialog) protected Task<AxoDialog> OnlineToPlainAsync(AxoDialog plain) Parameters plain AxoDialog Returns Task<AxoDialog> PlainToOnline<T>(T) public override Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoDialog) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoDialog plain) Parameters plain AxoDialog Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public override Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoDialog) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoDialog plain) Parameters plain AxoDialog Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public override Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoDialog> ShadowToPlainAsync() Returns Task<AxoDialog> ShadowToPlainAsync(AxoDialog) protected Task<AxoDialog> ShadowToPlainAsync(AxoDialog plain) Parameters plain AxoDialog Returns Task<AxoDialog>"
  },
  "api/AXOpen.Core.AxoDialogBase.html": {
    "href": "api/AXOpen.Core.AxoDialogBase.html",
    "title": "Class AxoDialogBase | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDialogBase Namespace AXOpen.Core Assembly ix_ax_axopen_core.dll public class AxoDialogBase : AxoRemoteTask, ITwinIdentity, IAxoObject, IAxoTask, IAxoTaskState, IsModalDialogType, IsDialogType, ITwinObject, ITwinElement Inheritance object AxoObject AxoTask AxoRemoteTask AxoDialogBase Implements ITwinIdentity IAxoObject IAxoTask IAxoTaskState IsModalDialogType IsDialogType ITwinObject ITwinElement Derived AxoDialog Inherited Members AxoRemoteTask.DeferredAction AxoRemoteTask.PropertyChanged AxoRemoteTask.Initialize(Func<bool>) AxoRemoteTask._defferedActionCount AxoRemoteTask.InitializeExclusively(Action) AxoRemoteTask.InitializeExclusively(Func<bool>) AxoRemoteTask.ExecuteAsync(ITwinPrimitive, ValueChangedEventArgs) AxoRemoteTask.RemoteExecutionException AxoRemoteTask.RemoteExceptionDetails AxoRemoteTask.ResetExecution() AxoRemoteTask.DoneSignature AxoRemoteTask.IsInitialized AxoRemoteTask.HasRemoteException AxoRemoteTask.IsBeingCalledCounter AxoRemoteTask.TaskNotInitialized AxoRemoteTask.TaskHasRemoteException AxoRemoteTask.OnlineToPlainAsync(AxoRemoteTask) AxoRemoteTask.PlainToOnlineAsync(AxoRemoteTask) AxoRemoteTask.ShadowToPlainAsync(AxoRemoteTask) AxoRemoteTask.PlainToShadowAsync(AxoRemoteTask) AxoTask.Restore() AxoTask.Abort() AxoTask.ResumeTask() AxoTask.ExecuteAsync(object) AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails AxoTask._CyclicExecuteIsNotCalled AxoTask.OnlineToPlainAsync(AxoTask) AxoTask.PlainToOnlineAsync(AxoTask) AxoTask.ShadowToPlainAsync(AxoTask) AxoTask.PlainToShadowAsync(AxoTask) AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoDialogBase(ITwinObject, string, string) public AxoDialogBase(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties DialogId public string DialogId { get; set; } Property Value string Methods CreateEmptyPoco() public AxoDialogBase CreateEmptyPoco() Returns AxoDialogBase DeInitialize() Removes handling of this dialogue, unsubscribing from polling and removed all event handler. public void DeInitialize() Dispose() Releases additional resources allocated byt his dialog. public void Dispose() Initialize(Action) Initialized remote task for this dialog, with polling instead of cyclic subscription. public void Initialize(Action dialogAction) Parameters dialogAction Action Action that will be performed on remove call. OnlineToPlain<T>() public override Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoDialogBase> OnlineToPlainAsync() Returns Task<AxoDialogBase> OnlineToPlainAsync(AxoDialogBase) protected Task<AxoDialogBase> OnlineToPlainAsync(AxoDialogBase plain) Parameters plain AxoDialogBase Returns Task<AxoDialogBase> PlainToOnline<T>(T) public override Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoDialogBase) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoDialogBase plain) Parameters plain AxoDialogBase Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public override Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoDialogBase) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoDialogBase plain) Parameters plain AxoDialogBase Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public override Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoDialogBase> ShadowToPlainAsync() Returns Task<AxoDialogBase> ShadowToPlainAsync(AxoDialogBase) protected Task<AxoDialogBase> ShadowToPlainAsync(AxoDialogBase plain) Parameters plain AxoDialogBase Returns Task<AxoDialogBase>"
  },
  "api/AXOpen.Core.AxoDialogDialogView.html": {
    "href": "api/AXOpen.Core.AxoDialogDialogView.html",
    "title": "Class AxoDialogDialogView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDialogDialogView Namespace AXOpen.Core Assembly axopen_core_blazor.dll public class AxoDialogDialogView : AxoDialogBaseView<AxoDialog>, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Inheritance object ComponentBase RenderableComponentBase RenderableComplexComponentBase<AxoDialog> AxoDialogBaseView<AxoDialog> AxoDialogDialogView Implements IComponent IHandleEvent IHandleAfterRender IRenderableComponent IRenderableComplexComponentBase IDisposable Inherited Members AxoDialogBaseView<AxoDialog>._dialogContainer AxoDialogBaseView<AxoDialog>._navigationManager AxoDialogBaseView<AxoDialog>.ModalDialog AxoDialogBaseView<AxoDialog>.AddToPolling(ITwinElement, int) AxoDialogBaseView<AxoDialog>.OnCloseDialogMessage(object, MessageReceivedEventArgs) AxoDialogBaseView<AxoDialog>.OnOpenDialogMessage(object, MessageReceivedEventArgs) AxoDialogBaseView<AxoDialog>.OnAfterRenderAsync(bool) AxoDialogBaseView<AxoDialog>.CloseDialogsWithSignalR() AxoDialogBaseView<AxoDialog>.Close() AxoDialogBaseView<AxoDialog>.OpenDialog() RenderableComplexComponentBase<AxoDialog>.Component RenderableComponentBase.RemovePolledElements() RenderableComponentBase.UpdateValuesOnChange(ITwinElement, int) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinObject) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinPrimitive) RenderableComponentBase.UpdateValuesOnChangeOutFocus(OnlinerBase) RenderableComponentBase.HandlePropertyChanged(object, PropertyChangedEventArgs) RenderableComponentBase.HandleShadowPropertyChanged(object, ValueChangedEventArgs) RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, PropertyChangedEventArgs) RenderableComponentBase.PollingInterval RenderableComponentBase.PolledElements RenderableComponentBase.HasFocus ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Methods DialogAnswerCancel() public Task DialogAnswerCancel() Returns Task DialogAnswerNo() public Task DialogAnswerNo() Returns Task DialogAnswerOk() public Task DialogAnswerOk() Returns Task DialogAnswerYes() public Task DialogAnswerYes() Returns Task Dispose() public override void Dispose() OnInitialized() protected override void OnInitialized()"
  },
  "api/AXOpen.Core.AxoMomentaryTask.html": {
    "href": "api/AXOpen.Core.AxoMomentaryTask.html",
    "title": "Class AxoMomentaryTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoMomentaryTask Namespace AXOpen.Core Assembly ix_ax_axopen_core.dll public class AxoMomentaryTask : AxoObject, ITwinIdentity, ITwinObject, ITwinElement, IAxoObject, IAxoMomentaryTask Inheritance object AxoObject AxoMomentaryTask Implements ITwinIdentity ITwinObject ITwinElement IAxoObject IAxoMomentaryTask Inherited Members AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoMomentaryTask(ITwinObject, string, string) public AxoMomentaryTask(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties AttributeStateOffDesc public string AttributeStateOffDesc { get; set; } Property Value string AttributeStateOnDesc public string AttributeStateOnDesc { get; set; } Property Value string IsDisabled [ReadOnly] public OnlinerBool IsDisabled { get; } Property Value OnlinerBool RemoteSwitchOn public OnlinerBool RemoteSwitchOn { get; } Property Value OnlinerBool State [ReadOnly] public OnlinerBool State { get; } Property Value OnlinerBool Methods CreateEmptyPoco() public AxoMomentaryTask CreateEmptyPoco() Returns AxoMomentaryTask OnlineToPlain<T>() public override Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoMomentaryTask> OnlineToPlainAsync() Returns Task<AxoMomentaryTask> OnlineToPlainAsync(AxoMomentaryTask) protected Task<AxoMomentaryTask> OnlineToPlainAsync(AxoMomentaryTask plain) Parameters plain AxoMomentaryTask Returns Task<AxoMomentaryTask> PlainToOnline<T>(T) public override Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoMomentaryTask) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoMomentaryTask plain) Parameters plain AxoMomentaryTask Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public override Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoMomentaryTask) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoMomentaryTask plain) Parameters plain AxoMomentaryTask Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public override Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoMomentaryTask> ShadowToPlainAsync() Returns Task<AxoMomentaryTask> ShadowToPlainAsync(AxoMomentaryTask) protected Task<AxoMomentaryTask> ShadowToPlainAsync(AxoMomentaryTask plain) Parameters plain AxoMomentaryTask Returns Task<AxoMomentaryTask>"
  },
  "api/AXOpen.Core.AxoMomentaryTaskCommandView.html": {
    "href": "api/AXOpen.Core.AxoMomentaryTaskCommandView.html",
    "title": "Class AxoMomentaryTaskCommandView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoMomentaryTaskCommandView Namespace AXOpen.Core Assembly axopen_core_blazor.dll public class AxoMomentaryTaskCommandView : AxoMomentaryTaskView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IDisposable, IRenderableComplexComponentBase Inheritance object ComponentBase RenderableComponentBase RenderableComplexComponentBase<AxoMomentaryTask> AxoMomentaryTaskView AxoMomentaryTaskCommandView Implements IComponent IHandleEvent IHandleAfterRender IRenderableComponent IDisposable IRenderableComplexComponentBase Inherited Members AxoMomentaryTaskView.OnInitialized() AxoMomentaryTaskView.Disable AxoMomentaryTaskView.IsDisabled AxoMomentaryTaskView.Description RenderableComplexComponentBase<AxoMomentaryTask>.Component RenderableComponentBase.Dispose() RenderableComponentBase.AddToPolling(ITwinElement, int) RenderableComponentBase.RemovePolledElements() RenderableComponentBase.UpdateValuesOnChange(ITwinElement, int) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinObject) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinPrimitive) RenderableComponentBase.UpdateValuesOnChangeOutFocus(OnlinerBase) RenderableComponentBase.HandlePropertyChanged(object, PropertyChangedEventArgs) RenderableComponentBase.HandleShadowPropertyChanged(object, ValueChangedEventArgs) RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, PropertyChangedEventArgs) RenderableComponentBase.PollingInterval RenderableComponentBase.PolledElements RenderableComponentBase.HasFocus ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoMomentaryTaskCommandView() public AxoMomentaryTaskCommandView()"
  },
  "api/AXOpen.Core.AxoMomentaryTaskStatusView.html": {
    "href": "api/AXOpen.Core.AxoMomentaryTaskStatusView.html",
    "title": "Class AxoMomentaryTaskStatusView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoMomentaryTaskStatusView Namespace AXOpen.Core Assembly axopen_core_blazor.dll public class AxoMomentaryTaskStatusView : AxoMomentaryTaskView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IDisposable, IRenderableComplexComponentBase Inheritance object ComponentBase RenderableComponentBase RenderableComplexComponentBase<AxoMomentaryTask> AxoMomentaryTaskView AxoMomentaryTaskStatusView Implements IComponent IHandleEvent IHandleAfterRender IRenderableComponent IDisposable IRenderableComplexComponentBase Inherited Members AxoMomentaryTaskView.OnInitialized() AxoMomentaryTaskView.Disable AxoMomentaryTaskView.IsDisabled AxoMomentaryTaskView.Description RenderableComplexComponentBase<AxoMomentaryTask>.Component RenderableComponentBase.Dispose() RenderableComponentBase.AddToPolling(ITwinElement, int) RenderableComponentBase.RemovePolledElements() RenderableComponentBase.UpdateValuesOnChange(ITwinElement, int) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinObject) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinPrimitive) RenderableComponentBase.UpdateValuesOnChangeOutFocus(OnlinerBase) RenderableComponentBase.HandlePropertyChanged(object, PropertyChangedEventArgs) RenderableComponentBase.HandleShadowPropertyChanged(object, ValueChangedEventArgs) RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, PropertyChangedEventArgs) RenderableComponentBase.PollingInterval RenderableComponentBase.PolledElements RenderableComponentBase.HasFocus ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoMomentaryTaskStatusView() public AxoMomentaryTaskStatusView()"
  },
  "api/AXOpen.Core.AxoMomentaryTaskView.html": {
    "href": "api/AXOpen.Core.AxoMomentaryTaskView.html",
    "title": "Class AxoMomentaryTaskView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoMomentaryTaskView Namespace AXOpen.Core Assembly axopen_core_blazor.dll public class AxoMomentaryTaskView : RenderableComplexComponentBase<AxoMomentaryTask>, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IDisposable, IRenderableComplexComponentBase Inheritance object ComponentBase RenderableComponentBase RenderableComplexComponentBase<AxoMomentaryTask> AxoMomentaryTaskView Implements IComponent IHandleEvent IHandleAfterRender IRenderableComponent IDisposable IRenderableComplexComponentBase Derived AxoMomentaryTaskCommandView AxoMomentaryTaskStatusView Inherited Members RenderableComplexComponentBase<AxoMomentaryTask>.Component RenderableComponentBase.Dispose() RenderableComponentBase.AddToPolling(ITwinElement, int) RenderableComponentBase.RemovePolledElements() RenderableComponentBase.UpdateValuesOnChange(ITwinElement, int) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinObject) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinPrimitive) RenderableComponentBase.UpdateValuesOnChangeOutFocus(OnlinerBase) RenderableComponentBase.HandlePropertyChanged(object, PropertyChangedEventArgs) RenderableComponentBase.HandleShadowPropertyChanged(object, ValueChangedEventArgs) RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, PropertyChangedEventArgs) RenderableComponentBase.PollingInterval RenderableComponentBase.PolledElements RenderableComponentBase.HasFocus ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties Description public string Description { get; } Property Value string Disable [Parameter] public bool Disable { get; set; } Property Value bool IsDisabled public bool IsDisabled { get; } Property Value bool Methods OnInitialized() protected override void OnInitialized()"
  },
  "api/AXOpen.Core.AxoObject.html": {
    "href": "api/AXOpen.Core.AxoObject.html",
    "title": "Class AxoObject | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoObject Namespace AXOpen.Core Assembly ix_ax_axopen_core.dll public class AxoObject : ITwinIdentity, ITwinObject, ITwinElement, IAxoObject Inheritance object AxoObject Implements ITwinIdentity ITwinObject ITwinElement IAxoObject Derived AxoComponent AxoMomentaryTask AxoTask AxoToggleTask AxoDataExchangeBase AxoMessenger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoObject(ITwinObject, string, string) public AxoObject(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties AttributeName public string AttributeName { get; set; } Property Value string Connector protected Connector Connector { get; } Property Value Connector HumanReadable public string HumanReadable { get; set; } Property Value string Identity [CompilerOmits(new string[] { \"POCO\" })] [RenderIgnore] public OnlinerULInt Identity { get; } Property Value OnlinerULInt Interpreter public Translator Interpreter { get; } Property Value Translator Parent protected ITwinObject Parent { get; set; } Property Value ITwinObject Symbol public string Symbol { get; protected set; } Property Value string SymbolTail protected string SymbolTail { get; set; } Property Value string Methods AddChild(ITwinObject) public void AddChild(ITwinObject twinObject) Parameters twinObject ITwinObject AddKid(ITwinElement) public void AddKid(ITwinElement kid) Parameters kid ITwinElement AddValueTag(ITwinPrimitive) public void AddValueTag(ITwinPrimitive valueTag) Parameters valueTag ITwinPrimitive CreateEmptyPoco() public AxoObject CreateEmptyPoco() Returns AxoObject GetChildren() public IEnumerable<ITwinObject> GetChildren() Returns IEnumerable<ITwinObject> GetConnector() public Connector GetConnector() Returns Connector GetKids() public IEnumerable<ITwinElement> GetKids() Returns IEnumerable<ITwinElement> GetParent() public ITwinObject GetParent() Returns ITwinObject GetSymbolTail() public string GetSymbolTail() Returns string GetValueTags() public IEnumerable<ITwinPrimitive> GetValueTags() Returns IEnumerable<ITwinPrimitive> OnlineToPlain<T>() public virtual Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoObject> OnlineToPlainAsync() Returns Task<AxoObject> OnlineToPlainAsync(AxoObject) protected Task<AxoObject> OnlineToPlainAsync(AxoObject plain) Parameters plain AxoObject Returns Task<AxoObject> PlainToOnline<T>(T) public virtual Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoObject) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoObject plain) Parameters plain AxoObject Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public virtual Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoObject) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoObject plain) Parameters plain AxoObject Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public virtual Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoObject> ShadowToPlainAsync() Returns Task<AxoObject> ShadowToPlainAsync(AxoObject) protected Task<AxoObject> ShadowToPlainAsync(AxoObject plain) Parameters plain AxoObject Returns Task<AxoObject>"
  },
  "api/AXOpen.Core.AxoRemoteTask.html": {
    "href": "api/AXOpen.Core.AxoRemoteTask.html",
    "title": "Class AxoRemoteTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoRemoteTask Namespace AXOpen.Core Assembly ix_ax_axopen_core.dll public class AxoRemoteTask : AxoTask, ITwinIdentity, ITwinObject, ITwinElement, IAxoObject, IAxoTask, IAxoTaskState Inheritance object AxoObject AxoTask AxoRemoteTask Implements ITwinIdentity ITwinObject ITwinElement IAxoObject IAxoTask IAxoTaskState Derived AxoAlertDialog AxoDialogBase AxoDataExchangeTask Inherited Members AxoTask.Restore() AxoTask.Abort() AxoTask.ResumeTask() AxoTask.ExecuteAsync(object) AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails AxoTask._CyclicExecuteIsNotCalled AxoTask.OnlineToPlainAsync(AxoTask) AxoTask.PlainToOnlineAsync(AxoTask) AxoTask.ShadowToPlainAsync(AxoTask) AxoTask.PlainToShadowAsync(AxoTask) AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoRemoteTask(ITwinObject, string, string) public AxoRemoteTask(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Fields _defferedActionCount protected int _defferedActionCount Field Value int Properties DeferredAction protected Action DeferredAction { get; set; } Property Value Action DoneSignature public OnlinerULInt DoneSignature { get; } Property Value OnlinerULInt HasRemoteException public OnlinerBool HasRemoteException { get; } Property Value OnlinerBool IsBeingCalledCounter public OnlinerInt IsBeingCalledCounter { get; } Property Value OnlinerInt IsInitialized public OnlinerBool IsInitialized { get; } Property Value OnlinerBool RemoteExceptionDetails Gets string representation of the current exception on this remote task. public string RemoteExceptionDetails { get; } Property Value string RemoteExecutionException Gets the exception that occurred during the last execution. public Exception RemoteExecutionException { get; } Property Value Exception TaskHasRemoteException public AxoMessenger TaskHasRemoteException { get; } Property Value AxoMessenger TaskNotInitialized public AxoMessenger TaskNotInitialized { get; } Property Value AxoMessenger Methods CreateEmptyPoco() public AxoRemoteTask CreateEmptyPoco() Returns AxoRemoteTask DeInitialize() Removes currently bound DeferredAction from the execution of this AxoRemoteTask public void DeInitialize() ExecuteAsync(ITwinPrimitive, ValueChangedEventArgs) protected void ExecuteAsync(ITwinPrimitive sender, ValueChangedEventArgs args) Parameters sender ITwinPrimitive args ValueChangedEventArgs Initialize(Action) Initializes this AxoRemoteTask. public void Initialize(Action deferredAction) Parameters deferredAction Action Action to be executed on this AxoRemoteTask call. Initialize(Func<bool>) Initializes this AxoRemoteTask. public void Initialize(Func<bool> deferredAction) Parameters deferredAction Func<bool> Action to be executed on this AxoRemoteTask call. InitializeExclusively(Action) Initializes this AxoRemoteTask exclusively for this DeferredAction. Any following attempt to initialize this AxoRemoteTask will throw an exception. public void InitializeExclusively(Action deferredAction) Parameters deferredAction Action Action to be executed on this AxoRemoteTask call. InitializeExclusively(Func<bool>) Initializes this AxoRemoteTask exclusively for this DeferredAction. Any following attempt to initialize this AxoRemoteTask will throw an exception. public void InitializeExclusively(Func<bool> deferredAction) Parameters deferredAction Func<bool> Action to be executed on this AxoRemoteTask call. OnlineToPlain<T>() public override Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoRemoteTask> OnlineToPlainAsync() Returns Task<AxoRemoteTask> OnlineToPlainAsync(AxoRemoteTask) protected Task<AxoRemoteTask> OnlineToPlainAsync(AxoRemoteTask plain) Parameters plain AxoRemoteTask Returns Task<AxoRemoteTask> PlainToOnline<T>(T) public override Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoRemoteTask) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoRemoteTask plain) Parameters plain AxoRemoteTask Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public override Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoRemoteTask) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoRemoteTask plain) Parameters plain AxoRemoteTask Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ResetExecution() Resets the resets this instance of AxoRemoteTask. public Task ResetExecution() Returns Task ShadowToPlain<T>() public override Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoRemoteTask> ShadowToPlainAsync() Returns Task<AxoRemoteTask> ShadowToPlainAsync(AxoRemoteTask) protected Task<AxoRemoteTask> ShadowToPlainAsync(AxoRemoteTask plain) Parameters plain AxoRemoteTask Returns Task<AxoRemoteTask> Events PropertyChanged public event PropertyChangedEventHandler PropertyChanged Event Type PropertyChangedEventHandler"
  },
  "api/AXOpen.Core.AxoSequencer.html": {
    "href": "api/AXOpen.Core.AxoSequencer.html",
    "title": "Class AxoSequencer | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoSequencer Namespace AXOpen.Core Assembly ix_ax_axopen_core.dll public class AxoSequencer : AxoTask, ITwinIdentity, ITwinObject, ITwinElement, IAxoObject, IAxoTask, IAxoTaskState Inheritance object AxoObject AxoTask AxoSequencer Implements ITwinIdentity ITwinObject ITwinElement IAxoObject IAxoTask IAxoTaskState Derived AxoSequencerContainer Inherited Members AxoTask.Restore() AxoTask.Abort() AxoTask.ResumeTask() AxoTask.ExecuteAsync(object) AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails AxoTask._CyclicExecuteIsNotCalled AxoTask.OnlineToPlainAsync(AxoTask) AxoTask.PlainToOnlineAsync(AxoTask) AxoTask.ShadowToPlainAsync(AxoTask) AxoTask.PlainToShadowAsync(AxoTask) AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoSequencer(ITwinObject, string, string) public AxoSequencer(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties AfterStep public AxoStep AfterStep { get; } Property Value AxoStep BeforeStep public AxoStep BeforeStep { get; } Property Value AxoStep CurrentOrder public OnlinerULInt CurrentOrder { get; } Property Value OnlinerULInt CurrentStep public AxoStep CurrentStep { get; } Property Value AxoStep SequenceMode [EnumeratorDiscriminator(typeof(eAxoSequenceMode))] public OnlinerInt SequenceMode { get; } Property Value OnlinerInt StepBackwardCommand public AxoTask StepBackwardCommand { get; } Property Value AxoTask StepForwardCommand public AxoTask StepForwardCommand { get; } Property Value AxoTask StepIn public AxoTask StepIn { get; } Property Value AxoTask SteppingMode [EnumeratorDiscriminator(typeof(eAxoSteppingMode))] public OnlinerInt SteppingMode { get; } Property Value OnlinerInt Methods CreateEmptyPoco() public AxoSequencer CreateEmptyPoco() Returns AxoSequencer OnlineToPlain<T>() public override Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoSequencer> OnlineToPlainAsync() Returns Task<AxoSequencer> OnlineToPlainAsync(AxoSequencer) protected Task<AxoSequencer> OnlineToPlainAsync(AxoSequencer plain) Parameters plain AxoSequencer Returns Task<AxoSequencer> PlainToOnline<T>(T) public override Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoSequencer) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoSequencer plain) Parameters plain AxoSequencer Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public override Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoSequencer) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoSequencer plain) Parameters plain AxoSequencer Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public override Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoSequencer> ShadowToPlainAsync() Returns Task<AxoSequencer> ShadowToPlainAsync(AxoSequencer) protected Task<AxoSequencer> ShadowToPlainAsync(AxoSequencer plain) Parameters plain AxoSequencer Returns Task<AxoSequencer>"
  },
  "api/AXOpen.Core.AxoSequencerCommandView.html": {
    "href": "api/AXOpen.Core.AxoSequencerCommandView.html",
    "title": "Class AxoSequencerCommandView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoSequencerCommandView Namespace AXOpen.Core Assembly axopen_core_blazor.dll public class AxoSequencerCommandView : AxoSequencerView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Inheritance object ComponentBase RenderableComponentBase RenderableComplexComponentBase<AxoSequencer> AxoSequencerView AxoSequencerCommandView Implements IComponent IHandleEvent IHandleAfterRender IRenderableComponent IRenderableComplexComponentBase IDisposable Inherited Members AxoSequencerView.Steps AxoSequencerView.IsControllable AxoSequencerView.HasTaskControlButton AxoSequencerView.HasSettings AxoSequencerView.HasStepControls AxoSequencerView.HasStepDetails AxoSequencerView.AddToPolling(ITwinElement, int) AxoSequencerView.OnInitialized() RenderableComplexComponentBase<AxoSequencer>.Component RenderableComponentBase.Dispose() RenderableComponentBase.RemovePolledElements() RenderableComponentBase.UpdateValuesOnChange(ITwinElement, int) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinObject) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinPrimitive) RenderableComponentBase.UpdateValuesOnChangeOutFocus(OnlinerBase) RenderableComponentBase.HandlePropertyChanged(object, PropertyChangedEventArgs) RenderableComponentBase.HandleShadowPropertyChanged(object, ValueChangedEventArgs) RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, PropertyChangedEventArgs) RenderableComponentBase.PollingInterval RenderableComponentBase.PolledElements RenderableComponentBase.HasFocus ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoSequencerCommandView() public AxoSequencerCommandView()"
  },
  "api/AXOpen.Core.AxoSequencerContainer.html": {
    "href": "api/AXOpen.Core.AxoSequencerContainer.html",
    "title": "Class AxoSequencerContainer | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoSequencerContainer Namespace AXOpen.Core Assembly ix_ax_axopen_core.dll public class AxoSequencerContainer : AxoSequencer, ITwinIdentity, ITwinObject, ITwinElement, IAxoObject, IAxoTask, IAxoTaskState Inheritance object AxoObject AxoTask AxoSequencer AxoSequencerContainer Implements ITwinIdentity ITwinObject ITwinElement IAxoObject IAxoTask IAxoTaskState Inherited Members AxoSequencer.SteppingMode AxoSequencer.SequenceMode AxoSequencer.CurrentOrder AxoSequencer.StepForwardCommand AxoSequencer.StepIn AxoSequencer.StepBackwardCommand AxoSequencer.BeforeStep AxoSequencer.CurrentStep AxoSequencer.AfterStep AxoSequencer.OnlineToPlainAsync(AxoSequencer) AxoSequencer.PlainToOnlineAsync(AxoSequencer) AxoSequencer.ShadowToPlainAsync(AxoSequencer) AxoSequencer.PlainToShadowAsync(AxoSequencer) AxoTask.Restore() AxoTask.Abort() AxoTask.ResumeTask() AxoTask.ExecuteAsync(object) AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails AxoTask._CyclicExecuteIsNotCalled AxoTask.OnlineToPlainAsync(AxoTask) AxoTask.PlainToOnlineAsync(AxoTask) AxoTask.ShadowToPlainAsync(AxoTask) AxoTask.PlainToShadowAsync(AxoTask) AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoSequencerContainer(ITwinObject, string, string) public AxoSequencerContainer(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties TabName public string TabName { get; } Property Value string Methods CreateEmptyPoco() public AxoSequencerContainer CreateEmptyPoco() Returns AxoSequencerContainer OnlineToPlain<T>() public override Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoSequencerContainer> OnlineToPlainAsync() Returns Task<AxoSequencerContainer> OnlineToPlainAsync(AxoSequencerContainer) protected Task<AxoSequencerContainer> OnlineToPlainAsync(AxoSequencerContainer plain) Parameters plain AxoSequencerContainer Returns Task<AxoSequencerContainer> PlainToOnline<T>(T) public override Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoSequencerContainer) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoSequencerContainer plain) Parameters plain AxoSequencerContainer Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public override Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoSequencerContainer) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoSequencerContainer plain) Parameters plain AxoSequencerContainer Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public override Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoSequencerContainer> ShadowToPlainAsync() Returns Task<AxoSequencerContainer> ShadowToPlainAsync(AxoSequencerContainer) protected Task<AxoSequencerContainer> ShadowToPlainAsync(AxoSequencerContainer plain) Parameters plain AxoSequencerContainer Returns Task<AxoSequencerContainer>"
  },
  "api/AXOpen.Core.AxoSequencerStatusView.html": {
    "href": "api/AXOpen.Core.AxoSequencerStatusView.html",
    "title": "Class AxoSequencerStatusView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoSequencerStatusView Namespace AXOpen.Core Assembly axopen_core_blazor.dll public class AxoSequencerStatusView : AxoSequencerView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Inheritance object ComponentBase RenderableComponentBase RenderableComplexComponentBase<AxoSequencer> AxoSequencerView AxoSequencerStatusView Implements IComponent IHandleEvent IHandleAfterRender IRenderableComponent IRenderableComplexComponentBase IDisposable Inherited Members AxoSequencerView.Steps AxoSequencerView.IsControllable AxoSequencerView.HasTaskControlButton AxoSequencerView.HasSettings AxoSequencerView.HasStepControls AxoSequencerView.HasStepDetails AxoSequencerView.AddToPolling(ITwinElement, int) AxoSequencerView.OnInitialized() RenderableComplexComponentBase<AxoSequencer>.Component RenderableComponentBase.Dispose() RenderableComponentBase.RemovePolledElements() RenderableComponentBase.UpdateValuesOnChange(ITwinElement, int) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinObject) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinPrimitive) RenderableComponentBase.UpdateValuesOnChangeOutFocus(OnlinerBase) RenderableComponentBase.HandlePropertyChanged(object, PropertyChangedEventArgs) RenderableComponentBase.HandleShadowPropertyChanged(object, ValueChangedEventArgs) RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, PropertyChangedEventArgs) RenderableComponentBase.PollingInterval RenderableComponentBase.PolledElements RenderableComponentBase.HasFocus ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoSequencerStatusView() public AxoSequencerStatusView()"
  },
  "api/AXOpen.Core.AxoSequencerView.html": {
    "href": "api/AXOpen.Core.AxoSequencerView.html",
    "title": "Class AxoSequencerView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoSequencerView Namespace AXOpen.Core Assembly axopen_core_blazor.dll public class AxoSequencerView : RenderableComplexComponentBase<AxoSequencer>, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Inheritance object ComponentBase RenderableComponentBase RenderableComplexComponentBase<AxoSequencer> AxoSequencerView Implements IComponent IHandleEvent IHandleAfterRender IRenderableComponent IRenderableComplexComponentBase IDisposable Derived AxoSequencerCommandView AxoSequencerStatusView Inherited Members RenderableComplexComponentBase<AxoSequencer>.Component RenderableComponentBase.Dispose() RenderableComponentBase.RemovePolledElements() RenderableComponentBase.UpdateValuesOnChange(ITwinElement, int) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinObject) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinPrimitive) RenderableComponentBase.UpdateValuesOnChangeOutFocus(OnlinerBase) RenderableComponentBase.HandlePropertyChanged(object, PropertyChangedEventArgs) RenderableComponentBase.HandleShadowPropertyChanged(object, ValueChangedEventArgs) RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, PropertyChangedEventArgs) RenderableComponentBase.PollingInterval RenderableComponentBase.PolledElements RenderableComponentBase.HasFocus ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties HasSettings [Parameter] public bool HasSettings { get; set; } Property Value bool HasStepControls [Parameter] public bool HasStepControls { get; set; } Property Value bool HasStepDetails [Parameter] public bool HasStepDetails { get; set; } Property Value bool HasTaskControlButton [Parameter] public bool HasTaskControlButton { get; set; } Property Value bool IsControllable [Parameter] public bool IsControllable { get; set; } Property Value bool Steps public IEnumerable<AxoStep> Steps { get; } Property Value IEnumerable<AxoStep> Methods AddToPolling(ITwinElement, int) public override void AddToPolling(ITwinElement element, int pollingInterval = 250) Parameters element ITwinElement pollingInterval int OnInitialized() protected override void OnInitialized()"
  },
  "api/AXOpen.Core.AxoStep.html": {
    "href": "api/AXOpen.Core.AxoStep.html",
    "title": "Class AxoStep | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoStep Namespace AXOpen.Core Assembly ix_ax_axopen_core.dll public class AxoStep : AxoTask, ITwinIdentity, ITwinObject, ITwinElement, IAxoObject, IAxoTask, IAxoTaskState, IAxoStep Inheritance object AxoObject AxoTask AxoStep Implements ITwinIdentity ITwinObject ITwinElement IAxoObject IAxoTask IAxoTaskState IAxoStep Inherited Members AxoTask.Restore() AxoTask.Abort() AxoTask.ResumeTask() AxoTask.ExecuteAsync(object) AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails AxoTask._CyclicExecuteIsNotCalled AxoTask.OnlineToPlainAsync(AxoTask) AxoTask.PlainToOnlineAsync(AxoTask) AxoTask.ShadowToPlainAsync(AxoTask) AxoTask.PlainToShadowAsync(AxoTask) AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoStep(ITwinObject, string, string) public AxoStep(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties Description public string Description { get; set; } Property Value string IsActive public OnlinerBool IsActive { get; } Property Value OnlinerBool IsEnabled public OnlinerBool IsEnabled { get; } Property Value OnlinerBool Order [ReadOnly] public OnlinerULInt Order { get; } Property Value OnlinerULInt StepDescription public OnlinerString StepDescription { get; } Property Value OnlinerString Methods CreateEmptyPoco() public AxoStep CreateEmptyPoco() Returns AxoStep OnlineToPlain<T>() public override Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoStep> OnlineToPlainAsync() Returns Task<AxoStep> OnlineToPlainAsync(AxoStep) protected Task<AxoStep> OnlineToPlainAsync(AxoStep plain) Parameters plain AxoStep Returns Task<AxoStep> PlainToOnline<T>(T) public override Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoStep) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoStep plain) Parameters plain AxoStep Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public override Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoStep) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoStep plain) Parameters plain AxoStep Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public override Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoStep> ShadowToPlainAsync() Returns Task<AxoStep> ShadowToPlainAsync(AxoStep) protected Task<AxoStep> ShadowToPlainAsync(AxoStep plain) Parameters plain AxoStep Returns Task<AxoStep>"
  },
  "api/AXOpen.Core.AxoStepCommandView.html": {
    "href": "api/AXOpen.Core.AxoStepCommandView.html",
    "title": "Class AxoStepCommandView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoStepCommandView Namespace AXOpen.Core Assembly axopen_core_blazor.dll public class AxoStepCommandView : AxoStepView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IDisposable, IRenderableComplexComponentBase Inheritance object ComponentBase RenderableComponentBase RenderableComplexComponentBase<AxoStep> AxoStepView AxoStepCommandView Implements IComponent IHandleEvent IHandleAfterRender IRenderableComponent IDisposable IRenderableComplexComponentBase Inherited Members AxoStepView.OnInitialized() AxoStepView.IsControllable RenderableComplexComponentBase<AxoStep>.Component RenderableComponentBase.Dispose() RenderableComponentBase.AddToPolling(ITwinElement, int) RenderableComponentBase.RemovePolledElements() RenderableComponentBase.UpdateValuesOnChange(ITwinElement, int) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinObject) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinPrimitive) RenderableComponentBase.UpdateValuesOnChangeOutFocus(OnlinerBase) RenderableComponentBase.HandlePropertyChanged(object, PropertyChangedEventArgs) RenderableComponentBase.HandleShadowPropertyChanged(object, ValueChangedEventArgs) RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, PropertyChangedEventArgs) RenderableComponentBase.PollingInterval RenderableComponentBase.PolledElements RenderableComponentBase.HasFocus ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoStepCommandView() public AxoStepCommandView()"
  },
  "api/AXOpen.Core.AxoStepStatusView.html": {
    "href": "api/AXOpen.Core.AxoStepStatusView.html",
    "title": "Class AxoStepStatusView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoStepStatusView Namespace AXOpen.Core Assembly axopen_core_blazor.dll public class AxoStepStatusView : AxoStepView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IDisposable, IRenderableComplexComponentBase Inheritance object ComponentBase RenderableComponentBase RenderableComplexComponentBase<AxoStep> AxoStepView AxoStepStatusView Implements IComponent IHandleEvent IHandleAfterRender IRenderableComponent IDisposable IRenderableComplexComponentBase Inherited Members AxoStepView.OnInitialized() AxoStepView.IsControllable RenderableComplexComponentBase<AxoStep>.Component RenderableComponentBase.Dispose() RenderableComponentBase.AddToPolling(ITwinElement, int) RenderableComponentBase.RemovePolledElements() RenderableComponentBase.UpdateValuesOnChange(ITwinElement, int) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinObject) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinPrimitive) RenderableComponentBase.UpdateValuesOnChangeOutFocus(OnlinerBase) RenderableComponentBase.HandlePropertyChanged(object, PropertyChangedEventArgs) RenderableComponentBase.HandleShadowPropertyChanged(object, ValueChangedEventArgs) RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, PropertyChangedEventArgs) RenderableComponentBase.PollingInterval RenderableComponentBase.PolledElements RenderableComponentBase.HasFocus ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoStepStatusView() public AxoStepStatusView()"
  },
  "api/AXOpen.Core.AxoStepView.html": {
    "href": "api/AXOpen.Core.AxoStepView.html",
    "title": "Class AxoStepView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoStepView Namespace AXOpen.Core Assembly axopen_core_blazor.dll public class AxoStepView : RenderableComplexComponentBase<AxoStep>, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IDisposable, IRenderableComplexComponentBase Inheritance object ComponentBase RenderableComponentBase RenderableComplexComponentBase<AxoStep> AxoStepView Implements IComponent IHandleEvent IHandleAfterRender IRenderableComponent IDisposable IRenderableComplexComponentBase Derived AxoStepCommandView AxoStepStatusView Inherited Members RenderableComplexComponentBase<AxoStep>.Component RenderableComponentBase.Dispose() RenderableComponentBase.AddToPolling(ITwinElement, int) RenderableComponentBase.RemovePolledElements() RenderableComponentBase.UpdateValuesOnChange(ITwinElement, int) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinObject) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinPrimitive) RenderableComponentBase.UpdateValuesOnChangeOutFocus(OnlinerBase) RenderableComponentBase.HandlePropertyChanged(object, PropertyChangedEventArgs) RenderableComponentBase.HandleShadowPropertyChanged(object, ValueChangedEventArgs) RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, PropertyChangedEventArgs) RenderableComponentBase.PollingInterval RenderableComponentBase.PolledElements RenderableComponentBase.HasFocus ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties IsControllable [Parameter] public bool IsControllable { get; set; } Property Value bool Methods OnInitialized() protected override void OnInitialized()"
  },
  "api/AXOpen.Core.AxoTask.html": {
    "href": "api/AXOpen.Core.AxoTask.html",
    "title": "Class AxoTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoTask Namespace AXOpen.Core Assembly ix_ax_axopen_core.dll public class AxoTask : AxoObject, ITwinIdentity, ITwinObject, ITwinElement, IAxoObject, IAxoTask, IAxoTaskState Inheritance object AxoObject AxoTask Implements ITwinIdentity ITwinObject ITwinElement IAxoObject IAxoTask IAxoTaskState Derived AxoDatamanClearResultData AxoDatamanRead AxoInsightChangeJobByName AxoInsightChangeJobByNumber AxoInsightClearInspectionResults AxoInsightSoftEvent AxoInsightTrigger AxoRemoteTask AxoSequencer AxoStep Inherited Members AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoTask(ITwinObject, string, string) public AxoTask(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties _CyclicExecuteIsNotCalled public AxoMessenger _CyclicExecuteIsNotCalled { get; } Property Value AxoMessenger Duration [ReadOnly] public OnlinerLTime Duration { get; } Property Value OnlinerLTime ErrorDetails public OnlinerString ErrorDetails { get; } Property Value OnlinerString IsDisabled public OnlinerBool IsDisabled { get; } Property Value OnlinerBool RemoteAbort public OnlinerBool RemoteAbort { get; } Property Value OnlinerBool RemoteInvoke public OnlinerBool RemoteInvoke { get; } Property Value OnlinerBool RemoteRestore public OnlinerBool RemoteRestore { get; } Property Value OnlinerBool RemoteResume public OnlinerBool RemoteResume { get; } Property Value OnlinerBool StartSignature public OnlinerULInt StartSignature { get; } Property Value OnlinerULInt StartTimeStamp [ReadOnly] public OnlinerLDateTime StartTimeStamp { get; } Property Value OnlinerLDateTime Status [ReadOnly] [EnumeratorDiscriminator(typeof(eAxoTaskState))] public OnlinerInt Status { get; } Property Value OnlinerInt Methods Abort() public void Abort() CreateEmptyPoco() public AxoTask CreateEmptyPoco() Returns AxoTask ExecuteAsync(object?) Executes this task. public Task ExecuteAsync(object? parameter = null) Parameters parameter object Returns Task OnlineToPlain<T>() public override Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoTask> OnlineToPlainAsync() Returns Task<AxoTask> OnlineToPlainAsync(AxoTask) protected Task<AxoTask> OnlineToPlainAsync(AxoTask plain) Parameters plain AxoTask Returns Task<AxoTask> PlainToOnline<T>(T) public override Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoTask) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoTask plain) Parameters plain AxoTask Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public override Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoTask) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoTask plain) Parameters plain AxoTask Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() Restore() Restore this task to ready state. public void Restore() ResumeTask() public void ResumeTask() ShadowToPlain<T>() public override Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoTask> ShadowToPlainAsync() Returns Task<AxoTask> ShadowToPlainAsync(AxoTask) protected Task<AxoTask> ShadowToPlainAsync(AxoTask plain) Parameters plain AxoTask Returns Task<AxoTask>"
  },
  "api/AXOpen.Core.AxoTaskCommandView.html": {
    "href": "api/AXOpen.Core.AxoTaskCommandView.html",
    "title": "Class AxoTaskCommandView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoTaskCommandView Namespace AXOpen.Core Assembly axopen_core_blazor.dll public class AxoTaskCommandView : AxoTaskView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Inheritance object ComponentBase RenderableComponentBase RenderableComplexComponentBase<AxoTask> AxoTaskView AxoTaskCommandView Implements IComponent IHandleEvent IHandleAfterRender IRenderableComponent IRenderableComplexComponentBase IDisposable Inherited Members AxoTaskView.AuthenticationStateProvider AxoTaskView.GetCurrentUserName() AxoTaskView.GetCurrentUserIdentity() AxoTaskView.AddToPolling(ITwinElement, int) AxoTaskView.OnInitialized() AxoTaskView.Disable AxoTaskView.HideRestoreButton AxoTaskView.IsDisabled AxoTaskView.Description RenderableComplexComponentBase<AxoTask>.Component RenderableComponentBase.Dispose() RenderableComponentBase.RemovePolledElements() RenderableComponentBase.UpdateValuesOnChange(ITwinElement, int) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinObject) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinPrimitive) RenderableComponentBase.UpdateValuesOnChangeOutFocus(OnlinerBase) RenderableComponentBase.HandlePropertyChanged(object, PropertyChangedEventArgs) RenderableComponentBase.HandleShadowPropertyChanged(object, ValueChangedEventArgs) RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, PropertyChangedEventArgs) RenderableComponentBase.PollingInterval RenderableComponentBase.PolledElements RenderableComponentBase.HasFocus ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoTaskCommandView() public AxoTaskCommandView()"
  },
  "api/AXOpen.Core.AxoTaskStatusView.html": {
    "href": "api/AXOpen.Core.AxoTaskStatusView.html",
    "title": "Class AxoTaskStatusView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoTaskStatusView Namespace AXOpen.Core Assembly axopen_core_blazor.dll public class AxoTaskStatusView : AxoTaskView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Inheritance object ComponentBase RenderableComponentBase RenderableComplexComponentBase<AxoTask> AxoTaskView AxoTaskStatusView Implements IComponent IHandleEvent IHandleAfterRender IRenderableComponent IRenderableComplexComponentBase IDisposable Inherited Members AxoTaskView.AuthenticationStateProvider AxoTaskView.GetCurrentUserName() AxoTaskView.GetCurrentUserIdentity() AxoTaskView.AddToPolling(ITwinElement, int) AxoTaskView.OnInitialized() AxoTaskView.Disable AxoTaskView.HideRestoreButton AxoTaskView.IsDisabled AxoTaskView.Description RenderableComplexComponentBase<AxoTask>.Component RenderableComponentBase.Dispose() RenderableComponentBase.RemovePolledElements() RenderableComponentBase.UpdateValuesOnChange(ITwinElement, int) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinObject) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinPrimitive) RenderableComponentBase.UpdateValuesOnChangeOutFocus(OnlinerBase) RenderableComponentBase.HandlePropertyChanged(object, PropertyChangedEventArgs) RenderableComponentBase.HandleShadowPropertyChanged(object, ValueChangedEventArgs) RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, PropertyChangedEventArgs) RenderableComponentBase.PollingInterval RenderableComponentBase.PolledElements RenderableComponentBase.HasFocus ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoTaskStatusView() public AxoTaskStatusView()"
  },
  "api/AXOpen.Core.AxoTaskView.html": {
    "href": "api/AXOpen.Core.AxoTaskView.html",
    "title": "Class AxoTaskView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoTaskView Namespace AXOpen.Core Assembly axopen_core_blazor.dll public class AxoTaskView : RenderableComplexComponentBase<AxoTask>, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Inheritance object ComponentBase RenderableComponentBase RenderableComplexComponentBase<AxoTask> AxoTaskView Implements IComponent IHandleEvent IHandleAfterRender IRenderableComponent IRenderableComplexComponentBase IDisposable Derived AxoTaskCommandView AxoTaskStatusView Inherited Members RenderableComplexComponentBase<AxoTask>.Component RenderableComponentBase.Dispose() RenderableComponentBase.RemovePolledElements() RenderableComponentBase.UpdateValuesOnChange(ITwinElement, int) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinObject) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinPrimitive) RenderableComponentBase.UpdateValuesOnChangeOutFocus(OnlinerBase) RenderableComponentBase.HandlePropertyChanged(object, PropertyChangedEventArgs) RenderableComponentBase.HandleShadowPropertyChanged(object, ValueChangedEventArgs) RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, PropertyChangedEventArgs) RenderableComponentBase.PollingInterval RenderableComponentBase.PolledElements RenderableComponentBase.HasFocus ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties AuthenticationStateProvider [Inject] protected AuthenticationStateProvider? AuthenticationStateProvider { get; set; } Property Value AuthenticationStateProvider Description public string Description { get; } Property Value string Disable [Parameter] public bool Disable { get; set; } Property Value bool HideRestoreButton [Parameter] public bool HideRestoreButton { get; set; } Property Value bool IsDisabled public bool IsDisabled { get; } Property Value bool Methods AddToPolling(ITwinElement, int) public override void AddToPolling(ITwinElement element, int pollingInterval = 250) Parameters element ITwinElement pollingInterval int GetCurrentUserIdentity() protected Task<IIdentity?> GetCurrentUserIdentity() Returns Task<IIdentity> GetCurrentUserName() protected Task<string?> GetCurrentUserName() Returns Task<string> OnInitialized() protected override void OnInitialized()"
  },
  "api/AXOpen.Core.AxoTextList.html": {
    "href": "api/AXOpen.Core.AxoTextList.html",
    "title": "Class AxoTextList | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoTextList Namespace AXOpen.Core Assembly ix_ax_axopen_core.dll public class AxoTextList : ITwinObject, ITwinElement Inheritance object AxoTextList Implements ITwinObject ITwinElement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoTextList(ITwinObject, string, string) public AxoTextList(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties AttributeName public string AttributeName { get; set; } Property Value string Connector protected Connector Connector { get; } Property Value Connector HumanReadable public string HumanReadable { get; set; } Property Value string Id public OnlinerUInt Id { get; } Property Value OnlinerUInt Interpreter public Translator Interpreter { get; } Property Value Translator Parent protected ITwinObject Parent { get; set; } Property Value ITwinObject Symbol public string Symbol { get; protected set; } Property Value string SymbolTail protected string SymbolTail { get; set; } Property Value string Methods AddChild(ITwinObject) public void AddChild(ITwinObject twinObject) Parameters twinObject ITwinObject AddKid(ITwinElement) public void AddKid(ITwinElement kid) Parameters kid ITwinElement AddValueTag(ITwinPrimitive) public void AddValueTag(ITwinPrimitive valueTag) Parameters valueTag ITwinPrimitive CreateEmptyPoco() public AxoTextList CreateEmptyPoco() Returns AxoTextList GetChildren() public IEnumerable<ITwinObject> GetChildren() Returns IEnumerable<ITwinObject> GetConnector() public Connector GetConnector() Returns Connector GetKids() public IEnumerable<ITwinElement> GetKids() Returns IEnumerable<ITwinElement> GetParent() public ITwinObject GetParent() Returns ITwinObject GetSymbolTail() public string GetSymbolTail() Returns string GetValueTags() public IEnumerable<ITwinPrimitive> GetValueTags() Returns IEnumerable<ITwinPrimitive> OnlineToPlain<T>() public virtual Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoTextList> OnlineToPlainAsync() Returns Task<AxoTextList> OnlineToPlainAsync(AxoTextList) protected Task<AxoTextList> OnlineToPlainAsync(AxoTextList plain) Parameters plain AxoTextList Returns Task<AxoTextList> PlainToOnline<T>(T) public virtual Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoTextList) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoTextList plain) Parameters plain AxoTextList Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public virtual Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoTextList) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoTextList plain) Parameters plain AxoTextList Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public virtual Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoTextList> ShadowToPlainAsync() Returns Task<AxoTextList> ShadowToPlainAsync(AxoTextList) protected Task<AxoTextList> ShadowToPlainAsync(AxoTextList plain) Parameters plain AxoTextList Returns Task<AxoTextList>"
  },
  "api/AXOpen.Core.AxoTextListCommandView.html": {
    "href": "api/AXOpen.Core.AxoTextListCommandView.html",
    "title": "Class AxoTextListCommandView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoTextListCommandView Namespace AXOpen.Core Assembly axopen_core_blazor.dll public class AxoTextListCommandView : AxoTextListView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Inheritance object ComponentBase RenderableComponentBase RenderableComplexComponentBase<AxoTextList> AxoTextListView AxoTextListCommandView Implements IComponent IHandleEvent IHandleAfterRender IRenderableComponent IRenderableComplexComponentBase IDisposable Inherited Members AxoTextListView.OnInitialized() RenderableComplexComponentBase<AxoTextList>.Component RenderableComponentBase.Dispose() RenderableComponentBase.AddToPolling(ITwinElement, int) RenderableComponentBase.RemovePolledElements() RenderableComponentBase.UpdateValuesOnChange(ITwinElement, int) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinObject) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinPrimitive) RenderableComponentBase.UpdateValuesOnChangeOutFocus(OnlinerBase) RenderableComponentBase.HandlePropertyChanged(object, PropertyChangedEventArgs) RenderableComponentBase.HandleShadowPropertyChanged(object, ValueChangedEventArgs) RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, PropertyChangedEventArgs) RenderableComponentBase.PollingInterval RenderableComponentBase.PolledElements RenderableComponentBase.HasFocus ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoTextListCommandView() public AxoTextListCommandView()"
  },
  "api/AXOpen.Core.AxoTextListControlView.html": {
    "href": "api/AXOpen.Core.AxoTextListControlView.html",
    "title": "Class AxoTextListControlView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoTextListControlView Namespace AXOpen.Core Assembly axopen_core_blazor.dll public class AxoTextListControlView : AxoTextListView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Inheritance object ComponentBase RenderableComponentBase RenderableComplexComponentBase<AxoTextList> AxoTextListView AxoTextListControlView Implements IComponent IHandleEvent IHandleAfterRender IRenderableComponent IRenderableComplexComponentBase IDisposable Inherited Members AxoTextListView.OnInitialized() RenderableComplexComponentBase<AxoTextList>.Component RenderableComponentBase.Dispose() RenderableComponentBase.AddToPolling(ITwinElement, int) RenderableComponentBase.RemovePolledElements() RenderableComponentBase.UpdateValuesOnChange(ITwinElement, int) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinObject) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinPrimitive) RenderableComponentBase.UpdateValuesOnChangeOutFocus(OnlinerBase) RenderableComponentBase.HandlePropertyChanged(object, PropertyChangedEventArgs) RenderableComponentBase.HandleShadowPropertyChanged(object, ValueChangedEventArgs) RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, PropertyChangedEventArgs) RenderableComponentBase.PollingInterval RenderableComponentBase.PolledElements RenderableComponentBase.HasFocus ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoTextListControlView() public AxoTextListControlView()"
  },
  "api/AXOpen.Core.AxoTextListDisplayView.html": {
    "href": "api/AXOpen.Core.AxoTextListDisplayView.html",
    "title": "Class AxoTextListDisplayView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoTextListDisplayView Namespace AXOpen.Core Assembly axopen_core_blazor.dll public class AxoTextListDisplayView : AxoTextListView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Inheritance object ComponentBase RenderableComponentBase RenderableComplexComponentBase<AxoTextList> AxoTextListView AxoTextListDisplayView Implements IComponent IHandleEvent IHandleAfterRender IRenderableComponent IRenderableComplexComponentBase IDisposable Inherited Members AxoTextListView.OnInitialized() RenderableComplexComponentBase<AxoTextList>.Component RenderableComponentBase.Dispose() RenderableComponentBase.AddToPolling(ITwinElement, int) RenderableComponentBase.RemovePolledElements() RenderableComponentBase.UpdateValuesOnChange(ITwinElement, int) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinObject) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinPrimitive) RenderableComponentBase.UpdateValuesOnChangeOutFocus(OnlinerBase) RenderableComponentBase.HandlePropertyChanged(object, PropertyChangedEventArgs) RenderableComponentBase.HandleShadowPropertyChanged(object, ValueChangedEventArgs) RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, PropertyChangedEventArgs) RenderableComponentBase.PollingInterval RenderableComponentBase.PolledElements RenderableComponentBase.HasFocus ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoTextListDisplayView() public AxoTextListDisplayView()"
  },
  "api/AXOpen.Core.AxoTextListStatusView.html": {
    "href": "api/AXOpen.Core.AxoTextListStatusView.html",
    "title": "Class AxoTextListStatusView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoTextListStatusView Namespace AXOpen.Core Assembly axopen_core_blazor.dll public class AxoTextListStatusView : AxoTextListView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Inheritance object ComponentBase RenderableComponentBase RenderableComplexComponentBase<AxoTextList> AxoTextListView AxoTextListStatusView Implements IComponent IHandleEvent IHandleAfterRender IRenderableComponent IRenderableComplexComponentBase IDisposable Inherited Members AxoTextListView.OnInitialized() RenderableComplexComponentBase<AxoTextList>.Component RenderableComponentBase.Dispose() RenderableComponentBase.AddToPolling(ITwinElement, int) RenderableComponentBase.RemovePolledElements() RenderableComponentBase.UpdateValuesOnChange(ITwinElement, int) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinObject) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinPrimitive) RenderableComponentBase.UpdateValuesOnChangeOutFocus(OnlinerBase) RenderableComponentBase.HandlePropertyChanged(object, PropertyChangedEventArgs) RenderableComponentBase.HandleShadowPropertyChanged(object, ValueChangedEventArgs) RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, PropertyChangedEventArgs) RenderableComponentBase.PollingInterval RenderableComponentBase.PolledElements RenderableComponentBase.HasFocus ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoTextListStatusView() public AxoTextListStatusView()"
  },
  "api/AXOpen.Core.AxoTextListView.html": {
    "href": "api/AXOpen.Core.AxoTextListView.html",
    "title": "Class AxoTextListView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoTextListView Namespace AXOpen.Core Assembly axopen_core_blazor.dll public class AxoTextListView : RenderableComplexComponentBase<AxoTextList>, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Inheritance object ComponentBase RenderableComponentBase RenderableComplexComponentBase<AxoTextList> AxoTextListView Implements IComponent IHandleEvent IHandleAfterRender IRenderableComponent IRenderableComplexComponentBase IDisposable Derived AxoTextListCommandView AxoTextListControlView AxoTextListDisplayView AxoTextListStatusView Inherited Members RenderableComplexComponentBase<AxoTextList>.Component RenderableComponentBase.Dispose() RenderableComponentBase.AddToPolling(ITwinElement, int) RenderableComponentBase.RemovePolledElements() RenderableComponentBase.UpdateValuesOnChange(ITwinElement, int) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinObject) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinPrimitive) RenderableComponentBase.UpdateValuesOnChangeOutFocus(OnlinerBase) RenderableComponentBase.HandlePropertyChanged(object, PropertyChangedEventArgs) RenderableComponentBase.HandleShadowPropertyChanged(object, ValueChangedEventArgs) RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, PropertyChangedEventArgs) RenderableComponentBase.PollingInterval RenderableComponentBase.PolledElements RenderableComponentBase.HasFocus ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Methods OnInitialized() protected override void OnInitialized()"
  },
  "api/AXOpen.Core.AxoToggleTask.html": {
    "href": "api/AXOpen.Core.AxoToggleTask.html",
    "title": "Class AxoToggleTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoToggleTask Namespace AXOpen.Core Assembly ix_ax_axopen_core.dll public class AxoToggleTask : AxoObject, ITwinIdentity, ITwinObject, ITwinElement, IAxoObject, IAxoToggleTask Inheritance object AxoObject AxoToggleTask Implements ITwinIdentity ITwinObject ITwinElement IAxoObject IAxoToggleTask Inherited Members AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoToggleTask(ITwinObject, string, string) public AxoToggleTask(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties AttributeStateOffDesc public string AttributeStateOffDesc { get; set; } Property Value string AttributeStateOnDesc public string AttributeStateOnDesc { get; set; } Property Value string IsDisabled [ReadOnly] public OnlinerBool IsDisabled { get; } Property Value OnlinerBool RemoteToggle public OnlinerBool RemoteToggle { get; } Property Value OnlinerBool State [ReadOnly] public OnlinerBool State { get; } Property Value OnlinerBool Methods CreateEmptyPoco() public AxoToggleTask CreateEmptyPoco() Returns AxoToggleTask OnlineToPlain<T>() public override Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoToggleTask> OnlineToPlainAsync() Returns Task<AxoToggleTask> OnlineToPlainAsync(AxoToggleTask) protected Task<AxoToggleTask> OnlineToPlainAsync(AxoToggleTask plain) Parameters plain AxoToggleTask Returns Task<AxoToggleTask> PlainToOnline<T>(T) public override Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoToggleTask) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoToggleTask plain) Parameters plain AxoToggleTask Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public override Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoToggleTask) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoToggleTask plain) Parameters plain AxoToggleTask Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public override Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoToggleTask> ShadowToPlainAsync() Returns Task<AxoToggleTask> ShadowToPlainAsync(AxoToggleTask) protected Task<AxoToggleTask> ShadowToPlainAsync(AxoToggleTask plain) Parameters plain AxoToggleTask Returns Task<AxoToggleTask>"
  },
  "api/AXOpen.Core.AxoToggleTaskCommandView.html": {
    "href": "api/AXOpen.Core.AxoToggleTaskCommandView.html",
    "title": "Class AxoToggleTaskCommandView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoToggleTaskCommandView Namespace AXOpen.Core Assembly axopen_core_blazor.dll public class AxoToggleTaskCommandView : AxoToggleTaskView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IDisposable, IRenderableComplexComponentBase Inheritance object ComponentBase RenderableComponentBase RenderableComplexComponentBase<AxoToggleTask> AxoToggleTaskView AxoToggleTaskCommandView Implements IComponent IHandleEvent IHandleAfterRender IRenderableComponent IDisposable IRenderableComplexComponentBase Inherited Members AxoToggleTaskView.AuthenticationStateProvider AxoToggleTaskView.GetCurrentUserName() AxoToggleTaskView.GetCurrentUserIdentity() AxoToggleTaskView.OnInitialized() AxoToggleTaskView.Disable AxoToggleTaskView.IsDisabled AxoToggleTaskView.Description RenderableComplexComponentBase<AxoToggleTask>.Component RenderableComponentBase.Dispose() RenderableComponentBase.AddToPolling(ITwinElement, int) RenderableComponentBase.RemovePolledElements() RenderableComponentBase.UpdateValuesOnChange(ITwinElement, int) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinObject) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinPrimitive) RenderableComponentBase.UpdateValuesOnChangeOutFocus(OnlinerBase) RenderableComponentBase.HandlePropertyChanged(object, PropertyChangedEventArgs) RenderableComponentBase.HandleShadowPropertyChanged(object, ValueChangedEventArgs) RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, PropertyChangedEventArgs) RenderableComponentBase.PollingInterval RenderableComponentBase.PolledElements RenderableComponentBase.HasFocus ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoToggleTaskCommandView() public AxoToggleTaskCommandView()"
  },
  "api/AXOpen.Core.AxoToggleTaskStatusView.html": {
    "href": "api/AXOpen.Core.AxoToggleTaskStatusView.html",
    "title": "Class AxoToggleTaskStatusView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoToggleTaskStatusView Namespace AXOpen.Core Assembly axopen_core_blazor.dll public class AxoToggleTaskStatusView : AxoToggleTaskView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IDisposable, IRenderableComplexComponentBase Inheritance object ComponentBase RenderableComponentBase RenderableComplexComponentBase<AxoToggleTask> AxoToggleTaskView AxoToggleTaskStatusView Implements IComponent IHandleEvent IHandleAfterRender IRenderableComponent IDisposable IRenderableComplexComponentBase Inherited Members AxoToggleTaskView.AuthenticationStateProvider AxoToggleTaskView.GetCurrentUserName() AxoToggleTaskView.GetCurrentUserIdentity() AxoToggleTaskView.OnInitialized() AxoToggleTaskView.Disable AxoToggleTaskView.IsDisabled AxoToggleTaskView.Description RenderableComplexComponentBase<AxoToggleTask>.Component RenderableComponentBase.Dispose() RenderableComponentBase.AddToPolling(ITwinElement, int) RenderableComponentBase.RemovePolledElements() RenderableComponentBase.UpdateValuesOnChange(ITwinElement, int) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinObject) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinPrimitive) RenderableComponentBase.UpdateValuesOnChangeOutFocus(OnlinerBase) RenderableComponentBase.HandlePropertyChanged(object, PropertyChangedEventArgs) RenderableComponentBase.HandleShadowPropertyChanged(object, ValueChangedEventArgs) RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, PropertyChangedEventArgs) RenderableComponentBase.PollingInterval RenderableComponentBase.PolledElements RenderableComponentBase.HasFocus ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoToggleTaskStatusView() public AxoToggleTaskStatusView()"
  },
  "api/AXOpen.Core.AxoToggleTaskView.html": {
    "href": "api/AXOpen.Core.AxoToggleTaskView.html",
    "title": "Class AxoToggleTaskView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoToggleTaskView Namespace AXOpen.Core Assembly axopen_core_blazor.dll public class AxoToggleTaskView : RenderableComplexComponentBase<AxoToggleTask>, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IDisposable, IRenderableComplexComponentBase Inheritance object ComponentBase RenderableComponentBase RenderableComplexComponentBase<AxoToggleTask> AxoToggleTaskView Implements IComponent IHandleEvent IHandleAfterRender IRenderableComponent IDisposable IRenderableComplexComponentBase Derived AxoToggleTaskCommandView AxoToggleTaskStatusView Inherited Members RenderableComplexComponentBase<AxoToggleTask>.Component RenderableComponentBase.Dispose() RenderableComponentBase.AddToPolling(ITwinElement, int) RenderableComponentBase.RemovePolledElements() RenderableComponentBase.UpdateValuesOnChange(ITwinElement, int) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinObject) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinPrimitive) RenderableComponentBase.UpdateValuesOnChangeOutFocus(OnlinerBase) RenderableComponentBase.HandlePropertyChanged(object, PropertyChangedEventArgs) RenderableComponentBase.HandleShadowPropertyChanged(object, ValueChangedEventArgs) RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, PropertyChangedEventArgs) RenderableComponentBase.PollingInterval RenderableComponentBase.PolledElements RenderableComponentBase.HasFocus ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties AuthenticationStateProvider [Inject] protected AuthenticationStateProvider? AuthenticationStateProvider { get; set; } Property Value AuthenticationStateProvider Description public string Description { get; } Property Value string Disable [Parameter] public bool Disable { get; set; } Property Value bool IsDisabled public bool IsDisabled { get; } Property Value bool Methods GetCurrentUserIdentity() protected Task<IIdentity?> GetCurrentUserIdentity() Returns Task<IIdentity> GetCurrentUserName() protected Task<string?> GetCurrentUserName() Returns Task<string> OnInitialized() protected override void OnInitialized()"
  },
  "api/AXOpen.Core.Blazor.AxoAlertDialog.AlertDialog.html": {
    "href": "api/AXOpen.Core.Blazor.AxoAlertDialog.AlertDialog.html",
    "title": "Class AlertDialog | System.Dynamic.ExpandoObject",
    "keywords": "Class AlertDialog Namespace AXOpen.Core.Blazor.AxoAlertDialog Assembly axopen_core_blazor.dll Data structure representing AlertDialog. public class AlertDialog : IAlertDialog Inheritance object AlertDialog Implements IAlertDialog Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AlertDialog(eAlertDialogType, string, string, int) public AlertDialog(eAlertDialogType type, string title, string message, int time) Parameters type eAlertDialogType title string message string time int Properties Id public Guid Id { get; set; } Property Value Guid Message public string Message { get; set; } Property Value string Posted public DateTimeOffset Posted { get; set; } Property Value DateTimeOffset TimeToBurn public DateTimeOffset TimeToBurn { get; set; } Property Value DateTimeOffset Title public string Title { get; set; } Property Value string Type public eAlertDialogType Type { get; set; } Property Value eAlertDialogType"
  },
  "api/AXOpen.Core.Blazor.AxoAlertDialog.AxoAlertDialogProxyService.html": {
    "href": "api/AXOpen.Core.Blazor.AxoAlertDialog.AxoAlertDialogProxyService.html",
    "title": "Class AxoAlertDialogProxyService | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoAlertDialogProxyService Namespace AXOpen.Core.Blazor.AxoAlertDialog Assembly axopen_core_blazor.dll Proxy service for alert dialogs, where remote tasks responsible for dialogues handling are initilized public class AxoAlertDialogProxyService : AxoDialogProxyServiceBase, IDisposable Inheritance object AxoDialogProxyServiceBase AxoAlertDialogProxyService Implements IDisposable Inherited Members AxoDialogProxyServiceBase.DialogInstance AxoDialogProxyServiceBase.GetDescendants<T>(ITwinObject, IList<T>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoAlertDialogProxyService(AxoDialogContainer, IEnumerable<ITwinObject>) public AxoAlertDialogProxyService(AxoDialogContainer dialogContainer, IEnumerable<ITwinObject> observedOjects) Parameters dialogContainer AxoDialogContainer observedOjects IEnumerable<ITwinObject> Fields ScopedAlertDialogService public IAlertDialogService ScopedAlertDialogService Field Value IAlertDialogService Properties ObservedObjects public List<string> ObservedObjects { get; set; } Property Value List<string> Methods Dispose() public void Dispose() Queue(IsDialogType) Invoked dialogues are handled within this method and subseqeuntly event is raised in application, which is then handled in UI. protected void Queue(IsDialogType dialog) Parameters dialog IsDialogType StartObserveObjects(IEnumerable<ITwinObject>) public void StartObserveObjects(IEnumerable<ITwinObject> observedObjects) Parameters observedObjects IEnumerable<ITwinObject> Events AlertDialogInvoked public event EventHandler<AxoDialogEventArgs> AlertDialogInvoked Event Type EventHandler<AxoDialogEventArgs>"
  },
  "api/AXOpen.Core.Blazor.AxoAlertDialog.AxoAlertDialogService.html": {
    "href": "api/AXOpen.Core.Blazor.AxoAlertDialog.AxoAlertDialogService.html",
    "title": "Class AxoAlertDialogService | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoAlertDialogService Namespace AXOpen.Core.Blazor.AxoAlertDialog Assembly axopen_core_blazor.dll Class representing implementation of alerts in Blazor. public class AxoAlertDialogService : IAlertDialogService, IDisposable Inheritance object AxoAlertDialogService Implements IAlertDialogService IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoAlertDialogService() public AxoAlertDialogService() Methods AddAlertDialog(eAlertDialogType, string, string, int) public void AddAlertDialog(eAlertDialogType type, string title, string message, int time) Parameters type eAlertDialogType title string message string time int AddAlertDialog(IAlertDialog) public void AddAlertDialog(IAlertDialog toast) Parameters toast IAlertDialog Dispose() public void Dispose() GetAlertDialogs() public List<IAlertDialog> GetAlertDialogs() Returns List<IAlertDialog> RemoveAlertDialog(IAlertDialog) public void RemoveAlertDialog(IAlertDialog toast) Parameters toast IAlertDialog RemoveAllAlertDialogs() public void RemoveAllAlertDialogs() Events AlertDialogChanged public event EventHandler? AlertDialogChanged Event Type EventHandler"
  },
  "api/AXOpen.Core.Blazor.AxoAlertDialog.AxoAlertToast.html": {
    "href": "api/AXOpen.Core.Blazor.AxoAlertDialog.AxoAlertToast.html",
    "title": "Class AxoAlertToast | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoAlertToast Namespace AXOpen.Core.Blazor.AxoAlertDialog Assembly axopen_core_blazor.dll public class AxoAlertToast : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender, IDisposable Inheritance object ComponentBase AxoAlertToast Implements IComponent IHandleEvent IHandleAfterRender IDisposable Inherited Members ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Methods Dispose() public void Dispose() OnInitialized() protected override void OnInitialized()"
  },
  "api/AXOpen.Core.Blazor.AxoAlertDialog.html": {
    "href": "api/AXOpen.Core.Blazor.AxoAlertDialog.html",
    "title": "Namespace AXOpen.Core.Blazor.AxoAlertDialog | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen.Core.Blazor.AxoAlertDialog Classes AlertDialog Data structure representing AlertDialog. AxoAlertDialogProxyService Proxy service for alert dialogs, where remote tasks responsible for dialogues handling are initilized AxoAlertDialogService Class representing implementation of alerts in Blazor. AxoAlertToast"
  },
  "api/AXOpen.Core.Blazor.AxoDialogs.AxoDialogBaseView-1.html": {
    "href": "api/AXOpen.Core.Blazor.AxoDialogs.AxoDialogBaseView-1.html",
    "title": "Class AxoDialogBaseView<T> | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDialogBaseView<T> Namespace AXOpen.Core.Blazor.AxoDialogs Assembly axopen_core_blazor.dll Base class for dialogues, where open/close method are implemented needed for correct synchronization between dialogues. public class AxoDialogBaseView<T> : RenderableComplexComponentBase<T>, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IDisposable, IRenderableComplexComponentBase where T : AxoDialogBase Type Parameters T Type of dialogue Inheritance object ComponentBase RenderableComponentBase RenderableComplexComponentBase<T> AxoDialogBaseView<T> Implements IComponent IHandleEvent IHandleAfterRender IRenderableComponent IDisposable IRenderableComplexComponentBase Derived AxoDialogDialogView Inherited Members RenderableComplexComponentBase<T>.Component RenderableComponentBase.RemovePolledElements() RenderableComponentBase.UpdateValuesOnChange(ITwinElement, int) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinObject) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinPrimitive) RenderableComponentBase.UpdateValuesOnChangeOutFocus(OnlinerBase) RenderableComponentBase.HandlePropertyChanged(object, PropertyChangedEventArgs) RenderableComponentBase.HandleShadowPropertyChanged(object, ValueChangedEventArgs) RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, PropertyChangedEventArgs) RenderableComponentBase.PollingInterval RenderableComponentBase.PolledElements RenderableComponentBase.HasFocus ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Fields ModalDialog protected ModalDialog ModalDialog Field Value ModalDialog Properties _dialogContainer [Inject] public AxoDialogContainer _dialogContainer { get; set; } Property Value AxoDialogContainer _navigationManager [Inject] public NavigationManager _navigationManager { get; set; } Property Value NavigationManager Methods AddToPolling(ITwinElement, int) public override void AddToPolling(ITwinElement element, int pollingInterval = 250) Parameters element ITwinElement pollingInterval int Close() protected Task Close() Returns Task CloseDialogsWithSignalR() public virtual Task CloseDialogsWithSignalR() Returns Task Dispose() public override void Dispose() OnAfterRenderAsync(bool) protected override Task OnAfterRenderAsync(bool firstRender) Parameters firstRender bool Returns Task OnCloseDialogMessage(object, MessageReceivedEventArgs) protected void OnCloseDialogMessage(object sender, MessageReceivedEventArgs e) Parameters sender object e MessageReceivedEventArgs OnInitialized() protected override void OnInitialized() OnOpenDialogMessage(object, MessageReceivedEventArgs) protected void OnOpenDialogMessage(object sender, MessageReceivedEventArgs e) Parameters sender object e MessageReceivedEventArgs OpenDialog() public virtual Task OpenDialog() Returns Task"
  },
  "api/AXOpen.Core.Blazor.AxoDialogs.AxoDialogContainer.html": {
    "href": "api/AXOpen.Core.Blazor.AxoDialogs.AxoDialogContainer.html",
    "title": "Class AxoDialogContainer | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDialogContainer Namespace AXOpen.Core.Blazor.AxoDialogs Assembly axopen_core_blazor.dll Container for multiple AxoDialogProxyService types, based on multiple different dialogues instances and opened web clients. public class AxoDialogContainer : IAsyncDisposable Inheritance object AxoDialogContainer Implements IAsyncDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoDialogContainer() public AxoDialogContainer() Properties AlertDialogProxyServicesDictionary public Dictionary<string, AxoAlertDialogProxyService> AlertDialogProxyServicesDictionary { get; set; } Property Value Dictionary<string, AxoAlertDialogProxyService> DialogClient public DialogClient DialogClient { get; set; } Property Value DialogClient DialogProxyServicesDictionary public Dictionary<string, AxoDialogProxyService> DialogProxyServicesDictionary { get; set; } Property Value Dictionary<string, AxoDialogProxyService> ObservedObjects public HashSet<string> ObservedObjects { get; set; } Property Value HashSet<string> ObservedObjectsAlerts public HashSet<string> ObservedObjectsAlerts { get; set; } Property Value HashSet<string> Methods DisposeAsync() public ValueTask DisposeAsync() Returns ValueTask InitializeSignalR(string) public void InitializeSignalR(string uri) Parameters uri string"
  },
  "api/AXOpen.Core.Blazor.AxoDialogs.AxoDialogEventArgs.html": {
    "href": "api/AXOpen.Core.Blazor.AxoDialogs.AxoDialogEventArgs.html",
    "title": "Class AxoDialogEventArgs | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDialogEventArgs Namespace AXOpen.Core.Blazor.AxoDialogs Assembly axopen_core_blazor.dll public class AxoDialogEventArgs : EventArgs Inheritance object EventArgs AxoDialogEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoDialogEventArgs(string) public AxoDialogEventArgs(string id) Parameters id string Properties DialogId public string DialogId { get; set; } Property Value string"
  },
  "api/AXOpen.Core.Blazor.AxoDialogs.AxoDialogLocator.html": {
    "href": "api/AXOpen.Core.Blazor.AxoDialogs.AxoDialogLocator.html",
    "title": "Class AxoDialogLocator | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDialogLocator Namespace AXOpen.Core.Blazor.AxoDialogs Assembly axopen_core_blazor.dll public class AxoDialogLocator : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender, IDisposable Inheritance object ComponentBase AxoDialogLocator Implements IComponent IHandleEvent IHandleAfterRender IDisposable Inherited Members ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitialized() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties DialogId Unique ID of dialog, which is used to synchronize dialogs across clients. Make sure you pass unique value, otherwise inconsistencies may occur. When no value provided, URI is used as a ID. [Parameter] public string DialogId { get; set; } Property Value string DialogOpenDelay The opening dialog delay (default value is 100 ms). [Parameter] public int DialogOpenDelay { get; set; } Property Value int ObservedObjects List of objects, which are observed for dialogs. Example: ObservedObjects=\"new[] {Entry.Plc.Context.CU0, Entry.Plc.Context.CU1}\" [Parameter] public IEnumerable<ITwinObject> ObservedObjects { get; set; } Property Value IEnumerable<ITwinObject> Methods Dispose() Releases communication and event resources when disposed. public void Dispose() OnInitializedAsync() protected override Task OnInitializedAsync() Returns Task"
  },
  "api/AXOpen.Core.Blazor.AxoDialogs.AxoDialogProxyService.html": {
    "href": "api/AXOpen.Core.Blazor.AxoDialogs.AxoDialogProxyService.html",
    "title": "Class AxoDialogProxyService | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDialogProxyService Namespace AXOpen.Core.Blazor.AxoDialogs Assembly axopen_core_blazor.dll Proxy service for modal dialogs, where remote tasks responsible for dialogues handling are initialized. public class AxoDialogProxyService : AxoDialogProxyServiceBase, IDisposable Inheritance object AxoDialogProxyServiceBase AxoDialogProxyService Implements IDisposable Inherited Members AxoDialogProxyServiceBase.DialogInstance AxoDialogProxyServiceBase.GetDescendants<T>(ITwinObject, IList<T>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoDialogProxyService(AxoDialogContainer, string, IEnumerable<ITwinObject>) Creates new instance of AxoDialogProxyService public AxoDialogProxyService(AxoDialogContainer dialogContainer, string dialogId, IEnumerable<ITwinObject> observedObjects) Parameters dialogContainer AxoDialogContainer Container of proxy services handled by the application over SignalR. dialogId string Id of the dialogue (typical the URL of the page where the dialogue is handled). observedObjects IEnumerable<ITwinObject> Twin objects that may contain invokable dialogs from the controller that are to be handled by this proxy service. Methods Dispose() Releases resources related to handling and communication with the controller. public void Dispose() HandleDialogInvocation(IsDialogType) Handles the invocation of the dialogue from the controller. protected void HandleDialogInvocation(IsDialogType dialog) Parameters dialog IsDialogType Dialogue to be handled."
  },
  "api/AXOpen.Core.Blazor.AxoDialogs.AxoDialogProxyServiceBase.html": {
    "href": "api/AXOpen.Core.Blazor.AxoDialogs.AxoDialogProxyServiceBase.html",
    "title": "Class AxoDialogProxyServiceBase | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDialogProxyServiceBase Namespace AXOpen.Core.Blazor.AxoDialogs Assembly axopen_core_blazor.dll public class AxoDialogProxyServiceBase Inheritance object AxoDialogProxyServiceBase Derived AxoAlertDialogProxyService AxoDialogProxyService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties DialogInstance public IsDialogType DialogInstance { get; set; } Property Value IsDialogType Methods GetDescendants<T>(ITwinObject, IList<T>) protected IEnumerable<T> GetDescendants<T>(ITwinObject obj, IList<T> children = null) where T : class Parameters obj ITwinObject children IList<T> Returns IEnumerable<T> Type Parameters T"
  },
  "api/AXOpen.Core.Blazor.AxoDialogs.Hubs.DialogClient.MessageReceivedEventHandler.html": {
    "href": "api/AXOpen.Core.Blazor.AxoDialogs.Hubs.DialogClient.MessageReceivedEventHandler.html",
    "title": "Delegate DialogClient.MessageReceivedEventHandler | System.Dynamic.ExpandoObject",
    "keywords": "Delegate DialogClient.MessageReceivedEventHandler Namespace AXOpen.Core.Blazor.AxoDialogs.Hubs Assembly axopen_core_blazor.dll public delegate void DialogClient.MessageReceivedEventHandler(object sender, MessageReceivedEventArgs e) Parameters sender object e MessageReceivedEventArgs Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/AXOpen.Core.Blazor.AxoDialogs.Hubs.DialogClient.html": {
    "href": "api/AXOpen.Core.Blazor.AxoDialogs.Hubs.DialogClient.html",
    "title": "Class DialogClient | System.Dynamic.ExpandoObject",
    "keywords": "Class DialogClient Namespace AXOpen.Core.Blazor.AxoDialogs.Hubs Assembly axopen_core_blazor.dll Client for SignalR communication within application, serves for synchronization of dialogues across multiple clients. public class DialogClient : IAsyncDisposable Inheritance object DialogClient Implements IAsyncDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors DialogClient(string) public DialogClient(string siteUrl) Parameters siteUrl string Fields _hubConnection public HubConnection _hubConnection Field Value HubConnection HUBURL public const string HUBURL = \"/dialoghub\" Field Value string Methods DisposeAsync() public ValueTask DisposeAsync() Returns ValueTask SendDialogClose(string) public Task SendDialogClose(string message) Parameters message string Returns Task SendDialogOpen(string) public Task SendDialogOpen(string message) Parameters message string Returns Task StartAsync() public Task StartAsync() Returns Task StopAsync() public Task StopAsync() Returns Task Events MessageReceivedDialogClose public event DialogClient.MessageReceivedEventHandler MessageReceivedDialogClose Event Type DialogClient.MessageReceivedEventHandler MessageReceivedDialogOpen public event DialogClient.MessageReceivedEventHandler MessageReceivedDialogOpen Event Type DialogClient.MessageReceivedEventHandler"
  },
  "api/AXOpen.Core.Blazor.AxoDialogs.Hubs.DialogHub.html": {
    "href": "api/AXOpen.Core.Blazor.AxoDialogs.Hubs.DialogHub.html",
    "title": "Class DialogHub | System.Dynamic.ExpandoObject",
    "keywords": "Class DialogHub Namespace AXOpen.Core.Blazor.AxoDialogs.Hubs Assembly axopen_core_blazor.dll public class DialogHub : Hub, IDisposable Inheritance object Hub DialogHub Implements IDisposable Inherited Members Hub.OnConnectedAsync() Hub.OnDisconnectedAsync(Exception) Hub.Dispose(bool) Hub.Dispose() Hub.Clients Hub.Context Hub.Groups object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Methods SendDialogClose(string) public Task SendDialogClose(string message) Parameters message string Returns Task SendDialogOpen(string) public Task SendDialogOpen(string message) Parameters message string Returns Task"
  },
  "api/AXOpen.Core.Blazor.AxoDialogs.Hubs.DialogMessages.html": {
    "href": "api/AXOpen.Core.Blazor.AxoDialogs.Hubs.DialogMessages.html",
    "title": "Class DialogMessages | System.Dynamic.ExpandoObject",
    "keywords": "Class DialogMessages Namespace AXOpen.Core.Blazor.AxoDialogs.Hubs Assembly axopen_core_blazor.dll public static class DialogMessages Inheritance object DialogMessages Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields RECEIVE_DIALOG_CLOSE public const string RECEIVE_DIALOG_CLOSE = \"ReceiveDialogClose\" Field Value string RECEIVE_DIALOG_OPEN public const string RECEIVE_DIALOG_OPEN = \"ReceiveDialogOpen\" Field Value string SEND_DIALOG_CLOSE public const string SEND_DIALOG_CLOSE = \"SendDialogClose\" Field Value string SEND_DIALOG_OPEN public const string SEND_DIALOG_OPEN = \"SendDialogOpen\" Field Value string"
  },
  "api/AXOpen.Core.Blazor.AxoDialogs.Hubs.MessageReceivedEventArgs.html": {
    "href": "api/AXOpen.Core.Blazor.AxoDialogs.Hubs.MessageReceivedEventArgs.html",
    "title": "Class MessageReceivedEventArgs | System.Dynamic.ExpandoObject",
    "keywords": "Class MessageReceivedEventArgs Namespace AXOpen.Core.Blazor.AxoDialogs.Hubs Assembly axopen_core_blazor.dll public class MessageReceivedEventArgs : EventArgs Inheritance object EventArgs MessageReceivedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors MessageReceivedEventArgs(string) public MessageReceivedEventArgs(string message) Parameters message string Properties Message public string Message { get; set; } Property Value string"
  },
  "api/AXOpen.Core.Blazor.AxoDialogs.Hubs.html": {
    "href": "api/AXOpen.Core.Blazor.AxoDialogs.Hubs.html",
    "title": "Namespace AXOpen.Core.Blazor.AxoDialogs.Hubs | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen.Core.Blazor.AxoDialogs.Hubs Classes DialogClient Client for SignalR communication within application, serves for synchronization of dialogues across multiple clients. DialogHub DialogMessages MessageReceivedEventArgs Delegates DialogClient.MessageReceivedEventHandler"
  },
  "api/AXOpen.Core.Blazor.AxoDialogs.ModalDialog.html": {
    "href": "api/AXOpen.Core.Blazor.AxoDialogs.ModalDialog.html",
    "title": "Class ModalDialog | System.Dynamic.ExpandoObject",
    "keywords": "Class ModalDialog Namespace AXOpen.Core.Blazor.AxoDialogs Assembly axopen_core_blazor.dll public class ModalDialog Inheritance object ModalDialog Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/AXOpen.Core.Blazor.AxoDialogs.html": {
    "href": "api/AXOpen.Core.Blazor.AxoDialogs.html",
    "title": "Namespace AXOpen.Core.Blazor.AxoDialogs | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen.Core.Blazor.AxoDialogs Classes AxoDialogBaseView<T> Base class for dialogues, where open/close method are implemented needed for correct synchronization between dialogues. AxoDialogContainer Container for multiple AxoDialogProxyService types, based on multiple different dialogues instances and opened web clients. AxoDialogEventArgs AxoDialogLocator AxoDialogProxyService Proxy service for modal dialogs, where remote tasks responsible for dialogues handling are initialized. AxoDialogProxyServiceBase ModalDialog"
  },
  "api/AXOpen.Core.Blazor.DeveloperSettings.html": {
    "href": "api/AXOpen.Core.Blazor.DeveloperSettings.html",
    "title": "Class DeveloperSettings | System.Dynamic.ExpandoObject",
    "keywords": "Class DeveloperSettings Namespace AXOpen.Core.Blazor Assembly axopen_core_blazor.dll public static class DeveloperSettings Inheritance object DeveloperSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BypassSSLCertificate Using SSL certificate for SignalR connection (default value is false). public static bool BypassSSLCertificate { get; set; } Property Value bool"
  },
  "api/AXOpen.Core.Blazor.Dialogs.AxoAlertDialogLocator.html": {
    "href": "api/AXOpen.Core.Blazor.Dialogs.AxoAlertDialogLocator.html",
    "title": "Class AxoAlertDialogLocator | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoAlertDialogLocator Namespace AXOpen.Core.Blazor.Dialogs Assembly axopen_core_blazor.dll public class AxoAlertDialogLocator : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender, IDisposable Inheritance object ComponentBase AxoAlertDialogLocator Implements IComponent IHandleEvent IHandleAfterRender IDisposable Inherited Members ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties IsDialogInvoked public bool IsDialogInvoked { get; set; } Property Value bool IsScoped [Parameter] public bool IsScoped { get; set; } Property Value bool ObservedObjects [Parameter] public IEnumerable<ITwinObject> ObservedObjects { get; set; } Property Value IEnumerable<ITwinObject> Methods Dispose() public void Dispose() OnAfterRender(bool) protected override void OnAfterRender(bool firstRender) Parameters firstRender bool OnInitialized() protected override void OnInitialized()"
  },
  "api/AXOpen.Core.Blazor.Dialogs.html": {
    "href": "api/AXOpen.Core.Blazor.Dialogs.html",
    "title": "Namespace AXOpen.Core.Blazor.Dialogs | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen.Core.Blazor.Dialogs Classes AxoAlertDialogLocator"
  },
  "api/AXOpen.Core.Blazor.html": {
    "href": "api/AXOpen.Core.Blazor.html",
    "title": "Namespace AXOpen.Core.Blazor | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen.Core.Blazor Classes DeveloperSettings"
  },
  "api/AXOpen.Core.ComponentDetailsAttribute.html": {
    "href": "api/AXOpen.Core.ComponentDetailsAttribute.html",
    "title": "Class ComponentDetailsAttribute | System.Dynamic.ExpandoObject",
    "keywords": "Class ComponentDetailsAttribute Namespace AXOpen.Core Assembly ix_ax_axopen_core.dll public class ComponentDetailsAttribute : Attribute Inheritance object Attribute ComponentDetailsAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors ComponentDetailsAttribute() public ComponentDetailsAttribute() ComponentDetailsAttribute(string) public ComponentDetailsAttribute(string tabName) Parameters tabName string Properties TabName public string TabName { get; } Property Value string"
  },
  "api/AXOpen.Core.ComponentGroupContext.html": {
    "href": "api/AXOpen.Core.ComponentGroupContext.html",
    "title": "Class ComponentGroupContext | System.Dynamic.ExpandoObject",
    "keywords": "Class ComponentGroupContext Namespace AXOpen.Core Assembly axopen_core_blazor.dll public class ComponentGroupContext : ITwinObject, ITwinElement Inheritance object ComponentGroupContext Implements ITwinObject ITwinElement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors ComponentGroupContext(ITwinObject, IList<ITwinElement>, string) public ComponentGroupContext(ITwinObject parent, IList<ITwinElement> kids, string tabName) Parameters parent ITwinObject kids IList<ITwinElement> tabName string ComponentGroupContext(ITwinObject, IList<ITwinElement>) public ComponentGroupContext(ITwinObject parent, IList<ITwinElement> kids) Parameters parent ITwinObject kids IList<ITwinElement> Properties AttributeName public string AttributeName { get; } Property Value string HumanReadable public string HumanReadable { get; set; } Property Value string Interpreter public Translator Interpreter { get; } Property Value Translator Symbol public string Symbol { get; } Property Value string TabName public string TabName { get; set; } Property Value string Methods AddChild(ITwinObject) public void AddChild(ITwinObject twinObject) Parameters twinObject ITwinObject AddKid(ITwinElement) public void AddKid(ITwinElement kid) Parameters kid ITwinElement AddValueTag(ITwinPrimitive) public void AddValueTag(ITwinPrimitive twinPrimitive) Parameters twinPrimitive ITwinPrimitive GetChildren() public IEnumerable<ITwinObject> GetChildren() Returns IEnumerable<ITwinObject> GetConnector() public Connector GetConnector() Returns Connector GetKids() public IEnumerable<ITwinElement> GetKids() Returns IEnumerable<ITwinElement> GetParent() public ITwinObject GetParent() Returns ITwinObject GetSymbolTail() public string GetSymbolTail() Returns string GetValueTags() public IEnumerable<ITwinPrimitive?> GetValueTags() Returns IEnumerable<ITwinPrimitive> OnlineToPlain<T>() public Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T PlainToOnline<T>(T) public Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadow<T>(T) public Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T Poll() public void Poll() ShadowToPlain<T>() public Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T"
  },
  "api/AXOpen.Core.ComponentHeaderAttribute.html": {
    "href": "api/AXOpen.Core.ComponentHeaderAttribute.html",
    "title": "Class ComponentHeaderAttribute | System.Dynamic.ExpandoObject",
    "keywords": "Class ComponentHeaderAttribute Namespace AXOpen.Core Assembly ix_ax_axopen_core.dll public class ComponentHeaderAttribute : Attribute Inheritance object Attribute ComponentHeaderAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors ComponentHeaderAttribute() public ComponentHeaderAttribute() ComponentHeaderAttribute(string) public ComponentHeaderAttribute(string tabName) Parameters tabName string Properties TabName public string TabName { get; } Property Value string"
  },
  "api/AXOpen.Core.DependencyInjection.html": {
    "href": "api/AXOpen.Core.DependencyInjection.html",
    "title": "Class DependencyInjection | System.Dynamic.ExpandoObject",
    "keywords": "Class DependencyInjection Namespace AXOpen.Core Assembly axopen_core_blazor.dll public static class DependencyInjection Inheritance object DependencyInjection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddAxoCoreServices(IServiceCollection) public static void AddAxoCoreServices(this IServiceCollection services) Parameters services IServiceCollection"
  },
  "api/AXOpen.Core.ErrorLevelAttribute.html": {
    "href": "api/AXOpen.Core.ErrorLevelAttribute.html",
    "title": "Class ErrorLevelAttribute | System.Dynamic.ExpandoObject",
    "keywords": "Class ErrorLevelAttribute Namespace AXOpen.Core Assembly ix_ax_axopen_core.dll public class ErrorLevelAttribute : Attribute Inheritance object Attribute ErrorLevelAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors ErrorLevelAttribute() public ErrorLevelAttribute() ErrorLevelAttribute(uint) public ErrorLevelAttribute(uint level) Parameters level uint Properties Level public uint Level { get; } Property Value uint"
  },
  "api/AXOpen.Core.IAxoAlertDialogFormat.html": {
    "href": "api/AXOpen.Core.IAxoAlertDialogFormat.html",
    "title": "Interface IAxoAlertDialogFormat | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoAlertDialogFormat Namespace AXOpen.Core Assembly ix_ax_axopen_core.dll public interface IAxoAlertDialogFormat Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/AXOpen.Core.IAxoComponent.html": {
    "href": "api/AXOpen.Core.IAxoComponent.html",
    "title": "Interface IAxoComponent | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoComponent Namespace AXOpen.Core Assembly ix_ax_axopen_core.dll public interface IAxoComponent Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/AXOpen.Core.IAxoContext.html": {
    "href": "api/AXOpen.Core.IAxoContext.html",
    "title": "Interface IAxoContext | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoContext Namespace AXOpen.Core Assembly ix_ax_axopen_abstractions.dll public interface IAxoContext Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/AXOpen.Core.IAxoCoordinator.html": {
    "href": "api/AXOpen.Core.IAxoCoordinator.html",
    "title": "Interface IAxoCoordinator | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoCoordinator Namespace AXOpen.Core Assembly ix_ax_axopen_core.dll public interface IAxoCoordinator Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/AXOpen.Core.IAxoDialogAnswer.html": {
    "href": "api/AXOpen.Core.IAxoDialogAnswer.html",
    "title": "Interface IAxoDialogAnswer | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoDialogAnswer Namespace AXOpen.Core Assembly ix_ax_axopen_core.dll public interface IAxoDialogAnswer Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/AXOpen.Core.IAxoDialogFormat.html": {
    "href": "api/AXOpen.Core.IAxoDialogFormat.html",
    "title": "Interface IAxoDialogFormat | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoDialogFormat Namespace AXOpen.Core Assembly ix_ax_axopen_core.dll public interface IAxoDialogFormat Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/AXOpen.Core.IAxoManuallyControllable.html": {
    "href": "api/AXOpen.Core.IAxoManuallyControllable.html",
    "title": "Interface IAxoManuallyControllable | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoManuallyControllable Namespace AXOpen.Core Assembly ix_ax_axopen_core.dll public interface IAxoManuallyControllable Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/AXOpen.Core.IAxoMomentaryTask.html": {
    "href": "api/AXOpen.Core.IAxoMomentaryTask.html",
    "title": "Interface IAxoMomentaryTask | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoMomentaryTask Namespace AXOpen.Core Assembly ix_ax_axopen_core.dll public interface IAxoMomentaryTask Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/AXOpen.Core.IAxoObject.html": {
    "href": "api/AXOpen.Core.IAxoObject.html",
    "title": "Interface IAxoObject | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoObject Namespace AXOpen.Core Assembly ix_ax_axopen_abstractions.dll public interface IAxoObject Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/AXOpen.Core.IAxoStep.html": {
    "href": "api/AXOpen.Core.IAxoStep.html",
    "title": "Interface IAxoStep | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoStep Namespace AXOpen.Core Assembly ix_ax_axopen_core.dll public interface IAxoStep Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/AXOpen.Core.IAxoTask.html": {
    "href": "api/AXOpen.Core.IAxoTask.html",
    "title": "Interface IAxoTask | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoTask Namespace AXOpen.Core Assembly ix_ax_axopen_core.dll public interface IAxoTask Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/AXOpen.Core.IAxoTaskState.html": {
    "href": "api/AXOpen.Core.IAxoTaskState.html",
    "title": "Interface IAxoTaskState | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoTaskState Namespace AXOpen.Core Assembly ix_ax_axopen_core.dll public interface IAxoTaskState Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/AXOpen.Core.IAxoToggleTask.html": {
    "href": "api/AXOpen.Core.IAxoToggleTask.html",
    "title": "Interface IAxoToggleTask | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoToggleTask Namespace AXOpen.Core Assembly ix_ax_axopen_core.dll public interface IAxoToggleTask Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/AXOpen.Core.IndexedData-1.html": {
    "href": "api/AXOpen.Core.IndexedData-1.html",
    "title": "Class IndexedData<T> | System.Dynamic.ExpandoObject",
    "keywords": "Class IndexedData<T> Namespace AXOpen.Core Assembly axopen_core_blazor.dll public class IndexedData<T> Type Parameters T Inheritance object IndexedData<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors IndexedData(int, T) public IndexedData(int Index, T Data) Parameters Index int Data T Properties Data public T Data { get; set; } Property Value T Index public int Index { get; } Property Value int"
  },
  "api/AXOpen.Core.MultipleRemoteCallInitializationException.html": {
    "href": "api/AXOpen.Core.MultipleRemoteCallInitializationException.html",
    "title": "Class MultipleRemoteCallInitializationException | System.Dynamic.ExpandoObject",
    "keywords": "Class MultipleRemoteCallInitializationException Namespace AXOpen.Core Assembly ix_ax_axopen_core.dll public class MultipleRemoteCallInitializationException : Exception, ISerializable Inheritance object Exception MultipleRemoteCallInitializationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors MultipleRemoteCallInitializationException() public MultipleRemoteCallInitializationException() MultipleRemoteCallInitializationException(SerializationInfo, StreamingContext) Initializes a new instance of the MultipleRemoteCallInitializationException class with serialized data. protected MultipleRemoteCallInitializationException(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. context StreamingContext The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. Exceptions System.ArgumentNullException The info parameter is null. System.Runtime.Serialization.SerializationException The class name is null or System.Exception.HResult is zero (0). MultipleRemoteCallInitializationException(string, Exception) Initializes a new instance of the MultipleRemoteCallInitializationException class with a specified error message and a reference to the inner exception that is the cause of this exception. public MultipleRemoteCallInitializationException(string message, Exception innerException) Parameters message string The error message that explains the reason for the exception. innerException Exception The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. MultipleRemoteCallInitializationException(string) Initializes a new instance of the MultipleRemoteCallInitializationException class with a specified error message. public MultipleRemoteCallInitializationException(string message) Parameters message string The message that describes the error."
  },
  "api/AXOpen.Core.Resources.PlcStringResources.html": {
    "href": "api/AXOpen.Core.Resources.PlcStringResources.html",
    "title": "Class PlcStringResources | System.Dynamic.ExpandoObject",
    "keywords": "Class PlcStringResources Namespace AXOpen.Core.Resources Assembly ix_ax_axopen_components_cognex_vision.dll A strongly-typed resource class, for looking up localized strings, etc. public class PlcStringResources Inheritance object PlcStringResources Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties Command_state Looks up a localized string similar to Command state. public static string Command_state { get; } Property Value string Culture Overrides the current thread's CurrentUICulture property for all resource lookups using this strongly typed resource class. public static CultureInfo Culture { get; set; } Property Value CultureInfo ResourceManager Returns the cached ResourceManager instance used by this class. public static ResourceManager ResourceManager { get; } Property Value ResourceManager Run_step Looks up a localized string similar to Run step. public static string Run_step { get; } Property Value string Sequence_mode Looks up a localized string similar to Sequence mode. public static string Sequence_mode { get; } Property Value string Stepping_mode Looks up a localized string similar to Stepping mode. public static string Stepping_mode { get; } Property Value string"
  },
  "api/AXOpen.Core.Resources.html": {
    "href": "api/AXOpen.Core.Resources.html",
    "title": "Namespace AXOpen.Core.Resources | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen.Core.Resources Classes PlcStringResources A strongly-typed resource class, for looking up localized strings, etc."
  },
  "api/AXOpen.Core.WarningLevelAttribute.html": {
    "href": "api/AXOpen.Core.WarningLevelAttribute.html",
    "title": "Class WarningLevelAttribute | System.Dynamic.ExpandoObject",
    "keywords": "Class WarningLevelAttribute Namespace AXOpen.Core Assembly ix_ax_axopen_core.dll public class WarningLevelAttribute : Attribute Inheritance object Attribute WarningLevelAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors WarningLevelAttribute() public WarningLevelAttribute() WarningLevelAttribute(uint) public WarningLevelAttribute(uint level) Parameters level uint Properties Level public uint Level { get; } Property Value uint"
  },
  "api/AXOpen.Core._NULL_CONTEXT.html": {
    "href": "api/AXOpen.Core._NULL_CONTEXT.html",
    "title": "Class _NULL_CONTEXT | System.Dynamic.ExpandoObject",
    "keywords": "Class _NULL_CONTEXT Namespace AXOpen.Core Assembly ix_ax_axopen_core.dll public class _NULL_CONTEXT : ITwinObject, ITwinElement, IAxoContext Inheritance object _NULL_CONTEXT Implements ITwinObject ITwinElement IAxoContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors _NULL_CONTEXT(ITwinObject, string, string) public _NULL_CONTEXT(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties AttributeName public string AttributeName { get; set; } Property Value string Connector protected Connector Connector { get; } Property Value Connector HumanReadable public string HumanReadable { get; set; } Property Value string Interpreter public Translator Interpreter { get; } Property Value Translator Parent protected ITwinObject Parent { get; set; } Property Value ITwinObject Symbol public string Symbol { get; protected set; } Property Value string SymbolTail protected string SymbolTail { get; set; } Property Value string Methods AddChild(ITwinObject) public void AddChild(ITwinObject twinObject) Parameters twinObject ITwinObject AddKid(ITwinElement) public void AddKid(ITwinElement kid) Parameters kid ITwinElement AddValueTag(ITwinPrimitive) public void AddValueTag(ITwinPrimitive valueTag) Parameters valueTag ITwinPrimitive CreateEmptyPoco() public _NULL_CONTEXT CreateEmptyPoco() Returns _NULL_CONTEXT GetChildren() public IEnumerable<ITwinObject> GetChildren() Returns IEnumerable<ITwinObject> GetConnector() public Connector GetConnector() Returns Connector GetKids() public IEnumerable<ITwinElement> GetKids() Returns IEnumerable<ITwinElement> GetParent() public ITwinObject GetParent() Returns ITwinObject GetSymbolTail() public string GetSymbolTail() Returns string GetValueTags() public IEnumerable<ITwinPrimitive> GetValueTags() Returns IEnumerable<ITwinPrimitive> OnlineToPlain<T>() public virtual Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<_NULL_CONTEXT> OnlineToPlainAsync() Returns Task<_NULL_CONTEXT> OnlineToPlainAsync(_NULL_CONTEXT) protected Task<_NULL_CONTEXT> OnlineToPlainAsync(_NULL_CONTEXT plain) Parameters plain _NULL_CONTEXT Returns Task<_NULL_CONTEXT> PlainToOnline<T>(T) public virtual Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(_NULL_CONTEXT) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(_NULL_CONTEXT plain) Parameters plain _NULL_CONTEXT Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public virtual Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(_NULL_CONTEXT) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(_NULL_CONTEXT plain) Parameters plain _NULL_CONTEXT Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public virtual Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<_NULL_CONTEXT> ShadowToPlainAsync() Returns Task<_NULL_CONTEXT> ShadowToPlainAsync(_NULL_CONTEXT) protected Task<_NULL_CONTEXT> ShadowToPlainAsync(_NULL_CONTEXT plain) Parameters plain _NULL_CONTEXT Returns Task<_NULL_CONTEXT>"
  },
  "api/AXOpen.Core._NULL_LOGGER.html": {
    "href": "api/AXOpen.Core._NULL_LOGGER.html",
    "title": "Class _NULL_LOGGER | System.Dynamic.ExpandoObject",
    "keywords": "Class _NULL_LOGGER Namespace AXOpen.Core Assembly ix_ax_axopen_core.dll public class _NULL_LOGGER : ITwinObject, ITwinElement, IAxoLogger Inheritance object _NULL_LOGGER Implements ITwinObject ITwinElement IAxoLogger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors _NULL_LOGGER(ITwinObject, string, string) public _NULL_LOGGER(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties AttributeName public string AttributeName { get; set; } Property Value string Connector protected Connector Connector { get; } Property Value Connector HumanReadable public string HumanReadable { get; set; } Property Value string Interpreter public Translator Interpreter { get; } Property Value Translator Parent protected ITwinObject Parent { get; set; } Property Value ITwinObject Symbol public string Symbol { get; protected set; } Property Value string SymbolTail protected string SymbolTail { get; set; } Property Value string Methods AddChild(ITwinObject) public void AddChild(ITwinObject twinObject) Parameters twinObject ITwinObject AddKid(ITwinElement) public void AddKid(ITwinElement kid) Parameters kid ITwinElement AddValueTag(ITwinPrimitive) public void AddValueTag(ITwinPrimitive valueTag) Parameters valueTag ITwinPrimitive CreateEmptyPoco() public _NULL_LOGGER CreateEmptyPoco() Returns _NULL_LOGGER GetChildren() public IEnumerable<ITwinObject> GetChildren() Returns IEnumerable<ITwinObject> GetConnector() public Connector GetConnector() Returns Connector GetKids() public IEnumerable<ITwinElement> GetKids() Returns IEnumerable<ITwinElement> GetParent() public ITwinObject GetParent() Returns ITwinObject GetSymbolTail() public string GetSymbolTail() Returns string GetValueTags() public IEnumerable<ITwinPrimitive> GetValueTags() Returns IEnumerable<ITwinPrimitive> OnlineToPlain<T>() public virtual Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<_NULL_LOGGER> OnlineToPlainAsync() Returns Task<_NULL_LOGGER> OnlineToPlainAsync(_NULL_LOGGER) protected Task<_NULL_LOGGER> OnlineToPlainAsync(_NULL_LOGGER plain) Parameters plain _NULL_LOGGER Returns Task<_NULL_LOGGER> PlainToOnline<T>(T) public virtual Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(_NULL_LOGGER) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(_NULL_LOGGER plain) Parameters plain _NULL_LOGGER Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public virtual Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(_NULL_LOGGER) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(_NULL_LOGGER plain) Parameters plain _NULL_LOGGER Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public virtual Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<_NULL_LOGGER> ShadowToPlainAsync() Returns Task<_NULL_LOGGER> ShadowToPlainAsync(_NULL_LOGGER) protected Task<_NULL_LOGGER> ShadowToPlainAsync(_NULL_LOGGER plain) Parameters plain _NULL_LOGGER Returns Task<_NULL_LOGGER>"
  },
  "api/AXOpen.Core._NULL_OBJECT.html": {
    "href": "api/AXOpen.Core._NULL_OBJECT.html",
    "title": "Class _NULL_OBJECT | System.Dynamic.ExpandoObject",
    "keywords": "Class _NULL_OBJECT Namespace AXOpen.Core Assembly ix_ax_axopen_core.dll public class _NULL_OBJECT : ITwinObject, ITwinElement, IAxoObject Inheritance object _NULL_OBJECT Implements ITwinObject ITwinElement IAxoObject Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors _NULL_OBJECT(ITwinObject, string, string) public _NULL_OBJECT(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties AttributeName public string AttributeName { get; set; } Property Value string Connector protected Connector Connector { get; } Property Value Connector HumanReadable public string HumanReadable { get; set; } Property Value string Interpreter public Translator Interpreter { get; } Property Value Translator Parent protected ITwinObject Parent { get; set; } Property Value ITwinObject Symbol public string Symbol { get; protected set; } Property Value string SymbolTail protected string SymbolTail { get; set; } Property Value string Methods AddChild(ITwinObject) public void AddChild(ITwinObject twinObject) Parameters twinObject ITwinObject AddKid(ITwinElement) public void AddKid(ITwinElement kid) Parameters kid ITwinElement AddValueTag(ITwinPrimitive) public void AddValueTag(ITwinPrimitive valueTag) Parameters valueTag ITwinPrimitive CreateEmptyPoco() public _NULL_OBJECT CreateEmptyPoco() Returns _NULL_OBJECT GetChildren() public IEnumerable<ITwinObject> GetChildren() Returns IEnumerable<ITwinObject> GetConnector() public Connector GetConnector() Returns Connector GetKids() public IEnumerable<ITwinElement> GetKids() Returns IEnumerable<ITwinElement> GetParent() public ITwinObject GetParent() Returns ITwinObject GetSymbolTail() public string GetSymbolTail() Returns string GetValueTags() public IEnumerable<ITwinPrimitive> GetValueTags() Returns IEnumerable<ITwinPrimitive> OnlineToPlain<T>() public virtual Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<_NULL_OBJECT> OnlineToPlainAsync() Returns Task<_NULL_OBJECT> OnlineToPlainAsync(_NULL_OBJECT) protected Task<_NULL_OBJECT> OnlineToPlainAsync(_NULL_OBJECT plain) Parameters plain _NULL_OBJECT Returns Task<_NULL_OBJECT> PlainToOnline<T>(T) public virtual Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(_NULL_OBJECT) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(_NULL_OBJECT plain) Parameters plain _NULL_OBJECT Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public virtual Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(_NULL_OBJECT) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(_NULL_OBJECT plain) Parameters plain _NULL_OBJECT Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public virtual Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<_NULL_OBJECT> ShadowToPlainAsync() Returns Task<_NULL_OBJECT> ShadowToPlainAsync(_NULL_OBJECT) protected Task<_NULL_OBJECT> ShadowToPlainAsync(_NULL_OBJECT plain) Parameters plain _NULL_OBJECT Returns Task<_NULL_OBJECT>"
  },
  "api/AXOpen.Core._NULL_RTC.html": {
    "href": "api/AXOpen.Core._NULL_RTC.html",
    "title": "Class _NULL_RTC | System.Dynamic.ExpandoObject",
    "keywords": "Class _NULL_RTC Namespace AXOpen.Core Assembly ix_ax_axopen_core.dll public class _NULL_RTC : ITwinObject, ITwinElement, IAxoRtc Inheritance object _NULL_RTC Implements ITwinObject ITwinElement IAxoRtc Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors _NULL_RTC(ITwinObject, string, string) public _NULL_RTC(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties AttributeName public string AttributeName { get; set; } Property Value string Connector protected Connector Connector { get; } Property Value Connector HumanReadable public string HumanReadable { get; set; } Property Value string Interpreter public Translator Interpreter { get; } Property Value Translator Parent protected ITwinObject Parent { get; set; } Property Value ITwinObject Symbol public string Symbol { get; protected set; } Property Value string SymbolTail protected string SymbolTail { get; set; } Property Value string Methods AddChild(ITwinObject) public void AddChild(ITwinObject twinObject) Parameters twinObject ITwinObject AddKid(ITwinElement) public void AddKid(ITwinElement kid) Parameters kid ITwinElement AddValueTag(ITwinPrimitive) public void AddValueTag(ITwinPrimitive valueTag) Parameters valueTag ITwinPrimitive CreateEmptyPoco() public _NULL_RTC CreateEmptyPoco() Returns _NULL_RTC GetChildren() public IEnumerable<ITwinObject> GetChildren() Returns IEnumerable<ITwinObject> GetConnector() public Connector GetConnector() Returns Connector GetKids() public IEnumerable<ITwinElement> GetKids() Returns IEnumerable<ITwinElement> GetParent() public ITwinObject GetParent() Returns ITwinObject GetSymbolTail() public string GetSymbolTail() Returns string GetValueTags() public IEnumerable<ITwinPrimitive> GetValueTags() Returns IEnumerable<ITwinPrimitive> OnlineToPlain<T>() public virtual Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<_NULL_RTC> OnlineToPlainAsync() Returns Task<_NULL_RTC> OnlineToPlainAsync(_NULL_RTC) protected Task<_NULL_RTC> OnlineToPlainAsync(_NULL_RTC plain) Parameters plain _NULL_RTC Returns Task<_NULL_RTC> PlainToOnline<T>(T) public virtual Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(_NULL_RTC) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(_NULL_RTC plain) Parameters plain _NULL_RTC Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public virtual Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(_NULL_RTC) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(_NULL_RTC plain) Parameters plain _NULL_RTC Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public virtual Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<_NULL_RTC> ShadowToPlainAsync() Returns Task<_NULL_RTC> ShadowToPlainAsync(_NULL_RTC) protected Task<_NULL_RTC> ShadowToPlainAsync(_NULL_RTC plain) Parameters plain _NULL_RTC Returns Task<_NULL_RTC>"
  },
  "api/AXOpen.Core.eAxoSequenceMode.html": {
    "href": "api/AXOpen.Core.eAxoSequenceMode.html",
    "title": "Enum eAxoSequenceMode | System.Dynamic.ExpandoObject",
    "keywords": "Enum eAxoSequenceMode Namespace AXOpen.Core Assembly ix_ax_axopen_core.dll public enum eAxoSequenceMode : short Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Fields Cyclic = 2 None = 0 RunOnce = 1"
  },
  "api/AXOpen.Core.eAxoSteppingMode.html": {
    "href": "api/AXOpen.Core.eAxoSteppingMode.html",
    "title": "Enum eAxoSteppingMode | System.Dynamic.ExpandoObject",
    "keywords": "Enum eAxoSteppingMode Namespace AXOpen.Core Assembly ix_ax_axopen_core.dll public enum eAxoSteppingMode : short Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Fields Continous = 2 None = 0 StepByStep = 1"
  },
  "api/AXOpen.Core.eAxoTaskState.html": {
    "href": "api/AXOpen.Core.eAxoTaskState.html",
    "title": "Enum eAxoTaskState | System.Dynamic.ExpandoObject",
    "keywords": "Enum eAxoTaskState Namespace AXOpen.Core Assembly ix_ax_axopen_core.dll public enum eAxoTaskState : short Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Fields Aborted = 5 Busy = 3 Disabled = 0 Done = 4 Error = 10 Kicking = 2 Ready = 1"
  },
  "api/AXOpen.Core.eDialogAnswer.html": {
    "href": "api/AXOpen.Core.eDialogAnswer.html",
    "title": "Enum eDialogAnswer | System.Dynamic.ExpandoObject",
    "keywords": "Enum eDialogAnswer Namespace AXOpen.Core Assembly ix_ax_axopen_core.dll public enum eDialogAnswer : short Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Fields Cancel = 40 No = 30 NoAnswer = 0 OK = 10 Yes = 20"
  },
  "api/AXOpen.Core.eDialogType.html": {
    "href": "api/AXOpen.Core.eDialogType.html",
    "title": "Enum eDialogType | System.Dynamic.ExpandoObject",
    "keywords": "Enum eDialogType Namespace AXOpen.Core Assembly ix_ax_axopen_core.dll public enum eDialogType : short Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Fields Danger = 30 Info = 10 Success = 20 Undefined = 0 Warning = 40"
  },
  "api/AXOpen.Core.eDisplayFormat.html": {
    "href": "api/AXOpen.Core.eDisplayFormat.html",
    "title": "Enum eDisplayFormat | System.Dynamic.ExpandoObject",
    "keywords": "Enum eDisplayFormat Namespace AXOpen.Core Assembly axopen_core_blazor.dll public enum eDisplayFormat Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Fields Array_of_decimals = 1 Array_of_hexdecimals = 0 String = 2"
  },
  "api/AXOpen.Core.html": {
    "href": "api/AXOpen.Core.html",
    "title": "Namespace AXOpen.Core | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen.Core Classes _NULL_CONTEXT _NULL_LOGGER _NULL_OBJECT _NULL_RTC AxoAlertDialog AxoBoolArray AxoBoolArrayCommandView AxoBoolArrayControlView AxoBoolArrayDisplayView AxoBoolArrayStatusView AxoBoolArrayView AxoByteArray AxoByteArrayCommandView AxoByteArrayControlView AxoByteArrayDisplayView AxoByteArrayStatusView AxoByteArrayView AxoComponent AxoComponentCommandView AxoComponentStatusView AxoComponentView AxoContext AxoDialog AxoDialogBase AxoDialogDialogView AxoMomentaryTask AxoMomentaryTaskCommandView AxoMomentaryTaskStatusView AxoMomentaryTaskView AxoObject AxoRemoteTask AxoSequencer AxoSequencerCommandView AxoSequencerContainer AxoSequencerStatusView AxoSequencerView AxoStep AxoStepCommandView AxoStepStatusView AxoStepView AxoTask AxoTaskCommandView AxoTaskStatusView AxoTaskView AxoTextList AxoTextListCommandView AxoTextListControlView AxoTextListDisplayView AxoTextListStatusView AxoTextListView AxoToggleTask AxoToggleTaskCommandView AxoToggleTaskStatusView AxoToggleTaskView ComponentDetailsAttribute ComponentGroupContext ComponentHeaderAttribute DependencyInjection ErrorLevelAttribute IndexedData<T> MultipleRemoteCallInitializationException WarningLevelAttribute Interfaces IAxoAlertDialogFormat IAxoComponent IAxoContext IAxoCoordinator IAxoDialogAnswer IAxoDialogFormat IAxoManuallyControllable IAxoMomentaryTask IAxoObject IAxoStep IAxoTask IAxoTaskState IAxoToggleTask Enums AxoComponentView.eAlarmLevel AxoCoordinatorStates eAxoSequenceMode eAxoSteppingMode eAxoTaskState eDialogAnswer eDialogType eDisplayFormat"
  },
  "api/AXOpen.Data.AxoCompoundRepository.html": {
    "href": "api/AXOpen.Data.AxoCompoundRepository.html",
    "title": "Class AxoCompoundRepository | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoCompoundRepository Namespace AXOpen.Data Assembly ix_ax_axopen_data.dll public class AxoCompoundRepository : IRepository Inheritance object AxoCompoundRepository Implements IRepository Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoCompoundRepository(IEnumerable<IAxoDataExchange>) public AxoCompoundRepository(IEnumerable<IAxoDataExchange> dataFragments) Parameters dataFragments IEnumerable<IAxoDataExchange> Properties Count public long Count { get; } Property Value long Methods Create(string, object) public void Create(string identifier, object data) Parameters identifier string data object Delete(string) public void Delete(string identifier) Parameters identifier string Exists(string) public bool Exists(string identifier) Parameters identifier string Returns bool FilteredCount(string, eSearchMode) public long FilteredCount(string id, eSearchMode searchMode = eSearchMode.Exact) Parameters id string searchMode eSearchMode Returns long GetRecords(string, int, int, eSearchMode) public IEnumerable<IBrowsableDataObject> GetRecords(string identifier, int limit, int skip, eSearchMode searchMode) Parameters identifier string limit int skip int searchMode eSearchMode Returns IEnumerable<IBrowsableDataObject> GetRecords(string) public IEnumerable<IBrowsableDataObject> GetRecords(string identifier) Parameters identifier string Returns IEnumerable<IBrowsableDataObject> Read(string) public dynamic Read(string identifier) Parameters identifier string Returns dynamic Update(string, object) public void Update(string identifier, object data) Parameters identifier string data object"
  },
  "api/AXOpen.Data.AxoDataCrudTask.html": {
    "href": "api/AXOpen.Data.AxoDataCrudTask.html",
    "title": "Class AxoDataCrudTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataCrudTask Namespace AXOpen.Data Assembly ix_ax_axopen_data.dll public class AxoDataCrudTask : AxoDataExchangeTask, ITwinIdentity, ITwinObject, ITwinElement, IAxoObject, IAxoTask, IAxoTaskState, IAxoEntityExistTaskState Inheritance object AxoObject AxoTask AxoRemoteTask AxoDataExchangeTask AxoDataCrudTask Implements ITwinIdentity ITwinObject ITwinElement IAxoObject IAxoTask IAxoTaskState IAxoEntityExistTaskState Inherited Members AxoDataExchangeTask.DataEntityIdentifier AxoDataExchangeTask._exist AxoDataExchangeTask.OnlineToPlainAsync(AxoDataExchangeTask) AxoDataExchangeTask.PlainToOnlineAsync(AxoDataExchangeTask) AxoDataExchangeTask.ShadowToPlainAsync(AxoDataExchangeTask) AxoDataExchangeTask.PlainToShadowAsync(AxoDataExchangeTask) AxoRemoteTask.DeferredAction AxoRemoteTask.PropertyChanged AxoRemoteTask.Initialize(Action) AxoRemoteTask.Initialize(Func<bool>) AxoRemoteTask._defferedActionCount AxoRemoteTask.InitializeExclusively(Action) AxoRemoteTask.InitializeExclusively(Func<bool>) AxoRemoteTask.DeInitialize() AxoRemoteTask.ExecuteAsync(ITwinPrimitive, ValueChangedEventArgs) AxoRemoteTask.RemoteExecutionException AxoRemoteTask.RemoteExceptionDetails AxoRemoteTask.ResetExecution() AxoRemoteTask.DoneSignature AxoRemoteTask.IsInitialized AxoRemoteTask.HasRemoteException AxoRemoteTask.IsBeingCalledCounter AxoRemoteTask.TaskNotInitialized AxoRemoteTask.TaskHasRemoteException AxoRemoteTask.OnlineToPlainAsync(AxoRemoteTask) AxoRemoteTask.PlainToOnlineAsync(AxoRemoteTask) AxoRemoteTask.ShadowToPlainAsync(AxoRemoteTask) AxoRemoteTask.PlainToShadowAsync(AxoRemoteTask) AxoTask.Restore() AxoTask.Abort() AxoTask.ResumeTask() AxoTask.ExecuteAsync(object) AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails AxoTask._CyclicExecuteIsNotCalled AxoTask.OnlineToPlainAsync(AxoTask) AxoTask.PlainToOnlineAsync(AxoTask) AxoTask.ShadowToPlainAsync(AxoTask) AxoTask.PlainToShadowAsync(AxoTask) AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoDataCrudTask(ITwinObject, string, string) public AxoDataCrudTask(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties CrudOperation [EnumeratorDiscriminator(typeof(eCrudOperation))] public OnlinerInt CrudOperation { get; } Property Value OnlinerInt Methods CreateEmptyPoco() public AxoDataCrudTask CreateEmptyPoco() Returns AxoDataCrudTask OnlineToPlain<T>() public override Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoDataCrudTask> OnlineToPlainAsync() Returns Task<AxoDataCrudTask> OnlineToPlainAsync(AxoDataCrudTask) protected Task<AxoDataCrudTask> OnlineToPlainAsync(AxoDataCrudTask plain) Parameters plain AxoDataCrudTask Returns Task<AxoDataCrudTask> PlainToOnline<T>(T) public override Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoDataCrudTask) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoDataCrudTask plain) Parameters plain AxoDataCrudTask Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public override Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoDataCrudTask) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoDataCrudTask plain) Parameters plain AxoDataCrudTask Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public override Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoDataCrudTask> ShadowToPlainAsync() Returns Task<AxoDataCrudTask> ShadowToPlainAsync(AxoDataCrudTask) protected Task<AxoDataCrudTask> ShadowToPlainAsync(AxoDataCrudTask plain) Parameters plain AxoDataCrudTask Returns Task<AxoDataCrudTask>"
  },
  "api/AXOpen.Data.AxoDataEntity.html": {
    "href": "api/AXOpen.Data.AxoDataEntity.html",
    "title": "Class AxoDataEntity | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataEntity Namespace AXOpen.Data Assembly ix_ax_axopen_data.dll public class AxoDataEntity : ICrudDataObject, ITwinObject, ITwinElement, IAxoDataEntity Inheritance object AxoDataEntity Implements ICrudDataObject ITwinObject ITwinElement IAxoDataEntity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoDataEntity(ITwinObject, string, string) public AxoDataEntity(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties AttributeName public string AttributeName { get; set; } Property Value string Changes public List<ValueChangeItem> Changes { get; set; } Property Value List<ValueChangeItem> ChangeTracker public ValueChangeTracker ChangeTracker { get; } Property Value ValueChangeTracker Connector protected Connector Connector { get; } Property Value Connector DataEntityId [RenderIgnore] public OnlinerString DataEntityId { get; } Property Value OnlinerString Hash public string Hash { get; set; } Property Value string HumanReadable public string HumanReadable { get; set; } Property Value string Interpreter public Translator Interpreter { get; } Property Value Translator LockedBy public object? LockedBy { get; set; } Property Value object Parent protected ITwinObject Parent { get; set; } Property Value ITwinObject Symbol public string Symbol { get; protected set; } Property Value string SymbolTail protected string SymbolTail { get; set; } Property Value string Methods AddChild(ITwinObject) public void AddChild(ITwinObject twinObject) Parameters twinObject ITwinObject AddKid(ITwinElement) public void AddKid(ITwinElement kid) Parameters kid ITwinElement AddValueTag(ITwinPrimitive) public void AddValueTag(ITwinPrimitive valueTag) Parameters valueTag ITwinPrimitive CreateEmptyPoco() public AxoDataEntity CreateEmptyPoco() Returns AxoDataEntity GetChildren() public IEnumerable<ITwinObject> GetChildren() Returns IEnumerable<ITwinObject> GetConnector() public Connector GetConnector() Returns Connector GetKids() public IEnumerable<ITwinElement> GetKids() Returns IEnumerable<ITwinElement> GetParent() public ITwinObject GetParent() Returns ITwinObject GetSymbolTail() public string GetSymbolTail() Returns string GetValueTags() public IEnumerable<ITwinPrimitive> GetValueTags() Returns IEnumerable<ITwinPrimitive> OnlineToPlain<T>() public virtual Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoDataEntity> OnlineToPlainAsync() Returns Task<AxoDataEntity> OnlineToPlainAsync(AxoDataEntity) protected Task<AxoDataEntity> OnlineToPlainAsync(AxoDataEntity plain) Parameters plain AxoDataEntity Returns Task<AxoDataEntity> PlainToOnline<T>(T) public virtual Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoDataEntity) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoDataEntity plain) Parameters plain AxoDataEntity Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public virtual Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoDataEntity) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoDataEntity plain) Parameters plain AxoDataEntity Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public virtual Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoDataEntity> ShadowToPlainAsync() Returns Task<AxoDataEntity> ShadowToPlainAsync(AxoDataEntity) protected Task<AxoDataEntity> ShadowToPlainAsync(AxoDataEntity plain) Parameters plain AxoDataEntity Returns Task<AxoDataEntity>"
  },
  "api/AXOpen.Data.AxoDataEntityAttribute.html": {
    "href": "api/AXOpen.Data.AxoDataEntityAttribute.html",
    "title": "Class AxoDataEntityAttribute | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataEntityAttribute Namespace AXOpen.Data Assembly ix_ax_axopen_data.dll [AttributeUsage(AttributeTargets.Property)] public class AxoDataEntityAttribute : Attribute Inheritance object Attribute AxoDataEntityAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/AXOpen.Data.AxoDataEntityAttributeNotFoundException.html": {
    "href": "api/AXOpen.Data.AxoDataEntityAttributeNotFoundException.html",
    "title": "Class AxoDataEntityAttributeNotFoundException | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataEntityAttributeNotFoundException Namespace AXOpen.Data Assembly ix_ax_axopen_data.dll public class AxoDataEntityAttributeNotFoundException : Exception, ISerializable Inheritance object Exception AxoDataEntityAttributeNotFoundException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoDataEntityAttributeNotFoundException() public AxoDataEntityAttributeNotFoundException() AxoDataEntityAttributeNotFoundException(string) public AxoDataEntityAttributeNotFoundException(string message) Parameters message string"
  },
  "api/AXOpen.Data.AxoDataExchange-2.html": {
    "href": "api/AXOpen.Data.AxoDataExchange-2.html",
    "title": "Class AxoDataExchange<TOnline, TPlain> | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataExchange<TOnline, TPlain> Namespace AXOpen.Data Assembly ix_ax_axopen_data.dll Provides mechanism for structured data exchange between the controller and an arbitrary repository. public class AxoDataExchange<TOnline, TPlain> : AxoDataExchangeBase, ITwinIdentity, ITwinObject, ITwinElement, IAxoObject, IAxoDataExchange where TOnline : IAxoDataEntity where TPlain : IAxoDataEntity, new() Type Parameters TOnline Online data twin object of AxoDataEntity TPlain POCO twin of AxoDataEntity Inheritance object AxoObject AxoDataExchangeBase AxoDataExchange<TOnline, TPlain> Implements ITwinIdentity ITwinObject ITwinElement IAxoObject IAxoDataExchange Inherited Members AxoDataExchangeBase.OnlineToPlainAsync(AxoDataExchangeBase) AxoDataExchangeBase.PlainToOnlineAsync(AxoDataExchangeBase) AxoDataExchangeBase.ShadowToPlainAsync(AxoDataExchangeBase) AxoDataExchangeBase.PlainToShadowAsync(AxoDataExchangeBase) AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoDataExchange(ITwinObject, string, string) public AxoDataExchange(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties CrudDataObject public ICrudDataObject? CrudDataObject { get; } Property Value ICrudDataObject DataEntity Gets AxoDataEntity associated with this AxoDataExchange<TOnline, TPlain>. public TOnline DataEntity { get; } Property Value TOnline DataRepository Get strongly typed repository associated with this AxoDataExchange<TOnline, TPlain>. public IRepository<TPlain> DataRepository { get; } Property Value IRepository<TPlain> Exporters public Dictionary<string, Type> Exporters { get; } Property Value Dictionary<string, Type> Operation public AxoDataCrudTask Operation { get; } Property Value AxoDataCrudTask RefUIData Gets AxoDataEntity as AXSharp.Connector.ITwinObject that provides exchange mechanisms between this AxoDataExchange<TOnline, TPlain> and controller. public ITwinObject RefUIData { get; } Property Value ITwinObject Repository Gets repository associated with this IAxoDataExchange object. public IRepository? Repository { get; } Property Value IRepository VerifyHash public bool VerifyHash { get; set; } Property Value bool Methods ChangeTrackerGetChanges() Gets changes from changeTracker. public List<ValueChangeItem> ChangeTrackerGetChanges() Returns List<ValueChangeItem> List of ValueChangeItem that contains changes. ChangeTrackerSaveObservedChanges(IBrowsableDataObject) Saves observed changes from changeTracker to object. public void ChangeTrackerSaveObservedChanges(IBrowsableDataObject plainObject) Parameters plainObject IBrowsableDataObject ChangeTrackerSetChanges() Sets changes to changeTracker. public void ChangeTrackerSetChanges() ChangeTrackerStartObservingChanges(AuthenticationState) Start observing changes of the data object with changeTracker. public void ChangeTrackerStartObservingChanges(AuthenticationState authenticationState) Parameters authenticationState AuthenticationState Authentication state of current logged user. ChangeTrackerStopObservingChanges() Stop observing changes of the data object with changeTracker. public void ChangeTrackerStopObservingChanges() CreateAsync(string, TPlain) public Task CreateAsync(string identifier, TPlain plain) Parameters identifier string plain TPlain Returns Task CreateCopyCurrentShadowsAsync(string) Create new record of the current data present in the shadows of this object in the repository. public Task CreateCopyCurrentShadowsAsync(string recordId) Parameters recordId string Returns Task CreateDataFromControllerAsync(string) Load data from controller and creates new record in the repository. public Task CreateDataFromControllerAsync(string recordId) Parameters recordId string Returns Task CreateEmptyPoco() public AxoDataExchange CreateEmptyPoco() Returns AxoDataExchange CreateNewAsync(string) Creates new record in the repository. public Task CreateNewAsync(string identifier) Parameters identifier string Id of the record. Returns Task Task CreateOrUpdate(string) Create or update record in the repository. public Task CreateOrUpdate(string recordId) Parameters recordId string Returns Task Task CreateOrUpdateAsync(string, TPlain) public Task CreateOrUpdateAsync(string identifier, TPlain data) Parameters identifier string data TPlain Returns Task DeInitializeRemoteDataExchange() Terminates data exchange between controller and this AxoDataExchange<TOnline, TPlain> public void DeInitializeRemoteDataExchange() Delete(string) Deletes record from the repository. public Task Delete(string identifier) Parameters identifier string Id of the record. Returns Task Task DeleteAsync(string) public Task DeleteAsync(string identifier) Parameters identifier string Returns Task EntityExistAsync(string) public Task<bool> EntityExistAsync(string identifier) Parameters identifier string Returns Task<bool> ExistsAsync(string) Check if record exists in the repository. public Task<bool> ExistsAsync(string recordId) Parameters recordId string Returns Task<bool> Task ExportData(string, Dictionary<string, ExportData>?, eExportMode, int, int, string, char) Export data from the Repository associated with this IAxoDataExchange. public void ExportData(string path, Dictionary<string, ExportData>? customExportData = null, eExportMode exportMode = eExportMode.First, int firstNumber = 50, int secondNumber = 100, string exportFileType = \"CSV\", char separator = ';') Parameters path string Path to exported file. customExportData Dictionary<string, ExportData> exportMode eExportMode firstNumber int secondNumber int exportFileType string separator char Separator for individual records. FromRepositoryToControllerAsync(IBrowsableDataObject) Loads data from respective record of the repository into the controller. public Task FromRepositoryToControllerAsync(IBrowsableDataObject selected) Parameters selected IBrowsableDataObject Returns Task FromRepositoryToShadowsAsync(IBrowsableDataObject) Copies the data from the repository(ies) to shadows of this twin object. public Task FromRepositoryToShadowsAsync(IBrowsableDataObject entity) Parameters entity IBrowsableDataObject Data entity object. Returns Task GetLockedBy() Get object which locked this repository. public object? GetLockedBy() Returns object GetRecords(string, int, int, eSearchMode) Gets records meeting criteria from the Repository associated with this IAxoDataExchange public IEnumerable<IBrowsableDataObject> GetRecords(string identifier, int limit, int skip, eSearchMode searchMode) Parameters identifier string Record identifier. Use of '*' will provide no filter to the query. DataEntityId limit int Limits number of entries skip int Skips number of entries. searchMode eSearchMode Set the search mode fot his query. eSearchMode Returns IEnumerable<IBrowsableDataObject> Records from the associated repository meeting criteria. GetRecords(string) Gets record meeting criteria from the Repository associated with this IAxoDataExchange where the data entity id matches exactly the argument. public IEnumerable<IBrowsableDataObject> GetRecords(string identifier) Parameters identifier string Record identifier. Use of '*' will provide no filter to the query. DataEntityId Returns IEnumerable<IBrowsableDataObject> Record from the associated repository meeting criteria. ImportData(string, AuthenticationState, ITwinObject, string, char) Import data from file to the Repository associated with this IAxoDataExchange. public void ImportData(string path, AuthenticationState authenticationState, ITwinObject crudDataObject = null, string exportFileType = \"CSV\", char separator = ';') Parameters path string Path to imported file. authenticationState AuthenticationState crudDataObject ITwinObject Object type of the imported records. exportFileType string separator char Separator for individual records. InitializeRemoteDataExchange() Initializes data exchange between remote controller and this AxoDataExchange<TOnline, TPlain> public void InitializeRemoteDataExchange() InitializeRemoteDataExchange(IRepository<TPlain>) Initializes data exchange between remote controller and this AxoDataExchange<TOnline, TPlain> public void InitializeRemoteDataExchange(IRepository<TPlain> repository) Parameters repository IRepository<TPlain> Repository to be associated with this AxoDataExchange<TOnline, TPlain> IsHashCorrect(IIdentity) public bool IsHashCorrect(IIdentity identity) Parameters identity IIdentity Returns bool OnlineToPlain<T>() public override Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoDataExchange> OnlineToPlainAsync() Returns Task<AxoDataExchange> OnlineToPlainAsync(AxoDataExchange) protected Task<AxoDataExchange> OnlineToPlainAsync(AxoDataExchange plain) Parameters plain AxoDataExchange Returns Task<AxoDataExchange> PlainToOnline<T>(T) public override Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoDataExchange) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoDataExchange plain) Parameters plain AxoDataExchange Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public override Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoDataExchange) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoDataExchange plain) Parameters plain AxoDataExchange Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ReadAsync(string) public Task<TPlain> ReadAsync(string identifier) Parameters identifier string Returns Task<TPlain> RemoteCreate(string) Provides handler for remote (controller's) request to create new data entry in the Repository associated with this IAxoDataExchange public bool RemoteCreate(string identifier) Parameters identifier string Record identifier. Returns bool True when success RemoteCreateOrUpdate(string) Provides handler for remote (controller's) request to create or update data in the Repository associated with this IAxoDataExchange public bool RemoteCreateOrUpdate(string identifier) Parameters identifier string Record identifier. Returns bool True when success RemoteDelete(string) Provides handler for remote (controller's) request to delete data from the Repository associated with this IAxoDataExchange public bool RemoteDelete(string identifier) Parameters identifier string Record identifier. Returns bool True when success RemoteEntityExist(string) Provides handler for remote (controller's) request to check if data exists in the Repository associated with this IAxoDataExchange public bool RemoteEntityExist(string identifier) Parameters identifier string Record identifier. Returns bool True when success RemoteRead(string) Provides handler for remote (controller's) request to read data from the Repository associated with this IAxoDataExchange public bool RemoteRead(string identifier) Parameters identifier string Record identifier. Returns bool True when success RemoteUpdate(string) Provides handler for remote (controller's) request to update data in the Repository associated with this IAxoDataExchange public bool RemoteUpdate(string identifier) Parameters identifier string Record identifier. Returns bool True when success SetLockedBy(object) Set object which locked this repository. public void SetLockedBy(object by) Parameters by object SetRepository(IRepository<TPlain>) Sets repository for this instance of AxoDataExchange<TOnline, TPlain> public void SetRepository(IRepository<TPlain> repository) Parameters repository IRepository<TPlain> ShadowToPlain<T>() public override Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoDataExchange> ShadowToPlainAsync() Returns Task<AxoDataExchange> ShadowToPlainAsync(AxoDataExchange) protected Task<AxoDataExchange> ShadowToPlainAsync(AxoDataExchange plain) Parameters plain AxoDataExchange Returns Task<AxoDataExchange> UpdateAsync(string, TPlain) public Task UpdateAsync(string identifier, TPlain data) Parameters identifier string data TPlain Returns Task UpdateFromShadowsAsync() Updates data form shadows of this object to respective record in the repository. public Task UpdateFromShadowsAsync() Returns Task Task"
  },
  "api/AXOpen.Data.AxoDataExchangeBase.html": {
    "href": "api/AXOpen.Data.AxoDataExchangeBase.html",
    "title": "Class AxoDataExchangeBase | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataExchangeBase Namespace AXOpen.Data Assembly ix_ax_axopen_data.dll public class AxoDataExchangeBase : AxoObject, ITwinIdentity, ITwinObject, ITwinElement, IAxoObject Inheritance object AxoObject AxoDataExchangeBase Implements ITwinIdentity ITwinObject ITwinElement IAxoObject Derived AxoDataExchange<TOnline, TPlain> AxoDataFragmentExchange Inherited Members AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoDataExchangeBase(ITwinObject, string, string) public AxoDataExchangeBase(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Methods CreateEmptyPoco() public AxoDataExchangeBase CreateEmptyPoco() Returns AxoDataExchangeBase OnlineToPlain<T>() public override Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoDataExchangeBase> OnlineToPlainAsync() Returns Task<AxoDataExchangeBase> OnlineToPlainAsync(AxoDataExchangeBase) protected Task<AxoDataExchangeBase> OnlineToPlainAsync(AxoDataExchangeBase plain) Parameters plain AxoDataExchangeBase Returns Task<AxoDataExchangeBase> PlainToOnline<T>(T) public override Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoDataExchangeBase) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoDataExchangeBase plain) Parameters plain AxoDataExchangeBase Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public override Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoDataExchangeBase) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoDataExchangeBase plain) Parameters plain AxoDataExchangeBase Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public override Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoDataExchangeBase> ShadowToPlainAsync() Returns Task<AxoDataExchangeBase> ShadowToPlainAsync(AxoDataExchangeBase) protected Task<AxoDataExchangeBase> ShadowToPlainAsync(AxoDataExchangeBase plain) Parameters plain AxoDataExchangeBase Returns Task<AxoDataExchangeBase>"
  },
  "api/AXOpen.Data.AxoDataExchangeTask.html": {
    "href": "api/AXOpen.Data.AxoDataExchangeTask.html",
    "title": "Class AxoDataExchangeTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataExchangeTask Namespace AXOpen.Data Assembly ix_ax_axopen_data.dll public class AxoDataExchangeTask : AxoRemoteTask, ITwinIdentity, ITwinObject, ITwinElement, IAxoObject, IAxoTask, IAxoTaskState, IAxoEntityExistTaskState Inheritance object AxoObject AxoTask AxoRemoteTask AxoDataExchangeTask Implements ITwinIdentity ITwinObject ITwinElement IAxoObject IAxoTask IAxoTaskState IAxoEntityExistTaskState Derived AxoDataCrudTask Inherited Members AxoRemoteTask.DeferredAction AxoRemoteTask.PropertyChanged AxoRemoteTask.Initialize(Action) AxoRemoteTask.Initialize(Func<bool>) AxoRemoteTask._defferedActionCount AxoRemoteTask.InitializeExclusively(Action) AxoRemoteTask.InitializeExclusively(Func<bool>) AxoRemoteTask.DeInitialize() AxoRemoteTask.ExecuteAsync(ITwinPrimitive, ValueChangedEventArgs) AxoRemoteTask.RemoteExecutionException AxoRemoteTask.RemoteExceptionDetails AxoRemoteTask.ResetExecution() AxoRemoteTask.DoneSignature AxoRemoteTask.IsInitialized AxoRemoteTask.HasRemoteException AxoRemoteTask.IsBeingCalledCounter AxoRemoteTask.TaskNotInitialized AxoRemoteTask.TaskHasRemoteException AxoRemoteTask.OnlineToPlainAsync(AxoRemoteTask) AxoRemoteTask.PlainToOnlineAsync(AxoRemoteTask) AxoRemoteTask.ShadowToPlainAsync(AxoRemoteTask) AxoRemoteTask.PlainToShadowAsync(AxoRemoteTask) AxoTask.Restore() AxoTask.Abort() AxoTask.ResumeTask() AxoTask.ExecuteAsync(object) AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails AxoTask._CyclicExecuteIsNotCalled AxoTask.OnlineToPlainAsync(AxoTask) AxoTask.PlainToOnlineAsync(AxoTask) AxoTask.ShadowToPlainAsync(AxoTask) AxoTask.PlainToShadowAsync(AxoTask) AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoDataExchangeTask(ITwinObject, string, string) public AxoDataExchangeTask(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties _exist public OnlinerBool _exist { get; } Property Value OnlinerBool DataEntityIdentifier public OnlinerString DataEntityIdentifier { get; } Property Value OnlinerString Methods CreateEmptyPoco() public AxoDataExchangeTask CreateEmptyPoco() Returns AxoDataExchangeTask OnlineToPlain<T>() public override Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoDataExchangeTask> OnlineToPlainAsync() Returns Task<AxoDataExchangeTask> OnlineToPlainAsync(AxoDataExchangeTask) protected Task<AxoDataExchangeTask> OnlineToPlainAsync(AxoDataExchangeTask plain) Parameters plain AxoDataExchangeTask Returns Task<AxoDataExchangeTask> PlainToOnline<T>(T) public override Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoDataExchangeTask) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoDataExchangeTask plain) Parameters plain AxoDataExchangeTask Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public override Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoDataExchangeTask) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoDataExchangeTask plain) Parameters plain AxoDataExchangeTask Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public override Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoDataExchangeTask> ShadowToPlainAsync() Returns Task<AxoDataExchangeTask> ShadowToPlainAsync(AxoDataExchangeTask) protected Task<AxoDataExchangeTask> ShadowToPlainAsync(AxoDataExchangeTask plain) Parameters plain AxoDataExchangeTask Returns Task<AxoDataExchangeTask>"
  },
  "api/AXOpen.Data.AxoDataFragmentAttribute.html": {
    "href": "api/AXOpen.Data.AxoDataFragmentAttribute.html",
    "title": "Class AxoDataFragmentAttribute | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataFragmentAttribute Namespace AXOpen.Data Assembly ix_ax_axopen_data.dll [AttributeUsage(AttributeTargets.Property)] public class AxoDataFragmentAttribute : Attribute Inheritance object Attribute AxoDataFragmentAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/AXOpen.Data.AxoDataFragmentExchange.html": {
    "href": "api/AXOpen.Data.AxoDataFragmentExchange.html",
    "title": "Class AxoDataFragmentExchange | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataFragmentExchange Namespace AXOpen.Data Assembly ix_ax_axopen_data.dll public class AxoDataFragmentExchange : AxoDataExchangeBase, ITwinIdentity, ITwinObject, ITwinElement, IAxoObject, IAxoDataExchange Inheritance object AxoObject AxoDataExchangeBase AxoDataFragmentExchange Implements ITwinIdentity ITwinObject ITwinElement IAxoObject IAxoDataExchange Inherited Members AxoDataExchangeBase.OnlineToPlainAsync(AxoDataExchangeBase) AxoDataExchangeBase.PlainToOnlineAsync(AxoDataExchangeBase) AxoDataExchangeBase.ShadowToPlainAsync(AxoDataExchangeBase) AxoDataExchangeBase.PlainToShadowAsync(AxoDataExchangeBase) AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoDataFragmentExchange(ITwinObject, string, string) public AxoDataFragmentExchange(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties DataFragments protected IAxoDataExchange[] DataFragments { get; } Property Value IAxoDataExchange[] Exporters public Dictionary<string, Type> Exporters { get; } Property Value Dictionary<string, Type> Operation public AxoDataCrudTask Operation { get; } Property Value AxoDataCrudTask RefUIData public ITwinObject RefUIData { get; } Property Value ITwinObject Repository public IRepository? Repository { get; } Property Value IRepository VerifyHash public bool VerifyHash { get; set; } Property Value bool Methods ChangeTrackerGetChanges() Gets changes from changeTracker. public List<ValueChangeItem> ChangeTrackerGetChanges() Returns List<ValueChangeItem> List of ValueChangeItem that contains changes. ChangeTrackerSaveObservedChanges(IBrowsableDataObject) Saves observed changes from changeTracker to object. public void ChangeTrackerSaveObservedChanges(IBrowsableDataObject plainObject) Parameters plainObject IBrowsableDataObject ChangeTrackerSetChanges() Sets changes to changeTracker. public void ChangeTrackerSetChanges() ChangeTrackerStartObservingChanges(AuthenticationState) Start observing changes of the data object with changeTracker. public void ChangeTrackerStartObservingChanges(AuthenticationState authenticationState) Parameters authenticationState AuthenticationState Authentication state of current logged user. ChangeTrackerStopObservingChanges() Stop observing changes of the data object with changeTracker. public void ChangeTrackerStopObservingChanges() CreateBuilder() public object CreateBuilder() Returns object CreateBuilder<T>() public T? CreateBuilder<T>() where T : AxoDataFragmentExchange Returns T Type Parameters T CreateCopyCurrentShadowsAsync(string) public Task CreateCopyCurrentShadowsAsync(string recordId) Parameters recordId string Returns Task CreateDataFromControllerAsync(string) public Task CreateDataFromControllerAsync(string recordId) Parameters recordId string Returns Task CreateEmptyPoco() public AxoDataFragmentExchange CreateEmptyPoco() Returns AxoDataFragmentExchange CreateNewAsync(string) public Task CreateNewAsync(string identifier) Parameters identifier string Returns Task CreateOrUpdate(string) public Task CreateOrUpdate(string recordId) Parameters recordId string Returns Task DeInitializeRemoteDataExchange() public void DeInitializeRemoteDataExchange() Delete(string) public Task Delete(string identifier) Parameters identifier string Returns Task ExistsAsync(string) public Task<bool> ExistsAsync(string recordId) Parameters recordId string Returns Task<bool> ExportData(string, Dictionary<string, ExportData>, eExportMode, int, int, string, char) public void ExportData(string path, Dictionary<string, ExportData> customExportData = null, eExportMode exportMode = eExportMode.First, int firstNumber = 50, int secondNumber = 100, string exportFileType = \"CSV\", char separator = ';') Parameters path string customExportData Dictionary<string, ExportData> exportMode eExportMode firstNumber int secondNumber int exportFileType string separator char FromRepositoryToControllerAsync(IBrowsableDataObject) public Task FromRepositoryToControllerAsync(IBrowsableDataObject selected) Parameters selected IBrowsableDataObject Returns Task FromRepositoryToShadowsAsync(IBrowsableDataObject) public Task FromRepositoryToShadowsAsync(IBrowsableDataObject entity) Parameters entity IBrowsableDataObject Returns Task GetLockedBy() Get object which locked this repository. public object? GetLockedBy() Returns object GetRecords(string, int, int, eSearchMode) public IEnumerable<IBrowsableDataObject> GetRecords(string identifier, int limit, int skip, eSearchMode searchMode) Parameters identifier string limit int skip int searchMode eSearchMode Returns IEnumerable<IBrowsableDataObject> GetRecords(string) public IEnumerable<IBrowsableDataObject> GetRecords(string identifier) Parameters identifier string Returns IEnumerable<IBrowsableDataObject> ImportData(string, AuthenticationState, ITwinObject, string, char) public void ImportData(string path, AuthenticationState authenticationState, ITwinObject crudDataObject = null, string exportFileType = \"CSV\", char separator = ';') Parameters path string authenticationState AuthenticationState crudDataObject ITwinObject exportFileType string separator char InitializeRemoteDataExchange() Initializes data exchange between remote controller and this AxoDataExchange<TOnline, TPlain> public void InitializeRemoteDataExchange() IsHashCorrect(IIdentity) public bool IsHashCorrect(IIdentity identity) Parameters identity IIdentity Returns bool OnlineToPlain<T>() public override Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoDataFragmentExchange> OnlineToPlainAsync() Returns Task<AxoDataFragmentExchange> OnlineToPlainAsync(AxoDataFragmentExchange) protected Task<AxoDataFragmentExchange> OnlineToPlainAsync(AxoDataFragmentExchange plain) Parameters plain AxoDataFragmentExchange Returns Task<AxoDataFragmentExchange> PlainToOnline<T>(T) public override Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoDataFragmentExchange) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoDataFragmentExchange plain) Parameters plain AxoDataFragmentExchange Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public override Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoDataFragmentExchange) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoDataFragmentExchange plain) Parameters plain AxoDataFragmentExchange Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() RemoteCreate(string) public bool RemoteCreate(string identifier) Parameters identifier string Returns bool RemoteCreateOrUpdate(string) public bool RemoteCreateOrUpdate(string identifier) Parameters identifier string Returns bool RemoteDelete(string) public bool RemoteDelete(string identifier) Parameters identifier string Returns bool RemoteEntityExist(string) public bool RemoteEntityExist(string identifier) Parameters identifier string Returns bool RemoteRead(string) public bool RemoteRead(string identifier) Parameters identifier string Returns bool RemoteUpdate(string) public bool RemoteUpdate(string identifier) Parameters identifier string Returns bool SetLockedBy(object) Set object which locked this repository. public void SetLockedBy(object by) Parameters by object ShadowToPlain<T>() public override Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoDataFragmentExchange> ShadowToPlainAsync() Returns Task<AxoDataFragmentExchange> ShadowToPlainAsync(AxoDataFragmentExchange) protected Task<AxoDataFragmentExchange> ShadowToPlainAsync(AxoDataFragmentExchange plain) Parameters plain AxoDataFragmentExchange Returns Task<AxoDataFragmentExchange> UpdateFromShadowsAsync() public Task UpdateFromShadowsAsync() Returns Task"
  },
  "api/AXOpen.Data.AxoDataVerifyHashAttribute.html": {
    "href": "api/AXOpen.Data.AxoDataVerifyHashAttribute.html",
    "title": "Class AxoDataVerifyHashAttribute | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataVerifyHashAttribute Namespace AXOpen.Data Assembly ix_ax_axopen_data.dll [AttributeUsage(AttributeTargets.Class|AttributeTargets.Property)] public class AxoDataVerifyHashAttribute : Attribute Inheritance object Attribute AxoDataVerifyHashAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/AXOpen.Data.AxoFragmentedDataCompound.html": {
    "href": "api/AXOpen.Data.AxoFragmentedDataCompound.html",
    "title": "Class AxoFragmentedDataCompound | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoFragmentedDataCompound Namespace AXOpen.Data Assembly ix_ax_axopen_data.dll [Container(Layout.Tabs)] public class AxoFragmentedDataCompound : ITwinObject, ITwinElement Inheritance object AxoFragmentedDataCompound Implements ITwinObject ITwinElement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoFragmentedDataCompound(ITwinObject, IList<ITwinElement>) public AxoFragmentedDataCompound(ITwinObject parent, IList<ITwinElement> kids) Parameters parent ITwinObject kids IList<ITwinElement> Properties AttributeName public string AttributeName { get; } Property Value string HumanReadable public string HumanReadable { get; set; } Property Value string Interpreter public Translator Interpreter { get; } Property Value Translator Symbol public string Symbol { get; } Property Value string Methods AddChild(ITwinObject) public void AddChild(ITwinObject twinObject) Parameters twinObject ITwinObject AddKid(ITwinElement) public void AddKid(ITwinElement kid) Parameters kid ITwinElement AddValueTag(ITwinPrimitive) public void AddValueTag(ITwinPrimitive twinPrimitive) Parameters twinPrimitive ITwinPrimitive GetChildren() public IEnumerable<ITwinObject> GetChildren() Returns IEnumerable<ITwinObject> GetConnector() public Connector GetConnector() Returns Connector GetKids() public IEnumerable<ITwinElement> GetKids() Returns IEnumerable<ITwinElement> GetParent() public ITwinObject GetParent() Returns ITwinObject GetSymbolTail() public string GetSymbolTail() Returns string GetValueTags() public IEnumerable<ITwinPrimitive?> GetValueTags() Returns IEnumerable<ITwinPrimitive> OnlineToPlain<T>() public Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T PlainToOnline<T>(T) public Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadow<T>(T) public Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T Poll() public void Poll() ShadowToPlain<T>() public Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T"
  },
  "api/AXOpen.Data.BaseDataExporter-2.ImportItems.html": {
    "href": "api/AXOpen.Data.BaseDataExporter-2.ImportItems.html",
    "title": "Class BaseDataExporter<TPlain, TOnline>.ImportItems | System.Dynamic.ExpandoObject",
    "keywords": "Class BaseDataExporter<TPlain, TOnline>.ImportItems Namespace AXOpen.Data Assembly ix_ax_axopen_data.dll protected class BaseDataExporter<TPlain, TOnline>.ImportItems Inheritance object BaseDataExporter<TPlain, TOnline>.ImportItems Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties Key public string Key { get; set; } Property Value string Value public dynamic Value { get; set; } Property Value dynamic"
  },
  "api/AXOpen.Data.BaseDataExporter-2.html": {
    "href": "api/AXOpen.Data.BaseDataExporter-2.html",
    "title": "Class BaseDataExporter<TPlain, TOnline> | System.Dynamic.ExpandoObject",
    "keywords": "Class BaseDataExporter<TPlain, TOnline> Namespace AXOpen.Data Assembly ix_ax_axopen_data.dll public class BaseDataExporter<TPlain, TOnline> where TPlain : IAxoDataEntity, new() where TOnline : IAxoDataEntity Type Parameters TPlain TOnline Inheritance object BaseDataExporter<TPlain, TOnline> Derived CSVDataExporter<TPlain, TOnline> TXTDataExporter<TPlain, TOnline> ExcelDataExporter<TPlain, TOnline> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors BaseDataExporter() public BaseDataExporter() Methods BaseExport(IRepository<TPlain>, Expression<Func<TPlain, bool>>, Dictionary<string, bool>?, eExportMode, int, int, char) public List<string> BaseExport(IRepository<TPlain> dataRepository, Expression<Func<TPlain, bool>> expression, Dictionary<string, bool>? customExportData = null, eExportMode exportMode = eExportMode.First, int firstNumber = 50, int secondNumber = 100, char separator = ';') Parameters dataRepository IRepository<TPlain> expression Expression<Func<TPlain, bool>> customExportData Dictionary<string, bool> exportMode eExportMode firstNumber int secondNumber int separator char Returns List<string> BaseImport(IRepository<TPlain>, List<string>, AuthenticationState, ITwinObject, char) public void BaseImport(IRepository<TPlain> dataRepository, List<string> imports, AuthenticationState authenticationState, ITwinObject crudDataObject = null, char separator = ';') Parameters dataRepository IRepository<TPlain> imports List<string> authenticationState AuthenticationState crudDataObject ITwinObject separator char UpdateDocument(IRepository<TPlain>, List<ImportItems>, IEnumerable<ITwinPrimitive>, ITwinObject, AuthenticationState, char) protected void UpdateDocument(IRepository<TPlain> dataRepository, List<BaseDataExporter<TPlain, TOnline>.ImportItems> dictionary, IEnumerable<ITwinPrimitive> valueTags, ITwinObject prototype, AuthenticationState authenticationState, char separator = ';') Parameters dataRepository IRepository<TPlain> dictionary List<BaseDataExporter<TPlain, TOnline>.ImportItems> valueTags IEnumerable<ITwinPrimitive> prototype ITwinObject authenticationState AuthenticationState separator char"
  },
  "api/AXOpen.Data.CSVDataExporter-2.html": {
    "href": "api/AXOpen.Data.CSVDataExporter-2.html",
    "title": "Class CSVDataExporter<TPlain, TOnline> | System.Dynamic.ExpandoObject",
    "keywords": "Class CSVDataExporter<TPlain, TOnline> Namespace AXOpen.Data Assembly ix_ax_axopen_data.dll public class CSVDataExporter<TPlain, TOnline> : BaseDataExporter<TPlain, TOnline>, IDataExporter<TPlain, TOnline> where TPlain : IAxoDataEntity, new() where TOnline : IAxoDataEntity Type Parameters TPlain TOnline Inheritance object BaseDataExporter<TPlain, TOnline> CSVDataExporter<TPlain, TOnline> Implements IDataExporter<TPlain, TOnline> Inherited Members BaseDataExporter<TPlain, TOnline>.BaseExport(IRepository<TPlain>, Expression<Func<TPlain, bool>>, Dictionary<string, bool>, eExportMode, int, int, char) BaseDataExporter<TPlain, TOnline>.BaseImport(IRepository<TPlain>, List<string>, AuthenticationState, ITwinObject, char) BaseDataExporter<TPlain, TOnline>.UpdateDocument(IRepository<TPlain>, List<BaseDataExporter<TPlain, TOnline>.ImportItems>, IEnumerable<ITwinPrimitive>, ITwinObject, AuthenticationState, char) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors CSVDataExporter() public CSVDataExporter() Methods Export(IRepository<TPlain>, string, string, Expression<Func<TPlain, bool>>, Dictionary<string, bool>, eExportMode, int, int, char) public void Export(IRepository<TPlain> dataRepository, string path, string fragmentName, Expression<Func<TPlain, bool>> expression, Dictionary<string, bool> customExportData = null, eExportMode exportMode = eExportMode.First, int firstNumber = 50, int secondNumber = 100, char separator = ';') Parameters dataRepository IRepository<TPlain> path string fragmentName string expression Expression<Func<TPlain, bool>> customExportData Dictionary<string, bool> exportMode eExportMode firstNumber int secondNumber int separator char GetName() public static string GetName() Returns string Import(IRepository<TPlain>, string, string, AuthenticationState, ITwinObject, char) public void Import(IRepository<TPlain> dataRepository, string path, string fragmentName, AuthenticationState authenticationState, ITwinObject crudDataObject = null, char separator = ';') Parameters dataRepository IRepository<TPlain> path string fragmentName string authenticationState AuthenticationState crudDataObject ITwinObject separator char"
  },
  "api/AXOpen.Data.ColumnData.html": {
    "href": "api/AXOpen.Data.ColumnData.html",
    "title": "Class ColumnData | System.Dynamic.ExpandoObject",
    "keywords": "Class ColumnData Namespace AXOpen.Data Assembly axopen_data_blazor.dll public class ColumnData Inheritance object ColumnData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/AXOpen.Data.DataExchangeView.html": {
    "href": "api/AXOpen.Data.DataExchangeView.html",
    "title": "Class DataExchangeView | System.Dynamic.ExpandoObject",
    "keywords": "Class DataExchangeView Namespace AXOpen.Data Assembly axopen_data_blazor.dll public class DataExchangeView : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender, IDisposable Inheritance object ComponentBase DataExchangeView Implements IComponent IHandleEvent IHandleAfterRender IDisposable Inherited Members ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitialized() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties CanExport [Parameter] public bool CanExport { get; set; } Property Value bool ChildContent [Parameter] public RenderFragment ChildContent { get; set; } Property Value RenderFragment ModalDataView [Parameter] public bool ModalDataView { get; set; } Property Value bool Presentation [Parameter] public string Presentation { get; set; } Property Value string Vm [Parameter] public DataExchangeViewModel Vm { get; set; } Property Value DataExchangeViewModel Methods AddLine(ColumnData) public void AddLine(ColumnData line) Parameters line ColumnData Dispose() public void Dispose() LoadCustomExportDataAsync() public Task LoadCustomExportDataAsync() Returns Task OnInitializedAsync() protected override Task OnInitializedAsync() Returns Task RemoveLine(ColumnData) public void RemoveLine(ColumnData line) Parameters line ColumnData SaveCustomExportDataAsync() public Task SaveCustomExportDataAsync() Returns Task"
  },
  "api/AXOpen.Data.DataExchangeViewModel.ExportSettings.html": {
    "href": "api/AXOpen.Data.DataExchangeViewModel.ExportSettings.html",
    "title": "Class DataExchangeViewModel.ExportSettings | System.Dynamic.ExpandoObject",
    "keywords": "Class DataExchangeViewModel.ExportSettings Namespace AXOpen.Data Assembly axopen_data_blazor.dll public class DataExchangeViewModel.ExportSettings Inheritance object DataExchangeViewModel.ExportSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties CustomExportData public Dictionary<string, ExportData> CustomExportData { get; set; } Property Value Dictionary<string, ExportData> ExportFileType public string ExportFileType { get; set; } Property Value string ExportMode public eExportMode ExportMode { get; set; } Property Value eExportMode FirstNumber public int FirstNumber { get; set; } Property Value int SecondNumber public int SecondNumber { get; set; } Property Value int Separator public char Separator { get; set; } Property Value char"
  },
  "api/AXOpen.Data.DataExchangeViewModel.html": {
    "href": "api/AXOpen.Data.DataExchangeViewModel.html",
    "title": "Class DataExchangeViewModel | System.Dynamic.ExpandoObject",
    "keywords": "Class DataExchangeViewModel Namespace AXOpen.Data Assembly axopen_data_blazor.dll public class DataExchangeViewModel : RenderableViewModelBase, INotifyPropertyChanged Inheritance object BindableBase RenderableViewModelBase DataExchangeViewModel Implements INotifyPropertyChanged Inherited Members BindableBase.SetProperty<T>(ref T, T, string) BindableBase.OnPropertyChanged(string) BindableBase.PropertyChanged object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors DataExchangeViewModel() public DataExchangeViewModel() Properties AlertDialogService public IAlertDialogService AlertDialogService { get; set; } Property Value IAlertDialogService Asp public AuthenticationStateProvider Asp { get; set; } Property Value AuthenticationStateProvider Changes public List<ValueChangeItem> Changes { get; set; } Property Value List<ValueChangeItem> CreateItemId public string CreateItemId { get; set; } Property Value string DataExchange public IAxoDataExchange DataExchange { get; } Property Value IAxoDataExchange ExportSet public DataExchangeViewModel.ExportSettings ExportSet { get; set; } Property Value DataExchangeViewModel.ExportSettings FilterById public string FilterById { get; set; } Property Value string FilteredCount public long FilteredCount { get; set; } Property Value long IsBusy public bool IsBusy { get; set; } Property Value bool IsFileExported public bool IsFileExported { get; set; } Property Value bool IsHashCorrect public bool IsHashCorrect { get; set; } Property Value bool Limit public int Limit { get; set; } Property Value int Model public override object Model { get; set; } Property Value object Page public int Page { get; set; } Property Value int Records public ObservableCollection<IBrowsableDataObject> Records { get; set; } Property Value ObservableCollection<IBrowsableDataObject> SearchMode public eSearchMode SearchMode { get; set; } Property Value eSearchMode SelectedRecord public IBrowsableDataObject SelectedRecord { get; set; } Property Value IBrowsableDataObject StateHasChangedDelegate public Action StateHasChangedDelegate { get; set; } Property Value Action Methods ChangeCustomExportDataValue(ChangeEventArgs, string, string) public void ChangeCustomExportDataValue(ChangeEventArgs __e, string fragmentKey, string key) Parameters __e ChangeEventArgs fragmentKey string key string ChangeCustomExportDataValue(ChangeEventArgs, string) public void ChangeCustomExportDataValue(ChangeEventArgs __e, string fragmentKey) Parameters __e ChangeEventArgs fragmentKey string Copy() public Task Copy() Returns Task CountFiltered(string, eSearchMode) public long CountFiltered(string id, eSearchMode searchMode = eSearchMode.Exact) Parameters id string searchMode eSearchMode Returns long CreateNew() public Task CreateNew() Returns Task Delete() public void Delete() Edit() public Task Edit() Returns Task ExportDataAsync(string) public Task ExportDataAsync(string path) Parameters path string Returns Task FillObservableRecordsAsync() public Task FillObservableRecordsAsync() Returns Task Filter() public Task Filter() Returns Task Filter(string, int, int, eSearchMode) public IEnumerable<IBrowsableDataObject> Filter(string identifier, int limit = 10, int skip = 0, eSearchMode searchMode = eSearchMode.Exact) Parameters identifier string limit int skip int searchMode eSearchMode Returns IEnumerable<IBrowsableDataObject> FindById(string) public IBrowsableDataObject FindById(string id) Parameters id string Returns IBrowsableDataObject GetCustomExportDataValue(string, string) public bool GetCustomExportDataValue(string fragmentKey, string key) Parameters fragmentKey string key string Returns bool GetCustomExportDataValue(string) public bool GetCustomExportDataValue(string fragmentKey) Parameters fragmentKey string Returns bool GetFragmentsExportedValue() public bool GetFragmentsExportedValue() Returns bool GetValueTags(Type) public IEnumerable<ITwinElement> GetValueTags(Type type) Parameters type Type Returns IEnumerable<ITwinElement> ImportDataAsync(string) public Task ImportDataAsync(string path) Parameters path string Returns Task InDictionary(bool) public Dictionary<string, object> InDictionary(bool check) Parameters check bool Returns Dictionary<string, object> LoadFromPlc() public Task LoadFromPlc() Returns Task RefreshFilter() public Task RefreshFilter() Returns Task SendToPlc() public Task SendToPlc() Returns Task UpdateObservableRecords() public void UpdateObservableRecords()"
  },
  "api/AXOpen.Data.ExportData.html": {
    "href": "api/AXOpen.Data.ExportData.html",
    "title": "Class ExportData | System.Dynamic.ExpandoObject",
    "keywords": "Class ExportData Namespace AXOpen.Data Assembly ix_ax_axopen_data.dll public class ExportData Inheritance object ExportData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors ExportData(bool, Dictionary<string, bool>) public ExportData(bool exported, Dictionary<string, bool> data) Parameters exported bool data Dictionary<string, bool> Properties Data public Dictionary<string, bool> Data { get; set; } Property Value Dictionary<string, bool> Exported public bool Exported { get; set; } Property Value bool"
  },
  "api/AXOpen.Data.HashHelper.html": {
    "href": "api/AXOpen.Data.HashHelper.html",
    "title": "Class HashHelper | System.Dynamic.ExpandoObject",
    "keywords": "Class HashHelper Namespace AXOpen.Data Assembly ix_ax_axopen_data.dll public static class HashHelper Inheritance object HashHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateHash(IAxoDataEntity) public static string CreateHash(IAxoDataEntity dataEntity) Parameters dataEntity IAxoDataEntity Returns string VerifyHash(IAxoDataEntity, IIdentity) public static bool VerifyHash(IAxoDataEntity dataEntity, IIdentity identity) Parameters dataEntity IAxoDataEntity identity IIdentity Returns bool"
  },
  "api/AXOpen.Data.IAxoDataEntity.html": {
    "href": "api/AXOpen.Data.IAxoDataEntity.html",
    "title": "Interface IAxoDataEntity | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoDataEntity Namespace AXOpen.Data Assembly ix_ax_axopen_data.dll public interface IAxoDataEntity Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties DataEntityId OnlinerString DataEntityId { get; } Property Value OnlinerString Hash string Hash { get; set; } Property Value string LockedBy object LockedBy { get; set; } Property Value object"
  },
  "api/AXOpen.Data.IAxoDataExchange.html": {
    "href": "api/AXOpen.Data.IAxoDataExchange.html",
    "title": "Interface IAxoDataExchange | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoDataExchange Namespace AXOpen.Data Assembly ix_ax_axopen_data.dll public interface IAxoDataExchange Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties Exporters Dictionary<string, Type> Exporters { get; } Property Value Dictionary<string, Type> RefUIData Gets data of this AxoDataExchange object for automated UI generation. ITwinObject RefUIData { get; } Property Value ITwinObject Repository Gets repository associated with this IAxoDataExchange object. IRepository? Repository { get; } Property Value IRepository VerifyHash bool VerifyHash { get; set; } Property Value bool Methods ChangeTrackerGetChanges() Gets changes from changeTracker. List<ValueChangeItem> ChangeTrackerGetChanges() Returns List<ValueChangeItem> List of ValueChangeItem that contains changes. ChangeTrackerSaveObservedChanges(IBrowsableDataObject) Saves observed changes from changeTracker to object. void ChangeTrackerSaveObservedChanges(IBrowsableDataObject plainObject) Parameters plainObject IBrowsableDataObject ChangeTrackerSetChanges() Sets changes to changeTracker. void ChangeTrackerSetChanges() ChangeTrackerStartObservingChanges(AuthenticationState) Start observing changes of the data object with changeTracker. void ChangeTrackerStartObservingChanges(AuthenticationState authenticationState) Parameters authenticationState AuthenticationState Authentication state of current logged user. ChangeTrackerStopObservingChanges() Stop observing changes of the data object with changeTracker. void ChangeTrackerStopObservingChanges() CleanUp(string) Clear directory of temporary files. public static void CleanUp(string path = \"wwwroot/Temp\") Parameters path string Path to temp file. CreateCopyCurrentShadowsAsync(string) Create new record of the current data present in the shadows of this object in the repository. Task CreateCopyCurrentShadowsAsync(string identifier) Parameters identifier string Id of the new record Returns Task CreateDataFromControllerAsync(string) Load data from controller and creates new record in the repository. Task CreateDataFromControllerAsync(string recordId) Parameters recordId string Returns Task CreateNewAsync(string) Creates new record in the repository. Task CreateNewAsync(string identifier) Parameters identifier string Id of the record. Returns Task Task CreateOrUpdate(string) Create or update record in the repository. Task CreateOrUpdate(string identifier) Parameters identifier string Id of the record. Returns Task Task Delete(string) Deletes record from the repository. Task Delete(string identifier) Parameters identifier string Id of the record. Returns Task Task ExistsAsync(string) Check if record exists in the repository. Task<bool> ExistsAsync(string identifier) Parameters identifier string Id of the record. Returns Task<bool> Task ExportData(string, Dictionary<string, ExportData>, eExportMode, int, int, string, char) Export data from the Repository associated with this IAxoDataExchange. void ExportData(string path, Dictionary<string, ExportData> customExportData = null, eExportMode exportMode = eExportMode.First, int firstNumber = 50, int secondNumber = 100, string exportFileType = \"CSV\", char separator = ';') Parameters path string Path to exported file. customExportData Dictionary<string, ExportData> exportMode eExportMode firstNumber int secondNumber int exportFileType string separator char Separator for individual records. FromRepositoryToControllerAsync(IBrowsableDataObject) Loads data from respective record of the repository into the controller. Task FromRepositoryToControllerAsync(IBrowsableDataObject entity) Parameters entity IBrowsableDataObject Entity to be loaded into the controller. Returns Task FromRepositoryToShadowsAsync(IBrowsableDataObject) Copies the data from the repository(ies) to shadows of this twin object. Task FromRepositoryToShadowsAsync(IBrowsableDataObject entity) Parameters entity IBrowsableDataObject Data entity object. Returns Task GetLockedBy() Get object which locked this repository. object? GetLockedBy() Returns object GetRecords(string, int, int, eSearchMode) Gets records meeting criteria from the Repository associated with this IAxoDataExchange IEnumerable<IBrowsableDataObject> GetRecords(string identifier, int limit, int skip, eSearchMode searchMode) Parameters identifier string Record identifier. Use of '*' will provide no filter to the query. DataEntityId limit int Limits number of entries skip int Skips number of entries. searchMode eSearchMode Set the search mode fot his query. eSearchMode Returns IEnumerable<IBrowsableDataObject> Records from the associated repository meeting criteria. GetRecords(string) Gets record meeting criteria from the Repository associated with this IAxoDataExchange where the data entity id matches exactly the argument. IEnumerable<IBrowsableDataObject> GetRecords(string identifier) Parameters identifier string Record identifier. Use of '*' will provide no filter to the query. DataEntityId Returns IEnumerable<IBrowsableDataObject> Record from the associated repository meeting criteria. ImportData(string, AuthenticationState, ITwinObject, string, char) Import data from file to the Repository associated with this IAxoDataExchange. void ImportData(string path, AuthenticationState authenticationState, ITwinObject crudDataObject = null, string exportFileType = \"CSV\", char separator = ';') Parameters path string Path to imported file. authenticationState AuthenticationState crudDataObject ITwinObject Object type of the imported records. exportFileType string separator char Separator for individual records. IsHashCorrect(IIdentity) bool IsHashCorrect(IIdentity identity) Parameters identity IIdentity Returns bool RemoteCreate(string) Provides handler for remote (controller's) request to create new data entry in the Repository associated with this IAxoDataExchange bool RemoteCreate(string identifier) Parameters identifier string Record identifier. Returns bool True when success RemoteCreateOrUpdate(string) Provides handler for remote (controller's) request to create or update data in the Repository associated with this IAxoDataExchange bool RemoteCreateOrUpdate(string identifier) Parameters identifier string Record identifier. Returns bool True when success RemoteDelete(string) Provides handler for remote (controller's) request to delete data from the Repository associated with this IAxoDataExchange bool RemoteDelete(string identifier) Parameters identifier string Record identifier. Returns bool True when success RemoteEntityExist(string) Provides handler for remote (controller's) request to check if data exists in the Repository associated with this IAxoDataExchange bool RemoteEntityExist(string identifier) Parameters identifier string Record identifier. Returns bool True when success RemoteRead(string) Provides handler for remote (controller's) request to read data from the Repository associated with this IAxoDataExchange bool RemoteRead(string identifier) Parameters identifier string Record identifier. Returns bool True when success RemoteUpdate(string) Provides handler for remote (controller's) request to update data in the Repository associated with this IAxoDataExchange bool RemoteUpdate(string identifier) Parameters identifier string Record identifier. Returns bool True when success SetLockedBy(object) Set object which locked this repository. void SetLockedBy(object by) Parameters by object UpdateFromShadowsAsync() Updates data form shadows of this object to respective record in the repository. Task UpdateFromShadowsAsync() Returns Task Task"
  },
  "api/AXOpen.Data.IAxoEntityExistTaskState.html": {
    "href": "api/AXOpen.Data.IAxoEntityExistTaskState.html",
    "title": "Interface IAxoEntityExistTaskState | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoEntityExistTaskState Namespace AXOpen.Data Assembly ix_ax_axopen_data.dll public interface IAxoEntityExistTaskState Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/AXOpen.Data.ICrudDataObject.html": {
    "href": "api/AXOpen.Data.ICrudDataObject.html",
    "title": "Interface ICrudDataObject | System.Dynamic.ExpandoObject",
    "keywords": "Interface ICrudDataObject Namespace AXOpen.Data Assembly ix_ax_axopen_data.dll public interface ICrudDataObject Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties Changes List<ValueChangeItem> Changes { get; set; } Property Value List<ValueChangeItem> ChangeTracker ValueChangeTracker ChangeTracker { get; } Property Value ValueChangeTracker DataEntityId OnlinerString DataEntityId { get; } Property Value OnlinerString"
  },
  "api/AXOpen.Data.IDataExchangeOperations.html": {
    "href": "api/AXOpen.Data.IDataExchangeOperations.html",
    "title": "Interface IDataExchangeOperations | System.Dynamic.ExpandoObject",
    "keywords": "Interface IDataExchangeOperations Namespace AXOpen.Data Assembly ix_ax_axopen_data.dll An interface which grants access to certain operations in DataExchange viewmodel, like searching by id, invoking search or filling the search box public interface IDataExchangeOperations Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties FilterByID string FilterByID { get; set; } Property Value string SelectedRecord object SelectedRecord { get; } Property Value object Methods InvokeSearch() void InvokeSearch()"
  },
  "api/AXOpen.Data.IDataExporter-2.html": {
    "href": "api/AXOpen.Data.IDataExporter-2.html",
    "title": "Interface IDataExporter<TPlain, TOnline> | System.Dynamic.ExpandoObject",
    "keywords": "Interface IDataExporter<TPlain, TOnline> Namespace AXOpen.Data Assembly ix_ax_axopen_data.dll public interface IDataExporter<TPlain, TOnline> where TPlain : IAxoDataEntity where TOnline : IAxoDataEntity Type Parameters TPlain TOnline Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Methods Export(IRepository<TPlain>, string, string, Expression<Func<TPlain, bool>>, Dictionary<string, bool>, eExportMode, int, int, char) Export data from the repository. void Export(IRepository<TPlain> dataRepository, string path, string fragmentName, Expression<Func<TPlain, bool>> expression, Dictionary<string, bool> customExportData = null, eExportMode exportMode = eExportMode.First, int firstNumber = 50, int secondNumber = 100, char separator = ';') Parameters dataRepository IRepository<TPlain> Repository for export. path string Path to exported direcotry. fragmentName string Name of the fragment. expression Expression<Func<TPlain, bool>> Expression of function for export rules. customExportData Dictionary<string, bool> exportMode eExportMode firstNumber int secondNumber int separator char Separator for individual records. GetName() Get name of the exporter. public static abstract string GetName() Returns string Name Import(IRepository<TPlain>, string, string, AuthenticationState, ITwinObject, char) Import data from file to the repository. void Import(IRepository<TPlain> dataRepository, string path, string fragmentName, AuthenticationState authenticationState, ITwinObject crudDataObject = null, char separator = ';') Parameters dataRepository IRepository<TPlain> Repository for import. path string Path to imported direcotry. fragmentName string Name of the fragment. authenticationState AuthenticationState Authentication state. crudDataObject ITwinObject Object type of the imported records. separator char Separator for individual records."
  },
  "api/AXOpen.Data.InMemory.InMemoryRepository-1.html": {
    "href": "api/AXOpen.Data.InMemory.InMemoryRepository-1.html",
    "title": "Class InMemoryRepository<T> | System.Dynamic.ExpandoObject",
    "keywords": "Class InMemoryRepository<T> Namespace AXOpen.Data.InMemory Assembly AXOpen.Data.InMemory.dll Provides in memory data repository. important The data in this repository persist only during the run of the application. public class InMemoryRepository<T> : RepositoryBase<T>, IRepository<T>, IRepository where T : IBrowsableDataObject Type Parameters T POCO twin type Inheritance object RepositoryBase<T> InMemoryRepository<T> Implements IRepository<T> IRepository Inherited Members RepositoryBase<T>.OnCreate RepositoryBase<T>.OnRead RepositoryBase<T>.OnUpdate RepositoryBase<T>.OnDelete RepositoryBase<T>.OnCreateDone RepositoryBase<T>.OnReadDone RepositoryBase<T>.OnUpdateDone RepositoryBase<T>.OnDeleteDone RepositoryBase<T>.OnCreateFailed RepositoryBase<T>.OnReadFailed RepositoryBase<T>.OnUpdateFailed RepositoryBase<T>.OnDeleteFailed RepositoryBase<T>.OnRecordUpdateValidation RepositoryBase<T>.Count RepositoryBase<T>.FilteredCount(string, eSearchMode) RepositoryBase<T>.Exists(string) RepositoryBase<T>.Create(string, T) RepositoryBase<T>.Read(string) RepositoryBase<T>.Update(string, T) RepositoryBase<T>.Delete(string) RepositoryBase<T>.GetRecords(string, int, int, eSearchMode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors InMemoryRepository() Creates new instance of InMemoryRepository<T> public InMemoryRepository() InMemoryRepository(InMemoryRepositorySettings<T>) Creates new instance of InMemoryRepository<T> public InMemoryRepository(InMemoryRepositorySettings<T> parameters) Parameters parameters InMemoryRepositorySettings<T> Repository settings Properties CountNvi protected override long CountNvi { get; } Property Value long Queryable public override IQueryable<T> Queryable { get; } Property Value IQueryable<T> Methods CreateNvi(string, T) protected override void CreateNvi(string identifier, T data) Parameters identifier string data T DeleteNvi(string) protected override void DeleteNvi(string identifier) Parameters identifier string ExistsNvi(string) protected override bool ExistsNvi(string identifier) Parameters identifier string Returns bool FilteredCountNvi(string, eSearchMode) protected override long FilteredCountNvi(string id, eSearchMode searchMode) Parameters id string searchMode eSearchMode Returns long GetRecordsNvi(string, int, int, eSearchMode) protected override IEnumerable<T> GetRecordsNvi(string identifier, int limit, int skip, eSearchMode searchMode) Parameters identifier string limit int skip int searchMode eSearchMode Returns IEnumerable<T> ReadNvi(string) protected override T ReadNvi(string identifier) Parameters identifier string Returns T UpdateNvi(string, T) protected override void UpdateNvi(string identifier, T data) Parameters identifier string data T"
  },
  "api/AXOpen.Data.InMemory.InMemoryRepositorySettings-1.html": {
    "href": "api/AXOpen.Data.InMemory.InMemoryRepositorySettings-1.html",
    "title": "Class InMemoryRepositorySettings<T> | System.Dynamic.ExpandoObject",
    "keywords": "Class InMemoryRepositorySettings<T> Namespace AXOpen.Data.InMemory Assembly AXOpen.Data.InMemory.dll Repository settings for InMemoryRepository<T>. public class InMemoryRepositorySettings<T> : RepositorySettings Type Parameters T POCO twin type Inheritance object RepositorySettings InMemoryRepositorySettings<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/AXOpen.Data.InMemory.Repository.html": {
    "href": "api/AXOpen.Data.InMemory.Repository.html",
    "title": "Class Repository | System.Dynamic.ExpandoObject",
    "keywords": "Class Repository Namespace AXOpen.Data.InMemory Assembly AXOpen.Data.InMemory.dll public static class Repository Inheritance object Repository Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Factory<T>(InMemoryRepositorySettings<T>) public static IRepository<T> Factory<T>(this InMemoryRepositorySettings<T> parameters) where T : IBrowsableDataObject Parameters parameters InMemoryRepositorySettings<T> Returns IRepository<T> Type Parameters T"
  },
  "api/AXOpen.Data.InMemory.SameObjectReferenceException.html": {
    "href": "api/AXOpen.Data.InMemory.SameObjectReferenceException.html",
    "title": "Class SameObjectReferenceException | System.Dynamic.ExpandoObject",
    "keywords": "Class SameObjectReferenceException Namespace AXOpen.Data.InMemory Assembly AXOpen.Data.InMemory.dll public class SameObjectReferenceException : Exception, ISerializable Inheritance object Exception SameObjectReferenceException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors SameObjectReferenceException() public SameObjectReferenceException() SameObjectReferenceException(SerializationInfo, StreamingContext) protected SameObjectReferenceException(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo context StreamingContext SameObjectReferenceException(string, Exception) public SameObjectReferenceException(string message, Exception innerException) Parameters message string innerException Exception SameObjectReferenceException(string) public SameObjectReferenceException(string message) Parameters message string"
  },
  "api/AXOpen.Data.InMemory.html": {
    "href": "api/AXOpen.Data.InMemory.html",
    "title": "Namespace AXOpen.Data.InMemory | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen.Data.InMemory Classes InMemoryRepository<T> Provides in memory data repository. important The data in this repository persist only during the run of the application. InMemoryRepositorySettings<T> Repository settings for InMemoryRepository<T>. Repository SameObjectReferenceException"
  },
  "api/AXOpen.Data.Interfaces.IDataViewModel.html": {
    "href": "api/AXOpen.Data.Interfaces.IDataViewModel.html",
    "title": "Interface IDataViewModel | System.Dynamic.ExpandoObject",
    "keywords": "Interface IDataViewModel Namespace AXOpen.Data.Interfaces Assembly axopen_data_blazor.dll public interface IDataViewModel Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties CreateItemId string CreateItemId { get; set; } Property Value string FilterById string FilterById { get; set; } Property Value string FilteredCount long FilteredCount { get; set; } Property Value long IsBusy bool IsBusy { get; set; } Property Value bool Limit int Limit { get; set; } Property Value int Page int Page { get; set; } Property Value int Records ObservableCollection<IBrowsableDataObject> Records { get; set; } Property Value ObservableCollection<IBrowsableDataObject> SearchMode eSearchMode SearchMode { get; set; } Property Value eSearchMode SelectedRecord IBrowsableDataObject SelectedRecord { get; set; } Property Value IBrowsableDataObject Methods Copy() Task Copy() Returns Task CreateNew() Task CreateNew() Returns Task Delete() void Delete() Edit() Task Edit() Returns Task ExportData() void ExportData() FillObservableRecordsAsync() Task FillObservableRecordsAsync() Returns Task Filter() Task Filter() Returns Task ImportData() void ImportData() LoadFromPlc() Task LoadFromPlc() Returns Task RefreshFilter() Task RefreshFilter() Returns Task SendToPlc() Task SendToPlc() Returns Task Events PropertyChanged event PropertyChangedEventHandler? PropertyChanged Event Type PropertyChangedEventHandler"
  },
  "api/AXOpen.Data.Interfaces.html": {
    "href": "api/AXOpen.Data.Interfaces.html",
    "title": "Namespace AXOpen.Data.Interfaces | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen.Data.Interfaces Interfaces IDataViewModel"
  },
  "api/AXOpen.Data.Json.JsonRepository-1.html": {
    "href": "api/AXOpen.Data.Json.JsonRepository-1.html",
    "title": "Class JsonRepository<T> | System.Dynamic.ExpandoObject",
    "keywords": "Class JsonRepository<T> Namespace AXOpen.Data.Json Assembly AXOpen.Data.Json.dll Provides repository for storing data in files with Json format. warning This repository type is not suitable for large data collections. Use this repository for settings, recipes or data persistence with limited number of records. public class JsonRepository<T> : RepositoryBase<T>, IRepository<T>, IRepository where T : IBrowsableDataObject Type Parameters T POCO twin type Inheritance object RepositoryBase<T> JsonRepository<T> Implements IRepository<T> IRepository Inherited Members RepositoryBase<T>.OnCreate RepositoryBase<T>.OnRead RepositoryBase<T>.OnUpdate RepositoryBase<T>.OnDelete RepositoryBase<T>.OnCreateDone RepositoryBase<T>.OnReadDone RepositoryBase<T>.OnUpdateDone RepositoryBase<T>.OnDeleteDone RepositoryBase<T>.OnCreateFailed RepositoryBase<T>.OnReadFailed RepositoryBase<T>.OnUpdateFailed RepositoryBase<T>.OnDeleteFailed RepositoryBase<T>.OnRecordUpdateValidation RepositoryBase<T>.Count RepositoryBase<T>.FilteredCount(string, eSearchMode) RepositoryBase<T>.Exists(string) RepositoryBase<T>.Create(string, T) RepositoryBase<T>.Read(string) RepositoryBase<T>.Update(string, T) RepositoryBase<T>.Delete(string) RepositoryBase<T>.GetRecords(string, int, int, eSearchMode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors JsonRepository(JsonRepositorySettings<T>) Creates new instance of JsonRepository<T> public JsonRepository(JsonRepositorySettings<T> parameters) Parameters parameters JsonRepositorySettings<T> Repository parameters Properties CountNvi protected override long CountNvi { get; } Property Value long Location Get the location (directory) where the entries of this repository are placed. public string Location { get; } Property Value string Queryable public override IQueryable<T> Queryable { get; } Property Value IQueryable<T> Methods CreateNvi(string, T) protected override void CreateNvi(string identifier, T data) Parameters identifier string data T DeleteNvi(string) protected override void DeleteNvi(string identifier) Parameters identifier string ExistsNvi(string) protected override bool ExistsNvi(string identifier) Parameters identifier string Returns bool FilteredCountNvi(string, eSearchMode) protected override long FilteredCountNvi(string id, eSearchMode searchMode) Parameters id string searchMode eSearchMode Returns long GetRecordsNvi(string, int, int, eSearchMode) protected override IEnumerable<T> GetRecordsNvi(string identifier, int limit, int skip, eSearchMode searchMode) Parameters identifier string limit int skip int searchMode eSearchMode Returns IEnumerable<T> ReadNvi(string) protected override T ReadNvi(string identifier) Parameters identifier string Returns T UpdateNvi(string, T) protected override void UpdateNvi(string identifier, T data) Parameters identifier string data T"
  },
  "api/AXOpen.Data.Json.JsonRepositorySettings-1.html": {
    "href": "api/AXOpen.Data.Json.JsonRepositorySettings-1.html",
    "title": "Class JsonRepositorySettings<T> | System.Dynamic.ExpandoObject",
    "keywords": "Class JsonRepositorySettings<T> Namespace AXOpen.Data.Json Assembly AXOpen.Data.Json.dll Provides JsonRepository<T> parameter public class JsonRepositorySettings<T> : RepositorySettings Type Parameters T POCO twin type Inheritance object RepositorySettings JsonRepositorySettings<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors JsonRepositorySettings(string) Creates new instance of JsonRepositorySettings<T> public JsonRepositorySettings(string repositoryLocation) Parameters repositoryLocation string Location for the Json files Properties Location Gets location of Json file of the respective repository. public string Location { get; } Property Value string"
  },
  "api/AXOpen.Data.Json.html": {
    "href": "api/AXOpen.Data.Json.html",
    "title": "Namespace AXOpen.Data.Json | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen.Data.Json Classes JsonRepository<T> Provides repository for storing data in files with Json format. warning This repository type is not suitable for large data collections. Use this repository for settings, recipes or data persistence with limited number of records. JsonRepositorySettings<T> Provides JsonRepository<T> parameter"
  },
  "api/AXOpen.Data.MongoDb.FloatTruncationSerializer.html": {
    "href": "api/AXOpen.Data.MongoDb.FloatTruncationSerializer.html",
    "title": "Class FloatTruncationSerializer | System.Dynamic.ExpandoObject",
    "keywords": "Class FloatTruncationSerializer Namespace AXOpen.Data.MongoDb Assembly AXOpen.Data.MongoDb.dll Writes the float value to mongo as double as reads it back as float. public class FloatTruncationSerializer : SerializerBase<float>, IBsonSerializer<float>, IBsonSerializer Inheritance object SerializerBase<float> FloatTruncationSerializer Implements IBsonSerializer<float> IBsonSerializer Inherited Members SerializerBase<float>.CreateCannotBeDeserializedException() SerializerBase<float>.CreateCannotBeSerializedException() SerializerBase<float>.CreateCannotDeserializeFromBsonTypeException(BsonType) SerializerBase<float>.EnsureBsonTypeEquals(IBsonReader, BsonType) SerializerBase<float>.ValueType object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Methods Deserialize(BsonDeserializationContext, BsonDeserializationArgs) public override float Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args) Parameters context BsonDeserializationContext args BsonDeserializationArgs Returns float Serialize(BsonSerializationContext, BsonSerializationArgs, float) public override void Serialize(BsonSerializationContext context, BsonSerializationArgs args, float value) Parameters context BsonSerializationContext args BsonSerializationArgs value float"
  },
  "api/AXOpen.Data.MongoDb.MongoDbCredentials.html": {
    "href": "api/AXOpen.Data.MongoDb.MongoDbCredentials.html",
    "title": "Class MongoDbCredentials | System.Dynamic.ExpandoObject",
    "keywords": "Class MongoDbCredentials Namespace AXOpen.Data.MongoDb Assembly AXOpen.Data.MongoDb.dll public class MongoDbCredentials Inheritance object MongoDbCredentials Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors MongoDbCredentials(string, string, string) public MongoDbCredentials(string usersDatabase, string user, string password) Parameters usersDatabase string user string password string Properties Password public string Password { get; } Property Value string Username public string Username { get; } Property Value string UsersDatabase public string UsersDatabase { get; } Property Value string"
  },
  "api/AXOpen.Data.MongoDb.MongoDbRepository-1.html": {
    "href": "api/AXOpen.Data.MongoDb.MongoDbRepository-1.html",
    "title": "Class MongoDbRepository<T> | System.Dynamic.ExpandoObject",
    "keywords": "Class MongoDbRepository<T> Namespace AXOpen.Data.MongoDb Assembly AXOpen.Data.MongoDb.dll Provides access to basic operations for MongoDB. To use this code, mongo database must run somewhere. To start MongoDB locally you can use following code Start MongoDB without authentication \"C:\\Program Files\\MongoDB\\Server\\4.4\\bin\\mongod.exe\" --dbpath C:\\DATA\\DB446\\ Start MongoDB with authentication. You don't have to use the \"--port\" attribute or use a different \"--dbpath\". The only reason why would you want to run authenticated database on a different dbpath and port simultaneously is if they're running on the same machine. More info about the use credentials MongoDbCredentials \"C:\\Program Files\\MongoDB\\Server\\4.4\\bin\\mongod.exe\" --dbpath C:\\DATA\\DB446_AUTH\\ --auth --port 27018 public class MongoDbRepository<T> : RepositoryBase<T>, IRepository<T>, IRepository where T : IBrowsableDataObject Type Parameters T Inheritance object RepositoryBase<T> MongoDbRepository<T> Implements IRepository<T> IRepository Inherited Members RepositoryBase<T>.OnCreate RepositoryBase<T>.OnRead RepositoryBase<T>.OnUpdate RepositoryBase<T>.OnDelete RepositoryBase<T>.OnCreateDone RepositoryBase<T>.OnReadDone RepositoryBase<T>.OnUpdateDone RepositoryBase<T>.OnDeleteDone RepositoryBase<T>.OnCreateFailed RepositoryBase<T>.OnReadFailed RepositoryBase<T>.OnUpdateFailed RepositoryBase<T>.OnDeleteFailed RepositoryBase<T>.OnRecordUpdateValidation RepositoryBase<T>.Count RepositoryBase<T>.FilteredCount(string, eSearchMode) RepositoryBase<T>.Exists(string) RepositoryBase<T>.Create(string, T) RepositoryBase<T>.Read(string) RepositoryBase<T>.Update(string, T) RepositoryBase<T>.Delete(string) RepositoryBase<T>.GetRecords(string, int, int, eSearchMode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors MongoDbRepository(MongoDbRepositorySettings<T>) Creates new instance of MongoDbRepository<T>. public MongoDbRepository(MongoDbRepositorySettings<T> parameters) Parameters parameters MongoDbRepositorySettings<T> Repository settings Properties Collection Gets the MongoDB.Driver.IMongoCollection<TDocument> of this repository. public IMongoCollection<T> Collection { get; } Property Value IMongoCollection<T> CountNvi protected override long CountNvi { get; } Property Value long Queryable public override IQueryable<T> Queryable { get; } Property Value IQueryable<T> Methods CreateNvi(string, T) protected override void CreateNvi(string identifier, T data) Parameters identifier string data T DeleteNvi(string) protected override void DeleteNvi(string identifier) Parameters identifier string ExistsNvi(string) protected override bool ExistsNvi(string identifier) Parameters identifier string Returns bool FilteredCountNvi(string, eSearchMode) protected override long FilteredCountNvi(string id, eSearchMode searchMode) Parameters id string searchMode eSearchMode Returns long GetRecordsNvi(string, int, int, eSearchMode) protected override IEnumerable<T> GetRecordsNvi(string identifier, int limit, int skip, eSearchMode searchMode) Parameters identifier string limit int skip int searchMode eSearchMode Returns IEnumerable<T> ReadNvi(string) protected override T ReadNvi(string identifier) Parameters identifier string Returns T UpdateNvi(string, T) protected override void UpdateNvi(string identifier, T data) Parameters identifier string data T"
  },
  "api/AXOpen.Data.MongoDb.MongoDbRepositorySettings-1.html": {
    "href": "api/AXOpen.Data.MongoDb.MongoDbRepositorySettings-1.html",
    "title": "Class MongoDbRepositorySettings<T> | System.Dynamic.ExpandoObject",
    "keywords": "Class MongoDbRepositorySettings<T> Namespace AXOpen.Data.MongoDb Assembly AXOpen.Data.MongoDb.dll public class MongoDbRepositorySettings<T> : RepositorySettings where T : IBrowsableDataObject Type Parameters T Inheritance object RepositorySettings MongoDbRepositorySettings<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors MongoDbRepositorySettings(string, string, string, MongoDbCredentials) Creates new instance of MongoDbRepositorySettings<T> for a MongoDbRepository<T> with secured access. public MongoDbRepositorySettings(string connectionString, string databaseName, string collectionName, MongoDbCredentials credentials) Parameters connectionString string Database connection string databaseName string Database name collectionName string Collection name credentials MongoDbCredentials Credentials MongoDbRepositorySettings(string, string, string) Creates new instance of MongoDbRepositorySettings<T> for a MongoDbRepository<T> with NON-SECURED access. public MongoDbRepositorySettings(string connectionString, string databaseName, string collectionName) Parameters connectionString string Database connection string databaseName string Database name collectionName string Collection name Properties Client public IMongoClient Client { get; } Property Value IMongoClient Collection public IMongoCollection<T> Collection { get; } Property Value IMongoCollection<T> Database public IMongoDatabase Database { get; } Property Value IMongoDatabase Methods GetConnectionInfo() public string GetConnectionInfo() Returns string WaitForMongoServerAvailability() public void WaitForMongoServerAvailability()"
  },
  "api/AXOpen.Data.MongoDb.Repository.html": {
    "href": "api/AXOpen.Data.MongoDb.Repository.html",
    "title": "Class Repository | System.Dynamic.ExpandoObject",
    "keywords": "Class Repository Namespace AXOpen.Data.MongoDb Assembly AXOpen.Data.MongoDb.dll public static class Repository Inheritance object Repository Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Factory<T>(MongoDbRepositorySettings<T>) public static IRepository<T> Factory<T>(MongoDbRepositorySettings<T> parameters) where T : IBrowsableDataObject Parameters parameters MongoDbRepositorySettings<T> Returns IRepository<T> Type Parameters T"
  },
  "api/AXOpen.Data.MongoDb.html": {
    "href": "api/AXOpen.Data.MongoDb.html",
    "title": "Namespace AXOpen.Data.MongoDb | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen.Data.MongoDb Classes FloatTruncationSerializer Writes the float value to mongo as double as reads it back as float. MongoDbCredentials MongoDbRepository<T> Provides access to basic operations for MongoDB. To use this code, mongo database must run somewhere. To start MongoDB locally you can use following code Start MongoDB without authentication \"C:\\Program Files\\MongoDB\\Server\\4.4\\bin\\mongod.exe\" --dbpath C:\\DATA\\DB446\\ Start MongoDB with authentication. You don't have to use the \"--port\" attribute or use a different \"--dbpath\". The only reason why would you want to run authenticated database on a different dbpath and port simultaneously is if they're running on the same machine. More info about the use credentials MongoDbCredentials \"C:\\Program Files\\MongoDB\\Server\\4.4\\bin\\mongod.exe\" --dbpath C:\\DATA\\DB446_AUTH\\ --auth --port 27018 MongoDbRepositorySettings<T> Repository"
  },
  "api/AXOpen.Data.MultipleDataEntityAttributeException.html": {
    "href": "api/AXOpen.Data.MultipleDataEntityAttributeException.html",
    "title": "Class MultipleDataEntityAttributeException | System.Dynamic.ExpandoObject",
    "keywords": "Class MultipleDataEntityAttributeException Namespace AXOpen.Data Assembly ix_ax_axopen_data.dll public class MultipleDataEntityAttributeException : Exception, ISerializable Inheritance object Exception MultipleDataEntityAttributeException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors MultipleDataEntityAttributeException() public MultipleDataEntityAttributeException() MultipleDataEntityAttributeException(string) public MultipleDataEntityAttributeException(string message) Parameters message string"
  },
  "api/AXOpen.Data.MultipleRemoteCallInitializationException.html": {
    "href": "api/AXOpen.Data.MultipleRemoteCallInitializationException.html",
    "title": "Class MultipleRemoteCallInitializationException | System.Dynamic.ExpandoObject",
    "keywords": "Class MultipleRemoteCallInitializationException Namespace AXOpen.Data Assembly ix_ax_axopen_data.dll public class MultipleRemoteCallInitializationException : Exception, ISerializable Inheritance object Exception MultipleRemoteCallInitializationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors MultipleRemoteCallInitializationException() public MultipleRemoteCallInitializationException() MultipleRemoteCallInitializationException(SerializationInfo, StreamingContext) Initializes a new instance of the MultipleRemoteCallInitializationException class with serialized data. protected MultipleRemoteCallInitializationException(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. context StreamingContext The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. Exceptions System.ArgumentNullException The info parameter is null. System.Runtime.Serialization.SerializationException The class name is null or System.Exception.HResult is zero (0). MultipleRemoteCallInitializationException(string, Exception) Initializes a new instance of the MultipleRemoteCallInitializationException class with a specified error message and a reference to the inner exception that is the cause of this exception. public MultipleRemoteCallInitializationException(string message, Exception innerException) Parameters message string The error message that explains the reason for the exception. innerException Exception The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. MultipleRemoteCallInitializationException(string) Initializes a new instance of the MultipleRemoteCallInitializationException class with a specified error message. public MultipleRemoteCallInitializationException(string message) Parameters message string The message that describes the error."
  },
  "api/AXOpen.Data.RavenDb.RavenDbRepository-1.html": {
    "href": "api/AXOpen.Data.RavenDb.RavenDbRepository-1.html",
    "title": "Class RavenDbRepository<T> | System.Dynamic.ExpandoObject",
    "keywords": "Class RavenDbRepository<T> Namespace AXOpen.Data.RavenDb Assembly AXOpen.Data.RavenDb.dll public class RavenDbRepository<T> : RepositoryBase<T>, IRepository<T>, IRepository where T : IBrowsableDataObject Type Parameters T Inheritance object RepositoryBase<T> RavenDbRepository<T> Implements IRepository<T> IRepository Inherited Members RepositoryBase<T>.OnCreate RepositoryBase<T>.OnRead RepositoryBase<T>.OnUpdate RepositoryBase<T>.OnDelete RepositoryBase<T>.OnCreateDone RepositoryBase<T>.OnReadDone RepositoryBase<T>.OnUpdateDone RepositoryBase<T>.OnDeleteDone RepositoryBase<T>.OnCreateFailed RepositoryBase<T>.OnReadFailed RepositoryBase<T>.OnUpdateFailed RepositoryBase<T>.OnDeleteFailed RepositoryBase<T>.OnRecordUpdateValidation RepositoryBase<T>.Count RepositoryBase<T>.FilteredCount(string, eSearchMode) RepositoryBase<T>.Exists(string) RepositoryBase<T>.Create(string, T) RepositoryBase<T>.Read(string) RepositoryBase<T>.Update(string, T) RepositoryBase<T>.Delete(string) RepositoryBase<T>.GetRecords(string, int, int, eSearchMode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors RavenDbRepository(RavenDbRepositorySettingsBase<T>) public RavenDbRepository(RavenDbRepositorySettingsBase<T> parameters) Parameters parameters RavenDbRepositorySettingsBase<T> Properties CountNvi protected override long CountNvi { get; } Property Value long Queryable public override IQueryable<T> Queryable { get; } Property Value IQueryable<T> Methods CreateNvi(string, T) protected override void CreateNvi(string identifier, T data) Parameters identifier string data T DeleteNvi(string) protected override void DeleteNvi(string identifier) Parameters identifier string EnsureDatabaseExists(IDocumentStore, string, bool) protected void EnsureDatabaseExists(IDocumentStore store, string database = null, bool createDatabaseIfNotExists = true) Parameters store IDocumentStore database string createDatabaseIfNotExists bool ExistsNvi(string) protected override bool ExistsNvi(string identifier) Parameters identifier string Returns bool FilteredCountNvi(string, eSearchMode) protected override long FilteredCountNvi(string identifier, eSearchMode searchMode) Parameters identifier string searchMode eSearchMode Returns long GetRecordsNvi(string, int, int, eSearchMode) protected override IEnumerable<T> GetRecordsNvi(string identifier, int limit, int skip, eSearchMode searchMode) Parameters identifier string limit int skip int searchMode eSearchMode Returns IEnumerable<T> ReadNvi(string) protected override T ReadNvi(string identifier) Parameters identifier string Returns T UpdateNvi(string, T) protected override void UpdateNvi(string identifier, T data) Parameters identifier string data T"
  },
  "api/AXOpen.Data.RavenDb.RavenDbRepositorySettings-1.html": {
    "href": "api/AXOpen.Data.RavenDb.RavenDbRepositorySettings-1.html",
    "title": "Class RavenDbRepositorySettings<T> | System.Dynamic.ExpandoObject",
    "keywords": "Class RavenDbRepositorySettings<T> Namespace AXOpen.Data.RavenDb Assembly AXOpen.Data.RavenDb.dll public class RavenDbRepositorySettings<T> : RavenDbRepositorySettingsBase<T> where T : IBrowsableDataObject Type Parameters T Inheritance object RepositorySettings RavenDbRepositorySettingsBase<T> RavenDbRepositorySettings<T> Inherited Members RavenDbRepositorySettingsBase<T>.Store object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors RavenDbRepositorySettings(string[], string, string, string) public RavenDbRepositorySettings(string[] urls, string databaseName, string certPath, string certPass) Parameters urls string[] databaseName string certPath string certPass string"
  },
  "api/AXOpen.Data.RavenDb.RavenDbRepositorySettingsBase-1.html": {
    "href": "api/AXOpen.Data.RavenDb.RavenDbRepositorySettingsBase-1.html",
    "title": "Class RavenDbRepositorySettingsBase<T> | System.Dynamic.ExpandoObject",
    "keywords": "Class RavenDbRepositorySettingsBase<T> Namespace AXOpen.Data.RavenDb Assembly AXOpen.Data.RavenDb.dll public class RavenDbRepositorySettingsBase<T> : RepositorySettings where T : IBrowsableDataObject Type Parameters T Inheritance object RepositorySettings RavenDbRepositorySettingsBase<T> Derived RavenDbRepositorySettings<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties Store public IDocumentStore Store { get; set; } Property Value IDocumentStore"
  },
  "api/AXOpen.Data.RavenDb.SharedData.html": {
    "href": "api/AXOpen.Data.RavenDb.SharedData.html",
    "title": "Class SharedData | System.Dynamic.ExpandoObject",
    "keywords": "Class SharedData Namespace AXOpen.Data.RavenDb Assembly AXOpen.Data.RavenDb.dll public static class SharedData Inheritance object SharedData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Stores public static readonly List<IDocumentStore> Stores Field Value List<IDocumentStore>"
  },
  "api/AXOpen.Data.RavenDb.html": {
    "href": "api/AXOpen.Data.RavenDb.html",
    "title": "Namespace AXOpen.Data.RavenDb | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen.Data.RavenDb Classes RavenDbRepository<T> RavenDbRepositorySettings<T> RavenDbRepositorySettingsBase<T> SharedData"
  },
  "api/AXOpen.Data.TXTDataExporter-2.html": {
    "href": "api/AXOpen.Data.TXTDataExporter-2.html",
    "title": "Class TXTDataExporter<TPlain, TOnline> | System.Dynamic.ExpandoObject",
    "keywords": "Class TXTDataExporter<TPlain, TOnline> Namespace AXOpen.Data Assembly ix_ax_axopen_data.dll public class TXTDataExporter<TPlain, TOnline> : BaseDataExporter<TPlain, TOnline>, IDataExporter<TPlain, TOnline> where TPlain : IAxoDataEntity, new() where TOnline : IAxoDataEntity Type Parameters TPlain TOnline Inheritance object BaseDataExporter<TPlain, TOnline> TXTDataExporter<TPlain, TOnline> Implements IDataExporter<TPlain, TOnline> Inherited Members BaseDataExporter<TPlain, TOnline>.BaseExport(IRepository<TPlain>, Expression<Func<TPlain, bool>>, Dictionary<string, bool>, eExportMode, int, int, char) BaseDataExporter<TPlain, TOnline>.BaseImport(IRepository<TPlain>, List<string>, AuthenticationState, ITwinObject, char) BaseDataExporter<TPlain, TOnline>.UpdateDocument(IRepository<TPlain>, List<BaseDataExporter<TPlain, TOnline>.ImportItems>, IEnumerable<ITwinPrimitive>, ITwinObject, AuthenticationState, char) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors TXTDataExporter() public TXTDataExporter() Methods Export(IRepository<TPlain>, string, string, Expression<Func<TPlain, bool>>, Dictionary<string, bool>, eExportMode, int, int, char) public void Export(IRepository<TPlain> dataRepository, string path, string fragmentName, Expression<Func<TPlain, bool>> expression, Dictionary<string, bool> customExportData = null, eExportMode exportMode = eExportMode.First, int firstNumber = 50, int secondNumber = 100, char separator = ';') Parameters dataRepository IRepository<TPlain> path string fragmentName string expression Expression<Func<TPlain, bool>> customExportData Dictionary<string, bool> exportMode eExportMode firstNumber int secondNumber int separator char GetName() public static string GetName() Returns string Import(IRepository<TPlain>, string, string, AuthenticationState, ITwinObject, char) public void Import(IRepository<TPlain> dataRepository, string path, string fragmentName, AuthenticationState authenticationState, ITwinObject crudDataObject = null, char separator = ';') Parameters dataRepository IRepository<TPlain> path string fragmentName string authenticationState AuthenticationState crudDataObject ITwinObject separator char"
  },
  "api/AXOpen.Data.ValueChangeItem.html": {
    "href": "api/AXOpen.Data.ValueChangeItem.html",
    "title": "Class ValueChangeItem | System.Dynamic.ExpandoObject",
    "keywords": "Class ValueChangeItem Namespace AXOpen.Data Assembly ix_ax_axopen_data.dll public class ValueChangeItem Inheritance object ValueChangeItem Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties DateTime public DateTime DateTime { get; set; } Property Value DateTime NewValue public object NewValue { get; set; } Property Value object OldValue public object OldValue { get; set; } Property Value object UserName public string UserName { get; set; } Property Value string ValueTag public ValueItemDescriptor ValueTag { get; set; } Property Value ValueItemDescriptor"
  },
  "api/AXOpen.Data.ValueChangeTracker.html": {
    "href": "api/AXOpen.Data.ValueChangeTracker.html",
    "title": "Class ValueChangeTracker | System.Dynamic.ExpandoObject",
    "keywords": "Class ValueChangeTracker Namespace AXOpen.Data Assembly ix_ax_axopen_data.dll public class ValueChangeTracker Inheritance object ValueChangeTracker Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors ValueChangeTracker(ICrudDataObject) public ValueChangeTracker(ICrudDataObject dataObject) Parameters dataObject ICrudDataObject Methods Import(IBrowsableDataObject) public void Import(IBrowsableDataObject plainObject) Parameters plainObject IBrowsableDataObject SaveObservedChanges(IBrowsableDataObject) public void SaveObservedChanges(IBrowsableDataObject plainObject) Parameters plainObject IBrowsableDataObject StartObservingChanges(AuthenticationState) public void StartObservingChanges(AuthenticationState authenticationState) Parameters authenticationState AuthenticationState StopObservingChanges() public void StopObservingChanges()"
  },
  "api/AXOpen.Data.ValueItemDescriptor.html": {
    "href": "api/AXOpen.Data.ValueItemDescriptor.html",
    "title": "Class ValueItemDescriptor | System.Dynamic.ExpandoObject",
    "keywords": "Class ValueItemDescriptor Namespace AXOpen.Data Assembly ix_ax_axopen_data.dll public class ValueItemDescriptor Inheritance object ValueItemDescriptor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors ValueItemDescriptor() public ValueItemDescriptor() ValueItemDescriptor(ITwinPrimitive) public ValueItemDescriptor(ITwinPrimitive valueTag) Parameters valueTag ITwinPrimitive Properties HumanReadable public string HumanReadable { get; set; } Property Value string Symbol public string Symbol { get; set; } Property Value string"
  },
  "api/AXOpen.Data.WrongTypeOfDataObjectException.html": {
    "href": "api/AXOpen.Data.WrongTypeOfDataObjectException.html",
    "title": "Class WrongTypeOfDataObjectException | System.Dynamic.ExpandoObject",
    "keywords": "Class WrongTypeOfDataObjectException Namespace AXOpen.Data Assembly axopen_data_blazor.dll public class WrongTypeOfDataObjectException : Exception, ISerializable Inheritance object Exception WrongTypeOfDataObjectException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors WrongTypeOfDataObjectException(string) public WrongTypeOfDataObjectException(string message) Parameters message string"
  },
  "api/AXOpen.Data.eCrudOperation.html": {
    "href": "api/AXOpen.Data.eCrudOperation.html",
    "title": "Enum eCrudOperation | System.Dynamic.ExpandoObject",
    "keywords": "Enum eCrudOperation Namespace AXOpen.Data Assembly ix_ax_axopen_data.dll public enum eCrudOperation Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Fields Create = 0 CreateOrUpdate = 4 Delete = 3 EntityExist = 5 Read = 1 Update = 2"
  },
  "api/AXOpen.Data.eExportMode.html": {
    "href": "api/AXOpen.Data.eExportMode.html",
    "title": "Enum eExportMode | System.Dynamic.ExpandoObject",
    "keywords": "Enum eExportMode Namespace AXOpen.Data Assembly ix_ax_axopen_data.dll public enum eExportMode Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Fields Exact = 2 First = 0 Last = 1"
  },
  "api/AXOpen.Data.html": {
    "href": "api/AXOpen.Data.html",
    "title": "Namespace AXOpen.Data | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen.Data Classes AxoCompoundRepository AxoDataCrudTask AxoDataEntity AxoDataEntityAttribute AxoDataEntityAttributeNotFoundException AxoDataExchange<TOnline, TPlain> Provides mechanism for structured data exchange between the controller and an arbitrary repository. AxoDataExchangeBase AxoDataExchangeTask AxoDataFragmentAttribute AxoDataFragmentExchange AxoDataVerifyHashAttribute AxoFragmentedDataCompound BaseDataExporter<TPlain, TOnline> BaseDataExporter<TPlain, TOnline>.ImportItems ColumnData CSVDataExporter<TPlain, TOnline> DataExchangeView DataExchangeViewModel DataExchangeViewModel.ExportSettings ExportData HashHelper MultipleDataEntityAttributeException MultipleRemoteCallInitializationException TXTDataExporter<TPlain, TOnline> ValueChangeItem ValueChangeTracker ValueItemDescriptor WrongTypeOfDataObjectException Interfaces IAxoDataEntity IAxoDataExchange IAxoEntityExistTaskState ICrudDataObject IDataExchangeOperations An interface which grants access to certain operations in DataExchange viewmodel, like searching by id, invoking search or filling the search box IDataExporter<TPlain, TOnline> Enums eCrudOperation eExportMode"
  },
  "api/AXOpen.Elements.AxoAi.html": {
    "href": "api/AXOpen.Elements.AxoAi.html",
    "title": "Class AxoAi | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoAi Namespace AXOpen.Elements Assembly ix_ax_axopen_components_elements.dll public class AxoAi : AxoComponent, ITwinIdentity, ITwinObject, ITwinElement, IAxoObject, IAxoComponent Inheritance object AxoObject AxoComponent AxoAi Implements ITwinIdentity ITwinObject ITwinElement IAxoObject IAxoComponent Inherited Members AxoComponent._isManuallyControllable AxoComponent.OnlineToPlainAsync(AxoComponent) AxoComponent.PlainToOnlineAsync(AxoComponent) AxoComponent.ShadowToPlainAsync(AxoComponent) AxoComponent.PlainToShadowAsync(AxoComponent) AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoAi(ITwinObject, string, string) public AxoAi(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties _config [Container(Layout.Wrap)] [ComponentDetails(\"Config\")] public AxoAiConfig _config { get; } Property Value AxoAiConfig _messengerDivisionByZero public AxoMessenger _messengerDivisionByZero { get; } Property Value AxoMessenger _messengerGainNotDefined public AxoMessenger _messengerGainNotDefined { get; } Property Value AxoMessenger _messengerOutOfBoundaries public AxoMessenger _messengerOutOfBoundaries { get; } Property Value AxoMessenger _rawRange [Container(Layout.Wrap)] public OnlinerReal _rawRange { get; } Property Value OnlinerReal _realRange public OnlinerReal _realRange { get; } Property Value OnlinerReal _scaled public OnlinerReal _scaled { get; } Property Value OnlinerReal _status [ComponentHeader] [Container(Layout.Wrap)] [Group(GroupLayout.GroupBox)] [ReadOnly] public AxoAiStatus _status { get; } Property Value AxoAiStatus Methods CreateEmptyPoco() public AxoAi CreateEmptyPoco() Returns AxoAi OnlineToPlain<T>() public override Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoAi> OnlineToPlainAsync() Returns Task<AxoAi> OnlineToPlainAsync(AxoAi) protected Task<AxoAi> OnlineToPlainAsync(AxoAi plain) Parameters plain AxoAi Returns Task<AxoAi> PlainToOnline<T>(T) public override Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoAi) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoAi plain) Parameters plain AxoAi Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public override Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoAi) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoAi plain) Parameters plain AxoAi Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public override Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoAi> ShadowToPlainAsync() Returns Task<AxoAi> ShadowToPlainAsync(AxoAi) protected Task<AxoAi> ShadowToPlainAsync(AxoAi plain) Parameters plain AxoAi Returns Task<AxoAi>"
  },
  "api/AXOpen.Elements.AxoAiConfig.html": {
    "href": "api/AXOpen.Elements.AxoAiConfig.html",
    "title": "Class AxoAiConfig | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoAiConfig Namespace AXOpen.Elements Assembly ix_ax_axopen_components_elements.dll public class AxoAiConfig : ITwinObject, ITwinElement Inheritance object AxoAiConfig Implements ITwinObject ITwinElement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoAiConfig(ITwinObject, string, string) public AxoAiConfig(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties AttributeName public string AttributeName { get; set; } Property Value string Connector protected Connector Connector { get; } Property Value Connector Gain public OnlinerReal Gain { get; } Property Value OnlinerReal HumanReadable public string HumanReadable { get; set; } Property Value string Interpreter public Translator Interpreter { get; } Property Value Translator Offset public OnlinerReal Offset { get; } Property Value OnlinerReal Parent protected ITwinObject Parent { get; set; } Property Value ITwinObject RawHigh public OnlinerDInt RawHigh { get; } Property Value OnlinerDInt RawLow public OnlinerDInt RawLow { get; } Property Value OnlinerDInt RealHigh public OnlinerReal RealHigh { get; } Property Value OnlinerReal RealLow public OnlinerReal RealLow { get; } Property Value OnlinerReal Symbol public string Symbol { get; protected set; } Property Value string SymbolTail protected string SymbolTail { get; set; } Property Value string Methods AddChild(ITwinObject) public void AddChild(ITwinObject twinObject) Parameters twinObject ITwinObject AddKid(ITwinElement) public void AddKid(ITwinElement kid) Parameters kid ITwinElement AddValueTag(ITwinPrimitive) public void AddValueTag(ITwinPrimitive valueTag) Parameters valueTag ITwinPrimitive CreateEmptyPoco() public AxoAiConfig CreateEmptyPoco() Returns AxoAiConfig GetChildren() public IEnumerable<ITwinObject> GetChildren() Returns IEnumerable<ITwinObject> GetConnector() public Connector GetConnector() Returns Connector GetKids() public IEnumerable<ITwinElement> GetKids() Returns IEnumerable<ITwinElement> GetParent() public ITwinObject GetParent() Returns ITwinObject GetSymbolTail() public string GetSymbolTail() Returns string GetValueTags() public IEnumerable<ITwinPrimitive> GetValueTags() Returns IEnumerable<ITwinPrimitive> OnlineToPlain<T>() public virtual Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoAiConfig> OnlineToPlainAsync() Returns Task<AxoAiConfig> OnlineToPlainAsync(AxoAiConfig) protected Task<AxoAiConfig> OnlineToPlainAsync(AxoAiConfig plain) Parameters plain AxoAiConfig Returns Task<AxoAiConfig> PlainToOnline<T>(T) public virtual Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoAiConfig) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoAiConfig plain) Parameters plain AxoAiConfig Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public virtual Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoAiConfig) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoAiConfig plain) Parameters plain AxoAiConfig Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public virtual Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoAiConfig> ShadowToPlainAsync() Returns Task<AxoAiConfig> ShadowToPlainAsync(AxoAiConfig) protected Task<AxoAiConfig> ShadowToPlainAsync(AxoAiConfig plain) Parameters plain AxoAiConfig Returns Task<AxoAiConfig>"
  },
  "api/AXOpen.Elements.AxoAiStatus.html": {
    "href": "api/AXOpen.Elements.AxoAiStatus.html",
    "title": "Class AxoAiStatus | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoAiStatus Namespace AXOpen.Elements Assembly ix_ax_axopen_components_elements.dll public class AxoAiStatus : ITwinObject, ITwinElement Inheritance object AxoAiStatus Implements ITwinObject ITwinElement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoAiStatus(ITwinObject, string, string) public AxoAiStatus(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties AttributeName public string AttributeName { get; set; } Property Value string Connector protected Connector Connector { get; } Property Value Connector HumanReadable public string HumanReadable { get; set; } Property Value string Interpreter public Translator Interpreter { get; } Property Value Translator Parent protected ITwinObject Parent { get; set; } Property Value ITwinObject RawRange public OnlinerReal RawRange { get; } Property Value OnlinerReal RealRange public OnlinerReal RealRange { get; } Property Value OnlinerReal Scaled public OnlinerReal Scaled { get; } Property Value OnlinerReal Symbol public string Symbol { get; protected set; } Property Value string SymbolTail protected string SymbolTail { get; set; } Property Value string Methods AddChild(ITwinObject) public void AddChild(ITwinObject twinObject) Parameters twinObject ITwinObject AddKid(ITwinElement) public void AddKid(ITwinElement kid) Parameters kid ITwinElement AddValueTag(ITwinPrimitive) public void AddValueTag(ITwinPrimitive valueTag) Parameters valueTag ITwinPrimitive CreateEmptyPoco() public AxoAiStatus CreateEmptyPoco() Returns AxoAiStatus GetChildren() public IEnumerable<ITwinObject> GetChildren() Returns IEnumerable<ITwinObject> GetConnector() public Connector GetConnector() Returns Connector GetKids() public IEnumerable<ITwinElement> GetKids() Returns IEnumerable<ITwinElement> GetParent() public ITwinObject GetParent() Returns ITwinObject GetSymbolTail() public string GetSymbolTail() Returns string GetValueTags() public IEnumerable<ITwinPrimitive> GetValueTags() Returns IEnumerable<ITwinPrimitive> OnlineToPlain<T>() public virtual Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoAiStatus> OnlineToPlainAsync() Returns Task<AxoAiStatus> OnlineToPlainAsync(AxoAiStatus) protected Task<AxoAiStatus> OnlineToPlainAsync(AxoAiStatus plain) Parameters plain AxoAiStatus Returns Task<AxoAiStatus> PlainToOnline<T>(T) public virtual Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoAiStatus) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoAiStatus plain) Parameters plain AxoAiStatus Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public virtual Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoAiStatus) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoAiStatus plain) Parameters plain AxoAiStatus Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public virtual Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoAiStatus> ShadowToPlainAsync() Returns Task<AxoAiStatus> ShadowToPlainAsync(AxoAiStatus) protected Task<AxoAiStatus> ShadowToPlainAsync(AxoAiStatus plain) Parameters plain AxoAiStatus Returns Task<AxoAiStatus>"
  },
  "api/AXOpen.Elements.AxoAo.html": {
    "href": "api/AXOpen.Elements.AxoAo.html",
    "title": "Class AxoAo | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoAo Namespace AXOpen.Elements Assembly ix_ax_axopen_components_elements.dll public class AxoAo : AxoComponent, ITwinIdentity, ITwinObject, ITwinElement, IAxoObject, IAxoComponent Inheritance object AxoObject AxoComponent AxoAo Implements ITwinIdentity ITwinObject ITwinElement IAxoObject IAxoComponent Inherited Members AxoComponent._isManuallyControllable AxoComponent.OnlineToPlainAsync(AxoComponent) AxoComponent.PlainToOnlineAsync(AxoComponent) AxoComponent.ShadowToPlainAsync(AxoComponent) AxoComponent.PlainToShadowAsync(AxoComponent) AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoAo(ITwinObject, string, string) public AxoAo(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties _config [Container(Layout.Wrap)] [ComponentDetails(\"Config\")] public AxoAoConfig _config { get; } Property Value AxoAoConfig _messengerDivisionByZero public AxoMessenger _messengerDivisionByZero { get; } Property Value AxoMessenger _messengerGainNotDefined public AxoMessenger _messengerGainNotDefined { get; } Property Value AxoMessenger _messengerOutOfBoundaries public AxoMessenger _messengerOutOfBoundaries { get; } Property Value AxoMessenger _rawRange public OnlinerReal _rawRange { get; } Property Value OnlinerReal _realRange public OnlinerReal _realRange { get; } Property Value OnlinerReal _requiredValue [Container(Layout.Wrap)] [ComponentHeader] public OnlinerReal _requiredValue { get; } Property Value OnlinerReal _status [ComponentHeader] [Container(Layout.Wrap)] [Group(GroupLayout.GroupBox)] [ReadOnly] public AxoAoStatus _status { get; } Property Value AxoAoStatus _unscaled public OnlinerReal _unscaled { get; } Property Value OnlinerReal Methods CreateEmptyPoco() public AxoAo CreateEmptyPoco() Returns AxoAo OnlineToPlain<T>() public override Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoAo> OnlineToPlainAsync() Returns Task<AxoAo> OnlineToPlainAsync(AxoAo) protected Task<AxoAo> OnlineToPlainAsync(AxoAo plain) Parameters plain AxoAo Returns Task<AxoAo> PlainToOnline<T>(T) public override Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoAo) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoAo plain) Parameters plain AxoAo Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public override Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoAo) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoAo plain) Parameters plain AxoAo Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public override Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoAo> ShadowToPlainAsync() Returns Task<AxoAo> ShadowToPlainAsync(AxoAo) protected Task<AxoAo> ShadowToPlainAsync(AxoAo plain) Parameters plain AxoAo Returns Task<AxoAo>"
  },
  "api/AXOpen.Elements.AxoAoConfig.html": {
    "href": "api/AXOpen.Elements.AxoAoConfig.html",
    "title": "Class AxoAoConfig | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoAoConfig Namespace AXOpen.Elements Assembly ix_ax_axopen_components_elements.dll public class AxoAoConfig : ITwinObject, ITwinElement Inheritance object AxoAoConfig Implements ITwinObject ITwinElement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoAoConfig(ITwinObject, string, string) public AxoAoConfig(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties AttributeName public string AttributeName { get; set; } Property Value string Connector protected Connector Connector { get; } Property Value Connector Gain public OnlinerReal Gain { get; } Property Value OnlinerReal HumanReadable public string HumanReadable { get; set; } Property Value string Interpreter public Translator Interpreter { get; } Property Value Translator Offset public OnlinerReal Offset { get; } Property Value OnlinerReal Parent protected ITwinObject Parent { get; set; } Property Value ITwinObject RawHigh public OnlinerDInt RawHigh { get; } Property Value OnlinerDInt RawLow public OnlinerDInt RawLow { get; } Property Value OnlinerDInt RealHigh public OnlinerReal RealHigh { get; } Property Value OnlinerReal RealLow public OnlinerReal RealLow { get; } Property Value OnlinerReal Symbol public string Symbol { get; protected set; } Property Value string SymbolTail protected string SymbolTail { get; set; } Property Value string Methods AddChild(ITwinObject) public void AddChild(ITwinObject twinObject) Parameters twinObject ITwinObject AddKid(ITwinElement) public void AddKid(ITwinElement kid) Parameters kid ITwinElement AddValueTag(ITwinPrimitive) public void AddValueTag(ITwinPrimitive valueTag) Parameters valueTag ITwinPrimitive CreateEmptyPoco() public AxoAoConfig CreateEmptyPoco() Returns AxoAoConfig GetChildren() public IEnumerable<ITwinObject> GetChildren() Returns IEnumerable<ITwinObject> GetConnector() public Connector GetConnector() Returns Connector GetKids() public IEnumerable<ITwinElement> GetKids() Returns IEnumerable<ITwinElement> GetParent() public ITwinObject GetParent() Returns ITwinObject GetSymbolTail() public string GetSymbolTail() Returns string GetValueTags() public IEnumerable<ITwinPrimitive> GetValueTags() Returns IEnumerable<ITwinPrimitive> OnlineToPlain<T>() public virtual Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoAoConfig> OnlineToPlainAsync() Returns Task<AxoAoConfig> OnlineToPlainAsync(AxoAoConfig) protected Task<AxoAoConfig> OnlineToPlainAsync(AxoAoConfig plain) Parameters plain AxoAoConfig Returns Task<AxoAoConfig> PlainToOnline<T>(T) public virtual Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoAoConfig) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoAoConfig plain) Parameters plain AxoAoConfig Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public virtual Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoAoConfig) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoAoConfig plain) Parameters plain AxoAoConfig Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public virtual Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoAoConfig> ShadowToPlainAsync() Returns Task<AxoAoConfig> ShadowToPlainAsync(AxoAoConfig) protected Task<AxoAoConfig> ShadowToPlainAsync(AxoAoConfig plain) Parameters plain AxoAoConfig Returns Task<AxoAoConfig>"
  },
  "api/AXOpen.Elements.AxoAoStatus.html": {
    "href": "api/AXOpen.Elements.AxoAoStatus.html",
    "title": "Class AxoAoStatus | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoAoStatus Namespace AXOpen.Elements Assembly ix_ax_axopen_components_elements.dll public class AxoAoStatus : ITwinObject, ITwinElement Inheritance object AxoAoStatus Implements ITwinObject ITwinElement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoAoStatus(ITwinObject, string, string) public AxoAoStatus(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties AttributeName public string AttributeName { get; set; } Property Value string Connector protected Connector Connector { get; } Property Value Connector HumanReadable public string HumanReadable { get; set; } Property Value string Interpreter public Translator Interpreter { get; } Property Value Translator Parent protected ITwinObject Parent { get; set; } Property Value ITwinObject RawRange public OnlinerReal RawRange { get; } Property Value OnlinerReal RealRange public OnlinerReal RealRange { get; } Property Value OnlinerReal Symbol public string Symbol { get; protected set; } Property Value string SymbolTail protected string SymbolTail { get; set; } Property Value string Unscaled public OnlinerReal Unscaled { get; } Property Value OnlinerReal Methods AddChild(ITwinObject) public void AddChild(ITwinObject twinObject) Parameters twinObject ITwinObject AddKid(ITwinElement) public void AddKid(ITwinElement kid) Parameters kid ITwinElement AddValueTag(ITwinPrimitive) public void AddValueTag(ITwinPrimitive valueTag) Parameters valueTag ITwinPrimitive CreateEmptyPoco() public AxoAoStatus CreateEmptyPoco() Returns AxoAoStatus GetChildren() public IEnumerable<ITwinObject> GetChildren() Returns IEnumerable<ITwinObject> GetConnector() public Connector GetConnector() Returns Connector GetKids() public IEnumerable<ITwinElement> GetKids() Returns IEnumerable<ITwinElement> GetParent() public ITwinObject GetParent() Returns ITwinObject GetSymbolTail() public string GetSymbolTail() Returns string GetValueTags() public IEnumerable<ITwinPrimitive> GetValueTags() Returns IEnumerable<ITwinPrimitive> OnlineToPlain<T>() public virtual Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoAoStatus> OnlineToPlainAsync() Returns Task<AxoAoStatus> OnlineToPlainAsync(AxoAoStatus) protected Task<AxoAoStatus> OnlineToPlainAsync(AxoAoStatus plain) Parameters plain AxoAoStatus Returns Task<AxoAoStatus> PlainToOnline<T>(T) public virtual Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoAoStatus) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoAoStatus plain) Parameters plain AxoAoStatus Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public virtual Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoAoStatus) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoAoStatus plain) Parameters plain AxoAoStatus Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public virtual Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoAoStatus> ShadowToPlainAsync() Returns Task<AxoAoStatus> ShadowToPlainAsync(AxoAoStatus) protected Task<AxoAoStatus> ShadowToPlainAsync(AxoAoStatus plain) Parameters plain AxoAoStatus Returns Task<AxoAoStatus>"
  },
  "api/AXOpen.Elements.AxoDi.html": {
    "href": "api/AXOpen.Elements.AxoDi.html",
    "title": "Class AxoDi | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDi Namespace AXOpen.Elements Assembly ix_ax_axopen_components_elements.dll public class AxoDi : AxoComponent, ITwinIdentity, ITwinObject, ITwinElement, IAxoObject, IAxoComponent Inheritance object AxoObject AxoComponent AxoDi Implements ITwinIdentity ITwinObject ITwinElement IAxoObject IAxoComponent Inherited Members AxoComponent._isManuallyControllable AxoComponent.OnlineToPlainAsync(AxoComponent) AxoComponent.PlainToOnlineAsync(AxoComponent) AxoComponent.ShadowToPlainAsync(AxoComponent) AxoComponent.PlainToShadowAsync(AxoComponent) AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoDi(ITwinObject, string, string) public AxoDi(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties _isFalseTask [ComponentHeader] public AxoTask _isFalseTask { get; } Property Value AxoTask _isTrueTask [Container(Layout.Wrap)] [ComponentHeader] public AxoTask _isTrueTask { get; } Property Value AxoTask _messengerInfoNegative public AxoMessenger _messengerInfoNegative { get; } Property Value AxoMessenger _messengerInfoPositive public AxoMessenger _messengerInfoPositive { get; } Property Value AxoMessenger Methods CreateEmptyPoco() public AxoDi CreateEmptyPoco() Returns AxoDi OnlineToPlain<T>() public override Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoDi> OnlineToPlainAsync() Returns Task<AxoDi> OnlineToPlainAsync(AxoDi) protected Task<AxoDi> OnlineToPlainAsync(AxoDi plain) Parameters plain AxoDi Returns Task<AxoDi> PlainToOnline<T>(T) public override Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoDi) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoDi plain) Parameters plain AxoDi Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public override Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoDi) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoDi plain) Parameters plain AxoDi Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public override Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoDi> ShadowToPlainAsync() Returns Task<AxoDi> ShadowToPlainAsync(AxoDi) protected Task<AxoDi> ShadowToPlainAsync(AxoDi plain) Parameters plain AxoDi Returns Task<AxoDi>"
  },
  "api/AXOpen.Elements.AxoDo.html": {
    "href": "api/AXOpen.Elements.AxoDo.html",
    "title": "Class AxoDo | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDo Namespace AXOpen.Elements Assembly ix_ax_axopen_components_elements.dll public class AxoDo : AxoComponent, ITwinIdentity, ITwinObject, ITwinElement, IAxoObject, IAxoComponent Inheritance object AxoObject AxoComponent AxoDo Implements ITwinIdentity ITwinObject ITwinElement IAxoObject IAxoComponent Inherited Members AxoComponent._isManuallyControllable AxoComponent.OnlineToPlainAsync(AxoComponent) AxoComponent.PlainToOnlineAsync(AxoComponent) AxoComponent.ShadowToPlainAsync(AxoComponent) AxoComponent.PlainToShadowAsync(AxoComponent) AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoDo(ITwinObject, string, string) public AxoDo(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties _messengerInfoNegative public AxoMessenger _messengerInfoNegative { get; } Property Value AxoMessenger _messengerInfoPositive public AxoMessenger _messengerInfoPositive { get; } Property Value AxoMessenger _resetTask [ComponentHeader] public AxoTask _resetTask { get; } Property Value AxoTask _setTask [Container(Layout.Wrap)] [ComponentHeader] public AxoTask _setTask { get; } Property Value AxoTask Methods CreateEmptyPoco() public AxoDo CreateEmptyPoco() Returns AxoDo OnlineToPlain<T>() public override Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoDo> OnlineToPlainAsync() Returns Task<AxoDo> OnlineToPlainAsync(AxoDo) protected Task<AxoDo> OnlineToPlainAsync(AxoDo plain) Parameters plain AxoDo Returns Task<AxoDo> PlainToOnline<T>(T) public override Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoDo) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoDo plain) Parameters plain AxoDo Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public override Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoDo) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoDo plain) Parameters plain AxoDo Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public override Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoDo> ShadowToPlainAsync() Returns Task<AxoDo> ShadowToPlainAsync(AxoDo) protected Task<AxoDo> ShadowToPlainAsync(AxoDo plain) Parameters plain AxoDo Returns Task<AxoDo>"
  },
  "api/AXOpen.Elements.html": {
    "href": "api/AXOpen.Elements.html",
    "title": "Namespace AXOpen.Elements | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen.Elements Classes AxoAi AxoAiConfig AxoAiStatus AxoAo AxoAoConfig AxoAoStatus AxoDi AxoDo"
  },
  "api/AXOpen.IAxoApplication.html": {
    "href": "api/AXOpen.IAxoApplication.html",
    "title": "Interface IAxoApplication | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoApplication Namespace AXOpen Assembly AXOpen.Base.Abstractions.dll Provide access to the services of an AxoApplication. public interface IAxoApplication Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties Logger Gets logger configured for this application. ILogger Logger { get; } Property Value ILogger"
  },
  "api/AXOpen.IAxoApplicationBuilder.html": {
    "href": "api/AXOpen.IAxoApplicationBuilder.html",
    "title": "Interface IAxoApplicationBuilder | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoApplicationBuilder Namespace AXOpen Assembly AXOpen.Base.Abstractions.dll Provides access to the an AxoApplication builder. public interface IAxoApplicationBuilder Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Methods Build() Builds an AxoApplication. IAxoApplication Build() Returns IAxoApplication AxoApplication ConfigureLogger(ILogger) Configures logger for an AxoApplication IAxoApplicationBuilder ConfigureLogger(ILogger logger) Parameters logger ILogger AxoLogger Returns IAxoApplicationBuilder Application builder."
  },
  "api/AXOpen.Logging.AxoLogEntry.html": {
    "href": "api/AXOpen.Logging.AxoLogEntry.html",
    "title": "Class AxoLogEntry | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoLogEntry Namespace AXOpen.Logging Assembly ix_ax_axopen_core.dll public class AxoLogEntry : ITwinObject, ITwinElement Inheritance object AxoLogEntry Implements ITwinObject ITwinElement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoLogEntry(ITwinObject, string, string) public AxoLogEntry(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties AttributeName public string AttributeName { get; set; } Property Value string Connector protected Connector Connector { get; } Property Value Connector HumanReadable public string HumanReadable { get; set; } Property Value string Interpreter public Translator Interpreter { get; } Property Value Translator Level [EnumeratorDiscriminator(typeof(eLogLevel))] public OnlinerInt Level { get; } Property Value OnlinerInt Message public OnlinerString Message { get; } Property Value OnlinerString Parent protected ITwinObject Parent { get; set; } Property Value ITwinObject Sender public OnlinerULInt Sender { get; } Property Value OnlinerULInt Symbol public string Symbol { get; protected set; } Property Value string SymbolTail protected string SymbolTail { get; set; } Property Value string ToDequeue public OnlinerBool ToDequeue { get; } Property Value OnlinerBool Methods AddChild(ITwinObject) public void AddChild(ITwinObject twinObject) Parameters twinObject ITwinObject AddKid(ITwinElement) public void AddKid(ITwinElement kid) Parameters kid ITwinElement AddValueTag(ITwinPrimitive) public void AddValueTag(ITwinPrimitive valueTag) Parameters valueTag ITwinPrimitive CreateEmptyPoco() public AxoLogEntry CreateEmptyPoco() Returns AxoLogEntry GetChildren() public IEnumerable<ITwinObject> GetChildren() Returns IEnumerable<ITwinObject> GetConnector() public Connector GetConnector() Returns Connector GetKids() public IEnumerable<ITwinElement> GetKids() Returns IEnumerable<ITwinElement> GetParent() public ITwinObject GetParent() Returns ITwinObject GetSymbolTail() public string GetSymbolTail() Returns string GetValueTags() public IEnumerable<ITwinPrimitive> GetValueTags() Returns IEnumerable<ITwinPrimitive> OnlineToPlain<T>() public virtual Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoLogEntry> OnlineToPlainAsync() Returns Task<AxoLogEntry> OnlineToPlainAsync(AxoLogEntry) protected Task<AxoLogEntry> OnlineToPlainAsync(AxoLogEntry plain) Parameters plain AxoLogEntry Returns Task<AxoLogEntry> PlainToOnline<T>(T) public virtual Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoLogEntry) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoLogEntry plain) Parameters plain AxoLogEntry Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public virtual Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoLogEntry) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoLogEntry plain) Parameters plain AxoLogEntry Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public virtual Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoLogEntry> ShadowToPlainAsync() Returns Task<AxoLogEntry> ShadowToPlainAsync(AxoLogEntry) protected Task<AxoLogEntry> ShadowToPlainAsync(AxoLogEntry plain) Parameters plain AxoLogEntry Returns Task<AxoLogEntry>"
  },
  "api/AXOpen.Logging.AxoLogger.html": {
    "href": "api/AXOpen.Logging.AxoLogger.html",
    "title": "Class AxoLogger | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoLogger Namespace AXOpen.Logging Assembly ix_ax_axopen_core.dll public class AxoLogger : ITwinObject, ITwinElement, IAxoLogger, IAxoLoggerConfig Inheritance object AxoLogger Implements ITwinObject ITwinElement IAxoLogger IAxoLoggerConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoLogger(ITwinObject, string, string) public AxoLogger(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties AttributeName public string AttributeName { get; set; } Property Value string Carret public OnlinerInt Carret { get; } Property Value OnlinerInt Connector protected Connector Connector { get; } Property Value Connector HumanReadable public string HumanReadable { get; set; } Property Value string Interpreter public Translator Interpreter { get; } Property Value Translator LogEntries public AxoLogEntry[] LogEntries { get; } Property Value AxoLogEntry[] MinimumLevel [EnumeratorDiscriminator(typeof(eLogLevel))] public OnlinerInt MinimumLevel { get; } Property Value OnlinerInt Parent protected ITwinObject Parent { get; set; } Property Value ITwinObject Symbol public string Symbol { get; protected set; } Property Value string SymbolTail protected string SymbolTail { get; set; } Property Value string Methods AddChild(ITwinObject) public void AddChild(ITwinObject twinObject) Parameters twinObject ITwinObject AddKid(ITwinElement) public void AddKid(ITwinElement kid) Parameters kid ITwinElement AddValueTag(ITwinPrimitive) public void AddValueTag(ITwinPrimitive valueTag) Parameters valueTag ITwinPrimitive CreateEmptyPoco() public AxoLogger CreateEmptyPoco() Returns AxoLogger Dequeue() public Task Dequeue() Returns Task GetChildren() public IEnumerable<ITwinObject> GetChildren() Returns IEnumerable<ITwinObject> GetConnector() public Connector GetConnector() Returns Connector GetKids() public IEnumerable<ITwinElement> GetKids() Returns IEnumerable<ITwinElement> GetParent() public ITwinObject GetParent() Returns ITwinObject GetSymbolTail() public string GetSymbolTail() Returns string GetValueTags() public IEnumerable<ITwinPrimitive> GetValueTags() Returns IEnumerable<ITwinPrimitive> OnlineToPlain<T>() public virtual Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoLogger> OnlineToPlainAsync() Returns Task<AxoLogger> OnlineToPlainAsync(AxoLogger) protected Task<AxoLogger> OnlineToPlainAsync(AxoLogger plain) Parameters plain AxoLogger Returns Task<AxoLogger> PlainToOnline<T>(T) public virtual Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoLogger) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoLogger plain) Parameters plain AxoLogger Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public virtual Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoLogger) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoLogger plain) Parameters plain AxoLogger Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() SetLogger(ILogger) public void SetLogger(ILogger targetLogger) Parameters targetLogger ILogger ShadowToPlain<T>() public virtual Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoLogger> ShadowToPlainAsync() Returns Task<AxoLogger> ShadowToPlainAsync(AxoLogger) protected Task<AxoLogger> ShadowToPlainAsync(AxoLogger plain) Parameters plain AxoLogger Returns Task<AxoLogger> StartDequeuing(ILogger, int) public void StartDequeuing(ILogger targetLogger, int dequeuingInterval = 100) Parameters targetLogger ILogger dequeuingInterval int"
  },
  "api/AXOpen.Logging.IAxoLogger.html": {
    "href": "api/AXOpen.Logging.IAxoLogger.html",
    "title": "Interface IAxoLogger | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoLogger Namespace AXOpen.Logging Assembly ix_ax_axopen_abstractions.dll public interface IAxoLogger Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/AXOpen.Logging.IAxoLoggerConfig.html": {
    "href": "api/AXOpen.Logging.IAxoLoggerConfig.html",
    "title": "Interface IAxoLoggerConfig | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoLoggerConfig Namespace AXOpen.Logging Assembly ix_ax_axopen_abstractions.dll public interface IAxoLoggerConfig Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/AXOpen.Logging.ILogger.html": {
    "href": "api/AXOpen.Logging.ILogger.html",
    "title": "Interface ILogger | System.Dynamic.ExpandoObject",
    "keywords": "Interface ILogger Namespace AXOpen.Logging Assembly AXOpen.Base.Abstractions.dll public interface ILogger Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Methods Debug(string, ITwinElement, IIdentity, object) void Debug(string message, ITwinElement sender, IIdentity identity, object details = null) Parameters message string sender ITwinElement identity IIdentity details object Debug(string, IIdentity) void Debug(string message, IIdentity identity) Parameters message string identity IIdentity Error(string, ITwinElement, IIdentity, object) void Error(string message, ITwinElement sender, IIdentity identity, object details = null) Parameters message string sender ITwinElement identity IIdentity details object Error(string, IIdentity) void Error(string message, IIdentity identity) Parameters message string identity IIdentity Fatal(string, ITwinElement, IIdentity, object) void Fatal(string message, ITwinElement sender, IIdentity identity, object details = null) Parameters message string sender ITwinElement identity IIdentity details object Fatal(string, IIdentity) void Fatal(string message, IIdentity identity) Parameters message string identity IIdentity Information(string, ITwinElement, IIdentity, object) void Information(string message, ITwinElement sender, IIdentity identity, object details = null) Parameters message string sender ITwinElement identity IIdentity details object Information(string, IIdentity) void Information(string message, IIdentity identity) Parameters message string identity IIdentity Verbose(string, ITwinElement, IIdentity, object) void Verbose(string message, ITwinElement sender, IIdentity identity, object details = null) Parameters message string sender ITwinElement identity IIdentity details object Verbose(string, IIdentity) void Verbose(string message, IIdentity identity) Parameters message string identity IIdentity Warning(string, ITwinElement, IIdentity, object) void Warning(string message, ITwinElement sender, IIdentity identity, object details = null) Parameters message string sender ITwinElement identity IIdentity details object Warning(string, IIdentity) void Warning(string message, IIdentity identity) Parameters message string identity IIdentity"
  },
  "api/AXOpen.Logging.LoggingServiceConfiguration.html": {
    "href": "api/AXOpen.Logging.LoggingServiceConfiguration.html",
    "title": "Class LoggingServiceConfiguration | System.Dynamic.ExpandoObject",
    "keywords": "Class LoggingServiceConfiguration Namespace AXOpen.Logging Assembly AXOpen.Logging.Serilog.dll Class containing DI services. public static class LoggingServiceConfiguration Inheritance object LoggingServiceConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddAxoLoggingServices(IServiceCollection) public static void AddAxoLoggingServices(this IServiceCollection services) Parameters services IServiceCollection"
  },
  "api/AXOpen.Logging.SerilogLogger.html": {
    "href": "api/AXOpen.Logging.SerilogLogger.html",
    "title": "Class SerilogLogger | System.Dynamic.ExpandoObject",
    "keywords": "Class SerilogLogger Namespace AXOpen.Logging Assembly AXOpen.Logging.Serilog.dll public class SerilogLogger : ILogger Inheritance object SerilogLogger Implements ILogger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors SerilogLogger(ILogger) public SerilogLogger(ILogger logger) Parameters logger ILogger Methods Debug(string, ITwinElement, IIdentity, object) public void Debug(string message, ITwinElement sender, IIdentity identity, object details) Parameters message string sender ITwinElement identity IIdentity details object Debug(string, IIdentity) public void Debug(string message, IIdentity identity) Parameters message string identity IIdentity Error(string, ITwinElement, IIdentity, object) public void Error(string message, ITwinElement sender, IIdentity identity, object details) Parameters message string sender ITwinElement identity IIdentity details object Error(string, IIdentity) public void Error(string message, IIdentity identity) Parameters message string identity IIdentity Fatal(string, ITwinElement, IIdentity, object) public void Fatal(string message, ITwinElement sender, IIdentity identity, object details) Parameters message string sender ITwinElement identity IIdentity details object Fatal(string, IIdentity) public void Fatal(string message, IIdentity identity) Parameters message string identity IIdentity Information(string, ITwinElement, IIdentity, object) public void Information(string message, ITwinElement sender, IIdentity identity, object details) Parameters message string sender ITwinElement identity IIdentity details object Information(string, IIdentity) public void Information(string message, IIdentity identity) Parameters message string identity IIdentity Verbose(string, ITwinElement, IIdentity, object) public void Verbose(string message, ITwinElement sender, IIdentity identity, object details) Parameters message string sender ITwinElement identity IIdentity details object Verbose(string, IIdentity) public void Verbose(string message, IIdentity identity) Parameters message string identity IIdentity Warning(string, ITwinElement, IIdentity, object) public void Warning(string message, ITwinElement sender, IIdentity identity, object details) Parameters message string sender ITwinElement identity IIdentity details object Warning(string, IIdentity) public void Warning(string message, IIdentity identity) Parameters message string identity IIdentity"
  },
  "api/AXOpen.Logging.eLogLevel.html": {
    "href": "api/AXOpen.Logging.eLogLevel.html",
    "title": "Enum eLogLevel | System.Dynamic.ExpandoObject",
    "keywords": "Enum eLogLevel Namespace AXOpen.Logging Assembly ix_ax_axopen_abstractions.dll public enum eLogLevel : short Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Fields Debug = 2 Error = 5 Fatal = 6 Information = 3 NoCat = 0 Verbose = 1 Warning = 4"
  },
  "api/AXOpen.Logging.html": {
    "href": "api/AXOpen.Logging.html",
    "title": "Namespace AXOpen.Logging | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen.Logging Classes AxoLogEntry AxoLogger LoggingServiceConfiguration Class containing DI services. SerilogLogger Interfaces IAxoLogger IAxoLoggerConfig ILogger Enums eLogLevel"
  },
  "api/AXOpen.Messaging.Static.AxoMessenger.html": {
    "href": "api/AXOpen.Messaging.Static.AxoMessenger.html",
    "title": "Class AxoMessenger | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoMessenger Namespace AXOpen.Messaging.Static Assembly ix_ax_axopen_core.dll public class AxoMessenger : AxoObject, ITwinIdentity, ITwinObject, ITwinElement, IAxoObject, IAxoMessageProperties Inheritance object AxoObject AxoMessenger Implements ITwinIdentity ITwinObject ITwinElement IAxoObject IAxoMessageProperties Inherited Members AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoMessenger(ITwinObject, string, string) public AxoMessenger(ITwinObject parent, string readableTail, string symbolTail) Parameters parent ITwinObject readableTail string symbolTail string Properties Acknowledged [ReadOnly] public OnlinerLDateTime Acknowledged { get; } Property Value OnlinerLDateTime AcknowledgedBeforeFallen [ReadOnly] public OnlinerBool AcknowledgedBeforeFallen { get; } Property Value OnlinerBool AcknowledgementRequired [ReadOnly] public OnlinerBool AcknowledgementRequired { get; } Property Value OnlinerBool AcknowledgeRequest public OnlinerBool AcknowledgeRequest { get; } Property Value OnlinerBool Category [ReadOnly] [EnumeratorDiscriminator(typeof(eAxoMessageCategory))] public OnlinerInt Category { get; } Property Value OnlinerInt DotNetMessengerTextList public List<KeyValuePair<ulong, AxoMessengerTextItem>> DotNetMessengerTextList { get; set; } Property Value List<KeyValuePair<ulong, AxoMessengerTextItem>> Fallen [ReadOnly] public OnlinerLDateTime Fallen { get; } Property Value OnlinerLDateTime Help public string Help { get; set; } Property Value string IsActive [ReadOnly] public OnlinerBool IsActive { get; } Property Value OnlinerBool MessageCode [ReadOnly] public OnlinerULInt MessageCode { get; } Property Value OnlinerULInt MessageText public string MessageText { get; set; } Property Value string PlcMessengerTextList public List<KeyValuePair<ulong, AxoMessengerTextItem>> PlcMessengerTextList { get; } Property Value List<KeyValuePair<ulong, AxoMessengerTextItem>> PlcTextList public string PlcTextList { get; set; } Property Value string Risen [ReadOnly] public OnlinerLDateTime Risen { get; } Property Value OnlinerLDateTime WaitingForAcknowledge [ReadOnly] public OnlinerBool WaitingForAcknowledge { get; } Property Value OnlinerBool Methods CreateEmptyPoco() public AxoMessenger CreateEmptyPoco() Returns AxoMessenger OnlineToPlain<T>() public override Task<T> OnlineToPlain<T>() Returns Task<T> Type Parameters T OnlineToPlainAsync() public Task<AxoMessenger> OnlineToPlainAsync() Returns Task<AxoMessenger> OnlineToPlainAsync(AxoMessenger) protected Task<AxoMessenger> OnlineToPlainAsync(AxoMessenger plain) Parameters plain AxoMessenger Returns Task<AxoMessenger> PlainToOnline<T>(T) public override Task PlainToOnline<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToOnlineAsync(AxoMessenger) public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoMessenger plain) Parameters plain AxoMessenger Returns Task<IEnumerable<ITwinPrimitive>> PlainToShadow<T>(T) public override Task PlainToShadow<T>(T plain) Parameters plain T Returns Task Type Parameters T PlainToShadowAsync(AxoMessenger) public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoMessenger plain) Parameters plain AxoMessenger Returns Task<IEnumerable<ITwinPrimitive>> Poll() public void Poll() ShadowToPlain<T>() public override Task<T> ShadowToPlain<T>() Returns Task<T> Type Parameters T ShadowToPlainAsync() public Task<AxoMessenger> ShadowToPlainAsync() Returns Task<AxoMessenger> ShadowToPlainAsync(AxoMessenger) protected Task<AxoMessenger> ShadowToPlainAsync(AxoMessenger plain) Parameters plain AxoMessenger Returns Task<AxoMessenger>"
  },
  "api/AXOpen.Messaging.Static.AxoMessengerCommandView.html": {
    "href": "api/AXOpen.Messaging.Static.AxoMessengerCommandView.html",
    "title": "Class AxoMessengerCommandView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoMessengerCommandView Namespace AXOpen.Messaging.Static Assembly axopen_core_blazor.dll public class AxoMessengerCommandView : AxoMessengerView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Inheritance object ComponentBase RenderableComponentBase RenderableComplexComponentBase<AxoMessenger> AxoMessengerView AxoMessengerCommandView Implements IComponent IHandleEvent IHandleAfterRender IRenderableComponent IRenderableComplexComponentBase IDisposable Inherited Members AxoMessengerView.AuthenticationStateProvider AxoMessengerView.js AxoMessengerView.OnAfterRenderAsync(bool) AxoMessengerView.GetCurrentUserName() AxoMessengerView.GetCurrentUserIdentity() AxoMessengerView.OnInitialized() AxoMessengerView.Dispose() RenderableComplexComponentBase<AxoMessenger>.Component RenderableComponentBase.AddToPolling(ITwinElement, int) RenderableComponentBase.RemovePolledElements() RenderableComponentBase.UpdateValuesOnChange(ITwinElement, int) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinObject) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinPrimitive) RenderableComponentBase.UpdateValuesOnChangeOutFocus(OnlinerBase) RenderableComponentBase.HandlePropertyChanged(object, PropertyChangedEventArgs) RenderableComponentBase.HandleShadowPropertyChanged(object, ValueChangedEventArgs) RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, PropertyChangedEventArgs) RenderableComponentBase.PollingInterval RenderableComponentBase.PolledElements RenderableComponentBase.HasFocus ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoMessengerCommandView() public AxoMessengerCommandView()"
  },
  "api/AXOpen.Messaging.Static.AxoMessengerStatusView.html": {
    "href": "api/AXOpen.Messaging.Static.AxoMessengerStatusView.html",
    "title": "Class AxoMessengerStatusView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoMessengerStatusView Namespace AXOpen.Messaging.Static Assembly axopen_core_blazor.dll public class AxoMessengerStatusView : AxoMessengerView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Inheritance object ComponentBase RenderableComponentBase RenderableComplexComponentBase<AxoMessenger> AxoMessengerView AxoMessengerStatusView Implements IComponent IHandleEvent IHandleAfterRender IRenderableComponent IRenderableComplexComponentBase IDisposable Inherited Members AxoMessengerView.AuthenticationStateProvider AxoMessengerView.js AxoMessengerView.OnAfterRenderAsync(bool) AxoMessengerView.GetCurrentUserName() AxoMessengerView.GetCurrentUserIdentity() AxoMessengerView.OnInitialized() AxoMessengerView.Dispose() RenderableComplexComponentBase<AxoMessenger>.Component RenderableComponentBase.AddToPolling(ITwinElement, int) RenderableComponentBase.RemovePolledElements() RenderableComponentBase.UpdateValuesOnChange(ITwinElement, int) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinObject) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinPrimitive) RenderableComponentBase.UpdateValuesOnChangeOutFocus(OnlinerBase) RenderableComponentBase.HandlePropertyChanged(object, PropertyChangedEventArgs) RenderableComponentBase.HandleShadowPropertyChanged(object, ValueChangedEventArgs) RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, PropertyChangedEventArgs) RenderableComponentBase.PollingInterval RenderableComponentBase.PolledElements RenderableComponentBase.HasFocus ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoMessengerStatusView() public AxoMessengerStatusView()"
  },
  "api/AXOpen.Messaging.Static.AxoMessengerTextItem.html": {
    "href": "api/AXOpen.Messaging.Static.AxoMessengerTextItem.html",
    "title": "Class AxoMessengerTextItem | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoMessengerTextItem Namespace AXOpen.Messaging.Static Assembly ix_ax_axopen_core.dll public class AxoMessengerTextItem Inheritance object AxoMessengerTextItem Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors AxoMessengerTextItem(string, string) public AxoMessengerTextItem(string messageText, string helpText) Parameters messageText string helpText string Properties HelpText public string HelpText { get; } Property Value string MessageText public string MessageText { get; } Property Value string"
  },
  "api/AXOpen.Messaging.Static.AxoMessengerView.html": {
    "href": "api/AXOpen.Messaging.Static.AxoMessengerView.html",
    "title": "Class AxoMessengerView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoMessengerView Namespace AXOpen.Messaging.Static Assembly axopen_core_blazor.dll public class AxoMessengerView : RenderableComplexComponentBase<AxoMessenger>, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Inheritance object ComponentBase RenderableComponentBase RenderableComplexComponentBase<AxoMessenger> AxoMessengerView Implements IComponent IHandleEvent IHandleAfterRender IRenderableComponent IRenderableComplexComponentBase IDisposable Derived AxoMessengerCommandView AxoMessengerStatusView Inherited Members RenderableComplexComponentBase<AxoMessenger>.Component RenderableComponentBase.AddToPolling(ITwinElement, int) RenderableComponentBase.RemovePolledElements() RenderableComponentBase.UpdateValuesOnChange(ITwinElement, int) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinObject) RenderableComponentBase.UpdateShadowValuesOnChange(ITwinPrimitive) RenderableComponentBase.UpdateValuesOnChangeOutFocus(OnlinerBase) RenderableComponentBase.HandlePropertyChanged(object, PropertyChangedEventArgs) RenderableComponentBase.HandleShadowPropertyChanged(object, ValueChangedEventArgs) RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, PropertyChangedEventArgs) RenderableComponentBase.PollingInterval RenderableComponentBase.PolledElements RenderableComponentBase.HasFocus ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties AuthenticationStateProvider [Inject] protected AuthenticationStateProvider? AuthenticationStateProvider { get; set; } Property Value AuthenticationStateProvider js [Inject] protected IJSRuntime js { get; set; } Property Value IJSRuntime Methods Dispose() public void Dispose() GetCurrentUserIdentity() protected Task<IIdentity?> GetCurrentUserIdentity() Returns Task<IIdentity> GetCurrentUserName() protected Task<string?> GetCurrentUserName() Returns Task<string> OnAfterRenderAsync(bool) protected override Task OnAfterRenderAsync(bool firstRender) Parameters firstRender bool Returns Task OnInitialized() protected override void OnInitialized()"
  },
  "api/AXOpen.Messaging.Static.IAxoMessageProperties.html": {
    "href": "api/AXOpen.Messaging.Static.IAxoMessageProperties.html",
    "title": "Interface IAxoMessageProperties | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoMessageProperties Namespace AXOpen.Messaging.Static Assembly ix_ax_axopen_core.dll public interface IAxoMessageProperties Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/AXOpen.Messaging.Static.html": {
    "href": "api/AXOpen.Messaging.Static.html",
    "title": "Namespace AXOpen.Messaging.Static | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen.Messaging.Static Classes AxoMessenger AxoMessengerCommandView AxoMessengerStatusView AxoMessengerTextItem AxoMessengerView Interfaces IAxoMessageProperties"
  },
  "api/AXOpen.Messaging.eAxoMessageCategory.html": {
    "href": "api/AXOpen.Messaging.eAxoMessageCategory.html",
    "title": "Enum eAxoMessageCategory | System.Dynamic.ExpandoObject",
    "keywords": "Enum eAxoMessageCategory Namespace AXOpen.Messaging Assembly ix_ax_axopen_core.dll public enum eAxoMessageCategory : short Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Fields All = 0 Catastrophic = 1200 Critical = 1000 Debug = 200 Error = 700 Fatal = 1100 Info = 300 None = 32000 Notification = 500 ProgrammingError = 900 TimedOut = 400 Trace = 100 Warning = 600"
  },
  "api/AXOpen.Messaging.html": {
    "href": "api/AXOpen.Messaging.html",
    "title": "Namespace AXOpen.Messaging | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen.Messaging Enums eAxoMessageCategory"
  },
  "api/AXOpen.Rtc.IAxoRtc.html": {
    "href": "api/AXOpen.Rtc.IAxoRtc.html",
    "title": "Interface IAxoRtc | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoRtc Namespace AXOpen.Rtc Assembly ix_ax_axopen_abstractions.dll public interface IAxoRtc Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/AXOpen.Rtc.html": {
    "href": "api/AXOpen.Rtc.html",
    "title": "Namespace AXOpen.Rtc | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen.Rtc Interfaces IAxoRtc"
  },
  "api/AXOpen.html": {
    "href": "api/AXOpen.html",
    "title": "Namespace AXOpen | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen Classes AxoApplication Provides application services and configuration builder for an AxoApplication. Interfaces IAxoApplication Provide access to the services of an AxoApplication. IAxoApplicationBuilder Provides access to the an AxoApplication builder."
  },
  "api/Ix.Repository.Json.Repository.html": {
    "href": "api/Ix.Repository.Json.Repository.html",
    "title": "Class Repository | System.Dynamic.ExpandoObject",
    "keywords": "Class Repository Namespace Ix.Repository.Json Assembly AXOpen.Data.Json.dll public static class Repository Inheritance object Repository Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Factory<T>(JsonRepositorySettings<T>) public static IRepository<T> Factory<T>(JsonRepositorySettings<T> parameters) where T : IBrowsableDataObject Parameters parameters JsonRepositorySettings<T> Returns IRepository<T> Type Parameters T"
  },
  "api/Ix.Repository.Json.html": {
    "href": "api/Ix.Repository.Json.html",
    "title": "Namespace Ix.Repository.Json | System.Dynamic.ExpandoObject",
    "keywords": "Namespace Ix.Repository.Json Classes Repository"
  },
  "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoBoolArray8.html": {
    "href": "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoBoolArray8.html",
    "title": "Class AxoBoolArray8 | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoBoolArray8 Namespace Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoBoolArray8 : AxoBoolArray, IPlain Inheritance object AxoBoolArray AxoBoolArray8 Implements IPlain Inherited Members AxoBoolArray.DataChanged object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties Data public bool[] Data { get; set; } Property Value bool[]"
  },
  "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman.html": {
    "href": "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman.html",
    "title": "Class AxoDataman | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataman Namespace Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoDataman : AxoComponent, IAxoObject, IAxoComponent, IPlain, IAxoCodeReader Inheritance object AxoObject AxoComponent AxoDataman Implements IAxoObject IAxoComponent IPlain IAxoCodeReader Inherited Members AxoComponent._isManuallyControllable object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties _Messenger public AxoMessenger _Messenger { get; set; } Property Value AxoMessenger _TaskMessenger public AxoMessenger _TaskMessenger { get; set; } Property Value AxoMessenger AcquisitionControl public AxoDataman_AcquisitionControl AcquisitionControl { get; set; } Property Value AxoDataman_AcquisitionControl AcquisitionStatus public AxoDataman_AcquisitionStatus AcquisitionStatus { get; set; } Property Value AxoDataman_AcquisitionStatus ClearResultDataTask public AxoDatamanClearResultData ClearResultDataTask { get; set; } Property Value AxoDatamanClearResultData Config public AxoDataman_Config Config { get; set; } Property Value AxoDataman_Config ReadTask public AxoDatamanRead ReadTask { get; set; } Property Value AxoDatamanRead RestoreTask public AxoTask RestoreTask { get; set; } Property Value AxoTask ResultData public AxoDataman_ResultData ResultData { get; set; } Property Value AxoDataman_ResultData Results public AxoDataman_Results Results { get; set; } Property Value AxoDataman_Results ResultsControl public AxoDataman_ResultsControl ResultsControl { get; set; } Property Value AxoDataman_ResultsControl ResultsStatus public AxoDataman_ResultsStatus ResultsStatus { get; set; } Property Value AxoDataman_ResultsStatus SoftEventControl public AxoDataman_SoftEventControl SoftEventControl { get; set; } Property Value AxoDataman_SoftEventControl SoftEventStatus public AxoDataman_SoftEventStatus SoftEventStatus { get; set; } Property Value AxoDataman_SoftEventStatus Status public AxoDataman_Status Status { get; set; } Property Value AxoDataman_Status User public AxoDataman_User User { get; set; } Property Value AxoDataman_User UserData public AxoDataman_UserData UserData { get; set; } Property Value AxoDataman_UserData"
  },
  "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDatamanClearResultData.html": {
    "href": "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDatamanClearResultData.html",
    "title": "Class AxoDatamanClearResultData | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDatamanClearResultData Namespace Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoDatamanClearResultData : AxoTask, IAxoObject, IAxoTask, IAxoTaskState, IPlain Inheritance object AxoObject AxoTask AxoDatamanClearResultData Implements IAxoObject IAxoTask IAxoTaskState IPlain Inherited Members AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails AxoTask._CyclicExecuteIsNotCalled object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDatamanRead.html": {
    "href": "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDatamanRead.html",
    "title": "Class AxoDatamanRead | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDatamanRead Namespace Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoDatamanRead : AxoTask, IAxoObject, IAxoTask, IAxoTaskState, IPlain Inheritance object AxoObject AxoTask AxoDatamanRead Implements IAxoObject IAxoTask IAxoTaskState IPlain Inherited Members AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails AxoTask._CyclicExecuteIsNotCalled object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_AcquisitionControl.html": {
    "href": "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_AcquisitionControl.html",
    "title": "Class AxoDataman_AcquisitionControl | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataman_AcquisitionControl Namespace Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoDataman_AcquisitionControl Inheritance object AxoDataman_AcquisitionControl Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties Trigger public bool Trigger { get; set; } Property Value bool TriggerEnable public bool TriggerEnable { get; set; } Property Value bool"
  },
  "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_AcquisitionStatus.html": {
    "href": "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_AcquisitionStatus.html",
    "title": "Class AxoDataman_AcquisitionStatus | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataman_AcquisitionStatus Namespace Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoDataman_AcquisitionStatus Inheritance object AxoDataman_AcquisitionStatus Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties Acquiring public bool Acquiring { get; set; } Property Value bool MissedAcquisition public bool MissedAcquisition { get; set; } Property Value bool TriggerAcknowledge public bool TriggerAcknowledge { get; set; } Property Value bool TriggerID public ushort TriggerID { get; set; } Property Value ushort TriggerReady public bool TriggerReady { get; set; } Property Value bool"
  },
  "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_Config.html": {
    "href": "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_Config.html",
    "title": "Class AxoDataman_Config | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataman_Config Namespace Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoDataman_Config Inheritance object AxoDataman_Config Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties ContinuousReading public bool ContinuousReading { get; set; } Property Value bool ErrorTime public TimeSpan ErrorTime { get; set; } Property Value TimeSpan InfoTime public TimeSpan InfoTime { get; set; } Property Value TimeSpan"
  },
  "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_ResultData.html": {
    "href": "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_ResultData.html",
    "title": "Class AxoDataman_ResultData | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataman_ResultData Namespace Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoDataman_ResultData : AxoByteArray, IPlain Inheritance object AxoByteArray AxoDataman_ResultData Implements IPlain Inherited Members AxoByteArray.DataChanged object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties Data public byte[] Data { get; set; } Property Value byte[]"
  },
  "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_Results.html": {
    "href": "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_Results.html",
    "title": "Class AxoDataman_Results | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataman_Results Namespace Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoDataman_Results Inheritance object AxoDataman_Results Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties Code public ushort Code { get; set; } Property Value ushort Extended public ushort Extended { get; set; } Property Value ushort Id public ushort Id { get; set; } Property Value ushort Length public ushort Length { get; set; } Property Value ushort"
  },
  "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_ResultsControl.html": {
    "href": "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_ResultsControl.html",
    "title": "Class AxoDataman_ResultsControl | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataman_ResultsControl Namespace Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoDataman_ResultsControl Inheritance object AxoDataman_ResultsControl Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties EnableResultBuffering public bool EnableResultBuffering { get; set; } Property Value bool ResultsAcknowledge public bool ResultsAcknowledge { get; set; } Property Value bool"
  },
  "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_ResultsStatus.html": {
    "href": "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_ResultsStatus.html",
    "title": "Class AxoDataman_ResultsStatus | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataman_ResultsStatus Namespace Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoDataman_ResultsStatus Inheritance object AxoDataman_ResultsStatus Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties DecodeComplete public bool DecodeComplete { get; set; } Property Value bool Decoding public bool Decoding { get; set; } Property Value bool ErrorDetected public bool ErrorDetected { get; set; } Property Value bool ResultsAvailable public bool ResultsAvailable { get; set; } Property Value bool ResultsBufferOverrun public bool ResultsBufferOverrun { get; set; } Property Value bool"
  },
  "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_SoftEventControl.html": {
    "href": "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_SoftEventControl.html",
    "title": "Class AxoDataman_SoftEventControl | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataman_SoftEventControl Namespace Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoDataman_SoftEventControl Inheritance object AxoDataman_SoftEventControl Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties ExecuteDMCC public bool ExecuteDMCC { get; set; } Property Value bool SetMatchString public bool SetMatchString { get; set; } Property Value bool TrainBrightness public bool TrainBrightness { get; set; } Property Value bool TrainCode public bool TrainCode { get; set; } Property Value bool TrainFocus public bool TrainFocus { get; set; } Property Value bool TrainMatchString public bool TrainMatchString { get; set; } Property Value bool Untrain public bool Untrain { get; set; } Property Value bool"
  },
  "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_SoftEventStatus.html": {
    "href": "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_SoftEventStatus.html",
    "title": "Class AxoDataman_SoftEventStatus | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataman_SoftEventStatus Namespace Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoDataman_SoftEventStatus Inheritance object AxoDataman_SoftEventStatus Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties ExecuteDMCCAcknowledge public bool ExecuteDMCCAcknowledge { get; set; } Property Value bool SetMatchStringAcknowledge public bool SetMatchStringAcknowledge { get; set; } Property Value bool TrainBrightnessAcknowledge public bool TrainBrightnessAcknowledge { get; set; } Property Value bool TrainCodeAcknowledge public bool TrainCodeAcknowledge { get; set; } Property Value bool TrainFocusAcknowledge public bool TrainFocusAcknowledge { get; set; } Property Value bool TrainMatchStringAcknowledge public bool TrainMatchStringAcknowledge { get; set; } Property Value bool UntrainAcknowledge public bool UntrainAcknowledge { get; set; } Property Value bool"
  },
  "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_Status.html": {
    "href": "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_Status.html",
    "title": "Class AxoDataman_Status | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataman_Status Namespace Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoDataman_Status : AxoComponent_Status, IPlain Inheritance object AxoComponent_Status AxoDataman_Status Implements IPlain Inherited Members AxoComponent_Status.Action AxoComponent_Status.Error object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties ResultDataSize public short ResultDataSize { get; set; } Property Value short"
  },
  "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_User.html": {
    "href": "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_User.html",
    "title": "Class AxoDataman_User | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataman_User Namespace Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoDataman_User Inheritance object AxoDataman_User Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties Length public ushort Length { get; set; } Property Value ushort Option public ushort Option { get; set; } Property Value ushort"
  },
  "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_UserData.html": {
    "href": "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_UserData.html",
    "title": "Class AxoDataman_UserData | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataman_UserData Namespace Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoDataman_UserData : AxoByteArray, IPlain Inheritance object AxoByteArray AxoDataman_UserData Implements IPlain Inherited Members AxoByteArray.DataChanged object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties Data public byte[] Data { get; set; } Property Value byte[]"
  },
  "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight.html": {
    "href": "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight.html",
    "title": "Class AxoInsight | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsight Namespace Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoInsight : AxoComponent, IAxoObject, IAxoComponent, IPlain, IAxoVisionSensor Inheritance object AxoObject AxoComponent AxoInsight Implements IAxoObject IAxoComponent IPlain IAxoVisionSensor Inherited Members AxoComponent._isManuallyControllable object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties _Messenger public AxoMessenger _Messenger { get; set; } Property Value AxoMessenger _TaskMessenger public AxoMessenger _TaskMessenger { get; set; } Property Value AxoMessenger AcquisitionControl public AxoInsight_AcquisitionControl AcquisitionControl { get; set; } Property Value AxoInsight_AcquisitionControl AcquisitionStatus public AxoInsight_AcquisitionStatus AcquisitionStatus { get; set; } Property Value AxoInsight_AcquisitionStatus ChangeJobByNameTask public AxoInsightChangeJobByName ChangeJobByNameTask { get; set; } Property Value AxoInsightChangeJobByName ChangeJobByNumberTask public AxoInsightChangeJobByNumber ChangeJobByNumberTask { get; set; } Property Value AxoInsightChangeJobByNumber ClearInspectionResultsTask public AxoInsightClearInspectionResults ClearInspectionResultsTask { get; set; } Property Value AxoInsightClearInspectionResults CommandControl public AxoInsight_CommandControl CommandControl { get; set; } Property Value AxoInsight_CommandControl CommandStatus public AxoInsight_CommandStatus CommandStatus { get; set; } Property Value AxoInsight_CommandStatus Config public AxoInsight_Config Config { get; set; } Property Value AxoInsight_Config InspectionControl public AxoInsight_InspectionControl InspectionControl { get; set; } Property Value AxoInsight_InspectionControl InspectionResults public AxoInsight_ResultData InspectionResults { get; set; } Property Value AxoInsight_ResultData InspectionStatus public AxoInsight_InspectionStatus InspectionStatus { get; set; } Property Value AxoInsight_InspectionStatus RequiredJobName public string RequiredJobName { get; set; } Property Value string RequiredJobNumber public ushort RequiredJobNumber { get; set; } Property Value ushort RequiredSoftEventNumber public ushort RequiredSoftEventNumber { get; set; } Property Value ushort RestoreTask public AxoTask RestoreTask { get; set; } Property Value AxoTask Results public AxoInsight_Results Results { get; set; } Property Value AxoInsight_Results SoftEventControl public AxoInsight_SoftEventControl SoftEventControl { get; set; } Property Value AxoInsight_SoftEventControl SoftEventStatus public AxoInsight_SoftEventStatus SoftEventStatus { get; set; } Property Value AxoInsight_SoftEventStatus SoftEventTask public AxoInsightSoftEvent SoftEventTask { get; set; } Property Value AxoInsightSoftEvent Status public AxoInsight_Status Status { get; set; } Property Value AxoInsight_Status TriggerTask public AxoInsightTrigger TriggerTask { get; set; } Property Value AxoInsightTrigger UserData public AxoInsight_UserData UserData { get; set; } Property Value AxoInsight_UserData"
  },
  "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsightChangeJobByName.html": {
    "href": "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsightChangeJobByName.html",
    "title": "Class AxoInsightChangeJobByName | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsightChangeJobByName Namespace Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoInsightChangeJobByName : AxoTask, IAxoObject, IAxoTask, IAxoTaskState, IPlain Inheritance object AxoObject AxoTask AxoInsightChangeJobByName Implements IAxoObject IAxoTask IAxoTaskState IPlain Inherited Members AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails AxoTask._CyclicExecuteIsNotCalled object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsightChangeJobByNumber.html": {
    "href": "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsightChangeJobByNumber.html",
    "title": "Class AxoInsightChangeJobByNumber | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsightChangeJobByNumber Namespace Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoInsightChangeJobByNumber : AxoTask, IAxoObject, IAxoTask, IAxoTaskState, IPlain Inheritance object AxoObject AxoTask AxoInsightChangeJobByNumber Implements IAxoObject IAxoTask IAxoTaskState IPlain Inherited Members AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails AxoTask._CyclicExecuteIsNotCalled object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsightClearInspectionResults.html": {
    "href": "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsightClearInspectionResults.html",
    "title": "Class AxoInsightClearInspectionResults | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsightClearInspectionResults Namespace Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoInsightClearInspectionResults : AxoTask, IAxoObject, IAxoTask, IAxoTaskState, IPlain Inheritance object AxoObject AxoTask AxoInsightClearInspectionResults Implements IAxoObject IAxoTask IAxoTaskState IPlain Inherited Members AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails AxoTask._CyclicExecuteIsNotCalled object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsightSoftEvent.html": {
    "href": "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsightSoftEvent.html",
    "title": "Class AxoInsightSoftEvent | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsightSoftEvent Namespace Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoInsightSoftEvent : AxoTask, IAxoObject, IAxoTask, IAxoTaskState, IPlain Inheritance object AxoObject AxoTask AxoInsightSoftEvent Implements IAxoObject IAxoTask IAxoTaskState IPlain Inherited Members AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails AxoTask._CyclicExecuteIsNotCalled object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsightTrigger.html": {
    "href": "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsightTrigger.html",
    "title": "Class AxoInsightTrigger | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsightTrigger Namespace Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoInsightTrigger : AxoTask, IAxoObject, IAxoTask, IAxoTaskState, IPlain Inheritance object AxoObject AxoTask AxoInsightTrigger Implements IAxoObject IAxoTask IAxoTaskState IPlain Inherited Members AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails AxoTask._CyclicExecuteIsNotCalled object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_AcquisitionControl.html": {
    "href": "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_AcquisitionControl.html",
    "title": "Class AxoInsight_AcquisitionControl | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsight_AcquisitionControl Namespace Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoInsight_AcquisitionControl Inheritance object AxoInsight_AcquisitionControl Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties ClearExposureComplete public bool ClearExposureComplete { get; set; } Property Value bool SetOffline public bool SetOffline { get; set; } Property Value bool Trigger public bool Trigger { get; set; } Property Value bool TriggerEnable public bool TriggerEnable { get; set; } Property Value bool"
  },
  "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_AcquisitionStatus.html": {
    "href": "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_AcquisitionStatus.html",
    "title": "Class AxoInsight_AcquisitionStatus | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsight_AcquisitionStatus Namespace Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoInsight_AcquisitionStatus Inheritance object AxoInsight_AcquisitionStatus Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties AcquisitionID public ushort AcquisitionID { get; set; } Property Value ushort ExposureComplete public bool ExposureComplete { get; set; } Property Value bool MissedAcquisition public bool MissedAcquisition { get; set; } Property Value bool OfflineReason0 public bool OfflineReason0 { get; set; } Property Value bool OfflineReason1 public bool OfflineReason1 { get; set; } Property Value bool OfflineReason2 public bool OfflineReason2 { get; set; } Property Value bool Online public bool Online { get; set; } Property Value bool TriggerAcknowledge public bool TriggerAcknowledge { get; set; } Property Value bool TriggerReady public bool TriggerReady { get; set; } Property Value bool"
  },
  "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_CommandControl.html": {
    "href": "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_CommandControl.html",
    "title": "Class AxoInsight_CommandControl | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsight_CommandControl Namespace Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoInsight_CommandControl Inheritance object AxoInsight_CommandControl Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties Command public ushort Command { get; set; } Property Value ushort"
  },
  "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_CommandStatus.html": {
    "href": "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_CommandStatus.html",
    "title": "Class AxoInsight_CommandStatus | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsight_CommandStatus Namespace Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoInsight_CommandStatus Inheritance object AxoInsight_CommandStatus Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties CurrentJobID public ushort CurrentJobID { get; set; } Property Value ushort"
  },
  "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Config.html": {
    "href": "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Config.html",
    "title": "Class AxoInsight_Config | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsight_Config Namespace Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoInsight_Config Inheritance object AxoInsight_Config Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties ErrorTime public TimeSpan ErrorTime { get; set; } Property Value TimeSpan InfoTime public TimeSpan InfoTime { get; set; } Property Value TimeSpan MaxJobNumber public ushort MaxJobNumber { get; set; } Property Value ushort"
  },
  "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_InspectionControl.html": {
    "href": "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_InspectionControl.html",
    "title": "Class AxoInsight_InspectionControl | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsight_InspectionControl Namespace Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoInsight_InspectionControl Inheritance object AxoInsight_InspectionControl Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties AcknowledgeInspectionResults public bool AcknowledgeInspectionResults { get; set; } Property Value bool ClearError public bool ClearError { get; set; } Property Value bool EnableResultsBuffering public bool EnableResultsBuffering { get; set; } Property Value bool ExecuteCommand public bool ExecuteCommand { get; set; } Property Value bool ExtendedUserDataSet public bool ExtendedUserDataSet { get; set; } Property Value bool"
  },
  "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_InspectionStatus.html": {
    "href": "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_InspectionStatus.html",
    "title": "Class AxoInsight_InspectionStatus | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsight_InspectionStatus Namespace Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoInsight_InspectionStatus Inheritance object AxoInsight_InspectionStatus Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties CommandComplete public bool CommandComplete { get; set; } Property Value bool CommandExecuting public bool CommandExecuting { get; set; } Property Value bool CommandFailed public bool CommandFailed { get; set; } Property Value bool Error public bool Error { get; set; } Property Value bool ErrorCode public ushort ErrorCode { get; set; } Property Value ushort ExtendedUserDataSetAcknowledge public bool ExtendedUserDataSetAcknowledge { get; set; } Property Value bool InspectionCompleted public bool InspectionCompleted { get; set; } Property Value bool OverallJobPassFail public bool OverallJobPassFail { get; set; } Property Value bool ResultsBufferOverrun public bool ResultsBufferOverrun { get; set; } Property Value bool ResultsValid public bool ResultsValid { get; set; } Property Value bool SystemBusy public bool SystemBusy { get; set; } Property Value bool TestRunReady public bool TestRunReady { get; set; } Property Value bool"
  },
  "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_ResultData.html": {
    "href": "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_ResultData.html",
    "title": "Class AxoInsight_ResultData | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsight_ResultData Namespace Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoInsight_ResultData : AxoByteArray, IPlain Inheritance object AxoByteArray AxoInsight_ResultData Implements IPlain Inherited Members AxoByteArray.DataChanged object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties Data public byte[] Data { get; set; } Property Value byte[]"
  },
  "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Results.html": {
    "href": "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Results.html",
    "title": "Class AxoInsight_Results | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsight_Results Namespace Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoInsight_Results Inheritance object AxoInsight_Results Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties InspectionID public ushort InspectionID { get; set; } Property Value ushort ResultCode public ushort ResultCode { get; set; } Property Value ushort"
  },
  "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_SoftEventControl.html": {
    "href": "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_SoftEventControl.html",
    "title": "Class AxoInsight_SoftEventControl | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsight_SoftEventControl Namespace Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoInsight_SoftEventControl Inheritance object AxoInsight_SoftEventControl Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties TriggerSoftEvent public AxoBoolArray8 TriggerSoftEvent { get; set; } Property Value AxoBoolArray8"
  },
  "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_SoftEventStatus.html": {
    "href": "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_SoftEventStatus.html",
    "title": "Class AxoInsight_SoftEventStatus | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsight_SoftEventStatus Namespace Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoInsight_SoftEventStatus Inheritance object AxoInsight_SoftEventStatus Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties TriggerSoftEventAcknowledge public AxoBoolArray8 TriggerSoftEventAcknowledge { get; set; } Property Value AxoBoolArray8"
  },
  "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Status.html": {
    "href": "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Status.html",
    "title": "Class AxoInsight_Status | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsight_Status Namespace Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoInsight_Status : AxoComponent_Status, IPlain Inheritance object AxoComponent_Status AxoInsight_Status Implements IPlain Inherited Members AxoComponent_Status.Action AxoComponent_Status.Error object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties CurrentJobName public string CurrentJobName { get; set; } Property Value string CurrentJobNumber public ushort CurrentJobNumber { get; set; } Property Value ushort ResultDataSize public short ResultDataSize { get; set; } Property Value short UserDataSize public short UserDataSize { get; set; } Property Value short"
  },
  "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_UserData.html": {
    "href": "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_UserData.html",
    "title": "Class AxoInsight_UserData | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsight_UserData Namespace Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0 Assembly ix_ax_axopen_components_cognex_vision.dll public class AxoInsight_UserData : AxoByteArray, IPlain Inheritance object AxoByteArray AxoInsight_UserData Implements IPlain Inherited Members AxoByteArray.DataChanged object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties Data public byte[] Data { get; set; } Property Value byte[]"
  },
  "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.html": {
    "href": "api/Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0.html",
    "title": "Namespace Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0 | System.Dynamic.ExpandoObject",
    "keywords": "Namespace Pocos.AXOpen.Components.Cognex.Vision.v_6_0_0_0 Classes AxoBoolArray8 AxoDataman AxoDataman_AcquisitionControl AxoDataman_AcquisitionStatus AxoDataman_Config AxoDataman_ResultData AxoDataman_Results AxoDataman_ResultsControl AxoDataman_ResultsStatus AxoDataman_SoftEventControl AxoDataman_SoftEventStatus AxoDataman_Status AxoDataman_User AxoDataman_UserData AxoDatamanClearResultData AxoDatamanRead AxoInsight AxoInsight_AcquisitionControl AxoInsight_AcquisitionStatus AxoInsight_CommandControl AxoInsight_CommandStatus AxoInsight_Config AxoInsight_InspectionControl AxoInsight_InspectionStatus AxoInsight_ResultData AxoInsight_Results AxoInsight_SoftEventControl AxoInsight_SoftEventStatus AxoInsight_Status AxoInsight_UserData AxoInsightChangeJobByName AxoInsightChangeJobByNumber AxoInsightClearInspectionResults AxoInsightSoftEvent AxoInsightTrigger"
  },
  "api/Pocos.AXOpen.Components.Pneumatics.AxoCylinder.html": {
    "href": "api/Pocos.AXOpen.Components.Pneumatics.AxoCylinder.html",
    "title": "Class AxoCylinder | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoCylinder Namespace Pocos.AXOpen.Components.Pneumatics Assembly ix_ax_axopen_components_pneumatics.dll public class AxoCylinder : AxoComponent, IAxoObject, IAxoComponent, IPlain Inheritance object AxoObject AxoComponent AxoCylinder Implements IAxoObject IAxoComponent IPlain Inherited Members AxoComponent._isManuallyControllable object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties _HomeSensor public bool _HomeSensor { get; set; } Property Value bool _Messenger public AxoMessenger _Messenger { get; set; } Property Value AxoMessenger _MoveHomeSignal public bool _MoveHomeSignal { get; set; } Property Value bool _MoveToHomeTask public AxoTask _MoveToHomeTask { get; set; } Property Value AxoTask _MoveToWorkTask public AxoTask _MoveToWorkTask { get; set; } Property Value AxoTask _MoveWorkSignal public bool _MoveWorkSignal { get; set; } Property Value bool _StopTask public AxoTask _StopTask { get; set; } Property Value AxoTask _WorkSensor public bool _WorkSensor { get; set; } Property Value bool"
  },
  "api/Pocos.AXOpen.Components.Pneumatics.html": {
    "href": "api/Pocos.AXOpen.Components.Pneumatics.html",
    "title": "Namespace Pocos.AXOpen.Components.Pneumatics | System.Dynamic.ExpandoObject",
    "keywords": "Namespace Pocos.AXOpen.Components.Pneumatics Classes AxoCylinder"
  },
  "api/Pocos.AXOpen.Core.AxoAlertDialog.html": {
    "href": "api/Pocos.AXOpen.Core.AxoAlertDialog.html",
    "title": "Class AxoAlertDialog | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoAlertDialog Namespace Pocos.AXOpen.Core Assembly ix_ax_axopen_core.dll public class AxoAlertDialog : AxoRemoteTask, IAxoObject, IAxoTask, IAxoTaskState, IPlain, IAxoAlertDialogFormat Inheritance object AxoObject AxoTask AxoRemoteTask AxoAlertDialog Implements IAxoObject IAxoTask IAxoTaskState IPlain IAxoAlertDialogFormat Inherited Members AxoRemoteTask.DoneSignature AxoRemoteTask.IsInitialized AxoRemoteTask.HasRemoteException AxoRemoteTask.IsBeingCalledCounter AxoRemoteTask.TaskNotInitialized AxoRemoteTask.TaskHasRemoteException AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails AxoTask._CyclicExecuteIsNotCalled object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties _dialogType public short _dialogType { get; set; } Property Value short _message public string _message { get; set; } Property Value string _timeToBurn public ushort _timeToBurn { get; set; } Property Value ushort _title public string _title { get; set; } Property Value string"
  },
  "api/Pocos.AXOpen.Core.AxoBoolArray.html": {
    "href": "api/Pocos.AXOpen.Core.AxoBoolArray.html",
    "title": "Class AxoBoolArray | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoBoolArray Namespace Pocos.AXOpen.Core Assembly ix_ax_axopen_core.dll public class AxoBoolArray : IPlain Inheritance object AxoBoolArray Implements IPlain Derived AxoBoolArray8 Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties DataChanged public bool DataChanged { get; set; } Property Value bool"
  },
  "api/Pocos.AXOpen.Core.AxoByteArray.html": {
    "href": "api/Pocos.AXOpen.Core.AxoByteArray.html",
    "title": "Class AxoByteArray | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoByteArray Namespace Pocos.AXOpen.Core Assembly ix_ax_axopen_core.dll public class AxoByteArray : IPlain Inheritance object AxoByteArray Implements IPlain Derived AxoDataman_ResultData AxoDataman_UserData AxoInsight_ResultData AxoInsight_UserData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties DataChanged public bool DataChanged { get; set; } Property Value bool"
  },
  "api/Pocos.AXOpen.Core.AxoComponent.html": {
    "href": "api/Pocos.AXOpen.Core.AxoComponent.html",
    "title": "Class AxoComponent | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoComponent Namespace Pocos.AXOpen.Core Assembly ix_ax_axopen_core.dll public class AxoComponent : AxoObject, IAxoObject, IPlain, IAxoComponent Inheritance object AxoObject AxoComponent Implements IAxoObject IPlain IAxoComponent Derived AxoDataman AxoInsight AxoCylinder AxoAi AxoAo AxoDi AxoDo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties _isManuallyControllable public bool _isManuallyControllable { get; set; } Property Value bool"
  },
  "api/Pocos.AXOpen.Core.AxoContext.html": {
    "href": "api/Pocos.AXOpen.Core.AxoContext.html",
    "title": "Class AxoContext | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoContext Namespace Pocos.AXOpen.Core Assembly ix_ax_axopen_core.dll public class AxoContext : IPlain, IAxoContext Inheritance object AxoContext Implements IPlain IAxoContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/Pocos.AXOpen.Core.AxoDialog.html": {
    "href": "api/Pocos.AXOpen.Core.AxoDialog.html",
    "title": "Class AxoDialog | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDialog Namespace Pocos.AXOpen.Core Assembly ix_ax_axopen_core.dll public class AxoDialog : AxoDialogBase, IAxoObject, IAxoTask, IAxoTaskState, IPlain, IAxoDialogFormat, IAxoDialogAnswer Inheritance object AxoObject AxoTask AxoRemoteTask AxoDialogBase AxoDialog Implements IAxoObject IAxoTask IAxoTaskState IPlain IAxoDialogFormat IAxoDialogAnswer Inherited Members AxoRemoteTask.DoneSignature AxoRemoteTask.IsInitialized AxoRemoteTask.HasRemoteException AxoRemoteTask.IsBeingCalledCounter AxoRemoteTask.TaskNotInitialized AxoRemoteTask.TaskHasRemoteException AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails AxoTask._CyclicExecuteIsNotCalled object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties _answer public short _answer { get; set; } Property Value short _caption public string _caption { get; set; } Property Value string _closeSignal public bool _closeSignal { get; set; } Property Value bool _dialogType public short _dialogType { get; set; } Property Value short _externalCloseReq public bool _externalCloseReq { get; set; } Property Value bool _hasCancel public bool _hasCancel { get; set; } Property Value bool _hasNo public bool _hasNo { get; set; } Property Value bool _hasOK public bool _hasOK { get; set; } Property Value bool _hasYes public bool _hasYes { get; set; } Property Value bool _risingEdge public bool _risingEdge { get; set; } Property Value bool _text public string _text { get; set; } Property Value string"
  },
  "api/Pocos.AXOpen.Core.AxoDialogBase.html": {
    "href": "api/Pocos.AXOpen.Core.AxoDialogBase.html",
    "title": "Class AxoDialogBase | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDialogBase Namespace Pocos.AXOpen.Core Assembly ix_ax_axopen_core.dll public class AxoDialogBase : AxoRemoteTask, IAxoObject, IAxoTask, IAxoTaskState, IPlain Inheritance object AxoObject AxoTask AxoRemoteTask AxoDialogBase Implements IAxoObject IAxoTask IAxoTaskState IPlain Derived AxoDialog Inherited Members AxoRemoteTask.DoneSignature AxoRemoteTask.IsInitialized AxoRemoteTask.HasRemoteException AxoRemoteTask.IsBeingCalledCounter AxoRemoteTask.TaskNotInitialized AxoRemoteTask.TaskHasRemoteException AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails AxoTask._CyclicExecuteIsNotCalled object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/Pocos.AXOpen.Core.AxoMomentaryTask.html": {
    "href": "api/Pocos.AXOpen.Core.AxoMomentaryTask.html",
    "title": "Class AxoMomentaryTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoMomentaryTask Namespace Pocos.AXOpen.Core Assembly ix_ax_axopen_core.dll public class AxoMomentaryTask : AxoObject, IAxoObject, IPlain, IAxoMomentaryTask Inheritance object AxoObject AxoMomentaryTask Implements IAxoObject IPlain IAxoMomentaryTask Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties IsDisabled public bool IsDisabled { get; set; } Property Value bool RemoteSwitchOn public bool RemoteSwitchOn { get; set; } Property Value bool State public bool State { get; set; } Property Value bool"
  },
  "api/Pocos.AXOpen.Core.AxoObject.html": {
    "href": "api/Pocos.AXOpen.Core.AxoObject.html",
    "title": "Class AxoObject | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoObject Namespace Pocos.AXOpen.Core Assembly ix_ax_axopen_core.dll public class AxoObject : IPlain, IAxoObject Inheritance object AxoObject Implements IPlain IAxoObject Derived AxoComponent AxoMomentaryTask AxoTask AxoToggleTask AxoDataExchangeBase AxoMessenger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/Pocos.AXOpen.Core.AxoRemoteTask.html": {
    "href": "api/Pocos.AXOpen.Core.AxoRemoteTask.html",
    "title": "Class AxoRemoteTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoRemoteTask Namespace Pocos.AXOpen.Core Assembly ix_ax_axopen_core.dll public class AxoRemoteTask : AxoTask, IAxoObject, IAxoTask, IAxoTaskState, IPlain Inheritance object AxoObject AxoTask AxoRemoteTask Implements IAxoObject IAxoTask IAxoTaskState IPlain Derived AxoAlertDialog AxoDialogBase AxoDataExchangeTask Inherited Members AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails AxoTask._CyclicExecuteIsNotCalled object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties DoneSignature public ulong DoneSignature { get; set; } Property Value ulong HasRemoteException public bool HasRemoteException { get; set; } Property Value bool IsBeingCalledCounter public short IsBeingCalledCounter { get; set; } Property Value short IsInitialized public bool IsInitialized { get; set; } Property Value bool TaskHasRemoteException public AxoMessenger TaskHasRemoteException { get; set; } Property Value AxoMessenger TaskNotInitialized public AxoMessenger TaskNotInitialized { get; set; } Property Value AxoMessenger"
  },
  "api/Pocos.AXOpen.Core.AxoSequencer.html": {
    "href": "api/Pocos.AXOpen.Core.AxoSequencer.html",
    "title": "Class AxoSequencer | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoSequencer Namespace Pocos.AXOpen.Core Assembly ix_ax_axopen_core.dll public class AxoSequencer : AxoTask, IAxoObject, IAxoTask, IAxoTaskState, IPlain Inheritance object AxoObject AxoTask AxoSequencer Implements IAxoObject IAxoTask IAxoTaskState IPlain Derived AxoSequencerContainer Inherited Members AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails AxoTask._CyclicExecuteIsNotCalled object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties AfterStep public AxoStep AfterStep { get; set; } Property Value AxoStep BeforeStep public AxoStep BeforeStep { get; set; } Property Value AxoStep CurrentOrder public ulong CurrentOrder { get; set; } Property Value ulong CurrentStep public AxoStep CurrentStep { get; set; } Property Value AxoStep SequenceMode public short SequenceMode { get; set; } Property Value short StepBackwardCommand public AxoTask StepBackwardCommand { get; set; } Property Value AxoTask StepForwardCommand public AxoTask StepForwardCommand { get; set; } Property Value AxoTask StepIn public AxoTask StepIn { get; set; } Property Value AxoTask SteppingMode public short SteppingMode { get; set; } Property Value short"
  },
  "api/Pocos.AXOpen.Core.AxoSequencerContainer.html": {
    "href": "api/Pocos.AXOpen.Core.AxoSequencerContainer.html",
    "title": "Class AxoSequencerContainer | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoSequencerContainer Namespace Pocos.AXOpen.Core Assembly ix_ax_axopen_core.dll public class AxoSequencerContainer : AxoSequencer, IAxoObject, IAxoTask, IAxoTaskState, IPlain Inheritance object AxoObject AxoTask AxoSequencer AxoSequencerContainer Implements IAxoObject IAxoTask IAxoTaskState IPlain Inherited Members AxoSequencer.SteppingMode AxoSequencer.SequenceMode AxoSequencer.CurrentOrder AxoSequencer.StepForwardCommand AxoSequencer.StepIn AxoSequencer.StepBackwardCommand AxoSequencer.BeforeStep AxoSequencer.CurrentStep AxoSequencer.AfterStep AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails AxoTask._CyclicExecuteIsNotCalled object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/Pocos.AXOpen.Core.AxoStep.html": {
    "href": "api/Pocos.AXOpen.Core.AxoStep.html",
    "title": "Class AxoStep | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoStep Namespace Pocos.AXOpen.Core Assembly ix_ax_axopen_core.dll public class AxoStep : AxoTask, IAxoObject, IAxoTask, IAxoTaskState, IPlain, IAxoStep Inheritance object AxoObject AxoTask AxoStep Implements IAxoObject IAxoTask IAxoTaskState IPlain IAxoStep Inherited Members AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails AxoTask._CyclicExecuteIsNotCalled object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties IsActive public bool IsActive { get; set; } Property Value bool IsEnabled public bool IsEnabled { get; set; } Property Value bool Order public ulong Order { get; set; } Property Value ulong StepDescription public string StepDescription { get; set; } Property Value string"
  },
  "api/Pocos.AXOpen.Core.AxoTask.html": {
    "href": "api/Pocos.AXOpen.Core.AxoTask.html",
    "title": "Class AxoTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoTask Namespace Pocos.AXOpen.Core Assembly ix_ax_axopen_core.dll public class AxoTask : AxoObject, IAxoObject, IPlain, IAxoTask, IAxoTaskState Inheritance object AxoObject AxoTask Implements IAxoObject IPlain IAxoTask IAxoTaskState Derived AxoDatamanClearResultData AxoDatamanRead AxoInsightChangeJobByName AxoInsightChangeJobByNumber AxoInsightClearInspectionResults AxoInsightSoftEvent AxoInsightTrigger AxoRemoteTask AxoSequencer AxoStep Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties _CyclicExecuteIsNotCalled public AxoMessenger _CyclicExecuteIsNotCalled { get; set; } Property Value AxoMessenger Duration public TimeSpan Duration { get; set; } Property Value TimeSpan ErrorDetails public string ErrorDetails { get; set; } Property Value string IsDisabled public bool IsDisabled { get; set; } Property Value bool RemoteAbort public bool RemoteAbort { get; set; } Property Value bool RemoteInvoke public bool RemoteInvoke { get; set; } Property Value bool RemoteRestore public bool RemoteRestore { get; set; } Property Value bool RemoteResume public bool RemoteResume { get; set; } Property Value bool StartSignature public ulong StartSignature { get; set; } Property Value ulong StartTimeStamp public DateTime StartTimeStamp { get; set; } Property Value DateTime Status public short Status { get; set; } Property Value short"
  },
  "api/Pocos.AXOpen.Core.AxoTextList.html": {
    "href": "api/Pocos.AXOpen.Core.AxoTextList.html",
    "title": "Class AxoTextList | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoTextList Namespace Pocos.AXOpen.Core Assembly ix_ax_axopen_core.dll public class AxoTextList : IPlain Inheritance object AxoTextList Implements IPlain Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties Id public ushort Id { get; set; } Property Value ushort"
  },
  "api/Pocos.AXOpen.Core.AxoToggleTask.html": {
    "href": "api/Pocos.AXOpen.Core.AxoToggleTask.html",
    "title": "Class AxoToggleTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoToggleTask Namespace Pocos.AXOpen.Core Assembly ix_ax_axopen_core.dll public class AxoToggleTask : AxoObject, IAxoObject, IPlain, IAxoToggleTask Inheritance object AxoObject AxoToggleTask Implements IAxoObject IPlain IAxoToggleTask Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties IsDisabled public bool IsDisabled { get; set; } Property Value bool RemoteToggle public bool RemoteToggle { get; set; } Property Value bool State public bool State { get; set; } Property Value bool"
  },
  "api/Pocos.AXOpen.Core.IAxoAlertDialogFormat.html": {
    "href": "api/Pocos.AXOpen.Core.IAxoAlertDialogFormat.html",
    "title": "Interface IAxoAlertDialogFormat | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoAlertDialogFormat Namespace Pocos.AXOpen.Core Assembly ix_ax_axopen_core.dll public interface IAxoAlertDialogFormat Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/Pocos.AXOpen.Core.IAxoComponent.html": {
    "href": "api/Pocos.AXOpen.Core.IAxoComponent.html",
    "title": "Interface IAxoComponent | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoComponent Namespace Pocos.AXOpen.Core Assembly ix_ax_axopen_core.dll public interface IAxoComponent Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/Pocos.AXOpen.Core.IAxoContext.html": {
    "href": "api/Pocos.AXOpen.Core.IAxoContext.html",
    "title": "Interface IAxoContext | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoContext Namespace Pocos.AXOpen.Core Assembly ix_ax_axopen_abstractions.dll public interface IAxoContext Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/Pocos.AXOpen.Core.IAxoCoordinator.html": {
    "href": "api/Pocos.AXOpen.Core.IAxoCoordinator.html",
    "title": "Interface IAxoCoordinator | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoCoordinator Namespace Pocos.AXOpen.Core Assembly ix_ax_axopen_core.dll public interface IAxoCoordinator Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/Pocos.AXOpen.Core.IAxoDialogAnswer.html": {
    "href": "api/Pocos.AXOpen.Core.IAxoDialogAnswer.html",
    "title": "Interface IAxoDialogAnswer | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoDialogAnswer Namespace Pocos.AXOpen.Core Assembly ix_ax_axopen_core.dll public interface IAxoDialogAnswer Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/Pocos.AXOpen.Core.IAxoDialogFormat.html": {
    "href": "api/Pocos.AXOpen.Core.IAxoDialogFormat.html",
    "title": "Interface IAxoDialogFormat | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoDialogFormat Namespace Pocos.AXOpen.Core Assembly ix_ax_axopen_core.dll public interface IAxoDialogFormat Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/Pocos.AXOpen.Core.IAxoManuallyControllable.html": {
    "href": "api/Pocos.AXOpen.Core.IAxoManuallyControllable.html",
    "title": "Interface IAxoManuallyControllable | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoManuallyControllable Namespace Pocos.AXOpen.Core Assembly ix_ax_axopen_core.dll public interface IAxoManuallyControllable Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/Pocos.AXOpen.Core.IAxoMomentaryTask.html": {
    "href": "api/Pocos.AXOpen.Core.IAxoMomentaryTask.html",
    "title": "Interface IAxoMomentaryTask | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoMomentaryTask Namespace Pocos.AXOpen.Core Assembly ix_ax_axopen_core.dll public interface IAxoMomentaryTask Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/Pocos.AXOpen.Core.IAxoObject.html": {
    "href": "api/Pocos.AXOpen.Core.IAxoObject.html",
    "title": "Interface IAxoObject | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoObject Namespace Pocos.AXOpen.Core Assembly ix_ax_axopen_abstractions.dll public interface IAxoObject Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/Pocos.AXOpen.Core.IAxoStep.html": {
    "href": "api/Pocos.AXOpen.Core.IAxoStep.html",
    "title": "Interface IAxoStep | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoStep Namespace Pocos.AXOpen.Core Assembly ix_ax_axopen_core.dll public interface IAxoStep Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/Pocos.AXOpen.Core.IAxoTask.html": {
    "href": "api/Pocos.AXOpen.Core.IAxoTask.html",
    "title": "Interface IAxoTask | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoTask Namespace Pocos.AXOpen.Core Assembly ix_ax_axopen_core.dll public interface IAxoTask Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/Pocos.AXOpen.Core.IAxoTaskState.html": {
    "href": "api/Pocos.AXOpen.Core.IAxoTaskState.html",
    "title": "Interface IAxoTaskState | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoTaskState Namespace Pocos.AXOpen.Core Assembly ix_ax_axopen_core.dll public interface IAxoTaskState Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/Pocos.AXOpen.Core.IAxoToggleTask.html": {
    "href": "api/Pocos.AXOpen.Core.IAxoToggleTask.html",
    "title": "Interface IAxoToggleTask | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoToggleTask Namespace Pocos.AXOpen.Core Assembly ix_ax_axopen_core.dll public interface IAxoToggleTask Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/Pocos.AXOpen.Core._NULL_CONTEXT.html": {
    "href": "api/Pocos.AXOpen.Core._NULL_CONTEXT.html",
    "title": "Class _NULL_CONTEXT | System.Dynamic.ExpandoObject",
    "keywords": "Class _NULL_CONTEXT Namespace Pocos.AXOpen.Core Assembly ix_ax_axopen_core.dll public class _NULL_CONTEXT : IPlain, IAxoContext Inheritance object _NULL_CONTEXT Implements IPlain IAxoContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/Pocos.AXOpen.Core._NULL_LOGGER.html": {
    "href": "api/Pocos.AXOpen.Core._NULL_LOGGER.html",
    "title": "Class _NULL_LOGGER | System.Dynamic.ExpandoObject",
    "keywords": "Class _NULL_LOGGER Namespace Pocos.AXOpen.Core Assembly ix_ax_axopen_core.dll public class _NULL_LOGGER : IPlain, IAxoLogger Inheritance object _NULL_LOGGER Implements IPlain IAxoLogger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/Pocos.AXOpen.Core._NULL_OBJECT.html": {
    "href": "api/Pocos.AXOpen.Core._NULL_OBJECT.html",
    "title": "Class _NULL_OBJECT | System.Dynamic.ExpandoObject",
    "keywords": "Class _NULL_OBJECT Namespace Pocos.AXOpen.Core Assembly ix_ax_axopen_core.dll public class _NULL_OBJECT : IPlain, IAxoObject Inheritance object _NULL_OBJECT Implements IPlain IAxoObject Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/Pocos.AXOpen.Core._NULL_RTC.html": {
    "href": "api/Pocos.AXOpen.Core._NULL_RTC.html",
    "title": "Class _NULL_RTC | System.Dynamic.ExpandoObject",
    "keywords": "Class _NULL_RTC Namespace Pocos.AXOpen.Core Assembly ix_ax_axopen_core.dll public class _NULL_RTC : IPlain, IAxoRtc Inheritance object _NULL_RTC Implements IPlain IAxoRtc Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/Pocos.AXOpen.Core.html": {
    "href": "api/Pocos.AXOpen.Core.html",
    "title": "Namespace Pocos.AXOpen.Core | System.Dynamic.ExpandoObject",
    "keywords": "Namespace Pocos.AXOpen.Core Classes _NULL_CONTEXT _NULL_LOGGER _NULL_OBJECT _NULL_RTC AxoAlertDialog AxoBoolArray AxoByteArray AxoComponent AxoContext AxoDialog AxoDialogBase AxoMomentaryTask AxoObject AxoRemoteTask AxoSequencer AxoSequencerContainer AxoStep AxoTask AxoTextList AxoToggleTask Interfaces IAxoAlertDialogFormat IAxoComponent IAxoContext IAxoCoordinator IAxoDialogAnswer IAxoDialogFormat IAxoManuallyControllable IAxoMomentaryTask IAxoObject IAxoStep IAxoTask IAxoTaskState IAxoToggleTask"
  },
  "api/Pocos.AXOpen.Data.AxoDataCrudTask.html": {
    "href": "api/Pocos.AXOpen.Data.AxoDataCrudTask.html",
    "title": "Class AxoDataCrudTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataCrudTask Namespace Pocos.AXOpen.Data Assembly ix_ax_axopen_data.dll public class AxoDataCrudTask : AxoDataExchangeTask, IAxoObject, IAxoTask, IAxoTaskState, IAxoEntityExistTaskState, IPlain Inheritance object AxoObject AxoTask AxoRemoteTask AxoDataExchangeTask AxoDataCrudTask Implements IAxoObject IAxoTask IAxoTaskState IAxoEntityExistTaskState IPlain Inherited Members AxoDataExchangeTask.DataEntityIdentifier AxoDataExchangeTask._exist AxoRemoteTask.DoneSignature AxoRemoteTask.IsInitialized AxoRemoteTask.HasRemoteException AxoRemoteTask.IsBeingCalledCounter AxoRemoteTask.TaskNotInitialized AxoRemoteTask.TaskHasRemoteException AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails AxoTask._CyclicExecuteIsNotCalled object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties CrudOperation public eCrudOperation CrudOperation { get; set; } Property Value eCrudOperation"
  },
  "api/Pocos.AXOpen.Data.AxoDataEntity.html": {
    "href": "api/Pocos.AXOpen.Data.AxoDataEntity.html",
    "title": "Class AxoDataEntity | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataEntity Namespace Pocos.AXOpen.Data Assembly ix_ax_axopen_data.dll public class AxoDataEntity : IAxoDataEntity, IBrowsableDataObject, IPlain Inheritance object AxoDataEntity Implements IAxoDataEntity IBrowsableDataObject IPlain Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties Changes public List<ValueChangeItem> Changes { get; set; } Property Value List<ValueChangeItem> DataEntityId public string DataEntityId { get; set; } Property Value string Hash public string Hash { get; set; } Property Value string RecordId public dynamic RecordId { get; set; } Property Value dynamic"
  },
  "api/Pocos.AXOpen.Data.AxoDataExchange.html": {
    "href": "api/Pocos.AXOpen.Data.AxoDataExchange.html",
    "title": "Class AxoDataExchange | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataExchange Namespace Pocos.AXOpen.Data Assembly ix_ax_axopen_data.dll public class AxoDataExchange : AxoDataExchangeBase, IAxoObject, IPlain, IAxoDataExchange Inheritance object AxoObject AxoDataExchangeBase AxoDataExchange Implements IAxoObject IPlain IAxoDataExchange Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties Operation public AxoDataCrudTask Operation { get; set; } Property Value AxoDataCrudTask"
  },
  "api/Pocos.AXOpen.Data.AxoDataExchangeBase.html": {
    "href": "api/Pocos.AXOpen.Data.AxoDataExchangeBase.html",
    "title": "Class AxoDataExchangeBase | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataExchangeBase Namespace Pocos.AXOpen.Data Assembly ix_ax_axopen_data.dll public class AxoDataExchangeBase : AxoObject, IAxoObject, IPlain Inheritance object AxoObject AxoDataExchangeBase Implements IAxoObject IPlain Derived AxoDataExchange AxoDataFragmentExchange Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/Pocos.AXOpen.Data.AxoDataExchangeTask.html": {
    "href": "api/Pocos.AXOpen.Data.AxoDataExchangeTask.html",
    "title": "Class AxoDataExchangeTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataExchangeTask Namespace Pocos.AXOpen.Data Assembly ix_ax_axopen_data.dll public class AxoDataExchangeTask : AxoRemoteTask, IAxoObject, IAxoTask, IAxoTaskState, IPlain, IAxoEntityExistTaskState Inheritance object AxoObject AxoTask AxoRemoteTask AxoDataExchangeTask Implements IAxoObject IAxoTask IAxoTaskState IPlain IAxoEntityExistTaskState Derived AxoDataCrudTask Inherited Members AxoRemoteTask.DoneSignature AxoRemoteTask.IsInitialized AxoRemoteTask.HasRemoteException AxoRemoteTask.IsBeingCalledCounter AxoRemoteTask.TaskNotInitialized AxoRemoteTask.TaskHasRemoteException AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.Duration AxoTask.StartTimeStamp AxoTask.ErrorDetails AxoTask._CyclicExecuteIsNotCalled object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties _exist public bool _exist { get; set; } Property Value bool DataEntityIdentifier public string DataEntityIdentifier { get; set; } Property Value string"
  },
  "api/Pocos.AXOpen.Data.AxoDataFragmentExchange.html": {
    "href": "api/Pocos.AXOpen.Data.AxoDataFragmentExchange.html",
    "title": "Class AxoDataFragmentExchange | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataFragmentExchange Namespace Pocos.AXOpen.Data Assembly ix_ax_axopen_data.dll public class AxoDataFragmentExchange : AxoDataExchangeBase, IAxoObject, IPlain, IAxoDataExchange Inheritance object AxoObject AxoDataExchangeBase AxoDataFragmentExchange Implements IAxoObject IPlain IAxoDataExchange Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties Operation public AxoDataCrudTask Operation { get; set; } Property Value AxoDataCrudTask"
  },
  "api/Pocos.AXOpen.Data.IAxoDataEntity.html": {
    "href": "api/Pocos.AXOpen.Data.IAxoDataEntity.html",
    "title": "Interface IAxoDataEntity | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoDataEntity Namespace Pocos.AXOpen.Data Assembly ix_ax_axopen_data.dll public interface IAxoDataEntity : IBrowsableDataObject Inherited Members IBrowsableDataObject.RecordId Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties Changes List<ValueChangeItem> Changes { get; set; } Property Value List<ValueChangeItem> DataEntityId string DataEntityId { get; set; } Property Value string Hash string Hash { get; set; } Property Value string"
  },
  "api/Pocos.AXOpen.Data.IAxoDataExchange.html": {
    "href": "api/Pocos.AXOpen.Data.IAxoDataExchange.html",
    "title": "Interface IAxoDataExchange | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoDataExchange Namespace Pocos.AXOpen.Data Assembly ix_ax_axopen_data.dll public interface IAxoDataExchange Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/Pocos.AXOpen.Data.IAxoEntityExistTaskState.html": {
    "href": "api/Pocos.AXOpen.Data.IAxoEntityExistTaskState.html",
    "title": "Interface IAxoEntityExistTaskState | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoEntityExistTaskState Namespace Pocos.AXOpen.Data Assembly ix_ax_axopen_data.dll public interface IAxoEntityExistTaskState Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/Pocos.AXOpen.Data.html": {
    "href": "api/Pocos.AXOpen.Data.html",
    "title": "Namespace Pocos.AXOpen.Data | System.Dynamic.ExpandoObject",
    "keywords": "Namespace Pocos.AXOpen.Data Classes AxoDataCrudTask AxoDataEntity AxoDataExchange AxoDataExchangeBase AxoDataExchangeTask AxoDataFragmentExchange Interfaces IAxoDataEntity IAxoDataExchange IAxoEntityExistTaskState"
  },
  "api/Pocos.AXOpen.Elements.AxoAi.html": {
    "href": "api/Pocos.AXOpen.Elements.AxoAi.html",
    "title": "Class AxoAi | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoAi Namespace Pocos.AXOpen.Elements Assembly ix_ax_axopen_components_elements.dll public class AxoAi : AxoComponent, IAxoObject, IAxoComponent, IPlain Inheritance object AxoObject AxoComponent AxoAi Implements IAxoObject IAxoComponent IPlain Inherited Members AxoComponent._isManuallyControllable object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties _config public AxoAiConfig _config { get; set; } Property Value AxoAiConfig _messengerDivisionByZero public AxoMessenger _messengerDivisionByZero { get; set; } Property Value AxoMessenger _messengerGainNotDefined public AxoMessenger _messengerGainNotDefined { get; set; } Property Value AxoMessenger _messengerOutOfBoundaries public AxoMessenger _messengerOutOfBoundaries { get; set; } Property Value AxoMessenger _rawRange public float _rawRange { get; set; } Property Value float _realRange public float _realRange { get; set; } Property Value float _scaled public float _scaled { get; set; } Property Value float _status public AxoAiStatus _status { get; set; } Property Value AxoAiStatus"
  },
  "api/Pocos.AXOpen.Elements.AxoAiConfig.html": {
    "href": "api/Pocos.AXOpen.Elements.AxoAiConfig.html",
    "title": "Class AxoAiConfig | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoAiConfig Namespace Pocos.AXOpen.Elements Assembly ix_ax_axopen_components_elements.dll public class AxoAiConfig : IPlain Inheritance object AxoAiConfig Implements IPlain Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties Gain public float Gain { get; set; } Property Value float Offset public float Offset { get; set; } Property Value float RawHigh public int RawHigh { get; set; } Property Value int RawLow public int RawLow { get; set; } Property Value int RealHigh public float RealHigh { get; set; } Property Value float RealLow public float RealLow { get; set; } Property Value float"
  },
  "api/Pocos.AXOpen.Elements.AxoAiStatus.html": {
    "href": "api/Pocos.AXOpen.Elements.AxoAiStatus.html",
    "title": "Class AxoAiStatus | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoAiStatus Namespace Pocos.AXOpen.Elements Assembly ix_ax_axopen_components_elements.dll public class AxoAiStatus : IPlain Inheritance object AxoAiStatus Implements IPlain Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties RawRange public float RawRange { get; set; } Property Value float RealRange public float RealRange { get; set; } Property Value float Scaled public float Scaled { get; set; } Property Value float"
  },
  "api/Pocos.AXOpen.Elements.AxoAo.html": {
    "href": "api/Pocos.AXOpen.Elements.AxoAo.html",
    "title": "Class AxoAo | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoAo Namespace Pocos.AXOpen.Elements Assembly ix_ax_axopen_components_elements.dll public class AxoAo : AxoComponent, IAxoObject, IAxoComponent, IPlain Inheritance object AxoObject AxoComponent AxoAo Implements IAxoObject IAxoComponent IPlain Inherited Members AxoComponent._isManuallyControllable object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties _config public AxoAoConfig _config { get; set; } Property Value AxoAoConfig _messengerDivisionByZero public AxoMessenger _messengerDivisionByZero { get; set; } Property Value AxoMessenger _messengerGainNotDefined public AxoMessenger _messengerGainNotDefined { get; set; } Property Value AxoMessenger _messengerOutOfBoundaries public AxoMessenger _messengerOutOfBoundaries { get; set; } Property Value AxoMessenger _rawRange public float _rawRange { get; set; } Property Value float _realRange public float _realRange { get; set; } Property Value float _requiredValue public float _requiredValue { get; set; } Property Value float _status public AxoAoStatus _status { get; set; } Property Value AxoAoStatus _unscaled public float _unscaled { get; set; } Property Value float"
  },
  "api/Pocos.AXOpen.Elements.AxoAoConfig.html": {
    "href": "api/Pocos.AXOpen.Elements.AxoAoConfig.html",
    "title": "Class AxoAoConfig | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoAoConfig Namespace Pocos.AXOpen.Elements Assembly ix_ax_axopen_components_elements.dll public class AxoAoConfig : IPlain Inheritance object AxoAoConfig Implements IPlain Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties Gain public float Gain { get; set; } Property Value float Offset public float Offset { get; set; } Property Value float RawHigh public int RawHigh { get; set; } Property Value int RawLow public int RawLow { get; set; } Property Value int RealHigh public float RealHigh { get; set; } Property Value float RealLow public float RealLow { get; set; } Property Value float"
  },
  "api/Pocos.AXOpen.Elements.AxoAoStatus.html": {
    "href": "api/Pocos.AXOpen.Elements.AxoAoStatus.html",
    "title": "Class AxoAoStatus | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoAoStatus Namespace Pocos.AXOpen.Elements Assembly ix_ax_axopen_components_elements.dll public class AxoAoStatus : IPlain Inheritance object AxoAoStatus Implements IPlain Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties RawRange public float RawRange { get; set; } Property Value float RealRange public float RealRange { get; set; } Property Value float Unscaled public float Unscaled { get; set; } Property Value float"
  },
  "api/Pocos.AXOpen.Elements.AxoDi.html": {
    "href": "api/Pocos.AXOpen.Elements.AxoDi.html",
    "title": "Class AxoDi | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDi Namespace Pocos.AXOpen.Elements Assembly ix_ax_axopen_components_elements.dll public class AxoDi : AxoComponent, IAxoObject, IAxoComponent, IPlain Inheritance object AxoObject AxoComponent AxoDi Implements IAxoObject IAxoComponent IPlain Inherited Members AxoComponent._isManuallyControllable object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties _isFalseTask public AxoTask _isFalseTask { get; set; } Property Value AxoTask _isTrueTask public AxoTask _isTrueTask { get; set; } Property Value AxoTask _messengerInfoNegative public AxoMessenger _messengerInfoNegative { get; set; } Property Value AxoMessenger _messengerInfoPositive public AxoMessenger _messengerInfoPositive { get; set; } Property Value AxoMessenger"
  },
  "api/Pocos.AXOpen.Elements.AxoDo.html": {
    "href": "api/Pocos.AXOpen.Elements.AxoDo.html",
    "title": "Class AxoDo | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDo Namespace Pocos.AXOpen.Elements Assembly ix_ax_axopen_components_elements.dll public class AxoDo : AxoComponent, IAxoObject, IAxoComponent, IPlain Inheritance object AxoObject AxoComponent AxoDo Implements IAxoObject IAxoComponent IPlain Inherited Members AxoComponent._isManuallyControllable object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties _messengerInfoNegative public AxoMessenger _messengerInfoNegative { get; set; } Property Value AxoMessenger _messengerInfoPositive public AxoMessenger _messengerInfoPositive { get; set; } Property Value AxoMessenger _resetTask public AxoTask _resetTask { get; set; } Property Value AxoTask _setTask public AxoTask _setTask { get; set; } Property Value AxoTask"
  },
  "api/Pocos.AXOpen.Elements.html": {
    "href": "api/Pocos.AXOpen.Elements.html",
    "title": "Namespace Pocos.AXOpen.Elements | System.Dynamic.ExpandoObject",
    "keywords": "Namespace Pocos.AXOpen.Elements Classes AxoAi AxoAiConfig AxoAiStatus AxoAo AxoAoConfig AxoAoStatus AxoDi AxoDo"
  },
  "api/Pocos.AXOpen.Logging.AxoLogEntry.html": {
    "href": "api/Pocos.AXOpen.Logging.AxoLogEntry.html",
    "title": "Class AxoLogEntry | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoLogEntry Namespace Pocos.AXOpen.Logging Assembly ix_ax_axopen_core.dll public class AxoLogEntry : IPlain Inheritance object AxoLogEntry Implements IPlain Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties Level public short Level { get; set; } Property Value short Message public string Message { get; set; } Property Value string Sender public ulong Sender { get; set; } Property Value ulong ToDequeue public bool ToDequeue { get; set; } Property Value bool"
  },
  "api/Pocos.AXOpen.Logging.AxoLogger.html": {
    "href": "api/Pocos.AXOpen.Logging.AxoLogger.html",
    "title": "Class AxoLogger | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoLogger Namespace Pocos.AXOpen.Logging Assembly ix_ax_axopen_core.dll public class AxoLogger : IPlain, IAxoLogger, IAxoLoggerConfig Inheritance object AxoLogger Implements IPlain IAxoLogger IAxoLoggerConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties Carret public short Carret { get; set; } Property Value short LogEntries public AxoLogEntry[] LogEntries { get; set; } Property Value AxoLogEntry[] MinimumLevel public short MinimumLevel { get; set; } Property Value short"
  },
  "api/Pocos.AXOpen.Logging.IAxoLogger.html": {
    "href": "api/Pocos.AXOpen.Logging.IAxoLogger.html",
    "title": "Interface IAxoLogger | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoLogger Namespace Pocos.AXOpen.Logging Assembly ix_ax_axopen_abstractions.dll public interface IAxoLogger Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/Pocos.AXOpen.Logging.IAxoLoggerConfig.html": {
    "href": "api/Pocos.AXOpen.Logging.IAxoLoggerConfig.html",
    "title": "Interface IAxoLoggerConfig | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoLoggerConfig Namespace Pocos.AXOpen.Logging Assembly ix_ax_axopen_abstractions.dll public interface IAxoLoggerConfig Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/Pocos.AXOpen.Logging.html": {
    "href": "api/Pocos.AXOpen.Logging.html",
    "title": "Namespace Pocos.AXOpen.Logging | System.Dynamic.ExpandoObject",
    "keywords": "Namespace Pocos.AXOpen.Logging Classes AxoLogEntry AxoLogger Interfaces IAxoLogger IAxoLoggerConfig"
  },
  "api/Pocos.AXOpen.Messaging.Static.AxoMessenger.html": {
    "href": "api/Pocos.AXOpen.Messaging.Static.AxoMessenger.html",
    "title": "Class AxoMessenger | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoMessenger Namespace Pocos.AXOpen.Messaging.Static Assembly ix_ax_axopen_core.dll public class AxoMessenger : AxoObject, IAxoObject, IPlain, IAxoMessageProperties Inheritance object AxoObject AxoMessenger Implements IAxoObject IPlain IAxoMessageProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties Acknowledged public DateTime Acknowledged { get; set; } Property Value DateTime AcknowledgedBeforeFallen public bool AcknowledgedBeforeFallen { get; set; } Property Value bool AcknowledgementRequired public bool AcknowledgementRequired { get; set; } Property Value bool AcknowledgeRequest public bool AcknowledgeRequest { get; set; } Property Value bool Category public short Category { get; set; } Property Value short Fallen public DateTime Fallen { get; set; } Property Value DateTime IsActive public bool IsActive { get; set; } Property Value bool MessageCode public ulong MessageCode { get; set; } Property Value ulong Risen public DateTime Risen { get; set; } Property Value DateTime WaitingForAcknowledge public bool WaitingForAcknowledge { get; set; } Property Value bool"
  },
  "api/Pocos.AXOpen.Messaging.Static.IAxoMessageProperties.html": {
    "href": "api/Pocos.AXOpen.Messaging.Static.IAxoMessageProperties.html",
    "title": "Interface IAxoMessageProperties | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoMessageProperties Namespace Pocos.AXOpen.Messaging.Static Assembly ix_ax_axopen_core.dll public interface IAxoMessageProperties Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/Pocos.AXOpen.Messaging.Static.html": {
    "href": "api/Pocos.AXOpen.Messaging.Static.html",
    "title": "Namespace Pocos.AXOpen.Messaging.Static | System.Dynamic.ExpandoObject",
    "keywords": "Namespace Pocos.AXOpen.Messaging.Static Classes AxoMessenger Interfaces IAxoMessageProperties"
  },
  "api/Pocos.AXOpen.Rtc.IAxoRtc.html": {
    "href": "api/Pocos.AXOpen.Rtc.IAxoRtc.html",
    "title": "Interface IAxoRtc | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoRtc Namespace Pocos.AXOpen.Rtc Assembly ix_ax_axopen_abstractions.dll public interface IAxoRtc Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject)"
  },
  "api/Pocos.AXOpen.Rtc.html": {
    "href": "api/Pocos.AXOpen.Rtc.html",
    "title": "Namespace Pocos.AXOpen.Rtc | System.Dynamic.ExpandoObject",
    "keywords": "Namespace Pocos.AXOpen.Rtc Interfaces IAxoRtc"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "IX API Documentation | System.Dynamic.ExpandoObject",
    "keywords": "IX API Documentation"
  },
  "api/ix_ax_axopen_abstractions.PlcTranslator.html": {
    "href": "api/ix_ax_axopen_abstractions.PlcTranslator.html",
    "title": "Class PlcTranslator | System.Dynamic.ExpandoObject",
    "keywords": "Class PlcTranslator Namespace ix_ax_axopen_abstractions Assembly ix_ax_axopen_abstractions.dll public sealed class PlcTranslator : Translator Inheritance object Translator PlcTranslator Inherited Members Translator.Translate(string, ITwinElement) Translator.SetLocalizationResource(Type) Translator.Localize(string, ITwinElement) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties Instance public static PlcTranslator Instance { get; } Property Value PlcTranslator"
  },
  "api/ix_ax_axopen_abstractions.html": {
    "href": "api/ix_ax_axopen_abstractions.html",
    "title": "Namespace ix_ax_axopen_abstractions | System.Dynamic.ExpandoObject",
    "keywords": "Namespace ix_ax_axopen_abstractions Classes PlcTranslator"
  },
  "api/ix_ax_axopen_components_cognex_vision.PlcTranslator.html": {
    "href": "api/ix_ax_axopen_components_cognex_vision.PlcTranslator.html",
    "title": "Class PlcTranslator | System.Dynamic.ExpandoObject",
    "keywords": "Class PlcTranslator Namespace ix_ax_axopen_components_cognex_vision Assembly ix_ax_axopen_components_cognex_vision.dll public sealed class PlcTranslator : Translator Inheritance object Translator PlcTranslator Inherited Members Translator.Translate(string, ITwinElement) Translator.SetLocalizationResource(Type) Translator.Localize(string, ITwinElement) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties Instance public static PlcTranslator Instance { get; } Property Value PlcTranslator"
  },
  "api/ix_ax_axopen_components_cognex_vision.html": {
    "href": "api/ix_ax_axopen_components_cognex_vision.html",
    "title": "Namespace ix_ax_axopen_components_cognex_vision | System.Dynamic.ExpandoObject",
    "keywords": "Namespace ix_ax_axopen_components_cognex_vision Classes PlcTranslator"
  },
  "api/ix_ax_axopen_components_elements.PlcTranslator.html": {
    "href": "api/ix_ax_axopen_components_elements.PlcTranslator.html",
    "title": "Class PlcTranslator | System.Dynamic.ExpandoObject",
    "keywords": "Class PlcTranslator Namespace ix_ax_axopen_components_elements Assembly ix_ax_axopen_components_elements.dll public sealed class PlcTranslator : Translator Inheritance object Translator PlcTranslator Inherited Members Translator.Translate(string, ITwinElement) Translator.SetLocalizationResource(Type) Translator.Localize(string, ITwinElement) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties Instance public static PlcTranslator Instance { get; } Property Value PlcTranslator"
  },
  "api/ix_ax_axopen_components_elements.html": {
    "href": "api/ix_ax_axopen_components_elements.html",
    "title": "Namespace ix_ax_axopen_components_elements | System.Dynamic.ExpandoObject",
    "keywords": "Namespace ix_ax_axopen_components_elements Classes PlcTranslator"
  },
  "api/ix_ax_axopen_components_pneumatics.PlcTranslator.html": {
    "href": "api/ix_ax_axopen_components_pneumatics.PlcTranslator.html",
    "title": "Class PlcTranslator | System.Dynamic.ExpandoObject",
    "keywords": "Class PlcTranslator Namespace ix_ax_axopen_components_pneumatics Assembly ix_ax_axopen_components_pneumatics.dll public sealed class PlcTranslator : Translator Inheritance object Translator PlcTranslator Inherited Members Translator.Translate(string, ITwinElement) Translator.SetLocalizationResource(Type) Translator.Localize(string, ITwinElement) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties Instance public static PlcTranslator Instance { get; } Property Value PlcTranslator"
  },
  "api/ix_ax_axopen_components_pneumatics.html": {
    "href": "api/ix_ax_axopen_components_pneumatics.html",
    "title": "Namespace ix_ax_axopen_components_pneumatics | System.Dynamic.ExpandoObject",
    "keywords": "Namespace ix_ax_axopen_components_pneumatics Classes PlcTranslator"
  },
  "api/ix_ax_axopen_core.PlcTranslator.html": {
    "href": "api/ix_ax_axopen_core.PlcTranslator.html",
    "title": "Class PlcTranslator | System.Dynamic.ExpandoObject",
    "keywords": "Class PlcTranslator Namespace ix_ax_axopen_core Assembly ix_ax_axopen_core.dll public sealed class PlcTranslator : Translator Inheritance object Translator PlcTranslator Inherited Members Translator.Translate(string, ITwinElement) Translator.SetLocalizationResource(Type) Translator.Localize(string, ITwinElement) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties Instance public static PlcTranslator Instance { get; } Property Value PlcTranslator"
  },
  "api/ix_ax_axopen_core.html": {
    "href": "api/ix_ax_axopen_core.html",
    "title": "Namespace ix_ax_axopen_core | System.Dynamic.ExpandoObject",
    "keywords": "Namespace ix_ax_axopen_core Classes PlcTranslator"
  },
  "api/ix_ax_axopen_data.PlcTranslator.html": {
    "href": "api/ix_ax_axopen_data.PlcTranslator.html",
    "title": "Class PlcTranslator | System.Dynamic.ExpandoObject",
    "keywords": "Class PlcTranslator Namespace ix_ax_axopen_data Assembly ix_ax_axopen_data.dll public sealed class PlcTranslator : Translator Inheritance object Translator PlcTranslator Inherited Members Translator.Translate(string, ITwinElement) Translator.SetLocalizationResource(Type) Translator.Localize(string, ITwinElement) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Properties Instance public static PlcTranslator Instance { get; } Property Value PlcTranslator"
  },
  "api/ix_ax_axopen_data.html": {
    "href": "api/ix_ax_axopen_data.html",
    "title": "Namespace ix_ax_axopen_data | System.Dynamic.ExpandoObject",
    "keywords": "Namespace ix_ax_axopen_data Classes PlcTranslator"
  },
  "api/ix_ax_axopen_exporters.ExcelDataExporter-2.html": {
    "href": "api/ix_ax_axopen_exporters.ExcelDataExporter-2.html",
    "title": "Class ExcelDataExporter<TPlain, TOnline> | System.Dynamic.ExpandoObject",
    "keywords": "Class ExcelDataExporter<TPlain, TOnline> Namespace ix_ax_axopen_exporters Assembly AXOpen.Data.Exporters.Excel.dll public class ExcelDataExporter<TPlain, TOnline> : BaseDataExporter<TPlain, TOnline>, IDataExporter<TPlain, TOnline> where TPlain : IAxoDataEntity, new() where TOnline : IAxoDataEntity Type Parameters TPlain TOnline Inheritance object BaseDataExporter<TPlain, TOnline> ExcelDataExporter<TPlain, TOnline> Implements IDataExporter<TPlain, TOnline> Inherited Members BaseDataExporter<TPlain, TOnline>.BaseExport(IRepository<TPlain>, Expression<Func<TPlain, bool>>, Dictionary<string, bool>, eExportMode, int, int, char) BaseDataExporter<TPlain, TOnline>.BaseImport(IRepository<TPlain>, List<string>, AuthenticationState, ITwinObject, char) BaseDataExporter<TPlain, TOnline>.UpdateDocument(IRepository<TPlain>, List<BaseDataExporter<TPlain, TOnline>.ImportItems>, IEnumerable<ITwinPrimitive>, ITwinObject, AuthenticationState, char) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IPlainExtensions.ShadowToPlain1<T>(object, ITwinObject) Constructors ExcelDataExporter() public ExcelDataExporter() Methods Export(IRepository<TPlain>, string, string, Expression<Func<TPlain, bool>>, Dictionary<string, bool>?, eExportMode, int, int, char) public void Export(IRepository<TPlain> dataRepository, string path, string fragmentName, Expression<Func<TPlain, bool>> expression, Dictionary<string, bool>? customExportData = null, eExportMode exportMode = eExportMode.First, int firstNumber = 50, int secondNumber = 100, char separator = ';') Parameters dataRepository IRepository<TPlain> path string fragmentName string expression Expression<Func<TPlain, bool>> customExportData Dictionary<string, bool> exportMode eExportMode firstNumber int secondNumber int separator char GetName() public static string GetName() Returns string Import(IRepository<TPlain>, string, string, AuthenticationState, ITwinObject, char) public void Import(IRepository<TPlain> dataRepository, string path, string fragmentName, AuthenticationState authenticationState, ITwinObject crudDataObject = null, char separator = ';') Parameters dataRepository IRepository<TPlain> path string fragmentName string authenticationState AuthenticationState crudDataObject ITwinObject separator char"
  },
  "api/ix_ax_axopen_exporters.html": {
    "href": "api/ix_ax_axopen_exporters.html",
    "title": "Namespace ix_ax_axopen_exporters | System.Dynamic.ExpandoObject",
    "keywords": "Namespace ix_ax_axopen_exporters Classes ExcelDataExporter<TPlain, TOnline>"
  },
  "apictrl/index.html": {
    "href": "apictrl/index.html",
    "title": "IX API Documentation | System.Dynamic.ExpandoObject",
    "keywords": "IX API Documentation"
  },
  "apictrl/plc.AXOpen.Components.Abstractions.AxoComponent_Status.html": {
    "href": "apictrl/plc.AXOpen.Components.Abstractions.AxoComponent_Status.html",
    "title": "Class AxoComponent_Status | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoComponent_Status Namespace plc.AXOpen.Components.Abstractions CLASS AxoComponent_Status AxoComponent_Status Properties Action Action : AXOpen.Core.AxoTextList Property Value Error Error : AXOpen.Core.AxoTextList Property Value"
  },
  "apictrl/plc.AXOpen.Components.Abstractions.IAxoCodeReader.html": {
    "href": "apictrl/plc.AXOpen.Components.Abstractions.IAxoCodeReader.html",
    "title": "Interface IAxoCodeReader | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoCodeReader Namespace plc.AXOpen.Components.Abstractions INTERFACE IAxoCodeReader Methods ClearResultData Public AXOpen.Core.IAxoTaskState ClearResultData() Returns IAxoTaskState Read Public AXOpen.Core.IAxoTaskState Read() Returns IAxoTaskState"
  },
  "apictrl/plc.AXOpen.Components.Abstractions.IAxoVisionSensor.html": {
    "href": "apictrl/plc.AXOpen.Components.Abstractions.IAxoVisionSensor.html",
    "title": "Interface IAxoVisionSensor | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoVisionSensor Namespace plc.AXOpen.Components.Abstractions INTERFACE IAxoVisionSensor Methods ClearInspectionResults Public AXOpen.Core.IAxoTaskState ClearInspectionResults() Returns IAxoTaskState Trigger Public AXOpen.Core.IAxoTaskState Trigger() Returns IAxoTaskState ChangeJob Public AXOpen.Core.IAxoTaskState ChangeJob(in plc.UINT Job) Parameters Job UINT Returns IAxoTaskState ChangeJob Public AXOpen.Core.IAxoTaskState ChangeJob(in plc.STRING Job) Parameters Job STRING Returns IAxoTaskState"
  },
  "apictrl/plc.AXOpen.Components.Abstractions.html": {
    "href": "apictrl/plc.AXOpen.Components.Abstractions.html",
    "title": "Namespace plc.AXOpen.Components.Abstractions | System.Dynamic.ExpandoObject",
    "keywords": "Namespace plc.AXOpen.Components.Abstractions Classes AxoComponent_Status Interfaces IAxoCodeReader IAxoVisionSensor"
  },
  "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoBoolArray8.html": {
    "href": "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoBoolArray8.html",
    "title": "Class AxoBoolArray8 | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoBoolArray8 Namespace plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0 CLASS AxoBoolArray8 Inheritance AxoBoolArray AxoBoolArray8 Inherited Members DataChanged ToggleDataChangedFlag() Properties Data Data : ARRAY [0..7] OF BOOL Property Value"
  },
  "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman.html": {
    "href": "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman.html",
    "title": "Class AxoDataman | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataman Namespace plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0 CLASS AxoDataman Inheritance AxoComponent AxoObject AxoDataman Implements IAxoCodeReader IAxoComponent Inherited Members _isManuallyControllable Identity ActivateManualControl() IsManuallyControllable() CheckIfManualControlIsActivated() Open() Run() Close() Restore() ManualControl() GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Properties ReadTask ReadTask : AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDatamanRead Property Value ResultData ResultData : AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_ResultData Property Value RestoreTask RestoreTask : AXOpen.Core.AxoTask Property Value ClearResultDataTask ClearResultDataTask : AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDatamanClearResultData Property Value Config Config : AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_Config Property Value Status Status : AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_Status Property Value Results Results : AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_Results Property Value AcquisitionControl AcquisitionControl : AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_AcquisitionControl Property Value AcquisitionStatus AcquisitionStatus : AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_AcquisitionStatus Property Value ResultsControl ResultsControl : AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_ResultsControl Property Value ResultsStatus ResultsStatus : AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_ResultsStatus Property Value SoftEventControl SoftEventControl : AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_SoftEventControl Property Value SoftEventStatus SoftEventStatus : AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_SoftEventStatus Property Value User User : AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_User Property Value UserData UserData : AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_UserData Property Value _Messenger _Messenger : AXOpen.Messaging.Static.AxoMessenger Property Value _TaskMessenger _TaskMessenger : AXOpen.Messaging.Static.AxoMessenger Property Value Methods Restore Restores this instance to its initial state. Protected AXOpen.Core.IAxoTask Restore() Returns IAxoTask ManualControl Custom logic for the manual control. Protected VOID ManualControl() Returns UpdateInputs Private BOOL UpdateInputs(in plc.REF_TO ARRAY [0..2] OF BYTE refAcquisitionStatus,in plc.REF_TO BYTE refResultsStatus,in plc.REF_TO BYTE refSoftEventStatus,in plc.REF_TO ARRAY [*] OF BYTE refResultData) Parameters refAcquisitionStatus REF_TO ARRAY [0..2] OF BYTE refResultsStatus REF_TO BYTE refSoftEventStatus REF_TO BYTE refResultData REF_TO ARRAY [*] OF BYTE Returns BOOL UpdateOutputs Private BOOL UpdateOutputs(in plc.REF_TO BYTE refAcquisitionControl,in plc.REF_TO BYTE refResultsControl,in plc.REF_TO BYTE refSoftEventControl,in plc.REF_TO ARRAY [*] OF BYTE refUserData) Parameters refAcquisitionControl REF_TO BYTE refResultsControl REF_TO BYTE refSoftEventControl REF_TO BYTE refUserData REF_TO ARRAY [*] OF BYTE Returns BOOL IsValidReferences Private BOOL IsValidReferences(in plc.REF_TO BYTE refAcquisitionControl,in plc.REF_TO ARRAY [0..2] OF BYTE refAcquisitionStatus,in plc.REF_TO BYTE refResultsControl,in plc.REF_TO BYTE refResultsStatus,in plc.REF_TO BYTE refSoftEventControl,in plc.REF_TO BYTE refSoftEventStatus,in plc.REF_TO ARRAY [*] OF BYTE refResultData,in plc.REF_TO ARRAY [*] OF BYTE refUserData) Parameters refAcquisitionControl REF_TO BYTE refAcquisitionStatus REF_TO ARRAY [0..2] OF BYTE refResultsControl REF_TO BYTE refResultsStatus REF_TO BYTE refSoftEventControl REF_TO BYTE refSoftEventStatus REF_TO BYTE refResultData REF_TO ARRAY [*] OF BYTE refUserData REF_TO ARRAY [*] OF BYTE Returns BOOL ContinuousReading Private VOID ContinuousReading(in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_Status refStatus,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_Results refResults,in plc.REF_TO ARRAY [*] OF BYTE refResultData) Parameters refStatus REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_Status refResults REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_Results refResultData REF_TO ARRAY [*] OF BYTE Returns Open Custom component logic running before any other component logic. Protected VOID Open() Returns Run Runs tasks and logic of this component.>[!IMPORTANT] This method or one of its overloads must be called cyclically. Public VOID Run(in plc.AXOpen.Core.IAxoObject parent,in plc.REF_TO BYTE refAcquisitionControl,in plc.REF_TO ARRAY [0..2] OF BYTE refAcquisitionStatus,in plc.REF_TO BYTE refResultsControl,in plc.REF_TO BYTE refResultsStatus,in plc.REF_TO BYTE refSoftEventControl,in plc.REF_TO BYTE refSoftEventStatus,in plc.REF_TO ARRAY [*] OF BYTE refResultData,in plc.REF_TO ARRAY [*] OF BYTE refUserData) Parameters parent IAxoObject refAcquisitionControl REF_TO BYTE refAcquisitionStatus REF_TO ARRAY [0..2] OF BYTE refResultsControl REF_TO BYTE refResultsStatus REF_TO BYTE refSoftEventControl REF_TO BYTE refSoftEventStatus REF_TO BYTE refResultData REF_TO ARRAY [*] OF BYTE refUserData REF_TO ARRAY [*] OF BYTE Returns Run Runs tasks and logic of this component.>[!IMPORTANT] This method or one of its overloads must be called cyclically. Public VOID Run(in plc.AXOpen.Core.IAxoContext parent,in plc.REF_TO BYTE refAcquisitionControl,in plc.REF_TO ARRAY [0..2] OF BYTE refAcquisitionStatus,in plc.REF_TO BYTE refResultsControl,in plc.REF_TO BYTE refResultsStatus,in plc.REF_TO BYTE refSoftEventControl,in plc.REF_TO BYTE refSoftEventStatus,in plc.REF_TO ARRAY [*] OF BYTE refResultData,in plc.REF_TO ARRAY [*] OF BYTE refUserData) Parameters parent IAxoContext refAcquisitionControl REF_TO BYTE refAcquisitionStatus REF_TO ARRAY [0..2] OF BYTE refResultsControl REF_TO BYTE refResultsStatus REF_TO BYTE refSoftEventControl REF_TO BYTE refSoftEventStatus REF_TO BYTE refResultData REF_TO ARRAY [*] OF BYTE refUserData REF_TO ARRAY [*] OF BYTE Returns Execute Private VOID Execute(in plc.REF_TO BYTE refAcquisitionControl,in plc.REF_TO ARRAY [0..2] OF BYTE refAcquisitionStatus,in plc.REF_TO BYTE refResultsControl,in plc.REF_TO BYTE refResultsStatus,in plc.REF_TO BYTE refSoftEventControl,in plc.REF_TO BYTE refSoftEventStatus,in plc.REF_TO ARRAY [*] OF BYTE refResultData,in plc.REF_TO ARRAY [*] OF BYTE refUserData) Parameters refAcquisitionControl REF_TO BYTE refAcquisitionStatus REF_TO ARRAY [0..2] OF BYTE refResultsControl REF_TO BYTE refResultsStatus REF_TO BYTE refSoftEventControl REF_TO BYTE refSoftEventStatus REF_TO BYTE refResultData REF_TO ARRAY [*] OF BYTE refUserData REF_TO ARRAY [*] OF BYTE Returns Close Custom component logic running after any other component logic. Protected VOID Close() Returns ClearResultData Clears the result data. Public AXOpen.Core.IAxoTaskState ClearResultData() Returns IAxoTaskState Read Triggers the reading sequence and waits for results. Public AXOpen.Core.IAxoTaskState Read() Returns IAxoTaskState"
  },
  "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDatamanClearResultData.html": {
    "href": "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDatamanClearResultData.html",
    "title": "Class AxoDatamanClearResultData | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDatamanClearResultData Namespace plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0 CLASS AxoDatamanClearResultData Inheritance AxoTask AxoObject AxoDatamanClearResultData Implements IAxoTask IAxoTaskState Inherited Members Status IsDisabled RemoteInvoke RemoteRestore RemoteAbort RemoteResume StartSignature Duration StartTimeStamp ErrorDetails Identity GetState() GetErrorDetails() IsReady() IsDone() IsBusy() IsAborted() HasError() IsNewInvokeCall() IsInvokeCalledInThisPlcCycle() WasInvokeCalledInPreviousPlcCycle() IsNewExecuteCall() IsExecuteCalledInThisPlcCycle() WasExecuteCalledInPreviousPlcCycle() UpdateState() Invoke() Restore() DoneWhen(BOOL) Execute() LogTask(STRING[80],eLogLevel,IAxoObject) ThrowWhen(BOOL) ThrowWhen(BOOL,STRING[254]) SetIsDisabled(BOOL) GetIsDisabled() Abort() Resume() OnAbort() OnResume() OnDone() OnError() OnRestore() OnStart() WhileError() GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Properties _progress _progress : INT Property Value _infoTimer _infoTimer : UNDEFINED Property Value _errorTimer _errorTimer : UNDEFINED Property Value _infoTime _infoTime : LTIME Property Value _errorTime _errorTime : LTIME Property Value _refStatus _refStatus : REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_Status Property Value _refMessenger _refMessenger : REF_TO AXOpen.Messaging.Static.AxoMessenger Property Value Methods Run Runs the logic of this tasks.>[!IMPORTANT] This method must be called cyclically. Public VOID Run(in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_AcquisitionControl refAcquisitionControl,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_AcquisitionStatus refAcquisitionStatus,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_ResultsControl refResultsControl,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_ResultsStatus refResultsStatus,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_Config refConfig,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_Status refStatus,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_Results refResults,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_ResultData refResultData,in plc.REF_TO AXOpen.Messaging.Static.AxoMessenger refMessenger) Parameters refAcquisitionControl REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_AcquisitionControl refAcquisitionStatus REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_AcquisitionStatus refResultsControl REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_ResultsControl refResultsStatus REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_ResultsStatus refConfig REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_Config refStatus REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_Status refResults REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_Results refResultData REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_ResultData refMessenger REF_TO AXOpen.Messaging.Static.AxoMessenger Returns CallTimers Private VOID CallTimers(in plc.BOOL signal) Parameters signal BOOL Returns OnRestore Protected VOID OnRestore() Returns OnAbort Protected VOID OnAbort() Returns OnDone Protected VOID OnDone() Returns OnError Protected VOID OnError() Returns OnStart Protected VOID OnStart() Returns"
  },
  "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDatamanRead.html": {
    "href": "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDatamanRead.html",
    "title": "Class AxoDatamanRead | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDatamanRead Namespace plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0 CLASS AxoDatamanRead Inheritance AxoTask AxoObject AxoDatamanRead Implements IAxoTask IAxoTaskState Inherited Members Status IsDisabled RemoteInvoke RemoteRestore RemoteAbort RemoteResume StartSignature Duration StartTimeStamp ErrorDetails Identity GetState() GetErrorDetails() IsReady() IsDone() IsBusy() IsAborted() HasError() IsNewInvokeCall() IsInvokeCalledInThisPlcCycle() WasInvokeCalledInPreviousPlcCycle() IsNewExecuteCall() IsExecuteCalledInThisPlcCycle() WasExecuteCalledInPreviousPlcCycle() UpdateState() Invoke() Restore() DoneWhen(BOOL) Execute() LogTask(STRING[80],eLogLevel,IAxoObject) ThrowWhen(BOOL) ThrowWhen(BOOL,STRING[254]) SetIsDisabled(BOOL) GetIsDisabled() Abort() Resume() OnAbort() OnResume() OnDone() OnError() OnRestore() OnStart() WhileError() GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Properties _progress _progress : INT Property Value _infoTimer _infoTimer : UNDEFINED Property Value _errorTimer _errorTimer : UNDEFINED Property Value _infoTime _infoTime : LTIME Property Value _errorTime _errorTime : LTIME Property Value _refStatus _refStatus : REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_Status Property Value _refMessenger _refMessenger : REF_TO AXOpen.Messaging.Static.AxoMessenger Property Value Methods Run Runs the logic of this tasks.>[!IMPORTANT] This method must be called cyclically. Public VOID Run(in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_AcquisitionControl refAcquisitionControl,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_AcquisitionStatus refAcquisitionStatus,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_ResultsControl refResultsControl,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_ResultsStatus refResultsStatus,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_Config refConfig,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_Status refStatus,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_Results refResults,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_ResultData refResultData,in plc.REF_TO ARRAY [*] OF BYTE refResultDataHW,in plc.REF_TO AXOpen.Messaging.Static.AxoMessenger refMessenger) Parameters refAcquisitionControl REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_AcquisitionControl refAcquisitionStatus REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_AcquisitionStatus refResultsControl REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_ResultsControl refResultsStatus REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_ResultsStatus refConfig REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_Config refStatus REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_Status refResults REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_Results refResultData REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_ResultData refResultDataHW REF_TO ARRAY [*] OF BYTE refMessenger REF_TO AXOpen.Messaging.Static.AxoMessenger Returns CallTimers Private VOID CallTimers(in plc.BOOL signal) Parameters signal BOOL Returns OnRestore Protected VOID OnRestore() Returns OnAbort Protected VOID OnAbort() Returns OnDone Protected VOID OnDone() Returns OnError Protected VOID OnError() Returns OnStart Protected VOID OnStart() Returns"
  },
  "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_AcquisitionControl.html": {
    "href": "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_AcquisitionControl.html",
    "title": "Struct AxoDataman_AcquisitionControl | System.Dynamic.ExpandoObject",
    "keywords": "Struct AxoDataman_AcquisitionControl Namespace plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0 STRUCT AxoDataman_AcquisitionControl Properties TriggerEnable TriggerEnable : BOOL Property Value Trigger Trigger : BOOL Property Value"
  },
  "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_AcquisitionStatus.html": {
    "href": "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_AcquisitionStatus.html",
    "title": "Struct AxoDataman_AcquisitionStatus | System.Dynamic.ExpandoObject",
    "keywords": "Struct AxoDataman_AcquisitionStatus Namespace plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0 STRUCT AxoDataman_AcquisitionStatus Properties TriggerReady TriggerReady : BOOL Property Value TriggerAcknowledge TriggerAcknowledge : BOOL Property Value Acquiring Acquiring : BOOL Property Value MissedAcquisition MissedAcquisition : BOOL Property Value TriggerID TriggerID : UINT Property Value"
  },
  "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_Config.html": {
    "href": "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_Config.html",
    "title": "Struct AxoDataman_Config | System.Dynamic.ExpandoObject",
    "keywords": "Struct AxoDataman_Config Namespace plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0 STRUCT AxoDataman_Config Properties ContinuousReading ContinuousReading : BOOL Property Value InfoTime InfoTime : LTIME Property Value ErrorTime ErrorTime : LTIME Property Value"
  },
  "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_ResultData.html": {
    "href": "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_ResultData.html",
    "title": "Class AxoDataman_ResultData | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataman_ResultData Namespace plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0 CLASS AxoDataman_ResultData Inheritance AxoByteArray AxoDataman_ResultData Inherited Members DataChanged ToggleDataChangedFlag() Properties Data Data : ARRAY [0..245] OF BYTE Property Value"
  },
  "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_Results.html": {
    "href": "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_Results.html",
    "title": "Struct AxoDataman_Results | System.Dynamic.ExpandoObject",
    "keywords": "Struct AxoDataman_Results Namespace plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0 STRUCT AxoDataman_Results Properties Id Id : UINT Property Value Code Code : UINT Property Value Extended Extended : UINT Property Value Length Length : UINT Property Value"
  },
  "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_ResultsControl.html": {
    "href": "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_ResultsControl.html",
    "title": "Struct AxoDataman_ResultsControl | System.Dynamic.ExpandoObject",
    "keywords": "Struct AxoDataman_ResultsControl Namespace plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0 STRUCT AxoDataman_ResultsControl Properties EnableResultBuffering EnableResultBuffering : BOOL Property Value ResultsAcknowledge ResultsAcknowledge : BOOL Property Value"
  },
  "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_ResultsStatus.html": {
    "href": "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_ResultsStatus.html",
    "title": "Struct AxoDataman_ResultsStatus | System.Dynamic.ExpandoObject",
    "keywords": "Struct AxoDataman_ResultsStatus Namespace plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0 STRUCT AxoDataman_ResultsStatus Properties Decoding Decoding : BOOL Property Value DecodeComplete DecodeComplete : BOOL Property Value ResultsBufferOverrun ResultsBufferOverrun : BOOL Property Value ResultsAvailable ResultsAvailable : BOOL Property Value ErrorDetected ErrorDetected : BOOL Property Value"
  },
  "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_SoftEventControl.html": {
    "href": "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_SoftEventControl.html",
    "title": "Struct AxoDataman_SoftEventControl | System.Dynamic.ExpandoObject",
    "keywords": "Struct AxoDataman_SoftEventControl Namespace plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0 STRUCT AxoDataman_SoftEventControl Properties TrainCode TrainCode : BOOL Property Value TrainMatchString TrainMatchString : BOOL Property Value TrainFocus TrainFocus : BOOL Property Value TrainBrightness TrainBrightness : BOOL Property Value Untrain Untrain : BOOL Property Value ExecuteDMCC ExecuteDMCC : BOOL Property Value Reserved06 Reserved06 : BOOL Property Value SetMatchString SetMatchString : BOOL Property Value"
  },
  "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_SoftEventStatus.html": {
    "href": "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_SoftEventStatus.html",
    "title": "Struct AxoDataman_SoftEventStatus | System.Dynamic.ExpandoObject",
    "keywords": "Struct AxoDataman_SoftEventStatus Namespace plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0 STRUCT AxoDataman_SoftEventStatus Properties TrainCodeAcknowledge TrainCodeAcknowledge : BOOL Property Value TrainMatchStringAcknowledge TrainMatchStringAcknowledge : BOOL Property Value TrainFocusAcknowledge TrainFocusAcknowledge : BOOL Property Value TrainBrightnessAcknowledge TrainBrightnessAcknowledge : BOOL Property Value UntrainAcknowledge UntrainAcknowledge : BOOL Property Value ExecuteDMCCAcknowledge ExecuteDMCCAcknowledge : BOOL Property Value Reserved06 Reserved06 : BOOL Property Value SetMatchStringAcknowledge SetMatchStringAcknowledge : BOOL Property Value"
  },
  "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_Status.html": {
    "href": "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_Status.html",
    "title": "Class AxoDataman_Status | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataman_Status Namespace plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0 CLASS AxoDataman_Status Inheritance AxoComponent_Status AxoDataman_Status Inherited Members Action Error Properties ResultDataSize ResultDataSize : AXOpen.Components.Cognex.Vision.v_6_0_0_0.eAxoDataman_ResultDataSize Property Value UserDataSize UserDataSize : AXOpen.Components.Cognex.Vision.v_6_0_0_0.eAxoDataman_UserDataSize Property Value"
  },
  "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_User.html": {
    "href": "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_User.html",
    "title": "Struct AxoDataman_User | System.Dynamic.ExpandoObject",
    "keywords": "Struct AxoDataman_User Namespace plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0 STRUCT AxoDataman_User Properties Option Option : UINT Property Value Length Length : UINT Property Value"
  },
  "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_UserData.html": {
    "href": "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman_UserData.html",
    "title": "Class AxoDataman_UserData | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataman_UserData Namespace plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0 CLASS AxoDataman_UserData Inheritance AxoByteArray AxoDataman_UserData Inherited Members DataChanged ToggleDataChangedFlag() Properties Data Data : ARRAY [0..249] OF BYTE Property Value"
  },
  "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight.html": {
    "href": "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight.html",
    "title": "Class AxoInsight | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsight Namespace plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0 CLASS AxoInsight Inheritance AxoComponent AxoObject AxoInsight Implements IAxoVisionSensor IAxoComponent Inherited Members _isManuallyControllable Identity ActivateManualControl() IsManuallyControllable() CheckIfManualControlIsActivated() Open() Run() Close() Restore() ManualControl() GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Properties TriggerTask TriggerTask : AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsightTrigger Property Value InspectionResults InspectionResults : AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_ResultData Property Value RestoreTask RestoreTask : AXOpen.Core.AxoTask Property Value ClearInspectionResultsTask ClearInspectionResultsTask : AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsightClearInspectionResults Property Value RequiredJobName RequiredJobName : STRING Property Value ChangeJobByNameTask ChangeJobByNameTask : AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsightChangeJobByName Property Value RequiredJobNumber RequiredJobNumber : UINT Property Value ChangeJobByNumberTask ChangeJobByNumberTask : AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsightChangeJobByNumber Property Value RequiredSoftEventNumber RequiredSoftEventNumber : UINT Property Value SoftEventTask SoftEventTask : AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsightSoftEvent Property Value Config Config : AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Config Property Value Status Status : AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Status Property Value Results Results : AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Results Property Value AcquisitionControl AcquisitionControl : AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_AcquisitionControl Property Value AcquisitionStatus AcquisitionStatus : AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_AcquisitionStatus Property Value InspectionControl InspectionControl : AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_InspectionControl Property Value InspectionStatus InspectionStatus : AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_InspectionStatus Property Value CommandControl CommandControl : AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_CommandControl Property Value CommandStatus CommandStatus : AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_CommandStatus Property Value SoftEventControl SoftEventControl : AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_SoftEventControl Property Value SoftEventStatus SoftEventStatus : AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_SoftEventStatus Property Value UserData UserData : AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_UserData Property Value _Messenger _Messenger : AXOpen.Messaging.Static.AxoMessenger Property Value _TaskMessenger _TaskMessenger : AXOpen.Messaging.Static.AxoMessenger Property Value Methods Restore Restores this instance . Protected AXOpen.Core.IAxoTask Restore() Returns IAxoTask ManualControl Custom logic for the manual control. Protected VOID ManualControl() Returns UpdateInputs Private BOOL UpdateInputs(in plc.REF_TO ARRAY [0..2] OF BYTE refAcquisitionStatus,in plc.REF_TO DWORD refInspectionStatus,in plc.REF_TO WORD refCommandStatus,in plc.REF_TO BYTE refSoftEventStatus,in plc.REF_TO ARRAY [*] OF BYTE refResultData) Parameters refAcquisitionStatus REF_TO ARRAY [0..2] OF BYTE refInspectionStatus REF_TO DWORD refCommandStatus REF_TO WORD refSoftEventStatus REF_TO BYTE refResultData REF_TO ARRAY [*] OF BYTE Returns BOOL UpdateOutputs Private BOOL UpdateOutputs(in plc.REF_TO BYTE refAcquisitionControl,in plc.REF_TO BYTE refInspectionControl,in plc.REF_TO WORD refCommandControl,in plc.REF_TO BYTE refSoftEventControl,in plc.REF_TO ARRAY [*] OF BYTE refUserData) Parameters refAcquisitionControl REF_TO BYTE refInspectionControl REF_TO BYTE refCommandControl REF_TO WORD refSoftEventControl REF_TO BYTE refUserData REF_TO ARRAY [*] OF BYTE Returns BOOL IsValidReferences Private BOOL IsValidReferences(in plc.REF_TO BYTE refAcquisitionControl,in plc.REF_TO ARRAY [0..2] OF BYTE refAcquisitionStatus,in plc.REF_TO BYTE refInspectionControl,in plc.REF_TO DWORD refInspectionStatus,in plc.REF_TO WORD refCommandControl,in plc.REF_TO WORD refCommandStatus,in plc.REF_TO BYTE refSoftEventControl,in plc.REF_TO BYTE refSoftEventStatus,in plc.REF_TO ARRAY [*] OF BYTE refResultData,in plc.REF_TO ARRAY [*] OF BYTE refUserData) Parameters refAcquisitionControl REF_TO BYTE refAcquisitionStatus REF_TO ARRAY [0..2] OF BYTE refInspectionControl REF_TO BYTE refInspectionStatus REF_TO DWORD refCommandControl REF_TO WORD refCommandStatus REF_TO WORD refSoftEventControl REF_TO BYTE refSoftEventStatus REF_TO BYTE refResultData REF_TO ARRAY [*] OF BYTE refUserData REF_TO ARRAY [*] OF BYTE Returns BOOL Open Custom component logic running before any other component logic. Protected VOID Open() Returns Run Runs tasks and logic of this component.>[!IMPORTANT] This method or one of its overloads must be called cyclically. Public VOID Run(in plc.AXOpen.Core.IAxoObject parent,in plc.REF_TO BYTE refAcquisitionControl,in plc.REF_TO ARRAY [0..2] OF BYTE refAcquisitionStatus,in plc.REF_TO BYTE refInspectionControl,in plc.REF_TO DWORD refInspectionStatus,in plc.REF_TO WORD refCommandControl,in plc.REF_TO WORD refCommandStatus,in plc.REF_TO BYTE refSoftEventControl,in plc.REF_TO BYTE refSoftEventStatus,in plc.REF_TO ARRAY [*] OF BYTE refResultData,in plc.REF_TO ARRAY [*] OF BYTE refUserData) Parameters parent IAxoObject refAcquisitionControl REF_TO BYTE refAcquisitionStatus REF_TO ARRAY [0..2] OF BYTE refInspectionControl REF_TO BYTE refInspectionStatus REF_TO DWORD refCommandControl REF_TO WORD refCommandStatus REF_TO WORD refSoftEventControl REF_TO BYTE refSoftEventStatus REF_TO BYTE refResultData REF_TO ARRAY [*] OF BYTE refUserData REF_TO ARRAY [*] OF BYTE Returns Run Runs tasks and logic of this component.>[!IMPORTANT] This method or one of its overloads must be called cyclically. Public VOID Run(in plc.AXOpen.Core.IAxoContext parent,in plc.REF_TO BYTE refAcquisitionControl,in plc.REF_TO ARRAY [0..2] OF BYTE refAcquisitionStatus,in plc.REF_TO BYTE refInspectionControl,in plc.REF_TO DWORD refInspectionStatus,in plc.REF_TO WORD refCommandControl,in plc.REF_TO WORD refCommandStatus,in plc.REF_TO BYTE refSoftEventControl,in plc.REF_TO BYTE refSoftEventStatus,in plc.REF_TO ARRAY [*] OF BYTE refResultData,in plc.REF_TO ARRAY [*] OF BYTE refUserData) Parameters parent IAxoContext refAcquisitionControl REF_TO BYTE refAcquisitionStatus REF_TO ARRAY [0..2] OF BYTE refInspectionControl REF_TO BYTE refInspectionStatus REF_TO DWORD refCommandControl REF_TO WORD refCommandStatus REF_TO WORD refSoftEventControl REF_TO BYTE refSoftEventStatus REF_TO BYTE refResultData REF_TO ARRAY [*] OF BYTE refUserData REF_TO ARRAY [*] OF BYTE Returns Execute Private VOID Execute(in plc.REF_TO BYTE refAcquisitionControl,in plc.REF_TO ARRAY [0..2] OF BYTE refAcquisitionStatus,in plc.REF_TO BYTE refInspectionControl,in plc.REF_TO DWORD refInspectionStatus,in plc.REF_TO WORD refCommandControl,in plc.REF_TO WORD refCommandStatus,in plc.REF_TO BYTE refSoftEventControl,in plc.REF_TO BYTE refSoftEventStatus,in plc.REF_TO ARRAY [*] OF BYTE refResultData,in plc.REF_TO ARRAY [*] OF BYTE refUserData) Parameters refAcquisitionControl REF_TO BYTE refAcquisitionStatus REF_TO ARRAY [0..2] OF BYTE refInspectionControl REF_TO BYTE refInspectionStatus REF_TO DWORD refCommandControl REF_TO WORD refCommandStatus REF_TO WORD refSoftEventControl REF_TO BYTE refSoftEventStatus REF_TO BYTE refResultData REF_TO ARRAY [*] OF BYTE refUserData REF_TO ARRAY [*] OF BYTE Returns Close Custom component logic running after any other component logic. Protected VOID Close() Returns ClearInspectionResults Clears the inspection results. Public AXOpen.Core.IAxoTaskState ClearInspectionResults() Returns IAxoTaskState Trigger Triggers the reading sequence and waits for results. Public AXOpen.Core.IAxoTaskState Trigger() Returns IAxoTaskState ChangeJob Changes the sensor job using job number. Public AXOpen.Core.IAxoTaskState ChangeJob(in plc.UINT Job) Parameters Job UINT Returns IAxoTaskState ChangeJob Changes the sensor job using job name. Public AXOpen.Core.IAxoTaskState ChangeJob(in plc.STRING Job) Parameters Job STRING Returns IAxoTaskState SoftEvent Triggers the soft event. Public AXOpen.Core.IAxoTaskState SoftEvent(in plc.UINT EventNumber) Parameters EventNumber UINT Returns IAxoTaskState"
  },
  "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsightChangeJobByName.html": {
    "href": "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsightChangeJobByName.html",
    "title": "Class AxoInsightChangeJobByName | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsightChangeJobByName Namespace plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0 CLASS AxoInsightChangeJobByName Inheritance AxoTask AxoObject AxoInsightChangeJobByName Implements IAxoTask IAxoTaskState Inherited Members Status IsDisabled RemoteInvoke RemoteRestore RemoteAbort RemoteResume StartSignature Duration StartTimeStamp ErrorDetails Identity GetState() GetErrorDetails() IsReady() IsDone() IsBusy() IsAborted() HasError() IsNewInvokeCall() IsInvokeCalledInThisPlcCycle() WasInvokeCalledInPreviousPlcCycle() IsNewExecuteCall() IsExecuteCalledInThisPlcCycle() WasExecuteCalledInPreviousPlcCycle() UpdateState() Invoke() Restore() DoneWhen(BOOL) Execute() LogTask(STRING[80],eLogLevel,IAxoObject) ThrowWhen(BOOL) ThrowWhen(BOOL,STRING[254]) SetIsDisabled(BOOL) GetIsDisabled() Abort() Resume() OnAbort() OnResume() OnDone() OnError() OnRestore() OnStart() WhileError() GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Properties _progress _progress : INT Property Value _infoTimer _infoTimer : UNDEFINED Property Value _errorTimer _errorTimer : UNDEFINED Property Value _infoTime _infoTime : LTIME Property Value _errorTime _errorTime : LTIME Property Value _refStatus _refStatus : REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Status Property Value _refMessenger _refMessenger : REF_TO AXOpen.Messaging.Static.AxoMessenger Property Value _jobName _jobName : STRING Property Value Methods Run Runs the logic of this tasks.>[!IMPORTANT] This method must be called cyclically. Public VOID Run(in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_AcquisitionControl refAcquisitionControl,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_AcquisitionStatus refAcquisitionStatus,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_InspectionControl refInspectionControl,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_InspectionStatus refInspectionStatus,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_CommandControl refCommandControl,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Config refConfig,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Status refStatus,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_UserData refUser,in plc.REF_TO AXOpen.Messaging.Static.AxoMessenger refMessenger) Parameters refAcquisitionControl REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_AcquisitionControl refAcquisitionStatus REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_AcquisitionStatus refInspectionControl REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_InspectionControl refInspectionStatus REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_InspectionStatus refCommandControl REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_CommandControl refConfig REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Config refStatus REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Status refUser REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_UserData refMessenger REF_TO AXOpen.Messaging.Static.AxoMessenger Returns AppendSuffix Internal STRING AppendSuffix(in plc.STRING jobName) Parameters jobName STRING Returns STRING SetUserDataAsString Internal BOOL SetUserDataAsString(in plc.STRING inValue,in plc.UINT inPosition,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_UserData refUser,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Status refStatus) Parameters inValue STRING inPosition UINT refUser REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_UserData refStatus REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Status Returns BOOL CallTimers Internal VOID CallTimers(in plc.BOOL signal) Parameters signal BOOL Returns OnRestore Protected VOID OnRestore() Returns OnAbort Protected VOID OnAbort() Returns OnDone Protected VOID OnDone() Returns OnError Protected VOID OnError() Returns OnStart Protected VOID OnStart() Returns InvokeWithParameters Internal AXOpen.Core.IAxoTaskState InvokeWithParameters(in plc.STRING inJobName) Parameters inJobName STRING Returns IAxoTaskState Manual Public VOID Manual(in plc.STRING RequiredJobName) Parameters RequiredJobName STRING Returns"
  },
  "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsightChangeJobByNumber.html": {
    "href": "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsightChangeJobByNumber.html",
    "title": "Class AxoInsightChangeJobByNumber | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsightChangeJobByNumber Namespace plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0 CLASS AxoInsightChangeJobByNumber Inheritance AxoTask AxoObject AxoInsightChangeJobByNumber Implements IAxoTask IAxoTaskState Inherited Members Status IsDisabled RemoteInvoke RemoteRestore RemoteAbort RemoteResume StartSignature Duration StartTimeStamp ErrorDetails Identity GetState() GetErrorDetails() IsReady() IsDone() IsBusy() IsAborted() HasError() IsNewInvokeCall() IsInvokeCalledInThisPlcCycle() WasInvokeCalledInPreviousPlcCycle() IsNewExecuteCall() IsExecuteCalledInThisPlcCycle() WasExecuteCalledInPreviousPlcCycle() UpdateState() Invoke() Restore() DoneWhen(BOOL) Execute() LogTask(STRING[80],eLogLevel,IAxoObject) ThrowWhen(BOOL) ThrowWhen(BOOL,STRING[254]) SetIsDisabled(BOOL) GetIsDisabled() Abort() Resume() OnAbort() OnResume() OnDone() OnError() OnRestore() OnStart() WhileError() GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Properties _progress _progress : INT Property Value _infoTimer _infoTimer : UNDEFINED Property Value _errorTimer _errorTimer : UNDEFINED Property Value _infoTime _infoTime : LTIME Property Value _errorTime _errorTime : LTIME Property Value _refStatus _refStatus : REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Status Property Value _refMessenger _refMessenger : REF_TO AXOpen.Messaging.Static.AxoMessenger Property Value _jobNumber _jobNumber : UINT Property Value Methods Run Runs the logic of this tasks.>[!IMPORTANT] This method must be called cyclically. Public VOID Run(in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_AcquisitionControl refAcquisitionControl,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_AcquisitionStatus refAcquisitionStatus,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_InspectionControl refInspectionControl,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_InspectionStatus refInspectionStatus,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_CommandControl refCommandControl,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Config refConfig,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Status refStatus,in plc.REF_TO AXOpen.Messaging.Static.AxoMessenger refMessenger) Parameters refAcquisitionControl REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_AcquisitionControl refAcquisitionStatus REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_AcquisitionStatus refInspectionControl REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_InspectionControl refInspectionStatus REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_InspectionStatus refCommandControl REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_CommandControl refConfig REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Config refStatus REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Status refMessenger REF_TO AXOpen.Messaging.Static.AxoMessenger Returns CallTimers Private VOID CallTimers(in plc.BOOL signal) Parameters signal BOOL Returns OnRestore Protected VOID OnRestore() Returns OnAbort Protected VOID OnAbort() Returns OnDone Protected VOID OnDone() Returns OnError Protected VOID OnError() Returns OnStart Protected VOID OnStart() Returns InvokeWithParameters Internal AXOpen.Core.IAxoTaskState InvokeWithParameters(in plc.UINT inJobNumber) Parameters inJobNumber UINT Returns IAxoTaskState Manual Public VOID Manual(in plc.UINT RequiredJobNumber) Parameters RequiredJobNumber UINT Returns"
  },
  "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsightClearInspectionResults.html": {
    "href": "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsightClearInspectionResults.html",
    "title": "Class AxoInsightClearInspectionResults | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsightClearInspectionResults Namespace plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0 CLASS AxoInsightClearInspectionResults Inheritance AxoTask AxoObject AxoInsightClearInspectionResults Implements IAxoTask IAxoTaskState Inherited Members Status IsDisabled RemoteInvoke RemoteRestore RemoteAbort RemoteResume StartSignature Duration StartTimeStamp ErrorDetails Identity GetState() GetErrorDetails() IsReady() IsDone() IsBusy() IsAborted() HasError() IsNewInvokeCall() IsInvokeCalledInThisPlcCycle() WasInvokeCalledInPreviousPlcCycle() IsNewExecuteCall() IsExecuteCalledInThisPlcCycle() WasExecuteCalledInPreviousPlcCycle() UpdateState() Invoke() Restore() DoneWhen(BOOL) Execute() LogTask(STRING[80],eLogLevel,IAxoObject) ThrowWhen(BOOL) ThrowWhen(BOOL,STRING[254]) SetIsDisabled(BOOL) GetIsDisabled() Abort() Resume() OnAbort() OnResume() OnDone() OnError() OnRestore() OnStart() WhileError() GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Properties _progress _progress : INT Property Value _infoTimer _infoTimer : UNDEFINED Property Value _errorTimer _errorTimer : UNDEFINED Property Value _infoTime _infoTime : LTIME Property Value _errorTime _errorTime : LTIME Property Value _refStatus _refStatus : REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Status Property Value _refMessenger _refMessenger : REF_TO AXOpen.Messaging.Static.AxoMessenger Property Value Methods Run Runs the logic of this tasks.>[!IMPORTANT] This method must be called cyclically. Public VOID Run(in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_AcquisitionControl refAcquisitionControl,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_AcquisitionStatus refAcquisitionStatus,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_InspectionControl refInspectionControl,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_InspectionStatus refInspectionStatus,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Config refConfig,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Status refStatus,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Results refResults,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_ResultData refInspectionResults,in plc.REF_TO AXOpen.Messaging.Static.AxoMessenger refMessenger) Parameters refAcquisitionControl REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_AcquisitionControl refAcquisitionStatus REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_AcquisitionStatus refInspectionControl REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_InspectionControl refInspectionStatus REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_InspectionStatus refConfig REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Config refStatus REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Status refResults REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Results refInspectionResults REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_ResultData refMessenger REF_TO AXOpen.Messaging.Static.AxoMessenger Returns CallTimers Private VOID CallTimers(in plc.BOOL signal) Parameters signal BOOL Returns OnRestore Protected VOID OnRestore() Returns OnAbort Protected VOID OnAbort() Returns OnDone Protected VOID OnDone() Returns OnError Protected VOID OnError() Returns OnStart Protected VOID OnStart() Returns"
  },
  "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsightSoftEvent.html": {
    "href": "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsightSoftEvent.html",
    "title": "Class AxoInsightSoftEvent | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsightSoftEvent Namespace plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0 CLASS AxoInsightSoftEvent Inheritance AxoTask AxoObject AxoInsightSoftEvent Implements IAxoTask IAxoTaskState Inherited Members Status IsDisabled RemoteInvoke RemoteRestore RemoteAbort RemoteResume StartSignature Duration StartTimeStamp ErrorDetails Identity GetState() GetErrorDetails() IsReady() IsDone() IsBusy() IsAborted() HasError() IsNewInvokeCall() IsInvokeCalledInThisPlcCycle() WasInvokeCalledInPreviousPlcCycle() IsNewExecuteCall() IsExecuteCalledInThisPlcCycle() WasExecuteCalledInPreviousPlcCycle() UpdateState() Invoke() Restore() DoneWhen(BOOL) Execute() LogTask(STRING[80],eLogLevel,IAxoObject) ThrowWhen(BOOL) ThrowWhen(BOOL,STRING[254]) SetIsDisabled(BOOL) GetIsDisabled() Abort() Resume() OnAbort() OnResume() OnDone() OnError() OnRestore() OnStart() WhileError() GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Properties _progress _progress : INT Property Value _infoTimer _infoTimer : UNDEFINED Property Value _errorTimer _errorTimer : UNDEFINED Property Value _infoTime _infoTime : LTIME Property Value _errorTime _errorTime : LTIME Property Value _refStatus _refStatus : REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Status Property Value _refMessenger _refMessenger : REF_TO AXOpen.Messaging.Static.AxoMessenger Property Value _softEventNumber _softEventNumber : UINT Property Value Methods Run Runs the logic of this tasks.>[!IMPORTANT] This method must be called cyclically. Public VOID Run(in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_AcquisitionControl refAcquisitionControl,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_AcquisitionStatus refAcquisitionStatus,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_InspectionControl refInspectionControl,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_InspectionStatus refInspectionStatus,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_CommandControl refCommandControl,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Config refConfig,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Status refStatus,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_SoftEventControl refTriggerSoftEvent,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_SoftEventStatus refTriggerSoftEventAcknowledge,in plc.REF_TO AXOpen.Messaging.Static.AxoMessenger refMessenger) Parameters refAcquisitionControl REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_AcquisitionControl refAcquisitionStatus REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_AcquisitionStatus refInspectionControl REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_InspectionControl refInspectionStatus REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_InspectionStatus refCommandControl REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_CommandControl refConfig REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Config refStatus REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Status refTriggerSoftEvent REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_SoftEventControl refTriggerSoftEventAcknowledge REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_SoftEventStatus refMessenger REF_TO AXOpen.Messaging.Static.AxoMessenger Returns CallTimers Private VOID CallTimers(in plc.BOOL signal) Parameters signal BOOL Returns OnRestore Protected VOID OnRestore() Returns OnAbort Protected VOID OnAbort() Returns OnDone Protected VOID OnDone() Returns OnError Protected VOID OnError() Returns OnStart Protected VOID OnStart() Returns InvokeWithParameters Internal AXOpen.Core.IAxoTaskState InvokeWithParameters(in plc.UINT inSoftEventNumber) Parameters inSoftEventNumber UINT Returns IAxoTaskState Manual Public VOID Manual(in plc.UINT RequiredSoftEventNumber) Parameters RequiredSoftEventNumber UINT Returns"
  },
  "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsightTrigger.html": {
    "href": "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsightTrigger.html",
    "title": "Class AxoInsightTrigger | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsightTrigger Namespace plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0 CLASS AxoInsightTrigger Inheritance AxoTask AxoObject AxoInsightTrigger Implements IAxoTask IAxoTaskState Inherited Members Status IsDisabled RemoteInvoke RemoteRestore RemoteAbort RemoteResume StartSignature Duration StartTimeStamp ErrorDetails Identity GetState() GetErrorDetails() IsReady() IsDone() IsBusy() IsAborted() HasError() IsNewInvokeCall() IsInvokeCalledInThisPlcCycle() WasInvokeCalledInPreviousPlcCycle() IsNewExecuteCall() IsExecuteCalledInThisPlcCycle() WasExecuteCalledInPreviousPlcCycle() UpdateState() Invoke() Restore() DoneWhen(BOOL) Execute() LogTask(STRING[80],eLogLevel,IAxoObject) ThrowWhen(BOOL) ThrowWhen(BOOL,STRING[254]) SetIsDisabled(BOOL) GetIsDisabled() Abort() Resume() OnAbort() OnResume() OnDone() OnError() OnRestore() OnStart() WhileError() GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Properties _progress _progress : INT Property Value _infoTimer _infoTimer : UNDEFINED Property Value _errorTimer _errorTimer : UNDEFINED Property Value _infoTime _infoTime : LTIME Property Value _errorTime _errorTime : LTIME Property Value _refStatus _refStatus : REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Status Property Value _refMessenger _refMessenger : REF_TO AXOpen.Messaging.Static.AxoMessenger Property Value Methods Run Runs the logic of this tasks.>[!IMPORTANT] This method must be called cyclically. Public VOID Run(in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_AcquisitionControl refAcquisitionControl,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_AcquisitionStatus refAcquisitionStatus,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_InspectionControl refInspectionControl,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_InspectionStatus refInspectionStatus,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_CommandControl refCommandControl,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Config refConfig,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Status refStatus,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Results refResults,in plc.REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_ResultData refInspectionResults,in plc.REF_TO ARRAY [*] OF BYTE refResultData,in plc.REF_TO AXOpen.Messaging.Static.AxoMessenger refMessenger) Parameters refAcquisitionControl REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_AcquisitionControl refAcquisitionStatus REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_AcquisitionStatus refInspectionControl REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_InspectionControl refInspectionStatus REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_InspectionStatus refCommandControl REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_CommandControl refConfig REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Config refStatus REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Status refResults REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Results refInspectionResults REF_TO AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_ResultData refResultData REF_TO ARRAY [*] OF BYTE refMessenger REF_TO AXOpen.Messaging.Static.AxoMessenger Returns CallTimers Private VOID CallTimers(in plc.BOOL signal) Parameters signal BOOL Returns OnRestore Protected VOID OnRestore() Returns OnAbort Protected VOID OnAbort() Returns OnDone Protected VOID OnDone() Returns OnError Protected VOID OnError() Returns OnStart Protected VOID OnStart() Returns"
  },
  "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_AcquisitionControl.html": {
    "href": "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_AcquisitionControl.html",
    "title": "Struct AxoInsight_AcquisitionControl | System.Dynamic.ExpandoObject",
    "keywords": "Struct AxoInsight_AcquisitionControl Namespace plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0 STRUCT AxoInsight_AcquisitionControl Properties TriggerEnable TriggerEnable : BOOL Property Value Trigger Trigger : BOOL Property Value ClearExposureComplete ClearExposureComplete : BOOL Property Value SetOffline SetOffline : BOOL Property Value"
  },
  "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_AcquisitionStatus.html": {
    "href": "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_AcquisitionStatus.html",
    "title": "Struct AxoInsight_AcquisitionStatus | System.Dynamic.ExpandoObject",
    "keywords": "Struct AxoInsight_AcquisitionStatus Namespace plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0 STRUCT AxoInsight_AcquisitionStatus Properties TriggerReady TriggerReady : BOOL Property Value TriggerAcknowledge TriggerAcknowledge : BOOL Property Value ExposureComplete ExposureComplete : BOOL Property Value MissedAcquisition MissedAcquisition : BOOL Property Value OfflineReason0 OfflineReason0 : BOOL Property Value OfflineReason1 OfflineReason1 : BOOL Property Value OfflineReason2 OfflineReason2 : BOOL Property Value Online Online : BOOL Property Value AcquisitionID AcquisitionID : UINT Property Value"
  },
  "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_CommandControl.html": {
    "href": "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_CommandControl.html",
    "title": "Struct AxoInsight_CommandControl | System.Dynamic.ExpandoObject",
    "keywords": "Struct AxoInsight_CommandControl Namespace plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0 STRUCT AxoInsight_CommandControl Properties Command Command : UINT Property Value"
  },
  "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_CommandStatus.html": {
    "href": "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_CommandStatus.html",
    "title": "Struct AxoInsight_CommandStatus | System.Dynamic.ExpandoObject",
    "keywords": "Struct AxoInsight_CommandStatus Namespace plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0 STRUCT AxoInsight_CommandStatus Properties CurrentJobID CurrentJobID : UINT Property Value"
  },
  "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Config.html": {
    "href": "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Config.html",
    "title": "Struct AxoInsight_Config | System.Dynamic.ExpandoObject",
    "keywords": "Struct AxoInsight_Config Namespace plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0 STRUCT AxoInsight_Config Properties InfoTime InfoTime : LTIME Property Value ErrorTime ErrorTime : LTIME Property Value MaxJobNumber MaxJobNumber : UINT Property Value"
  },
  "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_InspectionControl.html": {
    "href": "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_InspectionControl.html",
    "title": "Struct AxoInsight_InspectionControl | System.Dynamic.ExpandoObject",
    "keywords": "Struct AxoInsight_InspectionControl Namespace plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0 STRUCT AxoInsight_InspectionControl Properties EnableResultsBuffering EnableResultsBuffering : BOOL Property Value AcknowledgeInspectionResults AcknowledgeInspectionResults : BOOL Property Value ExtendedUserDataSet ExtendedUserDataSet : BOOL Property Value ExecuteCommand ExecuteCommand : BOOL Property Value ClearError ClearError : BOOL Property Value"
  },
  "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_InspectionStatus.html": {
    "href": "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_InspectionStatus.html",
    "title": "Struct AxoInsight_InspectionStatus | System.Dynamic.ExpandoObject",
    "keywords": "Struct AxoInsight_InspectionStatus Namespace plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0 STRUCT AxoInsight_InspectionStatus Properties SystemBusy SystemBusy : BOOL Property Value InspectionCompleted InspectionCompleted : BOOL Property Value ResultsBufferOverrun ResultsBufferOverrun : BOOL Property Value ResultsValid ResultsValid : BOOL Property Value CommandExecuting CommandExecuting : BOOL Property Value CommandComplete CommandComplete : BOOL Property Value CommandFailed CommandFailed : BOOL Property Value ExtendedUserDataSetAcknowledge ExtendedUserDataSetAcknowledge : BOOL Property Value OverallJobPassFail OverallJobPassFail : BOOL Property Value TestRunReady TestRunReady : BOOL Property Value Error Error : BOOL Property Value ErrorCode ErrorCode : UINT Property Value"
  },
  "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_ResultData.html": {
    "href": "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_ResultData.html",
    "title": "Class AxoInsight_ResultData | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsight_ResultData Namespace plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0 CLASS AxoInsight_ResultData Inheritance AxoByteArray AxoInsight_ResultData Inherited Members DataChanged ToggleDataChangedFlag() Properties Data Data : ARRAY [0..249] OF BYTE Property Value"
  },
  "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Results.html": {
    "href": "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Results.html",
    "title": "Struct AxoInsight_Results | System.Dynamic.ExpandoObject",
    "keywords": "Struct AxoInsight_Results Namespace plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0 STRUCT AxoInsight_Results Properties InspectionID InspectionID : UINT Property Value ResultCode ResultCode : UINT Property Value"
  },
  "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_SoftEventControl.html": {
    "href": "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_SoftEventControl.html",
    "title": "Struct AxoInsight_SoftEventControl | System.Dynamic.ExpandoObject",
    "keywords": "Struct AxoInsight_SoftEventControl Namespace plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0 STRUCT AxoInsight_SoftEventControl Properties TriggerSoftEvent TriggerSoftEvent : AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoBoolArray8 Property Value"
  },
  "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_SoftEventStatus.html": {
    "href": "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_SoftEventStatus.html",
    "title": "Struct AxoInsight_SoftEventStatus | System.Dynamic.ExpandoObject",
    "keywords": "Struct AxoInsight_SoftEventStatus Namespace plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0 STRUCT AxoInsight_SoftEventStatus Properties TriggerSoftEventAcknowledge TriggerSoftEventAcknowledge : AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoBoolArray8 Property Value"
  },
  "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Status.html": {
    "href": "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_Status.html",
    "title": "Class AxoInsight_Status | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsight_Status Namespace plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0 CLASS AxoInsight_Status Inheritance AxoComponent_Status AxoInsight_Status Inherited Members Action Error Properties CurrentJobName CurrentJobName : STRING Property Value CurrentJobNumber CurrentJobNumber : UINT Property Value ResultDataSize ResultDataSize : AXOpen.Components.Cognex.Vision.v_6_0_0_0.eAxoInsight_ResultDataSize Property Value UserDataSize UserDataSize : AXOpen.Components.Cognex.Vision.v_6_0_0_0.eAxoInsight_UserDataSize Property Value"
  },
  "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_UserData.html": {
    "href": "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight_UserData.html",
    "title": "Class AxoInsight_UserData | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInsight_UserData Namespace plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0 CLASS AxoInsight_UserData Inheritance AxoByteArray AxoInsight_UserData Inherited Members DataChanged ToggleDataChangedFlag() Properties Data Data : ARRAY [0..253] OF BYTE Property Value"
  },
  "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.eAxoDataman_ResultDataSize.html": {
    "href": "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.eAxoDataman_ResultDataSize.html",
    "title": "Enum eAxoDataman_ResultDataSize | System.Dynamic.ExpandoObject",
    "keywords": "Enum eAxoDataman_ResultDataSize Namespace plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0 eAxoDataman_ResultDataSize : INT Fields"
  },
  "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.eAxoDataman_UserDataSize.html": {
    "href": "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.eAxoDataman_UserDataSize.html",
    "title": "Enum eAxoDataman_UserDataSize | System.Dynamic.ExpandoObject",
    "keywords": "Enum eAxoDataman_UserDataSize Namespace plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0 eAxoDataman_UserDataSize : INT Fields"
  },
  "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.eAxoInsight_ResultDataSize.html": {
    "href": "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.eAxoInsight_ResultDataSize.html",
    "title": "Enum eAxoInsight_ResultDataSize | System.Dynamic.ExpandoObject",
    "keywords": "Enum eAxoInsight_ResultDataSize Namespace plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0 eAxoInsight_ResultDataSize : INT Fields"
  },
  "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.eAxoInsight_UserDataSize.html": {
    "href": "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.eAxoInsight_UserDataSize.html",
    "title": "Enum eAxoInsight_UserDataSize | System.Dynamic.ExpandoObject",
    "keywords": "Enum eAxoInsight_UserDataSize Namespace plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0 eAxoInsight_UserDataSize : INT Fields"
  },
  "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.html": {
    "href": "apictrl/plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0.html",
    "title": "Namespace plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0 | System.Dynamic.ExpandoObject",
    "keywords": "Namespace plc.AXOpen.Components.Cognex.Vision.v_6_0_0_0 Classes AxoDataman AxoInsight AxoDatamanClearResultData AxoDatamanRead AxoDataman_ResultData AxoDataman_Status AxoDataman_UserData AxoInsightChangeJobByName AxoInsightChangeJobByNumber AxoInsightClearInspectionResults AxoInsightSoftEvent AxoInsightTrigger AxoBoolArray8 AxoInsight_ResultData AxoInsight_Status AxoInsight_UserData Structs AxoDataman_AcquisitionControl AxoDataman_AcquisitionStatus AxoDataman_Config AxoDataman_Results AxoDataman_ResultsControl AxoDataman_ResultsStatus AxoDataman_SoftEventControl AxoDataman_SoftEventStatus AxoDataman_User AxoInsight_AcquisitionControl AxoInsight_AcquisitionStatus AxoInsight_CommandControl AxoInsight_CommandStatus AxoInsight_Config AxoInsight_InspectionControl AxoInsight_InspectionStatus AxoInsight_Results AxoInsight_SoftEventControl AxoInsight_SoftEventStatus"
  },
  "apictrl/plc.AXOpen.Components.Pneumatics.AxoCylinder.html": {
    "href": "apictrl/plc.AXOpen.Components.Pneumatics.AxoCylinder.html",
    "title": "Class AxoCylinder | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoCylinder Namespace plc.AXOpen.Components.Pneumatics CLASS AxoCylinder Inheritance AxoComponent AxoObject AxoCylinder Implements IAxoComponent Inherited Members _isManuallyControllable Identity ActivateManualControl() IsManuallyControllable() CheckIfManualControlIsActivated() Open() Run() Close() Restore() ManualControl() GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Properties _MoveToWorkTask _MoveToWorkTask : AXOpen.Core.AxoTask Property Value _MoveToHomeTask _MoveToHomeTask : AXOpen.Core.AxoTask Property Value _StopTask _StopTask : AXOpen.Core.AxoTask Property Value _HomeSensor _HomeSensor : BOOL Property Value _WorkSensor _WorkSensor : BOOL Property Value _MoveHomeSignal _MoveHomeSignal : BOOL Property Value _MoveWorkSignal _MoveWorkSignal : BOOL Property Value _Messenger _Messenger : AXOpen.Messaging.Static.AxoMessenger Property Value _MoveToWorkIsSuspended _MoveToWorkIsSuspended : BOOL Property Value _MoveToHomeIsSuspended _MoveToHomeIsSuspended : BOOL Property Value Methods Run Public VOID Run(in plc.AXOpen.Core.IAxoObject parent,in plc.BOOL homeSensor,in plc.BOOL workSensor) Parameters parent IAxoObject homeSensor BOOL workSensor BOOL Returns Run Runs tasks and logic of this component.>[!IMPORTANT] This method or one of its overloads must be called cyclically. Public VOID Run(in plc.AXOpen.Core.IAxoContext context,in plc.BOOL homeSensor,in plc.BOOL workSensor) Parameters context IAxoContext homeSensor BOOL workSensor BOOL Returns ManualControl Protected VOID ManualControl() Returns Restore Restores this component into intial state. Protected AXOpen.Core.IAxoTask Restore() Returns IAxoTask MoveToWork Invokes the movement to the work position and returns the task state. Public AXOpen.Core.IAxoTaskState MoveToWork() Returns IAxoTaskState MoveToHome Invokes the movement to the home position and returns the task state. Public AXOpen.Core.IAxoTaskState MoveToHome() Returns IAxoTaskState Stop Stops any movement. Public AXOpen.Core.IAxoTaskState Stop() Returns IAxoTaskState SuspendMoveToWorkWhile Suspends the movement to the work position while the condition is 'true'. Task remains still executing. Public VOID SuspendMoveToWorkWhile(in plc.BOOL Condition) Parameters Condition BOOL Returns SuspendMoveToHomeWhile Suspends the movement to the home position while the condition is 'true'. Task remains still executing. Public VOID SuspendMoveToHomeWhile(in plc.BOOL Condition) Parameters Condition BOOL Returns AbortMoveToWorkWhen Aborts the movement to the work position when the condition is 'true' and restores the respective task. Public VOID AbortMoveToWorkWhen(in plc.BOOL Condition) Parameters Condition BOOL Returns AbortMoveToHomeWhen Aborts the movement to the home position when the condition is 'true' and restores the respective task. Public VOID AbortMoveToHomeWhen(in plc.BOOL Condition) Parameters Condition BOOL Returns"
  },
  "apictrl/plc.AXOpen.Components.Pneumatics.html": {
    "href": "apictrl/plc.AXOpen.Components.Pneumatics.html",
    "title": "Namespace plc.AXOpen.Components.Pneumatics | System.Dynamic.ExpandoObject",
    "keywords": "Namespace plc.AXOpen.Components.Pneumatics Classes AxoCylinder"
  },
  "apictrl/plc.AXOpen.Core.AxoAlertDialog.html": {
    "href": "apictrl/plc.AXOpen.Core.AxoAlertDialog.html",
    "title": "Class AxoAlertDialog | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoAlertDialog Namespace plc.AXOpen.Core CLASS AxoAlertDialog Inheritance AxoRemoteTask AxoTask AxoObject AxoAlertDialog Implements IAxoAlertDialogFormat IAxoTask IAxoTaskState Inherited Members DoneSignature IsInitialized HasRemoteException IsBeingCalledCounter TaskNotInitialized TaskHasRemoteException Status IsDisabled RemoteInvoke RemoteRestore RemoteAbort RemoteResume StartSignature Duration StartTimeStamp ErrorDetails Identity Execute() GetStartSignature() SetDoneSignature() GetState() GetErrorDetails() IsReady() IsDone() IsBusy() IsAborted() HasError() IsNewInvokeCall() IsInvokeCalledInThisPlcCycle() WasInvokeCalledInPreviousPlcCycle() IsNewExecuteCall() IsExecuteCalledInThisPlcCycle() WasExecuteCalledInPreviousPlcCycle() UpdateState() Invoke() Restore() DoneWhen(BOOL) Execute() LogTask(STRING[80],eLogLevel,IAxoObject) ThrowWhen(BOOL) ThrowWhen(BOOL,STRING[254]) SetIsDisabled(BOOL) GetIsDisabled() Abort() Resume() OnAbort() OnResume() OnDone() OnError() OnRestore() OnStart() WhileError() GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Properties _dialogType _dialogType : AXOpen.Core.eDialogType Property Value _title _title : STRING Property Value _message _message : STRING Property Value _timeToBurn _timeToBurn : UINT Property Value _lastCall _lastCall : ULINT Property Value Methods Show Public AXOpen.Core.IAxoAlertDialogFormat Show(in plc.AXOpen.Core.IAxoObject _parent) Parameters _parent IAxoObject Returns IAxoAlertDialogFormat WithTitle Public AXOpen.Core.IAxoAlertDialogFormat WithTitle(in plc.STRING inTitle) Parameters inTitle STRING Returns IAxoAlertDialogFormat WithMessage Public AXOpen.Core.IAxoAlertDialogFormat WithMessage(in plc.STRING inMessage) Parameters inMessage STRING Returns IAxoAlertDialogFormat WithTimeToBurn Public AXOpen.Core.IAxoAlertDialogFormat WithTimeToBurn(in plc.UINT inSeconds) Parameters inSeconds UINT Returns IAxoAlertDialogFormat WithType Public AXOpen.Core.IAxoAlertDialogFormat WithType(in plc.AXOpen.Core.eDialogType inDialogType) Parameters inDialogType eDialogType Returns IAxoAlertDialogFormat IsShown Public BOOL IsShown() Returns BOOL"
  },
  "apictrl/plc.AXOpen.Core.AxoBoolArray.html": {
    "href": "apictrl/plc.AXOpen.Core.AxoBoolArray.html",
    "title": "Class AxoBoolArray | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoBoolArray Namespace plc.AXOpen.Core CLASS AxoBoolArray AxoBoolArray Properties DataChanged DataChanged : BOOL Property Value Methods ToggleDataChangedFlag Public VOID ToggleDataChangedFlag() Returns"
  },
  "apictrl/plc.AXOpen.Core.AxoByteArray.html": {
    "href": "apictrl/plc.AXOpen.Core.AxoByteArray.html",
    "title": "Class AxoByteArray | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoByteArray Namespace plc.AXOpen.Core CLASS AxoByteArray AxoByteArray Properties DataChanged DataChanged : BOOL Property Value Methods ToggleDataChangedFlag Public VOID ToggleDataChangedFlag() Returns"
  },
  "apictrl/plc.AXOpen.Core.AxoComponent.html": {
    "href": "apictrl/plc.AXOpen.Core.AxoComponent.html",
    "title": "Class AxoComponent | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoComponent Namespace plc.AXOpen.Core CLASS AxoComponent Inheritance AxoObject AxoComponent Implements IAxoComponent Inherited Members Identity GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Properties _manualControlContextCycle _manualControlContextCycle : ULINT Property Value _isManuallyControllable _isManuallyControllable : BOOL Property Value Methods ActivateManualControl Executes the logic for manual-maintenance control. Public VOID ActivateManualControl() Returns IsManuallyControllable Gets whether the AxoComponent is manually controllable.To make the AxoComponent manually controllable, it is necessary to call the ActivateManualMode() method cyclically. Public BOOL IsManuallyControllable() Returns BOOL CheckIfManualControlIsActivated Private VOID CheckIfManualControlIsActivated() Returns Open Protected VOID Open() Returns Run Public VOID Run() Returns Close Protected VOID Close() Returns Restore Restores this instance. This method must be implemented in derived class. Protected AXOpen.Core.IAxoTask Restore() Returns IAxoTask ManualControl Custom logic for manual control of the AxoComponent.This method must be implemented in derived class. Protected VOID ManualControl() Returns"
  },
  "apictrl/plc.AXOpen.Core.AxoContext.html": {
    "href": "apictrl/plc.AXOpen.Core.AxoContext.html",
    "title": "Class AxoContext | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoContext Namespace plc.AXOpen.Core Provides base for contextualized entry of AXOpen application.This class is abstract and must be inherited. CLASS AxoContext AxoContext Implements IAxoContext Properties _openCounter _openCounter : ULINT Property Value _closeCounter _closeCounter : ULINT Property Value _identityCounter _identityCounter : ULINT Property Value NULL_RTC NULL_RTC : AXOpen.Core._NULL_RTC Property Value _rtc _rtc : AXOpen.Rtc.IAxoRtc Property Value NULL_LOGGER NULL_LOGGER : AXOpen.Core._NULL_LOGGER Property Value _contextLogger _contextLogger : AXOpen.Logging.IAxoLogger Property Value Methods Open Private ULINT Open() Returns ULINT Close Private ULINT Close() Returns ULINT Run Runs the cycle of this context. This method must be called cyclically in a PLC task. Public VOID Run() Returns OpenCycleCount Gets the value of current context cycle counter. Public ULINT OpenCycleCount() Returns ULINT ClosedCycleCount Public ULINT ClosedCycleCount() Returns ULINT CreateIdentity Public ULINT CreateIdentity() Returns ULINT PeekIdentity Public ULINT PeekIdentity() Returns ULINT GetRtc Public AXOpen.Rtc.IAxoRtc GetRtc() Returns IAxoRtc InjectRtc Public VOID InjectRtc(in plc.AXOpen.Rtc.IAxoRtc Rtc) Parameters Rtc IAxoRtc Returns GetLogger Public AXOpen.Logging.IAxoLogger GetLogger() Returns IAxoLogger InjectLogger Public VOID InjectLogger(in plc.AXOpen.Logging.IAxoLogger _logger) Parameters _logger IAxoLogger Returns Main The entry point for the context. The call tree of the context start here and all the logic of given contextmust be placed here.This method must be overridden in derived class. Protected VOID Main() Returns"
  },
  "apictrl/plc.AXOpen.Core.AxoCoordinatorStates.html": {
    "href": "apictrl/plc.AXOpen.Core.AxoCoordinatorStates.html",
    "title": "Enum AxoCoordinatorStates | System.Dynamic.ExpandoObject",
    "keywords": "Enum AxoCoordinatorStates Namespace plc.AXOpen.Core AxoCoordinatorStates : INT Fields"
  },
  "apictrl/plc.AXOpen.Core.AxoDialog.html": {
    "href": "apictrl/plc.AXOpen.Core.AxoDialog.html",
    "title": "Class AxoDialog | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDialog Namespace plc.AXOpen.Core AxoDialog class, which represents structure of base dialog. CLASS AxoDialog Inheritance AxoDialogBase AxoRemoteTask AxoTask AxoObject AxoDialog Implements IAxoDialogAnswer IAxoTask IAxoTaskState Inherited Members DoneSignature IsInitialized HasRemoteException IsBeingCalledCounter TaskNotInitialized TaskHasRemoteException Status IsDisabled RemoteInvoke RemoteRestore RemoteAbort RemoteResume StartSignature Duration StartTimeStamp ErrorDetails Identity Execute() GetStartSignature() SetDoneSignature() GetState() GetErrorDetails() IsReady() IsDone() IsBusy() IsAborted() HasError() IsNewInvokeCall() IsInvokeCalledInThisPlcCycle() WasInvokeCalledInPreviousPlcCycle() IsNewExecuteCall() IsExecuteCalledInThisPlcCycle() WasExecuteCalledInPreviousPlcCycle() UpdateState() Invoke() Restore() DoneWhen(BOOL) Execute() LogTask(STRING[80],eLogLevel,IAxoObject) ThrowWhen(BOOL) ThrowWhen(BOOL,STRING[254]) SetIsDisabled(BOOL) GetIsDisabled() Abort() Resume() OnAbort() OnResume() OnDone() OnError() OnRestore() OnStart() WhileError() GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Properties _text _text : STRING Property Value _caption _caption : STRING Property Value _hasOK _hasOK : BOOL Property Value _hasYes _hasYes : BOOL Property Value _hasNo _hasNo : BOOL Property Value _hasCancel _hasCancel : BOOL Property Value _answer _answer : AXOpen.Core.eDialogAnswer Property Value _dialogType _dialogType : AXOpen.Core.eDialogType Property Value _externalCloseReq _externalCloseReq : BOOL Property Value _closeSignal _closeSignal : BOOL Property Value _risingEdge _risingEdge : BOOL Property Value _lastCall _lastCall : ULINT Property Value Methods Show Show method, which serves for initializing remote task and invoking dialog from PLC. Public AXOpen.Core.IAxoDialogFormat Show(in plc.AXOpen.Core.IAxoObject _parent) Parameters _parent IAxoObject Returns IAxoDialogFormat ShowWithExternalClose Show method with a possibility to close dialog externally by setting a signal.WARNING: This is experimental implementation of possibility to close dialogs externally. More testing need to be done. Private AXOpen.Core.IAxoDialogFormat ShowWithExternalClose(in plc.AXOpen.Core.IAxoObject _parent,in plc.BOOL inOkAnswerSignal,in plc.BOOL inYesAnswerSignal,in plc.BOOL inNoAnswerSignal,in plc.BOOL inCancelAnswerSignal) Parameters _parent IAxoObject inOkAnswerSignal BOOL inYesAnswerSignal BOOL inNoAnswerSignal BOOL inCancelAnswerSignal BOOL Returns IAxoDialogFormat WithCaption Public AXOpen.Core.IAxoDialogAnswer WithCaption(in plc.STRING inCaption) Parameters inCaption STRING Returns IAxoDialogAnswer WithOk Public AXOpen.Core.IAxoDialogAnswer WithOk() Returns IAxoDialogAnswer WithText Public AXOpen.Core.IAxoDialogAnswer WithText(in plc.STRING inText) Parameters inText STRING Returns IAxoDialogAnswer WithType Public AXOpen.Core.IAxoDialogAnswer WithType(in plc.AXOpen.Core.eDialogType inDialogType) Parameters inDialogType eDialogType Returns IAxoDialogAnswer WithYesNo Public AXOpen.Core.IAxoDialogAnswer WithYesNo() Returns IAxoDialogAnswer WithYesNoCancel Public AXOpen.Core.IAxoDialogAnswer WithYesNoCancel() Returns IAxoDialogAnswer Answer Public AXOpen.Core.eDialogAnswer Answer() Returns eDialogAnswer"
  },
  "apictrl/plc.AXOpen.Core.AxoDialogBase.html": {
    "href": "apictrl/plc.AXOpen.Core.AxoDialogBase.html",
    "title": "Class AxoDialogBase | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDialogBase Namespace plc.AXOpen.Core CLASS AxoDialogBase Inheritance AxoRemoteTask AxoTask AxoObject AxoDialogBase Implements IAxoTask IAxoTaskState Inherited Members DoneSignature IsInitialized HasRemoteException IsBeingCalledCounter TaskNotInitialized TaskHasRemoteException Status IsDisabled RemoteInvoke RemoteRestore RemoteAbort RemoteResume StartSignature Duration StartTimeStamp ErrorDetails Identity Execute() GetStartSignature() SetDoneSignature() GetState() GetErrorDetails() IsReady() IsDone() IsBusy() IsAborted() HasError() IsNewInvokeCall() IsInvokeCalledInThisPlcCycle() WasInvokeCalledInPreviousPlcCycle() IsNewExecuteCall() IsExecuteCalledInThisPlcCycle() WasExecuteCalledInPreviousPlcCycle() UpdateState() Invoke() Restore() DoneWhen(BOOL) Execute() LogTask(STRING[80],eLogLevel,IAxoObject) ThrowWhen(BOOL) ThrowWhen(BOOL,STRING[254]) SetIsDisabled(BOOL) GetIsDisabled() Abort() Resume() OnAbort() OnResume() OnDone() OnError() OnRestore() OnStart() WhileError() GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext)"
  },
  "apictrl/plc.AXOpen.Core.AxoMomentaryTask.html": {
    "href": "apictrl/plc.AXOpen.Core.AxoMomentaryTask.html",
    "title": "Class AxoMomentaryTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoMomentaryTask Namespace plc.AXOpen.Core Provides basic momentary on function.To get the actual state of the toggle task, '''IsSwitchedOn()''', '''IsSwitchedOff()''' AND '''GetState()''' methods are available. CLASS AxoMomentaryTask Inheritance AxoObject AxoMomentaryTask Implements IAxoMomentaryTask Inherited Members Identity GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Properties State State : BOOL Property Value RemoteSwitchOn Remote request to set the state of this task to '''TRUE'''. RemoteSwitchOn : BOOL Property Value IsDisabled Gets or sets whether this task is disabled for any manipulations. IsDisabled : BOOL Property Value _openCycleCount _openCycleCount : ULINT Property Value Methods GetState Gets the actual state of this task. Public BOOL GetState() Returns BOOL IsRunCalledInThisPlcCycle Private BOOL IsRunCalledInThisPlcCycle() Returns BOOL WasRunCalledInPreviousPlcCycle Private BOOL WasRunCalledInPreviousPlcCycle() Returns BOOL Run This method needs to be called cyclically. Public BOOL Run() Returns BOOL SetIsDisabled Sets the value of the IsDisabled variable Public VOID SetIsDisabled(in plc.BOOL Disabled) Parameters Disabled BOOL Returns GetIsDisabled Returns the value of the IsDisabled variable Public BOOL GetIsDisabled() Returns BOOL IsSwitchedOn Returns TRUE if task is switched on Public BOOL IsSwitchedOn() Returns BOOL IsSwitchedOff Returns TRUE if task is switched off Public BOOL IsSwitchedOff() Returns BOOL SwitchOff Private VOID SwitchOff() Returns SwitchOn Private VOID SwitchOn() Returns OnSwitchedOn Executes ones when momentary task changes its state from '''FALSE''' to '''TRUE'''. Protected VOID OnSwitchedOn() Returns OnSwitchedOff Executes ones when momentary task changes its state from '''TRUE''' to '''FALSE'''. Protected VOID OnSwitchedOff() Returns OnStateChanged Executes ones when momentary task changes its state. Protected VOID OnStateChanged() Returns SwitchedOn Executes while the task is in On state. Protected VOID SwitchedOn() Returns SwitchedOff Executes while the task is in Off state. Protected VOID SwitchedOff() Returns"
  },
  "apictrl/plc.AXOpen.Core.AxoObject.html": {
    "href": "apictrl/plc.AXOpen.Core.AxoObject.html",
    "title": "Class AxoObject | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoObject Namespace plc.AXOpen.Core Provides base class for all classes of AXOpen. CLASS AxoObject AxoObject Implements IAxoObject Properties Identity Identity : ULINT Property Value _parent _parent : AXOpen.Core.IAxoObject Property Value _context _context : AXOpen.Core.IAxoContext Property Value NULL_CONTEXT NULL_CONTEXT : AXOpen.Core._NULL_CONTEXT Property Value NULL_OBJECT NULL_OBJECT : AXOpen.Core._NULL_OBJECT Property Value Methods GetIdentity Gets unique identity of this object in given context. Public ULINT GetIdentity() Returns ULINT GetContext Gets context in which this object was initialized. Public AXOpen.Core.IAxoContext GetContext() Returns IAxoContext GetParent Gets parent in which this object was initialized. Public AXOpen.Core.IAxoObject GetParent() Returns IAxoObject Initialize Initializes this object associating it given parent.This method should be called only once upon the program start.Any subsequent call are ignored. Public VOID Initialize(in plc.AXOpen.Core.IAxoObject parent) Parameters parent IAxoObject Returns Initialize Initializes this object associating it given context.This method should be called only once upon the program start.Any subsequent call are ignored. Public VOID Initialize(in plc.AXOpen.Core.IAxoContext context) Parameters context IAxoContext Returns"
  },
  "apictrl/plc.AXOpen.Core.AxoRemoteTask.html": {
    "href": "apictrl/plc.AXOpen.Core.AxoRemoteTask.html",
    "title": "Class AxoRemoteTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoRemoteTask Namespace plc.AXOpen.Core Provides a mechanism to exectute a logic from the PLC in an .NET environment. > [!IMPORTANT]> The deferred execution in .NET envornment is not hard-real time nor deterministic. CLASS AxoRemoteTask Inheritance AxoTask AxoObject AxoRemoteTask Implements IAxoTask IAxoTaskState Inherited Members Status IsDisabled RemoteInvoke RemoteRestore RemoteAbort RemoteResume StartSignature Duration StartTimeStamp ErrorDetails Identity GetState() GetErrorDetails() IsReady() IsDone() IsBusy() IsAborted() HasError() IsNewInvokeCall() IsInvokeCalledInThisPlcCycle() WasInvokeCalledInPreviousPlcCycle() IsNewExecuteCall() IsExecuteCalledInThisPlcCycle() WasExecuteCalledInPreviousPlcCycle() UpdateState() Invoke() Restore() DoneWhen(BOOL) Execute() LogTask(STRING[80],eLogLevel,IAxoObject) ThrowWhen(BOOL) ThrowWhen(BOOL,STRING[254]) SetIsDisabled(BOOL) GetIsDisabled() Abort() Resume() OnAbort() OnResume() OnDone() OnError() OnRestore() OnStart() WhileError() GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Properties DoneSignature Remote system's done signature.When StartSignature and DoneSignature equal the task is considered executed on the remote system. DoneSignature : ULINT Property Value IsInitialized Indicates whether this instance's remote procedure is initialized. IsInitialized : BOOL Property Value Remarks When the remote task is not initialized, but the execution is invoked, task enters error state. HasRemoteException HasRemoteException : BOOL Property Value IsBeingCalledCounter IsBeingCalledCounter : INT Property Value TaskNotInitialized TaskNotInitialized : AXOpen.Messaging.Static.AxoMessenger Property Value TaskHasRemoteException TaskHasRemoteException : AXOpen.Messaging.Static.AxoMessenger Property Value Methods Execute Public BOOL Execute() Returns BOOL GetStartSignature Internal ULINT GetStartSignature() Returns ULINT SetDoneSignature Internal VOID SetDoneSignature() Returns"
  },
  "apictrl/plc.AXOpen.Core.AxoSequencer.html": {
    "href": "apictrl/plc.AXOpen.Core.AxoSequencer.html",
    "title": "Class AxoSequencer | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoSequencer Namespace plc.AXOpen.Core CLASS AxoSequencer Inheritance AxoTask AxoObject AxoSequencer Implements IAxoSequencer IAxoTask IAxoTaskState Inherited Members Status IsDisabled RemoteInvoke RemoteRestore RemoteAbort RemoteResume StartSignature Duration StartTimeStamp ErrorDetails Identity GetState() GetErrorDetails() IsReady() IsDone() IsBusy() IsAborted() HasError() IsNewInvokeCall() IsInvokeCalledInThisPlcCycle() WasInvokeCalledInPreviousPlcCycle() IsNewExecuteCall() IsExecuteCalledInThisPlcCycle() WasExecuteCalledInPreviousPlcCycle() UpdateState() Invoke() Restore() DoneWhen(BOOL) Execute() LogTask(STRING[80],eLogLevel,IAxoObject) ThrowWhen(BOOL) ThrowWhen(BOOL,STRING[254]) SetIsDisabled(BOOL) GetIsDisabled() Abort() Resume() OnAbort() OnResume() OnDone() OnError() OnRestore() OnStart() WhileError() GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Properties SteppingMode SteppingMode : AXOpen.Core.eAxoSteppingMode Property Value SequenceMode SequenceMode : AXOpen.Core.eAxoSequenceMode Property Value CurrentOrder CurrentOrder : ULINT Property Value StepForwardCommand StepForwardCommand : AXOpen.Core.AxoTask Property Value StepIn StepIn : AXOpen.Core.AxoTask Property Value StepBackwardCommand StepBackwardCommand : AXOpen.Core.AxoTask Property Value BeforeStep BeforeStep : AXOpen.Core.AxoStep Property Value CurrentStep CurrentStep : AXOpen.Core.AxoStep Property Value AfterStep AfterStep : AXOpen.Core.AxoStep Property Value _configurationFlowOrder _configurationFlowOrder : ULINT Property Value _numberOfConfiguredSteps _numberOfConfiguredSteps : ULINT Property Value _coordinatorState _coordinatorState : AXOpen.Core.AxoCoordinatorStates Property Value _step _step : AXOpen.Core.IAxoStep Property Value _openCycleCounter _openCycleCounter : ULINT Property Value _closeCycleCounter _closeCycleCounter : ULINT Property Value _refBeforeStep _refBeforeStep : REF_TO AXOpen.Core.AxoStep Property Value _refCurrentStep _refCurrentStep : REF_TO AXOpen.Core.AxoStep Property Value _refAfterStep _refAfterStep : REF_TO AXOpen.Core.AxoStep Property Value Methods Open Opens sequencers operations.This method must be called prior to any other calls of this instance ofsequencer. Public BOOL Open() Returns BOOL Execute Internal BOOL Execute(in plc.AXOpen.Core.IAxoStep step,in plc.BOOL Enable) Parameters step IAxoStep Enable BOOL Returns BOOL MoveNext Moves the execution to the next step. Public VOID MoveNext() Returns RequestStep Terminates the currently executed step and initiates the RequestedStep to be executed Public VOID RequestStep(in plc.AXOpen.Core.IAxoStep RequestedStep) Parameters RequestedStep IAxoStep Returns CompleteSequence Completes (finishes) the execution of this sequencer and set the coordination state to Idle.If the SequenceMode of the sequencer is set to RunOnce, terminates also execution of the sequencer itself. Public VOID CompleteSequence() Returns OnBeforeSequenceStart Executes once when the sequence starts. Protected VOID OnBeforeSequenceStart() Returns OnCompleteSequence Executes once when the sequence is completed. Protected VOID OnCompleteSequence() Returns GetCoordinatorState Gets the state of the coordinator Public AXOpen.Core.AxoCoordinatorStates GetCoordinatorState() Returns AxoCoordinatorStates DetermineOrder Protected ULINT DetermineOrder(in plc.AXOpen.Core.IAxoStep step) Parameters step IAxoStep Returns ULINT GetNumberOfConfiguredSteps Gets the number of the configured steps in the sequence. Public ULINT GetNumberOfConfiguredSteps() Returns ULINT InvalidContext Protected BOOL InvalidContext() Returns BOOL InvalidContext Protected BOOL InvalidContext(in plc.AXOpen.Core.IAxoStep step) Parameters step IAxoStep Returns BOOL DisableAllSteppingComands Protected VOID DisableAllSteppingComands() Returns AbortCurrentStep Protected VOID AbortCurrentStep() Returns OnRestore Protected VOID OnRestore() Returns AndThen Public VOID AndThen(in plc.AXOpen.Core.IAxoTask tsk) Parameters tsk IAxoTask Returns Close Protected VOID Close() Returns"
  },
  "apictrl/plc.AXOpen.Core.AxoSequencerContainer.html": {
    "href": "apictrl/plc.AXOpen.Core.AxoSequencerContainer.html",
    "title": "Class AxoSequencerContainer | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoSequencerContainer Namespace plc.AXOpen.Core CLASS AxoSequencerContainer Inheritance AxoSequencer AxoTask AxoObject AxoSequencerContainer Implements IAxoSequencer IAxoTask IAxoTaskState Inherited Members SteppingMode SequenceMode CurrentOrder StepForwardCommand StepIn StepBackwardCommand BeforeStep CurrentStep AfterStep Status IsDisabled RemoteInvoke RemoteRestore RemoteAbort RemoteResume StartSignature Duration StartTimeStamp ErrorDetails Identity Open() Execute(IAxoStep,BOOL) MoveNext() RequestStep(IAxoStep) CompleteSequence() OnBeforeSequenceStart() OnCompleteSequence() GetCoordinatorState() DetermineOrder(IAxoStep) GetNumberOfConfiguredSteps() InvalidContext() InvalidContext(IAxoStep) DisableAllSteppingComands() AbortCurrentStep() OnRestore() AndThen(IAxoTask) Close() GetState() GetErrorDetails() IsReady() IsDone() IsBusy() IsAborted() HasError() IsNewInvokeCall() IsInvokeCalledInThisPlcCycle() WasInvokeCalledInPreviousPlcCycle() IsNewExecuteCall() IsExecuteCalledInThisPlcCycle() WasExecuteCalledInPreviousPlcCycle() UpdateState() Invoke() Restore() DoneWhen(BOOL) Execute() LogTask(STRING[80],eLogLevel,IAxoObject) ThrowWhen(BOOL) ThrowWhen(BOOL,STRING[254]) SetIsDisabled(BOOL) GetIsDisabled() Abort() Resume() OnAbort() OnResume() OnDone() OnError() OnRestore() OnStart() WhileError() GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Methods Run Public VOID Run(in plc.AXOpen.Core.IAxoContext context) Parameters context IAxoContext Returns Run Public VOID Run(in plc.AXOpen.Core.IAxoObject object) Parameters object IAxoObject Returns Main Protected VOID Main() Returns"
  },
  "apictrl/plc.AXOpen.Core.AxoStep.html": {
    "href": "apictrl/plc.AXOpen.Core.AxoStep.html",
    "title": "Class AxoStep | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoStep Namespace plc.AXOpen.Core CLASS AxoStep Inheritance AxoTask AxoObject AxoStep Implements IAxoStep IAxoTaskState Inherited Members Status IsDisabled RemoteInvoke RemoteRestore RemoteAbort RemoteResume StartSignature Duration StartTimeStamp ErrorDetails Identity GetState() GetErrorDetails() IsReady() IsDone() IsBusy() IsAborted() HasError() IsNewInvokeCall() IsInvokeCalledInThisPlcCycle() WasInvokeCalledInPreviousPlcCycle() IsNewExecuteCall() IsExecuteCalledInThisPlcCycle() WasExecuteCalledInPreviousPlcCycle() UpdateState() Invoke() Restore() DoneWhen(BOOL) Execute() LogTask(STRING[80],eLogLevel,IAxoObject) ThrowWhen(BOOL) ThrowWhen(BOOL,STRING[254]) SetIsDisabled(BOOL) GetIsDisabled() Abort() Resume() OnAbort() OnResume() OnDone() OnError() OnRestore() OnStart() WhileError() GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Properties Order Order : ULINT Property Value StepDescription StepDescription : STRING[120] Property Value IsActive IsActive : BOOL Property Value IsEnabled IsEnabled : BOOL Property Value _openCycleCount _openCycleCount : ULINT Property Value _isCalledJustOnceInThisPlcCycle _isCalledJustOnceInThisPlcCycle : BOOL Property Value _multipleStepCallInThisPlcCycle _multipleStepCallInThisPlcCycle : BOOL Property Value _noStepCallInPreviousPlcCycle _noStepCallInPreviousPlcCycle : BOOL Property Value Methods GetStepOrder Returns the order of the execution. Public ULINT GetStepOrder() Returns ULINT SetStepOrder Sets the order of the execution, if conditions are met. Public VOID SetStepOrder(in plc.AXOpen.Core.IAxoCoordinator coord,in plc.ULINT StepOrder) Parameters coord IAxoCoordinator StepOrder ULINT Returns IsCalledJustOnceInThisPlcCycle Returns TRUE if the execution of the step is called only once in this PLC cycle. Public BOOL IsCalledJustOnceInThisPlcCycle() Returns BOOL Execute Returns TRUE if instance of THIS step is curently executing Public BOOL Execute(in plc.AXOpen.Core.IAxoCoordinator coord) Parameters coord IAxoCoordinator Returns BOOL Execute Returns TRUE if instance of THIS step is curently executing and the step is enabled Public BOOL Execute(in plc.AXOpen.Core.IAxoCoordinator coord,in plc.BOOL Enable) Parameters coord IAxoCoordinator Enable BOOL Returns BOOL Execute Returns TRUE if instance of THIS step is curently executing and the step is enabledand sets the description of the step Public BOOL Execute(in plc.AXOpen.Core.IAxoCoordinator coord,in plc.BOOL Enable,in plc.STRING[120] Description) Parameters coord IAxoCoordinator Enable BOOL Description STRING[120] Returns BOOL Execute Returns TRUE if instance of THIS step is curently executingand sets the description of the step Public BOOL Execute(in plc.AXOpen.Core.IAxoCoordinator coord,in plc.STRING[120] Description) Parameters coord IAxoCoordinator Description STRING[120] Returns BOOL CountCallsOfTheExecuteMethod Protected VOID CountCallsOfTheExecuteMethod() Returns ExecuteInternal Protected BOOL ExecuteInternal(in plc.AXOpen.Core.IAxoCoordinator coord,in plc.BOOL Enable) Parameters coord IAxoCoordinator Enable BOOL Returns BOOL SetIsActive Sets the value of the IsActive variable Public VOID SetIsActive(in plc.BOOL Active) Parameters Active BOOL Returns GetIsActive Returns the value of the IsActive variable Public BOOL GetIsActive() Returns BOOL SetIsEnabled Sets the value of the IsEnabled variable Public VOID SetIsEnabled(in plc.BOOL Enabled) Parameters Enabled BOOL Returns GetIsEnabled Returns the value of the IsEnabled variable Public BOOL GetIsEnabled() Returns BOOL"
  },
  "apictrl/plc.AXOpen.Core.AxoTask.html": {
    "href": "apictrl/plc.AXOpen.Core.AxoTask.html",
    "title": "Class AxoTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoTask Namespace plc.AXOpen.Core CLASS AxoTask Inheritance AxoObject AxoTask Implements IAxoTask IAxoTaskState Inherited Members Identity GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Properties Status Gets the state of this task. Status : AXOpen.Core.eAxoTaskState Property Value IsDisabled Gets or sets whether this task is disabled for execution. IsDisabled : BOOL Property Value RemoteInvoke Remote requests for invoke of this task.When 'TRUE' this task will be invoked. RemoteInvoke : BOOL Property Value RemoteRestore Remote requests for restore of this task.When 'TRUE' this task will be restored. RemoteRestore : BOOL Property Value RemoteAbort Remote requests for abort of this task.When 'TRUE' this task will be aborted. RemoteAbort : BOOL Property Value RemoteResume Remote requests for resume of this task.When 'TRUE' this task will be resumed. RemoteResume : BOOL Property Value StartSignature Contains contex cycle number when this task started. StartSignature : ULINT Property Value Duration Gets elapsed time of last task execution. Duration : LTIME Property Value StartTimeStamp Gets date and time when the task started. StartTimeStamp : LDATE_AND_TIME Property Value ErrorDetails Contains details about the error. ErrorDetails : STRING[254] Property Value _openCycleCountInvoke _openCycleCountInvoke : ULINT Property Value _openCycleCountExecute _openCycleCountExecute : ULINT Property Value _taskTimer _taskTimer : UNDEFINED Property Value _CyclicExecuteIsNotCalled Enable error message when task is not calling cyclically . _CyclicExecuteIsNotCalled : AXOpen.Messaging.Static.AxoMessenger Property Value Methods GetState Gets the actual state of this task. Public AXOpen.Core.eAxoTaskState GetState() Returns eAxoTaskState GetErrorDetails Public STRING[254] GetErrorDetails() Returns STRING[254] IsReady Gets true when the task is ready. Public BOOL IsReady() Returns BOOL IsDone Gets true when the task is done. Public BOOL IsDone() Returns BOOL IsBusy Gets true when the task is busy/executing. Public BOOL IsBusy() Returns BOOL IsAborted Gets true when the task is aborted. Public BOOL IsAborted() Returns BOOL HasError Gets true when the task has error. Public BOOL HasError() Returns BOOL IsNewInvokeCall Private BOOL IsNewInvokeCall() Returns BOOL IsInvokeCalledInThisPlcCycle Private BOOL IsInvokeCalledInThisPlcCycle() Returns BOOL WasInvokeCalledInPreviousPlcCycle Private BOOL WasInvokeCalledInPreviousPlcCycle() Returns BOOL IsNewExecuteCall Private BOOL IsNewExecuteCall() Returns BOOL IsExecuteCalledInThisPlcCycle Private BOOL IsExecuteCalledInThisPlcCycle() Returns BOOL WasExecuteCalledInPreviousPlcCycle Private BOOL WasExecuteCalledInPreviousPlcCycle() Returns BOOL UpdateState Private VOID UpdateState() Returns Invoke Invokes this task. Public AXOpen.Core.IAxoTaskState Invoke() Returns IAxoTaskState Restore Restores this task. Public AXOpen.Core.IAxoTaskState Restore() Returns IAxoTaskState DoneWhen Makes this task to transition in Done statewhen Condition argument is TRUE. Public VOID DoneWhen(in plc.BOOL Condition) Parameters Condition BOOL Returns Execute Returns TRUE if the task is Busy, otherwise false.This method needs to be called cyclically. Public BOOL Execute() Returns BOOL LogTask Private VOID LogTask(in plc.STRING[80] _message,in plc.AXOpen.Logging.eLogLevel _level,in plc.AXOpen.Core.IAxoObject _sender) Parameters _message STRING[80] _level eLogLevel _sender IAxoObject Returns ThrowWhen Makes this task enter into Error state, when HasErrorState argument is TRUEtask in error state stops its execution. Public VOID ThrowWhen(in plc.BOOL HasErrorState) Parameters HasErrorState BOOL Returns ThrowWhen Makes this task enter into Error state, when HasErrorState argument is TRUEtask in error state stops its execution. Public VOID ThrowWhen(in plc.BOOL HasErrorState,in plc.STRING[254] ErrorDescription) Parameters HasErrorState BOOL ErrorDescription STRING[254] Returns SetIsDisabled Sets the value of the IsDisabled variable Public VOID SetIsDisabled(in plc.BOOL Disabled) Parameters Disabled BOOL Returns GetIsDisabled Returns the value of the IsDisabled variable Public BOOL GetIsDisabled() Returns BOOL Abort Aborts the execution of the task if running and sets its state to aborted. Public VOID Abort() Returns Resume Resume the execution of the task if aborted and sets its state to busy. Public VOID Resume() Returns OnAbort Executes once when the task is aborted. Protected VOID OnAbort() Returns OnResume Executes once when the task is resumed. Protected VOID OnResume() Returns OnDone Executes once when the task reaches the Done state. Protected VOID OnDone() Returns OnError Executes once when the task reaches the Error state. Protected VOID OnError() Returns OnRestore Executes once when the task is restored. Protected VOID OnRestore() Returns OnStart Executes once when the task starts (at the moment of transition from the Kicking state into the Busy state). Protected VOID OnStart() Returns WhileError Executes repeatedly while the task is in Error state (and Execute() method is called). Protected VOID WhileError() Returns"
  },
  "apictrl/plc.AXOpen.Core.AxoTextList.html": {
    "href": "apictrl/plc.AXOpen.Core.AxoTextList.html",
    "title": "Class AxoTextList | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoTextList Namespace plc.AXOpen.Core CLASS AxoTextList AxoTextList Properties Id Id : UINT Property Value"
  },
  "apictrl/plc.AXOpen.Core.AxoToggleTask.html": {
    "href": "apictrl/plc.AXOpen.Core.AxoToggleTask.html",
    "title": "Class AxoToggleTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoToggleTask Namespace plc.AXOpen.Core Provides basic toggling between two states. The states are triggered by calling the '''Toggle()''' method.To get the actual state of the toggle task, '''IsSwitchedOn()''', '''IsSwitchedOff()''' AND '''GetState()''' methods are available. CLASS AxoToggleTask Inheritance AxoObject AxoToggleTask Implements IAxoToggleTask Inherited Members Identity GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Properties State State : BOOL Property Value RemoteToggle Remote request to toggle the state of this task. RemoteToggle : BOOL Property Value IsDisabled Gets or sets whether this task is disabled for any manipulations. IsDisabled : BOOL Property Value _openCycleCount _openCycleCount : ULINT Property Value Methods GetState Gets the actual state of this task. Public BOOL GetState() Returns BOOL IsRunCalledInThisPlcCycle Private BOOL IsRunCalledInThisPlcCycle() Returns BOOL WasRunCalledInPreviousPlcCycle Private BOOL WasRunCalledInPreviousPlcCycle() Returns BOOL Run This method needs to be called cyclically. Public BOOL Run() Returns BOOL SetIsDisabled Sets the value of the IsDisabled variable Public VOID SetIsDisabled(in plc.BOOL Disabled) Parameters Disabled BOOL Returns GetIsDisabled Returns the value of the IsDisabled variable Public BOOL GetIsDisabled() Returns BOOL IsSwitchedOn Returns TRUE if task is switched on Public BOOL IsSwitchedOn() Returns BOOL IsSwitchedOff Returns TRUE if task is switched off Public BOOL IsSwitchedOff() Returns BOOL Toggle Use to toggle the state of the '''AxoToggleTask'''. Public BOOL Toggle() Returns BOOL SwitchOff Use to set the state of the '''AxoToggleTask''' to the value '''FALSE'''. Public BOOL SwitchOff() Returns BOOL SwitchOn Public BOOL SwitchOn() Returns BOOL OnSwitchedOn Executes ones when toggle task changes its state from '''FALSE''' to '''TRUE'''. Protected VOID OnSwitchedOn() Returns OnSwitchedOff Executes ones when toggle task changes its state from '''TRUE''' to '''FALSE'''. Protected VOID OnSwitchedOff() Returns OnStateChanged Executes ones when toggle task changes its state. Protected VOID OnStateChanged() Returns SwitchedOn Executes while the task is in On state. Protected VOID SwitchedOn() Returns SwitchedOff Executes while the task is in Off state. Protected VOID SwitchedOff() Returns"
  },
  "apictrl/plc.AXOpen.Core.IAxoAlertDialogFormat.html": {
    "href": "apictrl/plc.AXOpen.Core.IAxoAlertDialogFormat.html",
    "title": "Interface IAxoAlertDialogFormat | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoAlertDialogFormat Namespace plc.AXOpen.Core INTERFACE IAxoAlertDialogFormat Methods WithTitle Public AXOpen.Core.IAxoAlertDialogFormat WithTitle(in plc.STRING inTitle) Parameters inTitle STRING Returns IAxoAlertDialogFormat WithMessage Public AXOpen.Core.IAxoAlertDialogFormat WithMessage(in plc.STRING inMessage) Parameters inMessage STRING Returns IAxoAlertDialogFormat WithTimeToBurn Public AXOpen.Core.IAxoAlertDialogFormat WithTimeToBurn(in plc.UINT inSeconds) Parameters inSeconds UINT Returns IAxoAlertDialogFormat WithType Public AXOpen.Core.IAxoAlertDialogFormat WithType(in plc.AXOpen.Core.eDialogType inDialogType) Parameters inDialogType eDialogType Returns IAxoAlertDialogFormat IsShown Public BOOL IsShown() Returns BOOL"
  },
  "apictrl/plc.AXOpen.Core.IAxoComponent.html": {
    "href": "apictrl/plc.AXOpen.Core.IAxoComponent.html",
    "title": "Interface IAxoComponent | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoComponent Namespace plc.AXOpen.Core INTERFACE IAxoComponent"
  },
  "apictrl/plc.AXOpen.Core.IAxoContext.html": {
    "href": "apictrl/plc.AXOpen.Core.IAxoContext.html",
    "title": "Interface IAxoContext | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoContext Namespace plc.AXOpen.Core INTERFACE IAxoContext Methods CreateIdentity Public ULINT CreateIdentity() Returns ULINT OpenCycleCount Public ULINT OpenCycleCount() Returns ULINT GetRtc Public AXOpen.Rtc.IAxoRtc GetRtc() Returns IAxoRtc InjectRtc Public VOID InjectRtc(in plc.AXOpen.Rtc.IAxoRtc Rtc) Parameters Rtc IAxoRtc Returns GetLogger Public AXOpen.Logging.IAxoLogger GetLogger() Returns IAxoLogger InjectLogger Public VOID InjectLogger(in plc.AXOpen.Logging.IAxoLogger _logger) Parameters _logger IAxoLogger Returns"
  },
  "apictrl/plc.AXOpen.Core.IAxoCoordinator.html": {
    "href": "apictrl/plc.AXOpen.Core.IAxoCoordinator.html",
    "title": "Interface IAxoCoordinator | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoCoordinator Namespace plc.AXOpen.Core INTERFACE IAxoCoordinator Methods GetCoordinatorState Public AXOpen.Core.AxoCoordinatorStates GetCoordinatorState() Returns AxoCoordinatorStates MoveNext Public VOID MoveNext() Returns RequestStep Public VOID RequestStep(in plc.AXOpen.Core.IAxoStep RequestedStep) Parameters RequestedStep IAxoStep Returns"
  },
  "apictrl/plc.AXOpen.Core.IAxoDialogAnswer.html": {
    "href": "apictrl/plc.AXOpen.Core.IAxoDialogAnswer.html",
    "title": "Interface IAxoDialogAnswer | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoDialogAnswer Namespace plc.AXOpen.Core INTERFACE IAxoDialogAnswer Methods Answer Public AXOpen.Core.eDialogAnswer Answer() Returns eDialogAnswer"
  },
  "apictrl/plc.AXOpen.Core.IAxoDialogFormat.html": {
    "href": "apictrl/plc.AXOpen.Core.IAxoDialogFormat.html",
    "title": "Interface IAxoDialogFormat | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoDialogFormat Namespace plc.AXOpen.Core INTERFACE IAxoDialogFormat Methods WithCaption Public AXOpen.Core.IAxoDialogAnswer WithCaption(in plc.STRING inCaption) Parameters inCaption STRING Returns IAxoDialogAnswer WithOk Public AXOpen.Core.IAxoDialogAnswer WithOk() Returns IAxoDialogAnswer WithText Public AXOpen.Core.IAxoDialogAnswer WithText(in plc.STRING inText) Parameters inText STRING Returns IAxoDialogAnswer WithType Public AXOpen.Core.IAxoDialogAnswer WithType(in plc.AXOpen.Core.eDialogType inDialogType) Parameters inDialogType eDialogType Returns IAxoDialogAnswer WithYesNo Public AXOpen.Core.IAxoDialogAnswer WithYesNo() Returns IAxoDialogAnswer WithYesNoCancel Public AXOpen.Core.IAxoDialogAnswer WithYesNoCancel() Returns IAxoDialogAnswer"
  },
  "apictrl/plc.AXOpen.Core.IAxoManuallyControllable.html": {
    "href": "apictrl/plc.AXOpen.Core.IAxoManuallyControllable.html",
    "title": "Interface IAxoManuallyControllable | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoManuallyControllable Namespace plc.AXOpen.Core INTERFACE IAxoManuallyControllable Methods ActivateManualControl Public VOID ActivateManualControl() Returns IsManuallyControllable Public BOOL IsManuallyControllable() Returns BOOL"
  },
  "apictrl/plc.AXOpen.Core.IAxoMomentaryTask.html": {
    "href": "apictrl/plc.AXOpen.Core.IAxoMomentaryTask.html",
    "title": "Interface IAxoMomentaryTask | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoMomentaryTask Namespace plc.AXOpen.Core INTERFACE IAxoMomentaryTask Methods IsSwitchedOn Returns TRUE if task is switched on Public BOOL IsSwitchedOn() Returns BOOL IsSwitchedOff Returns TRUE if task is switched off Public BOOL IsSwitchedOff() Returns BOOL"
  },
  "apictrl/plc.AXOpen.Core.IAxoObject.html": {
    "href": "apictrl/plc.AXOpen.Core.IAxoObject.html",
    "title": "Interface IAxoObject | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoObject Namespace plc.AXOpen.Core INTERFACE IAxoObject Methods GetIdentity Public ULINT GetIdentity() Returns ULINT GetContext Public AXOpen.Core.IAxoContext GetContext() Returns IAxoContext"
  },
  "apictrl/plc.AXOpen.Core.IAxoSequencer.html": {
    "href": "apictrl/plc.AXOpen.Core.IAxoSequencer.html",
    "title": "Interface IAxoSequencer | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoSequencer Namespace plc.AXOpen.Core INTERFACE IAxoSequencer"
  },
  "apictrl/plc.AXOpen.Core.IAxoStep.html": {
    "href": "apictrl/plc.AXOpen.Core.IAxoStep.html",
    "title": "Interface IAxoStep | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoStep Namespace plc.AXOpen.Core INTERFACE IAxoStep Methods GetStepOrder Public ULINT GetStepOrder() Returns ULINT SetStepOrder Public VOID SetStepOrder(in plc.AXOpen.Core.IAxoCoordinator coord,in plc.ULINT StepOrder) Parameters coord IAxoCoordinator StepOrder ULINT Returns IsCalledJustOnceInThisPlcCycle Public BOOL IsCalledJustOnceInThisPlcCycle() Returns BOOL SetIsActive Public VOID SetIsActive(in plc.BOOL Active) Parameters Active BOOL Returns GetIsActive Public BOOL GetIsActive() Returns BOOL SetIsEnabled Public VOID SetIsEnabled(in plc.BOOL Enabled) Parameters Enabled BOOL Returns GetIsEnabled Public BOOL GetIsEnabled() Returns BOOL"
  },
  "apictrl/plc.AXOpen.Core.IAxoTask.html": {
    "href": "apictrl/plc.AXOpen.Core.IAxoTask.html",
    "title": "Interface IAxoTask | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoTask Namespace plc.AXOpen.Core INTERFACE IAxoTask Methods Execute Public BOOL Execute() Returns BOOL Invoke Public AXOpen.Core.IAxoTaskState Invoke() Returns IAxoTaskState Restore Public AXOpen.Core.IAxoTaskState Restore() Returns IAxoTaskState Abort Public VOID Abort() Returns Resume Public VOID Resume() Returns DoneWhen Public VOID DoneWhen(in plc.BOOL Condition) Parameters Condition BOOL Returns ThrowWhen Public VOID ThrowWhen(in plc.BOOL HasErrorState) Parameters HasErrorState BOOL Returns IsReady Public BOOL IsReady() Returns BOOL IsDone Public BOOL IsDone() Returns BOOL IsBusy Public BOOL IsBusy() Returns BOOL HasError Public BOOL HasError() Returns BOOL"
  },
  "apictrl/plc.AXOpen.Core.IAxoTaskInt.html": {
    "href": "apictrl/plc.AXOpen.Core.IAxoTaskInt.html",
    "title": "Interface IAxoTaskInt | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoTaskInt Namespace plc.AXOpen.Core INTERFACE IAxoTaskInt Methods SetIsDisabled Public VOID SetIsDisabled(in plc.BOOL Disabled) Parameters Disabled BOOL Returns GetIsDisabled Public BOOL GetIsDisabled() Returns BOOL"
  },
  "apictrl/plc.AXOpen.Core.IAxoTaskState.html": {
    "href": "apictrl/plc.AXOpen.Core.IAxoTaskState.html",
    "title": "Interface IAxoTaskState | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoTaskState Namespace plc.AXOpen.Core INTERFACE IAxoTaskState Methods IsDone Public BOOL IsDone() Returns BOOL IsBusy Public BOOL IsBusy() Returns BOOL IsAborted Public BOOL IsAborted() Returns BOOL HasError Public BOOL HasError() Returns BOOL GetErrorDetails Public STRING[254] GetErrorDetails() Returns STRING[254]"
  },
  "apictrl/plc.AXOpen.Core.IAxoToggleTask.html": {
    "href": "apictrl/plc.AXOpen.Core.IAxoToggleTask.html",
    "title": "Interface IAxoToggleTask | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoToggleTask Namespace plc.AXOpen.Core INTERFACE IAxoToggleTask Methods Toggle Use to toggle the state of the '''AxoToggleTask'''. Public BOOL Toggle() Returns BOOL SwitchOff Use to set the state of the '''AxoToggleTask''' to the value '''FALSE'''. Public BOOL SwitchOff() Returns BOOL SwitchOn Use to set the state of the '''AxoToggleTask''' to the value '''TRUE'''. Public BOOL SwitchOn() Returns BOOL IsSwitchedOn Returns TRUE if task is switched on Public BOOL IsSwitchedOn() Returns BOOL IsSwitchedOff Returns TRUE if task is switched off Public BOOL IsSwitchedOff() Returns BOOL"
  },
  "apictrl/plc.AXOpen.Core.IsNullContext(IAxoContext).html": {
    "href": "apictrl/plc.AXOpen.Core.IsNullContext(IAxoContext).html",
    "title": "Delegate IsNullContext | System.Dynamic.ExpandoObject",
    "keywords": "Delegate IsNullContext Namespace plc.AXOpen.Core Public BOOL IsNullContext(in plc.AXOpen.Core.IAxoContext Context) Parameters Context IAxoContext Returns BOOL"
  },
  "apictrl/plc.AXOpen.Core._NULL_CONTEXT.html": {
    "href": "apictrl/plc.AXOpen.Core._NULL_CONTEXT.html",
    "title": "Class _NULL_CONTEXT | System.Dynamic.ExpandoObject",
    "keywords": "Class _NULL_CONTEXT Namespace plc.AXOpen.Core Provides an empty context for uninitialized objects. CLASS _NULL_CONTEXT _NULL_CONTEXT Implements IAxoContext Properties NULL_RTC NULL_RTC : AXOpen.Core._NULL_RTC Property Value NULL_LOGGER NULL_LOGGER : AXOpen.Core._NULL_LOGGER Property Value Methods CreateIdentity Public ULINT CreateIdentity() Returns ULINT OpenCycleCount Public ULINT OpenCycleCount() Returns ULINT GetRtc Public AXOpen.Rtc.IAxoRtc GetRtc() Returns IAxoRtc InjectRtc Public VOID InjectRtc(in plc.AXOpen.Rtc.IAxoRtc Rtc) Parameters Rtc IAxoRtc Returns GetLogger Public AXOpen.Logging.IAxoLogger GetLogger() Returns IAxoLogger InjectLogger Public VOID InjectLogger(in plc.AXOpen.Logging.IAxoLogger _logger) Parameters _logger IAxoLogger Returns"
  },
  "apictrl/plc.AXOpen.Core._NULL_LOGGER.html": {
    "href": "apictrl/plc.AXOpen.Core._NULL_LOGGER.html",
    "title": "Class _NULL_LOGGER | System.Dynamic.ExpandoObject",
    "keywords": "Class _NULL_LOGGER Namespace plc.AXOpen.Core Provides an empty logger object for uninitialized context logger. CLASS _NULL_LOGGER _NULL_LOGGER Implements IAxoLogger Methods Log Public VOID Log(in plc.STRING[80] _message,in plc.AXOpen.Logging.eLogLevel _level,in plc.AXOpen.Core.IAxoObject _sender) Parameters _message STRING[80] _level eLogLevel _sender IAxoObject Returns Log Public VOID Log(in plc.STRING[80] _message,in plc.AXOpen.Logging.eLogLevel _level) Parameters _message STRING[80] _level eLogLevel Returns SetMinimumLevel Public AXOpen.Logging.IAxoLoggerConfig SetMinimumLevel(in plc.AXOpen.Logging.eLogLevel _level) Parameters _level eLogLevel Returns IAxoLoggerConfig"
  },
  "apictrl/plc.AXOpen.Core._NULL_OBJECT.html": {
    "href": "apictrl/plc.AXOpen.Core._NULL_OBJECT.html",
    "title": "Class _NULL_OBJECT | System.Dynamic.ExpandoObject",
    "keywords": "Class _NULL_OBJECT Namespace plc.AXOpen.Core Provides an empty object for uninitialized objects. CLASS _NULL_OBJECT _NULL_OBJECT Implements IAxoObject Properties NULL_CONTEXT NULL_CONTEXT : AXOpen.Core._NULL_CONTEXT Property Value Methods GetIdentity Public ULINT GetIdentity() Returns ULINT GetContext Public AXOpen.Core.IAxoContext GetContext() Returns IAxoContext"
  },
  "apictrl/plc.AXOpen.Core._NULL_RTC.html": {
    "href": "apictrl/plc.AXOpen.Core._NULL_RTC.html",
    "title": "Class _NULL_RTC | System.Dynamic.ExpandoObject",
    "keywords": "Class _NULL_RTC Namespace plc.AXOpen.Core Provides an empty RTC object for uninitialized RTC. CLASS _NULL_RTC _NULL_RTC Implements IAxoRtc Properties _null_time _null_time : LDATE_AND_TIME Property Value Methods NowUTC Public LDATE_AND_TIME NowUTC() Returns LDATE_AND_TIME"
  },
  "apictrl/plc.AXOpen.Core.eAxoSequenceMode.html": {
    "href": "apictrl/plc.AXOpen.Core.eAxoSequenceMode.html",
    "title": "Enum eAxoSequenceMode | System.Dynamic.ExpandoObject",
    "keywords": "Enum eAxoSequenceMode Namespace plc.AXOpen.Core eAxoSequenceMode : INT Fields"
  },
  "apictrl/plc.AXOpen.Core.eAxoSteppingMode.html": {
    "href": "apictrl/plc.AXOpen.Core.eAxoSteppingMode.html",
    "title": "Enum eAxoSteppingMode | System.Dynamic.ExpandoObject",
    "keywords": "Enum eAxoSteppingMode Namespace plc.AXOpen.Core eAxoSteppingMode : INT Fields"
  },
  "apictrl/plc.AXOpen.Core.eAxoTaskState.html": {
    "href": "apictrl/plc.AXOpen.Core.eAxoTaskState.html",
    "title": "Enum eAxoTaskState | System.Dynamic.ExpandoObject",
    "keywords": "Enum eAxoTaskState Namespace plc.AXOpen.Core eAxoTaskState : INT Fields"
  },
  "apictrl/plc.AXOpen.Core.eDialogAnswer.html": {
    "href": "apictrl/plc.AXOpen.Core.eDialogAnswer.html",
    "title": "Enum eDialogAnswer | System.Dynamic.ExpandoObject",
    "keywords": "Enum eDialogAnswer Namespace plc.AXOpen.Core eDialogAnswer : INT Fields"
  },
  "apictrl/plc.AXOpen.Core.eDialogType.html": {
    "href": "apictrl/plc.AXOpen.Core.eDialogType.html",
    "title": "Enum eDialogType | System.Dynamic.ExpandoObject",
    "keywords": "Enum eDialogType Namespace plc.AXOpen.Core eDialogType : INT Fields"
  },
  "apictrl/plc.AXOpen.Core.html": {
    "href": "apictrl/plc.AXOpen.Core.html",
    "title": "Namespace plc.AXOpen.Core | System.Dynamic.ExpandoObject",
    "keywords": "Namespace plc.AXOpen.Core Classes _NULL_CONTEXT Provides an empty context for uninitialized objects. _NULL_OBJECT Provides an empty object for uninitialized objects. _NULL_RTC Provides an empty RTC object for uninitialized RTC. _NULL_LOGGER Provides an empty logger object for uninitialized context logger. AxoAlertDialog AxoBoolArray AxoByteArray AxoComponent AxoContext Provides base for contextualized entry of AXOpen application.This class is abstract and must be inherited. AxoDialog AxoDialog class, which represents structure of base dialog. AxoDialogBase AxoMomentaryTask Provides basic momentary on function.To get the actual state of the toggle task, '''IsSwitchedOn()''', '''IsSwitchedOff()''' AND '''GetState()''' methods are available. AxoObject Provides base class for all classes of AXOpen. AxoRemoteTask Provides a mechanism to exectute a logic from the PLC in an .NET environment. > [!IMPORTANT]> The deferred execution in .NET envornment is not hard-real time nor deterministic. AxoTask AxoTextList AxoToggleTask Provides basic toggling between two states. The states are triggered by calling the '''Toggle()''' method.To get the actual state of the toggle task, '''IsSwitchedOn()''', '''IsSwitchedOff()''' AND '''GetState()''' methods are available. AxoSequencer AxoSequencerContainer AxoStep Interfaces IAxoContext IAxoObject IAxoAlertDialogFormat IAxoDialogAnswer IAxoDialogFormat IAxoComponent IAxoManuallyControllable IAxoCoordinator IAxoMomentaryTask IAxoTask IAxoTaskInt IAxoTaskState IAxoToggleTask IAxoSequencer IAxoStep"
  },
  "apictrl/plc.AXOpen.Data.AxoDataCrudTask.html": {
    "href": "apictrl/plc.AXOpen.Data.AxoDataCrudTask.html",
    "title": "Class AxoDataCrudTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataCrudTask Namespace plc.AXOpen.Data Provides remote execution for CRUD operations.> [!NOTE]> This is an extension of AxoTasktask see the documentatio for details about implementation in .NET. CLASS AxoDataCrudTask Inheritance AxoDataExchangeTask AxoRemoteTask AxoTask AxoObject AxoDataCrudTask Implements IAxoEntityExistTaskState IAxoTask Inherited Members DataEntityIdentifier _exist DoneSignature IsInitialized HasRemoteException IsBeingCalledCounter TaskNotInitialized TaskHasRemoteException Status IsDisabled RemoteInvoke RemoteRestore RemoteAbort RemoteResume StartSignature Duration StartTimeStamp ErrorDetails Identity Invoke(STRING[254]) Exist() Execute() GetStartSignature() SetDoneSignature() GetState() GetErrorDetails() IsReady() IsDone() IsBusy() IsAborted() HasError() IsNewInvokeCall() IsInvokeCalledInThisPlcCycle() WasInvokeCalledInPreviousPlcCycle() IsNewExecuteCall() IsExecuteCalledInThisPlcCycle() WasExecuteCalledInPreviousPlcCycle() UpdateState() Invoke() Restore() DoneWhen(BOOL) Execute() LogTask(STRING[80],eLogLevel,IAxoObject) ThrowWhen(BOOL) ThrowWhen(BOOL,STRING[254]) SetIsDisabled(BOOL) GetIsDisabled() Abort() Resume() OnAbort() OnResume() OnDone() OnError() OnRestore() OnStart() WhileError() GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Properties CrudOperation Gets or sets the type of CRUD operation to be perfomed. CrudOperation : AXOpen.Data.eCrudOperation Property Value Methods Invoke Invokes this task. Public AXOpen.Core.IAxoTaskState Invoke(in plc.STRING[254] identifier,in plc.AXOpen.Data.eCrudOperation operation) Parameters identifier STRING[254] Data entity identifier operation eCrudOperation Operation to perfom. Returns IAxoTaskState"
  },
  "apictrl/plc.AXOpen.Data.AxoDataEntity.html": {
    "href": "apictrl/plc.AXOpen.Data.AxoDataEntity.html",
    "title": "Class AxoDataEntity | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataEntity Namespace plc.AXOpen.Data Base class for any exchangable data in AxoDataExchange. CLASS AxoDataEntity AxoDataEntity Implements IAxoDataEntity Properties DataEntityId Gets or sets data entity identifier. DataEntityId : STRING[254] Property Value"
  },
  "apictrl/plc.AXOpen.Data.AxoDataExchange.html": {
    "href": "apictrl/plc.AXOpen.Data.AxoDataExchange.html",
    "title": "Class AxoDataExchange | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataExchange Namespace plc.AXOpen.Data Provides base class for any data exchange with an arbitrary remote repository. CLASS AxoDataExchange Inheritance AxoDataExchangeBase AxoObject AxoDataExchange Implements IAxoDataExchange IAxoObject Inherited Members Identity GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Properties Operation Operation : AXOpen.Data.AxoDataCrudTask Property Value Methods Run Runs intialization and cyclical handling of this AxoDataExchange. Public VOID Run(in plc.AXOpen.Core.IAxoObject parent) Parameters parent IAxoObject Parent of this object Returns Run Runs intialization and cyclical handling of this AxoDataExchange. Public VOID Run(in plc.AXOpen.Core.IAxoContext context) Parameters context IAxoContext Root context of this object Returns Create Creates new entry into the remote repository from data entity of this AxoDataExchange. Public AXOpen.Core.IAxoTaskState Create(in plc.STRING[254] identifier) Parameters identifier STRING[254] Data identifier. Returns IAxoTaskState Read Reads data from remote repository and copies them into data entity of this AxoDataExchange. Public AXOpen.Core.IAxoTaskState Read(in plc.STRING[254] identifier) Parameters identifier STRING[254] Data identifier. Returns IAxoTaskState Update Updates data in remote repository from data entiry of this AxoDataExchange. Public AXOpen.Core.IAxoTaskState Update(in plc.STRING[254] identifier) Parameters identifier STRING[254] Data identifier. Returns IAxoTaskState Delete Deletes data entry with given ID from remote repository. Public AXOpen.Core.IAxoTaskState Delete(in plc.STRING[254] identifier) Parameters identifier STRING[254] Data identifier. Returns IAxoTaskState EntityExist Check if data entry exists with given ID in remote repository. Public AXOpen.Data.IAxoEntityExistTaskState EntityExist(in plc.STRING[254] identifier) Parameters identifier STRING[254] Data identifier. Returns IAxoEntityExistTaskState CreateOrUpdate Creates or Updates data in remote repository from data entiry of this AxoDataExchange. Public AXOpen.Core.IAxoTaskState CreateOrUpdate(in plc.STRING[254] identifier) Parameters identifier STRING[254] Data identifier. Returns IAxoTaskState Restore Restores all tasks associated with this object. Public VOID Restore() Returns"
  },
  "apictrl/plc.AXOpen.Data.AxoDataExchangeBase.html": {
    "href": "apictrl/plc.AXOpen.Data.AxoDataExchangeBase.html",
    "title": "Class AxoDataExchangeBase | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataExchangeBase Namespace plc.AXOpen.Data Represents base class of data exchange.This class is used to provide abstract information about the type that can be used in rcc. CLASS AxoDataExchangeBase Inheritance AxoObject AxoDataExchangeBase Implements IAxoObject Inherited Members Identity GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext)"
  },
  "apictrl/plc.AXOpen.Data.AxoDataExchangeTask.html": {
    "href": "apictrl/plc.AXOpen.Data.AxoDataExchangeTask.html",
    "title": "Class AxoDataExchangeTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataExchangeTask Namespace plc.AXOpen.Data Extends AxoRemoteTask for data operation within AxoData CLASS AxoDataExchangeTask Inheritance AxoRemoteTask AxoTask AxoObject AxoDataExchangeTask Implements IAxoEntityExistTaskState IAxoTask Inherited Members DoneSignature IsInitialized HasRemoteException IsBeingCalledCounter TaskNotInitialized TaskHasRemoteException Status IsDisabled RemoteInvoke RemoteRestore RemoteAbort RemoteResume StartSignature Duration StartTimeStamp ErrorDetails Identity Execute() GetStartSignature() SetDoneSignature() GetState() GetErrorDetails() IsReady() IsDone() IsBusy() IsAborted() HasError() IsNewInvokeCall() IsInvokeCalledInThisPlcCycle() WasInvokeCalledInPreviousPlcCycle() IsNewExecuteCall() IsExecuteCalledInThisPlcCycle() WasExecuteCalledInPreviousPlcCycle() UpdateState() Invoke() Restore() DoneWhen(BOOL) Execute() LogTask(STRING[80],eLogLevel,IAxoObject) ThrowWhen(BOOL) ThrowWhen(BOOL,STRING[254]) SetIsDisabled(BOOL) GetIsDisabled() Abort() Resume() OnAbort() OnResume() OnDone() OnError() OnRestore() OnStart() WhileError() GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Properties DataEntityIdentifier DataEntityIdentifier : STRING[254] Property Value _exist _exist : BOOL Property Value Methods Invoke Public AXOpen.Core.IAxoTaskState Invoke(in plc.STRING[254] identifier) Parameters identifier STRING[254] Returns IAxoTaskState Exist Public BOOL Exist() Returns BOOL"
  },
  "apictrl/plc.AXOpen.Data.AxoDataFragmentExchange.html": {
    "href": "apictrl/plc.AXOpen.Data.AxoDataFragmentExchange.html",
    "title": "Class AxoDataFragmentExchange | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataFragmentExchange Namespace plc.AXOpen.Data Provides base class for any composite/fragmetes data exchange combining one or more AxoDataExchange object. CLASS AxoDataFragmentExchange Inheritance AxoDataExchangeBase AxoObject AxoDataFragmentExchange Implements IAxoDataExchange IAxoObject Inherited Members Identity GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Properties Operation Operation : AXOpen.Data.AxoDataCrudTask Property Value Methods Create Creates new entry into each associated remote repository from respective data entity. Public AXOpen.Core.IAxoTaskState Create(in plc.STRING[254] Identifier) Parameters Identifier STRING[254] Returns IAxoTaskState Read Reads data from each associated remote repository and copies it into respective data entities. Public AXOpen.Core.IAxoTaskState Read(in plc.STRING[254] Identifier) Parameters Identifier STRING[254] Returns IAxoTaskState Update Updates data in each associated remote repository from respective data entities. Public AXOpen.Core.IAxoTaskState Update(in plc.STRING[254] Identifier) Parameters Identifier STRING[254] Returns IAxoTaskState Delete Deletes data entry from each associated remote repository with given ID. Public AXOpen.Core.IAxoTaskState Delete(in plc.STRING[254] Identifier) Parameters Identifier STRING[254] Returns IAxoTaskState EntityExist Check if data entry exists in each associated remote repository with given ID. Public AXOpen.Data.IAxoEntityExistTaskState EntityExist(in plc.STRING[254] Identifier) Parameters Identifier STRING[254] Returns IAxoEntityExistTaskState CreateOrUpdate Creates or Updates data entry from each associated remote repository with given ID. Public AXOpen.Core.IAxoTaskState CreateOrUpdate(in plc.STRING[254] Identifier) Parameters Identifier STRING[254] Returns IAxoTaskState Restore Public VOID Restore() Returns Run Runs intialization and cyclical handling of this AxoDataExchange. Public VOID Run(in plc.AXOpen.Core.IAxoContext context) Parameters context IAxoContext Root context of this object Returns Run Runs intialization and cyclical handling of this AxoDataExchange. Public VOID Run(in plc.AXOpen.Core.IAxoObject parent) Parameters parent IAxoObject Parent of this object Returns"
  },
  "apictrl/plc.AXOpen.Data.IAxoDataEntity.html": {
    "href": "apictrl/plc.AXOpen.Data.IAxoDataEntity.html",
    "title": "Interface IAxoDataEntity | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoDataEntity Namespace plc.AXOpen.Data INTERFACE IAxoDataEntity"
  },
  "apictrl/plc.AXOpen.Data.IAxoDataExchange.html": {
    "href": "apictrl/plc.AXOpen.Data.IAxoDataExchange.html",
    "title": "Interface IAxoDataExchange | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoDataExchange Namespace plc.AXOpen.Data Provides abastaction for data exchange. INTERFACE IAxoDataExchange Methods Create Public AXOpen.Core.IAxoTaskState Create(in plc.STRING[254] Identifier) Parameters Identifier STRING[254] Returns IAxoTaskState Read Public AXOpen.Core.IAxoTaskState Read(in plc.STRING[254] Identifier) Parameters Identifier STRING[254] Returns IAxoTaskState Update Public AXOpen.Core.IAxoTaskState Update(in plc.STRING[254] Identifier) Parameters Identifier STRING[254] Returns IAxoTaskState Delete Public AXOpen.Core.IAxoTaskState Delete(in plc.STRING[254] Identifier) Parameters Identifier STRING[254] Returns IAxoTaskState EntityExist Public AXOpen.Data.IAxoEntityExistTaskState EntityExist(in plc.STRING[254] Identifier) Parameters Identifier STRING[254] Returns IAxoEntityExistTaskState CreateOrUpdate Public AXOpen.Core.IAxoTaskState CreateOrUpdate(in plc.STRING[254] Identifier) Parameters Identifier STRING[254] Returns IAxoTaskState Restore Public VOID Restore() Returns Run Public VOID Run(in plc.AXOpen.Core.IAxoContext context) Parameters context IAxoContext Returns Run Public VOID Run(in plc.AXOpen.Core.IAxoObject parent) Parameters parent IAxoObject Returns"
  },
  "apictrl/plc.AXOpen.Data.IAxoEntityExistTaskState.html": {
    "href": "apictrl/plc.AXOpen.Data.IAxoEntityExistTaskState.html",
    "title": "Interface IAxoEntityExistTaskState | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoEntityExistTaskState Namespace plc.AXOpen.Data INTERFACE IAxoEntityExistTaskState Methods Exist Public BOOL Exist() Returns BOOL"
  },
  "apictrl/plc.AXOpen.Data.eCrudOperation.html": {
    "href": "apictrl/plc.AXOpen.Data.eCrudOperation.html",
    "title": "Enum eCrudOperation | System.Dynamic.ExpandoObject",
    "keywords": "Enum eCrudOperation Namespace plc.AXOpen.Data eCrudOperation Fields"
  },
  "apictrl/plc.AXOpen.Data.html": {
    "href": "apictrl/plc.AXOpen.Data.html",
    "title": "Namespace plc.AXOpen.Data | System.Dynamic.ExpandoObject",
    "keywords": "Namespace plc.AXOpen.Data Classes AxoDataCrudTask Provides remote execution for CRUD operations.> [!NOTE]> This is an extension of AxoTasktask see the documentatio for details about implementation in .NET. AxoDataEntity Base class for any exchangable data in AxoDataExchange. AxoDataExchange Provides base class for any data exchange with an arbitrary remote repository. AxoDataExchangeBase Represents base class of data exchange.This class is used to provide abstract information about the type that can be used in rcc. AxoDataExchangeTask Extends AxoRemoteTask for data operation within AxoData AxoDataFragmentExchange Provides base class for any composite/fragmetes data exchange combining one or more AxoDataExchange object. Interfaces IAxoEntityExistTaskState IAxoDataEntity IAxoDataExchange Provides abastaction for data exchange. Enums eCrudOperation"
  },
  "apictrl/plc.AXOpen.Elements.AxoAi.html": {
    "href": "apictrl/plc.AXOpen.Elements.AxoAi.html",
    "title": "Class AxoAi | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoAi Namespace plc.AXOpen.Elements Class representing Analog input CLASS AxoAi Inheritance AxoComponent AxoObject AxoAi Implements IAxoComponent Inherited Members _isManuallyControllable Identity ActivateManualControl() IsManuallyControllable() CheckIfManualControlIsActivated() Open() Run() Close() Restore() ManualControl() GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Properties _config _config : AXOpen.Elements.AxoAiConfig Property Value _status _status : AXOpen.Elements.AxoAiStatus Property Value _rawRange _rawRange : REAL Property Value _realRange _realRange : REAL Property Value _scaled _scaled : REAL Property Value _messengerDivisionByZero _messengerDivisionByZero : AXOpen.Messaging.Static.AxoMessenger Property Value _messengerGainNotDefined _messengerGainNotDefined : AXOpen.Messaging.Static.AxoMessenger Property Value _messengerOutOfBoundaries _messengerOutOfBoundaries : AXOpen.Messaging.Static.AxoMessenger Property Value _signal _signal : DINT Property Value Methods Run Method, which scales input signal based on configuration Public VOID Run(in plc.AXOpen.Core.IAxoContext context,in plc.DINT inSignal) Parameters context IAxoContext inSignal DINT Returns Restore Protected AXOpen.Core.IAxoTask Restore() Returns IAxoTask ManualControl Protected VOID ManualControl() Returns"
  },
  "apictrl/plc.AXOpen.Elements.AxoAiConfig.html": {
    "href": "apictrl/plc.AXOpen.Elements.AxoAiConfig.html",
    "title": "Class AxoAiConfig | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoAiConfig Namespace plc.AXOpen.Elements CLASS AxoAiConfig AxoAiConfig Properties RawLow RawLow : DINT Property Value RawHigh RawHigh : DINT Property Value RealLow RealLow : REAL Property Value RealHigh RealHigh : REAL Property Value Gain Gain : REAL Property Value Offset Offset : REAL Property Value"
  },
  "apictrl/plc.AXOpen.Elements.AxoAiStatus.html": {
    "href": "apictrl/plc.AXOpen.Elements.AxoAiStatus.html",
    "title": "Class AxoAiStatus | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoAiStatus Namespace plc.AXOpen.Elements Class representing current status of analog input CLASS AxoAiStatus AxoAiStatus Properties RawRange RawRange : REAL Property Value RealRange RealRange : REAL Property Value Scaled Scaled : REAL Property Value"
  },
  "apictrl/plc.AXOpen.Elements.AxoAo.html": {
    "href": "apictrl/plc.AXOpen.Elements.AxoAo.html",
    "title": "Class AxoAo | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoAo Namespace plc.AXOpen.Elements Class representing Analog output CLASS AxoAo Inheritance AxoComponent AxoObject AxoAo Implements IAxoComponent Inherited Members _isManuallyControllable Identity ActivateManualControl() IsManuallyControllable() CheckIfManualControlIsActivated() Open() Run() Close() Restore() ManualControl() GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Properties _requiredValue _requiredValue : REAL Property Value _config _config : AXOpen.Elements.AxoAoConfig Property Value _status _status : AXOpen.Elements.AxoAoStatus Property Value _rawRange _rawRange : REAL Property Value _realRange _realRange : REAL Property Value _unscaled _unscaled : REAL Property Value _messengerDivisionByZero _messengerDivisionByZero : AXOpen.Messaging.Static.AxoMessenger Property Value _messengerGainNotDefined _messengerGainNotDefined : AXOpen.Messaging.Static.AxoMessenger Property Value _messengerOutOfBoundaries _messengerOutOfBoundaries : AXOpen.Messaging.Static.AxoMessenger Property Value _signal _signal : DINT Property Value Methods Run Method, which unscales input signal based on configuration and writes it to output Public VOID Run(in plc.AXOpen.Core.IAxoContext context) Parameters context IAxoContext Returns Restore Protected AXOpen.Core.IAxoTask Restore() Returns IAxoTask ManualControl Protected VOID ManualControl() Returns"
  },
  "apictrl/plc.AXOpen.Elements.AxoAoConfig.html": {
    "href": "apictrl/plc.AXOpen.Elements.AxoAoConfig.html",
    "title": "Class AxoAoConfig | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoAoConfig Namespace plc.AXOpen.Elements Configuration class for analog output CLASS AxoAoConfig AxoAoConfig Properties RawLow RawLow : DINT Property Value RawHigh RawHigh : DINT Property Value RealLow RealLow : REAL Property Value RealHigh RealHigh : REAL Property Value Gain Gain : REAL Property Value Offset Offset : REAL Property Value"
  },
  "apictrl/plc.AXOpen.Elements.AxoAoStatus.html": {
    "href": "apictrl/plc.AXOpen.Elements.AxoAoStatus.html",
    "title": "Class AxoAoStatus | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoAoStatus Namespace plc.AXOpen.Elements Class representing current status of analog output CLASS AxoAoStatus AxoAoStatus Properties RawRange RawRange : REAL Property Value RealRange RealRange : REAL Property Value Unscaled Unscaled : REAL Property Value"
  },
  "apictrl/plc.AXOpen.Elements.AxoDi.html": {
    "href": "apictrl/plc.AXOpen.Elements.AxoDi.html",
    "title": "Class AxoDi | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDi Namespace plc.AXOpen.Elements Class representing Digital input CLASS AxoDi Inheritance AxoComponent AxoObject AxoDi Implements IAxoComponent Inherited Members _isManuallyControllable Identity ActivateManualControl() IsManuallyControllable() CheckIfManualControlIsActivated() Open() Run() Close() Restore() ManualControl() GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Properties _inSignal _inSignal : BOOL Property Value _isTrueTask _isTrueTask : AXOpen.Core.AxoTask Property Value _isFalseTask _isFalseTask : AXOpen.Core.AxoTask Property Value _messengerInfoPositive _messengerInfoPositive : AXOpen.Messaging.Static.AxoMessenger Property Value _messengerInfoNegative _messengerInfoNegative : AXOpen.Messaging.Static.AxoMessenger Property Value Methods Restore Protected AXOpen.Core.IAxoTask Restore() Returns IAxoTask ManualControl Protected VOID ManualControl() Returns Run Method, which implement logic for checking of digital input Public VOID Run(in plc.AXOpen.Core.IAxoContext context,in plc.BOOL inSignal) Parameters context IAxoContext inSignal BOOL Returns IsTrue Returns TRUE if signal is on. It creates alarm otherwise. Public BOOL IsTrue() Returns BOOL IsFalse Returns TRUE if signal is off. It creates alarm otherwise. Public BOOL IsFalse() Returns BOOL"
  },
  "apictrl/plc.AXOpen.Elements.AxoDo.html": {
    "href": "apictrl/plc.AXOpen.Elements.AxoDo.html",
    "title": "Class AxoDo | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDo Namespace plc.AXOpen.Elements Class representing Digital output CLASS AxoDo Inheritance AxoComponent AxoObject AxoDo Implements IAxoComponent Inherited Members _isManuallyControllable Identity ActivateManualControl() IsManuallyControllable() CheckIfManualControlIsActivated() Open() Run() Close() Restore() ManualControl() GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Properties _signal _signal : BOOL Property Value _setTask _setTask : AXOpen.Core.AxoTask Property Value _resetTask _resetTask : AXOpen.Core.AxoTask Property Value _messengerInfoPositive _messengerInfoPositive : AXOpen.Messaging.Static.AxoMessenger Property Value _messengerInfoNegative _messengerInfoNegative : AXOpen.Messaging.Static.AxoMessenger Property Value Methods Restore Protected AXOpen.Core.IAxoTask Restore() Returns IAxoTask ManualControl Protected VOID ManualControl() Returns Run Method, which sets or reset input/output value Public VOID Run(in plc.AXOpen.Core.IAxoContext context) Parameters context IAxoContext Returns Set Public BOOL Set() Returns BOOL Reset Public BOOL Reset() Returns BOOL IsTrue Public BOOL IsTrue() Returns BOOL IsFalse Public BOOL IsFalse() Returns BOOL"
  },
  "apictrl/plc.AXOpen.Elements.html": {
    "href": "apictrl/plc.AXOpen.Elements.html",
    "title": "Namespace plc.AXOpen.Elements | System.Dynamic.ExpandoObject",
    "keywords": "Namespace plc.AXOpen.Elements Classes AxoAi Class representing Analog input AxoAiConfig AxoAiStatus Class representing current status of analog input AxoAo Class representing Analog output AxoAoConfig Configuration class for analog output AxoAoStatus Class representing current status of analog output AxoDi Class representing Digital input AxoDo Class representing Digital output"
  },
  "apictrl/plc.AXOpen.Inspectors.AxoAnalogueInspector.html": {
    "href": "apictrl/plc.AXOpen.Inspectors.AxoAnalogueInspector.html",
    "title": "Class AxoAnalogueInspector | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoAnalogueInspector Namespace plc.AXOpen.Inspectors Class representing inspection of value within an interval. CLASS AxoAnalogueInspector Inheritance AxoInspector AxoObject AxoAnalogueInspector Implements IAxoAnalogueInspector IInspector IOnFail IAxoObject Inherited Members Identity CheckOverInspection() IsOverInspected() _WithCoordinator(IAxoCoordinator) OnFail() Dialog(IAxoStep,IAxoStep) RetryWithStep(IAxoStep) CarryOn() TerminateWithStep(IAxoStep) UpdateComprehensiveResult() RestoreInspectorTask() Busy() CommonData() Coordinator() Done() Result() GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Properties _data _data : AXOpen.Inspectors.AxoAnalogueInspectorData Property Value _lastOutValue _lastOutValue : LREAL Property Value Methods Inspect Inspection method, which contains main logic of inspection. Public AXOpen.Inspectors.IInspector Inspect(in plc.AXOpen.Core.IAxoObject _parent,in plc.LREAL Status) Parameters _parent IAxoObject Status LREAL Returns IInspector WithCoordinator Set coordinator to this instance Public AXOpen.Inspectors.IAxoAnalogueInspector WithCoordinator(in plc.AXOpen.Core.IAxoCoordinator inCoordinator) Parameters inCoordinator IAxoCoordinator Returns IAxoAnalogueInspector OnDone If inspection fails, set result to data Protected VOID OnDone() Returns Data Set coordinator to this instance Public REF_TO AXOpen.Inspectors.AxoAnalogueInspectorData Data() Returns REF_TO AXOpen.Inspectors.AxoAnalogueInspectorData"
  },
  "apictrl/plc.AXOpen.Inspectors.AxoAnalogueInspectorData.html": {
    "href": "apictrl/plc.AXOpen.Inspectors.AxoAnalogueInspectorData.html",
    "title": "Class AxoAnalogueInspectorData | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoAnalogueInspectorData Namespace plc.AXOpen.Inspectors Data subjected to each analogue inspector instance. CLASS AxoAnalogueInspectorData Inheritance AxoInspectorData AxoAnalogueInspectorData Inherited Members Timestamp PassTime FailTime Result IsExcluded IsByPassed NumberOfAllowedRetries RetryAttemptsCount Properties RequiredMin RequiredMin : LREAL Property Value DetectedStatus DetectedStatus : LREAL Property Value RequiredMax RequiredMax : LREAL Property Value"
  },
  "apictrl/plc.AXOpen.Inspectors.AxoComprehensiveResult.html": {
    "href": "apictrl/plc.AXOpen.Inspectors.AxoComprehensiveResult.html",
    "title": "Class AxoComprehensiveResult | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoComprehensiveResult Namespace plc.AXOpen.Inspectors Class for gathering overall result of single or multiple inspectionsOnly fail results are automatically written to comprehensive resultApplication programmer must specify, what is a correct result CLASS AxoComprehensiveResult AxoComprehensiveResult Implements IAxoComprehensiveResult Properties Result Result : AXOpen.Inspectors.eOverallResult Property Value Failures Failures : STRING Property Value ErrorCodes ErrorCodes : STRING Property Value Methods GetResult Get the overall result Public AXOpen.Inspectors.eOverallResult GetResult() Returns eOverallResult GetFailures Get FailuresTODO: not implemented yet Public STRING GetFailures() Returns STRING GetErrorCodes Get error codesTODO: not implemented yet Public STRING GetErrorCodes() Returns STRING SetResult Set overall result Public VOID SetResult(in plc.AXOpen.Inspectors.eOverallResult inResult) Parameters inResult eOverallResult Returns SetFailures Set failures Public VOID SetFailures(in plc.STRING inFailures) Parameters inFailures STRING Returns SetErrorCodes Set error codes Public VOID SetErrorCodes(in plc.STRING inErrorCodes) Parameters inErrorCodes STRING Returns"
  },
  "apictrl/plc.AXOpen.Inspectors.AxoDataInspector.html": {
    "href": "apictrl/plc.AXOpen.Inspectors.AxoDataInspector.html",
    "title": "Class AxoDataInspector | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataInspector Namespace plc.AXOpen.Inspectors Class representing inspection of string value with support of star notation. CLASS AxoDataInspector Inheritance AxoInspector AxoObject AxoDataInspector Implements IAxoDataInspector IInspector IOnFail IAxoObject Inherited Members Identity CheckOverInspection() IsOverInspected() _WithCoordinator(IAxoCoordinator) OnFail() Dialog(IAxoStep,IAxoStep) RetryWithStep(IAxoStep) CarryOn() TerminateWithStep(IAxoStep) UpdateComprehensiveResult() RestoreInspectorTask() Busy() CommonData() Coordinator() Done() Result() GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Properties _data _data : AXOpen.Inspectors.AxoDataInspectorData Property Value _lastOutValue _lastOutValue : STRING Property Value Methods Inspect Inspection method, which contains main logic of inspection. Public AXOpen.Inspectors.IInspector Inspect(in plc.AXOpen.Core.IAxoObject _parent,in plc.STRING Status) Parameters _parent IAxoObject Status STRING Returns IInspector WithCoordinator Set coordinator to this instance Public AXOpen.Inspectors.IAxoDataInspector WithCoordinator(in plc.AXOpen.Core.IAxoCoordinator inCoordinator) Parameters inCoordinator IAxoCoordinator Returns IAxoDataInspector OnDone If inspection fails, set result to data Protected VOID OnDone() Returns IsCharNumber Check, if character is a number Protected BOOL IsCharNumber(in plc.CHAR inCharacter) Parameters inCharacter CHAR Returns BOOL Data Set coordinator to this instance Public REF_TO AXOpen.Inspectors.AxoDataInspectorData Data() Returns REF_TO AXOpen.Inspectors.AxoDataInspectorData"
  },
  "apictrl/plc.AXOpen.Inspectors.AxoDataInspectorData.html": {
    "href": "apictrl/plc.AXOpen.Inspectors.AxoDataInspectorData.html",
    "title": "Class AxoDataInspectorData | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDataInspectorData Namespace plc.AXOpen.Inspectors Data subjected to each data inspector instance. CLASS AxoDataInspectorData Inheritance AxoInspectorData AxoDataInspectorData Inherited Members Timestamp PassTime FailTime Result IsExcluded IsByPassed NumberOfAllowedRetries RetryAttemptsCount Properties RequiredStatus RequiredStatus : STRING Property Value DetectedStatus DetectedStatus : STRING Property Value StarNotationEnabled StarNotationEnabled : BOOL Property Value"
  },
  "apictrl/plc.AXOpen.Inspectors.AxoDigitalInspector.html": {
    "href": "apictrl/plc.AXOpen.Inspectors.AxoDigitalInspector.html",
    "title": "Class AxoDigitalInspector | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDigitalInspector Namespace plc.AXOpen.Inspectors Class representing inspection of bool value. CLASS AxoDigitalInspector Inheritance AxoInspector AxoObject AxoDigitalInspector Implements IAxoDigitalInspector IInspector IOnFail IAxoObject Inherited Members Identity CheckOverInspection() IsOverInspected() _WithCoordinator(IAxoCoordinator) OnFail() Dialog(IAxoStep,IAxoStep) RetryWithStep(IAxoStep) CarryOn() TerminateWithStep(IAxoStep) UpdateComprehensiveResult() RestoreInspectorTask() Busy() CommonData() Coordinator() Done() Result() GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Properties _data _data : AXOpen.Inspectors.AxoDigitalInspectorData Property Value Methods Inspect Inspection method, which contains main logic of inspection. Public AXOpen.Inspectors.IInspector Inspect(in plc.AXOpen.Core.IAxoObject _parent,in plc.BOOL Status) Parameters _parent IAxoObject Status BOOL Returns IInspector OnDone If inspection fails, set result to data Protected VOID OnDone() Returns WithCoordinator Set coordinator to this instance Public AXOpen.Inspectors.IAxoDigitalInspector WithCoordinator(in plc.AXOpen.Core.IAxoCoordinator inCoordinator) Parameters inCoordinator IAxoCoordinator Returns IAxoDigitalInspector Data Set coordinator to this instance Public REF_TO AXOpen.Inspectors.AxoDigitalInspectorData Data() Returns REF_TO AXOpen.Inspectors.AxoDigitalInspectorData"
  },
  "apictrl/plc.AXOpen.Inspectors.AxoDigitalInspectorData.html": {
    "href": "apictrl/plc.AXOpen.Inspectors.AxoDigitalInspectorData.html",
    "title": "Class AxoDigitalInspectorData | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoDigitalInspectorData Namespace plc.AXOpen.Inspectors Data subjected to each digital inspector instance. CLASS AxoDigitalInspectorData Inheritance AxoInspectorData AxoDigitalInspectorData Inherited Members Timestamp PassTime FailTime Result IsExcluded IsByPassed NumberOfAllowedRetries RetryAttemptsCount Properties RequiredStatus RequiredStatus : BOOL Property Value DetectedStatus DetectedStatus : BOOL Property Value"
  },
  "apictrl/plc.AXOpen.Inspectors.AxoInspector.html": {
    "href": "apictrl/plc.AXOpen.Inspectors.AxoInspector.html",
    "title": "Class AxoInspector | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInspector Namespace plc.AXOpen.Inspectors AxoInspector base class with implemented evaluation methodsEvaluation methods need IAxoCoordinator instance CLASS AxoInspector Inheritance AxoObject AxoInspector Implements IInspector IOnFail IAxoObject Inherited Members Identity GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Properties _inspectorTask _inspectorTask : AXOpen.Inspectors.AxoInspectorTask Property Value _coordinator _coordinator : AXOpen.Core.IAxoCoordinator Property Value _isOverInspected _isOverInspected : BOOL Property Value _busy _busy : BOOL Property Value _commonData _commonData : REF_TO AXOpen.Inspectors.AxoInspectorData Property Value _originalOverallResult _originalOverallResult : AXOpen.Inspectors.IAxoComprehensiveResult Property Value Methods CheckOverInspection Check, if data are overinspected (attempts of inspections is larger than maximum number of allowed retries) Public BOOL CheckOverInspection() Returns BOOL IsOverInspected Gets true when this inspection overruns max number of inspections. Protected BOOL IsOverInspected() Returns BOOL _WithCoordinator Set passed instance of iAxoCoordinator to this inspector.This method can be called only in derived classes. Protected AXOpen.Inspectors.IInspector _WithCoordinator(in plc.AXOpen.Core.IAxoCoordinator inCoordinator) Parameters inCoordinator IAxoCoordinator Returns IInspector OnFail Returns this object defined by IOnFail interface Public AXOpen.Inspectors.IOnFail OnFail() Returns IOnFail Dialog Calls inspector dialog with required input Public BOOL Dialog(in plc.AXOpen.Core.IAxoStep inRetryStep,in plc.AXOpen.Core.IAxoStep inTerminateStep) Parameters inRetryStep IAxoStep inTerminateStep IAxoStep Returns BOOL RetryWithStep When inspection is done, retry provided step Public BOOL RetryWithStep(in plc.AXOpen.Core.IAxoStep inRetryStep) Parameters inRetryStep IAxoStep Returns BOOL CarryOn When inspection is done, continue to next step. Public BOOL CarryOn() Returns BOOL TerminateWithStep When inspection is done, terminate provided step Public BOOL TerminateWithStep(in plc.AXOpen.Core.IAxoStep inTerminateStep) Parameters inTerminateStep IAxoStep Returns BOOL UpdateComprehensiveResult Update commmon comprehensive result, which can be used across multiple inspectorsUpdates comprehensive result. The comprehensive result is set to Failed when any inspection fails or is inconclusive.Any bypassed or excluded inspections are not taken into account. Public AXOpen.Inspectors.IInspector UpdateComprehensiveResult() Returns IInspector RestoreInspectorTask Restores inspector task Public BOOL RestoreInspectorTask() Returns BOOL Busy Check, if inspector task is busy Public BOOL Busy() Returns BOOL CommonData Returns AxoInspectorData Public REF_TO AXOpen.Inspectors.AxoInspectorData CommonData() Returns REF_TO AXOpen.Inspectors.AxoInspectorData Coordinator Returns current coordinator Public AXOpen.Core.IAxoCoordinator Coordinator() Returns IAxoCoordinator Done Check, if inspection task is done Public BOOL Done() Returns BOOL Result Returns inspection result Public AXOpen.Inspectors.eInspectorResult Result() Returns eInspectorResult"
  },
  "apictrl/plc.AXOpen.Inspectors.AxoInspectorData.html": {
    "href": "apictrl/plc.AXOpen.Inspectors.AxoInspectorData.html",
    "title": "Class AxoInspectorData | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInspectorData Namespace plc.AXOpen.Inspectors Data subjected to each inspector instance. CLASS AxoInspectorData AxoInspectorData Properties Timestamp Timestamp : LDATE_AND_TIME Property Value PassTime PassTime : TIME Property Value FailTime FailTime : TIME Property Value Result Result : AXOpen.Inspectors.eInspectorResult Property Value IsExcluded IsExcluded : BOOL Property Value IsByPassed IsByPassed : BOOL Property Value NumberOfAllowedRetries NumberOfAllowedRetries : UINT Property Value RetryAttemptsCount RetryAttemptsCount : UINT Property Value"
  },
  "apictrl/plc.AXOpen.Inspectors.AxoInspectorDialog.html": {
    "href": "apictrl/plc.AXOpen.Inspectors.AxoInspectorDialog.html",
    "title": "Class AxoInspectorDialog | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInspectorDialog Namespace plc.AXOpen.Inspectors AxoInspector base class with implemented evaluation methodsEvaluation methods need IAxoCoordinator instance CLASS AxoInspectorDialog Inheritance AxoDialogBase AxoRemoteTask AxoTask AxoObject AxoInspectorDialog Implements IAxoTask IAxoTaskState Inherited Members DoneSignature IsInitialized HasRemoteException IsBeingCalledCounter TaskNotInitialized TaskHasRemoteException Status IsDisabled RemoteInvoke RemoteRestore RemoteAbort RemoteResume StartSignature Duration StartTimeStamp ErrorDetails Identity Execute() GetStartSignature() SetDoneSignature() GetState() GetErrorDetails() IsReady() IsDone() IsBusy() IsAborted() HasError() IsNewInvokeCall() IsInvokeCalledInThisPlcCycle() WasInvokeCalledInPreviousPlcCycle() IsNewExecuteCall() IsExecuteCalledInThisPlcCycle() WasExecuteCalledInPreviousPlcCycle() UpdateState() Invoke() Restore() DoneWhen(BOOL) Execute() LogTask(STRING[80],eLogLevel,IAxoObject) ThrowWhen(BOOL) ThrowWhen(BOOL,STRING[254]) SetIsDisabled(BOOL) GetIsDisabled() Abort() Resume() OnAbort() OnResume() OnDone() OnError() OnRestore() OnStart() WhileError() GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Properties _isOverInspected _isOverInspected : BOOL Property Value _dialogueRetry _dialogueRetry : BOOL Property Value _dialogueTerminate _dialogueTerminate : BOOL Property Value _dialogueOverride _dialogueOverride : BOOL Property Value _lastCall _lastCall : ULINT Property Value _isActive _isActive : BOOL Property Value _dialogIsClosed _dialogIsClosed : BOOL Property Value _isAnswerProvided _isAnswerProvided : BOOL Property Value Methods Show Method for showing inspector dialog and handling interaction Public VOID Show(in plc.REF_TO AXOpen.Inspectors.AxoInspector _parentInspectorRef,in plc.AXOpen.Core.IAxoStep inRetryStep,in plc.AXOpen.Core.IAxoStep inTerminateStep) Parameters _parentInspectorRef REF_TO AXOpen.Inspectors.AxoInspector inRetryStep IAxoStep inTerminateStep IAxoStep Returns Restore Restores dialogue Public VOID Restore() Returns"
  },
  "apictrl/plc.AXOpen.Inspectors.AxoInspectorTask.html": {
    "href": "apictrl/plc.AXOpen.Inspectors.AxoInspectorTask.html",
    "title": "Class AxoInspectorTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoInspectorTask Namespace plc.AXOpen.Inspectors CLASS AxoInspectorTask Inheritance AxoTask AxoObject AxoInspectorTask Implements IAxoTask IAxoTaskState Inherited Members Status IsDisabled RemoteInvoke RemoteRestore RemoteAbort RemoteResume StartSignature Duration StartTimeStamp ErrorDetails Identity GetState() GetErrorDetails() IsReady() IsDone() IsBusy() IsAborted() HasError() IsNewInvokeCall() IsInvokeCalledInThisPlcCycle() WasInvokeCalledInPreviousPlcCycle() IsNewExecuteCall() IsExecuteCalledInThisPlcCycle() WasExecuteCalledInPreviousPlcCycle() UpdateState() Invoke() Restore() DoneWhen(BOOL) Execute() LogTask(STRING[80],eLogLevel,IAxoObject) ThrowWhen(BOOL) ThrowWhen(BOOL,STRING[254]) SetIsDisabled(BOOL) GetIsDisabled() Abort() Resume() OnAbort() OnResume() OnDone() OnError() OnRestore() OnStart() WhileError() GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Properties _onDoneFlag _onDoneFlag : BOOL Property Value _inspectionData _inspectionData : REF_TO AXOpen.Inspectors.AxoInspectorData Property Value _passTimer _passTimer : UNDEFINED Property Value _failTimer _failTimer : UNDEFINED Property Value Methods InspectionData Public REF_TO AXOpen.Inspectors.AxoInspectorData InspectionData() Returns REF_TO AXOpen.Inspectors.AxoInspectorData SetInspectionData Internal REF_TO AXOpen.Inspectors.AxoInspectorData SetInspectionData(in plc.REF_TO AXOpen.Inspectors.AxoInspectorData inInspectionData) Parameters inInspectionData REF_TO AXOpen.Inspectors.AxoInspectorData Returns REF_TO AXOpen.Inspectors.AxoInspectorData OnDoneFlag Public BOOL OnDoneFlag() Returns BOOL Execute Execute inspection task. Public BOOL Execute() Returns BOOL OnStart Executes once when inspection starts. Protected VOID OnStart() Returns Restore Public VOID Restore() Returns OnDone When inspection Task is done, evaluate inspection result and write to inspection data. Protected VOID OnDone() Returns"
  },
  "apictrl/plc.AXOpen.Inspectors.IAxoAnalogueInspector.html": {
    "href": "apictrl/plc.AXOpen.Inspectors.IAxoAnalogueInspector.html",
    "title": "Interface IAxoAnalogueInspector | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoAnalogueInspector Namespace plc.AXOpen.Inspectors INTERFACE IAxoAnalogueInspector Methods Inspect Public AXOpen.Inspectors.IInspector Inspect(in plc.AXOpen.Core.IAxoObject _parent,in plc.LREAL Status) Parameters _parent IAxoObject Status LREAL Returns IInspector"
  },
  "apictrl/plc.AXOpen.Inspectors.IAxoComprehensiveResult.html": {
    "href": "apictrl/plc.AXOpen.Inspectors.IAxoComprehensiveResult.html",
    "title": "Interface IAxoComprehensiveResult | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoComprehensiveResult Namespace plc.AXOpen.Inspectors INTERFACE IAxoComprehensiveResult Methods GetResult Public AXOpen.Inspectors.eOverallResult GetResult() Returns eOverallResult GetFailures Public STRING GetFailures() Returns STRING GetErrorCodes Public STRING GetErrorCodes() Returns STRING SetResult Public VOID SetResult(in plc.AXOpen.Inspectors.eOverallResult inResult) Parameters inResult eOverallResult Returns SetFailures Public VOID SetFailures(in plc.STRING inFailures) Parameters inFailures STRING Returns SetErrorCodes Public VOID SetErrorCodes(in plc.STRING inErrorCodes) Parameters inErrorCodes STRING Returns"
  },
  "apictrl/plc.AXOpen.Inspectors.IAxoDataInspector.html": {
    "href": "apictrl/plc.AXOpen.Inspectors.IAxoDataInspector.html",
    "title": "Interface IAxoDataInspector | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoDataInspector Namespace plc.AXOpen.Inspectors INTERFACE IAxoDataInspector Methods Inspect Public AXOpen.Inspectors.IInspector Inspect(in plc.AXOpen.Core.IAxoObject _parent,in plc.STRING Status) Parameters _parent IAxoObject Status STRING Returns IInspector"
  },
  "apictrl/plc.AXOpen.Inspectors.IAxoDigitalInspector.html": {
    "href": "apictrl/plc.AXOpen.Inspectors.IAxoDigitalInspector.html",
    "title": "Interface IAxoDigitalInspector | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoDigitalInspector Namespace plc.AXOpen.Inspectors INTERFACE IAxoDigitalInspector Methods Inspect Public AXOpen.Inspectors.IInspector Inspect(in plc.AXOpen.Core.IAxoObject _parent,in plc.BOOL Status) Parameters _parent IAxoObject Status BOOL Returns IInspector"
  },
  "apictrl/plc.AXOpen.Inspectors.IInspector.html": {
    "href": "apictrl/plc.AXOpen.Inspectors.IInspector.html",
    "title": "Interface IInspector | System.Dynamic.ExpandoObject",
    "keywords": "Interface IInspector Namespace plc.AXOpen.Inspectors INTERFACE IInspector Methods Busy Public BOOL Busy() Returns BOOL CommonData Public REF_TO AXOpen.Inspectors.AxoInspectorData CommonData() Returns REF_TO AXOpen.Inspectors.AxoInspectorData Coordinator Public AXOpen.Core.IAxoCoordinator Coordinator() Returns IAxoCoordinator Done Public BOOL Done() Returns BOOL CheckOverInspection Public BOOL CheckOverInspection() Returns BOOL Result Public AXOpen.Inspectors.eInspectorResult Result() Returns eInspectorResult Dialog Public BOOL Dialog(in plc.AXOpen.Core.IAxoStep inRetryStep,in plc.AXOpen.Core.IAxoStep inTerminateStep) Parameters inRetryStep IAxoStep inTerminateStep IAxoStep Returns BOOL RestoreInspectorTask Public BOOL RestoreInspectorTask() Returns BOOL OnFail Public AXOpen.Inspectors.IOnFail OnFail() Returns IOnFail UpdateComprehensiveResult Public AXOpen.Inspectors.IInspector UpdateComprehensiveResult() Returns IInspector"
  },
  "apictrl/plc.AXOpen.Inspectors.IOnFail.html": {
    "href": "apictrl/plc.AXOpen.Inspectors.IOnFail.html",
    "title": "Interface IOnFail | System.Dynamic.ExpandoObject",
    "keywords": "Interface IOnFail Namespace plc.AXOpen.Inspectors INTERFACE IOnFail Methods CarryOn Public BOOL CarryOn() Returns BOOL RetryWithStep Public BOOL RetryWithStep(in plc.AXOpen.Core.IAxoStep inRetryStep) Parameters inRetryStep IAxoStep Returns BOOL Dialog Public BOOL Dialog(in plc.AXOpen.Core.IAxoStep inRetryStep,in plc.AXOpen.Core.IAxoStep inTerminateStep) Parameters inRetryStep IAxoStep inTerminateStep IAxoStep Returns BOOL TerminateWithStep Public BOOL TerminateWithStep(in plc.AXOpen.Core.IAxoStep inTerminateStep) Parameters inTerminateStep IAxoStep Returns BOOL"
  },
  "apictrl/plc.AXOpen.Inspectors.eInspectorResult.html": {
    "href": "apictrl/plc.AXOpen.Inspectors.eInspectorResult.html",
    "title": "Enum eInspectorResult | System.Dynamic.ExpandoObject",
    "keywords": "Enum eInspectorResult Namespace plc.AXOpen.Inspectors eInspectorResult : INT Fields"
  },
  "apictrl/plc.AXOpen.Inspectors.eOverallResult.html": {
    "href": "apictrl/plc.AXOpen.Inspectors.eOverallResult.html",
    "title": "Enum eOverallResult | System.Dynamic.ExpandoObject",
    "keywords": "Enum eOverallResult Namespace plc.AXOpen.Inspectors eOverallResult : INT Fields"
  },
  "apictrl/plc.AXOpen.Inspectors.html": {
    "href": "apictrl/plc.AXOpen.Inspectors.html",
    "title": "Namespace plc.AXOpen.Inspectors | System.Dynamic.ExpandoObject",
    "keywords": "Namespace plc.AXOpen.Inspectors Classes AxoComprehensiveResult Class for gathering overall result of single or multiple inspectionsOnly fail results are automatically written to comprehensive resultApplication programmer must specify, what is a correct result AxoInspector AxoInspector base class with implemented evaluation methodsEvaluation methods need IAxoCoordinator instance AxoInspectorData Data subjected to each inspector instance. AxoInspectorDialog AxoInspector base class with implemented evaluation methodsEvaluation methods need IAxoCoordinator instance AxoInspectorTask AxoAnalogueInspector Class representing inspection of value within an interval. AxoAnalogueInspectorData Data subjected to each analogue inspector instance. AxoDataInspector Class representing inspection of string value with support of star notation. AxoDataInspectorData Data subjected to each data inspector instance. AxoDigitalInspector Class representing inspection of bool value. AxoDigitalInspectorData Data subjected to each digital inspector instance. Interfaces IAxoAnalogueInspector IAxoDataInspector IAxoDigitalInspector IAxoComprehensiveResult IInspector IOnFail"
  },
  "apictrl/plc.AXOpen.Logging.AxoLogEntry.html": {
    "href": "apictrl/plc.AXOpen.Logging.AxoLogEntry.html",
    "title": "Class AxoLogEntry | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoLogEntry Namespace plc.AXOpen.Logging AxoLogEntry class represents a single log entry. CLASS AxoLogEntry AxoLogEntry Properties Message The message of the log entry. The maximum length of the message is 80 characters. Message : STRING[80] Property Value Level The severity level of the log entry. Level : AXOpen.Logging.eLogLevel Property Value Sender The identifier of the sender of the log entry. Sender : ULINT Property Value ToDequeue Indicates whether the log entry is ready to be dequeued. ToDequeue : BOOL Property Value"
  },
  "apictrl/plc.AXOpen.Logging.AxoLogger.html": {
    "href": "apictrl/plc.AXOpen.Logging.AxoLogger.html",
    "title": "Class AxoLogger | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoLogger Namespace plc.AXOpen.Logging AxoLogger class for logging purposes.This class implements IAxoLogger and IAxoLoggerConfig interfaces. CLASS AxoLogger AxoLogger Implements IAxoLogger Properties Carret The current position in the log entries array. Carret : INT Property Value MinimumLevel The minimum logging level to be captured by this logger. MinimumLevel : AXOpen.Logging.eLogLevel Property Value LogEntries The array containing log entries. LogEntries : ARRAY [0..100] OF AXOpen.Logging.AxoLogEntry Property Value Methods Log Log method that captures a message, logging level, and the sender of the log. Public VOID Log(in plc.STRING[80] _message,in plc.AXOpen.Logging.eLogLevel _level,in plc.AXOpen.Core.IAxoObject _sender) Parameters _message STRING[80] The message to be logged. _level eLogLevel The severity level of the log. _sender IAxoObject The object that sends the log. Returns Log Log method that captures a message and logging level. Public VOID Log(in plc.STRING[80] _message,in plc.AXOpen.Logging.eLogLevel _level) Parameters _message STRING[80] The message to be logged. _level eLogLevel The severity level of the log. Returns SetMinimumLevel Sets the minimum logging level to be captured by this logger. Public AXOpen.Logging.IAxoLoggerConfig SetMinimumLevel(in plc.AXOpen.Logging.eLogLevel _level) Parameters _level eLogLevel The minimum log level. Returns IAxoLoggerConfig Returns the instance of the logger."
  },
  "apictrl/plc.AXOpen.Logging.IAxoLogger.html": {
    "href": "apictrl/plc.AXOpen.Logging.IAxoLogger.html",
    "title": "Interface IAxoLogger | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoLogger Namespace plc.AXOpen.Logging Defines the IAxoLogger interfaceThis interface extends IAxoLoggerConfig INTERFACE IAxoLogger Methods Log Defines the Log methodThis method takes a message, a log level, and a sender as input Public VOID Log(in plc.STRING[80] _message,in plc.AXOpen.Logging.eLogLevel _level,in plc.AXOpen.Core.IAxoObject _sender) Parameters _message STRING[80] _level eLogLevel _sender IAxoObject Returns Log Defines another Log methodThis method takes a message and a log level as input Public VOID Log(in plc.STRING[80] _message,in plc.AXOpen.Logging.eLogLevel _level) Parameters _message STRING[80] _level eLogLevel Returns"
  },
  "apictrl/plc.AXOpen.Logging.IAxoLoggerConfig.html": {
    "href": "apictrl/plc.AXOpen.Logging.IAxoLoggerConfig.html",
    "title": "Interface IAxoLoggerConfig | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoLoggerConfig Namespace plc.AXOpen.Logging Defines the IAxoLoggerConfig interface INTERFACE IAxoLoggerConfig Methods SetMinimumLevel Defines the SetMinimumLevel methodThis method takes a log level as input and returns an instance of IAxoLoggerConfig Public AXOpen.Logging.IAxoLoggerConfig SetMinimumLevel(in plc.AXOpen.Logging.eLogLevel _level) Parameters _level eLogLevel Returns IAxoLoggerConfig"
  },
  "apictrl/plc.AXOpen.Logging.eLogLevel.html": {
    "href": "apictrl/plc.AXOpen.Logging.eLogLevel.html",
    "title": "Enum eLogLevel | System.Dynamic.ExpandoObject",
    "keywords": "Enum eLogLevel Namespace plc.AXOpen.Logging eLogLevel : INT Fields No category is assigned to the log level. Verbose level log is usually only enabled for debugging. Traffic is typically very high. Debug level log is used for internal system events that are not necessarily observable from the outside. Information level log is used to track the general flow of the application. These logs should have long-term value. Warning level log is used for abnormal or unexpected events in the application flow, which does not necessarily cause the application to stop. Error level log is used for errors and exceptions that cannot be handled. These result in a premature termination. Fatal level log is used to indicate a catastrophic failure that requires immediate attention."
  },
  "apictrl/plc.AXOpen.Logging.html": {
    "href": "apictrl/plc.AXOpen.Logging.html",
    "title": "Namespace plc.AXOpen.Logging | System.Dynamic.ExpandoObject",
    "keywords": "Namespace plc.AXOpen.Logging Defines the AXOpen.Logging namespace Classes AxoLogEntry AxoLogEntry class represents a single log entry. AxoLogger AxoLogger class for logging purposes.This class implements IAxoLogger and IAxoLoggerConfig interfaces. Interfaces IAxoLogger Defines the IAxoLogger interfaceThis interface extends IAxoLoggerConfig IAxoLoggerConfig Defines the IAxoLoggerConfig interface"
  },
  "apictrl/plc.AXOpen.Messaging.Static.AxoMessenger.html": {
    "href": "apictrl/plc.AXOpen.Messaging.Static.AxoMessenger.html",
    "title": "Class AxoMessenger | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoMessenger Namespace plc.AXOpen.Messaging.Static CLASS AxoMessenger Inheritance AxoObject AxoMessenger Implements IAxoMessageProperties IAxoObject Inherited Members Identity GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Properties IsActive IsActive : BOOL Property Value Category Category : AXOpen.Messaging.eAxoMessageCategory Property Value MessageCode MessageCode : ULINT Property Value Risen Risen : LDATE_AND_TIME Property Value Fallen Fallen : LDATE_AND_TIME Property Value WaitingForAcknowledge WaitingForAcknowledge : BOOL Property Value AcknowledgementRequired AcknowledgementRequired : BOOL Property Value AcknowledgeRequest AcknowledgeRequest : BOOL Property Value AcknowledgedBeforeFallen AcknowledgedBeforeFallen : BOOL Property Value Acknowledged Acknowledged : LDATE_AND_TIME Property Value ActiveContextCount ActiveContextCount : ULINT Property Value Context Context : AXOpen.Core.IAxoContext Property Value Methods Serve Ensures the inicialization of the instance, so as the deactivation of the message. Must be called cyclically. Public VOID Serve(in plc.AXOpen.Core.IAxoContext _context) Parameters _context IAxoContext Returns Serve Ensures the inicialization of the instance, so as the deactivation of the message. Must be called cyclically. Public VOID Serve(in plc.AXOpen.Core.IAxoObject _object) Parameters _object IAxoObject Returns Activate Activates the message of the entered category immediatelly. Public AXOpen.Messaging.Static.IAxoMessageProperties Activate(in plc.AXOpen.Messaging.eAxoMessageCategory _category) Parameters _category eAxoMessageCategory Returns IAxoMessageProperties Activate Private AXOpen.Messaging.Static.IAxoMessageProperties Activate(in plc.ULINT _messageCode,in plc.AXOpen.Messaging.eAxoMessageCategory _category) Parameters _messageCode ULINT _category eAxoMessageCategory Returns IAxoMessageProperties ActivateOnCondition Activates the message of the entered category on the rising edge of the condition. Public AXOpen.Messaging.Static.IAxoMessageProperties ActivateOnCondition(in plc.BOOL _condition,in plc.AXOpen.Messaging.eAxoMessageCategory _category) Parameters _condition BOOL _category eAxoMessageCategory Returns IAxoMessageProperties ActivateOnCondition Activates the message of the entered category by using the text list on the rising edge of the condition. Public AXOpen.Messaging.Static.IAxoMessageProperties ActivateOnCondition(in plc.ULINT _messageCode,in plc.BOOL _condition,in plc.AXOpen.Messaging.eAxoMessageCategory _category) Parameters _messageCode ULINT _condition BOOL _category eAxoMessageCategory Returns IAxoMessageProperties Deactivate Private VOID Deactivate(in plc.ULINT _messageCode) Parameters _messageCode ULINT Returns Deactivate Private VOID Deactivate() Returns Acknowledge Private VOID Acknowledge(in plc.ULINT _messageCode) Parameters _messageCode ULINT Returns Acknowledge Private VOID Acknowledge() Returns Restore Restores all members of this instance to their initial states. Public VOID Restore() Returns ToLogLevel Private AXOpen.Logging.eLogLevel ToLogLevel(in plc.AXOpen.Messaging.eAxoMessageCategory _messageCategory) Parameters _messageCategory eAxoMessageCategory Returns eLogLevel RequireAcknowledgement Forces to require the message acknowledgement, even if the message category does not require it by default. Public AXOpen.Messaging.Static.IAxoMessageProperties RequireAcknowledgement() Returns IAxoMessageProperties DoNotRequireAcknowledgement Forces to not require the message acknowledgement, even if the message category requires it by default. Public AXOpen.Messaging.Static.IAxoMessageProperties DoNotRequireAcknowledgement() Returns IAxoMessageProperties IsAcknowledgementRequired Returns TRUE if requires the message acknowledgement. Public BOOL IsAcknowledgementRequired() Returns BOOL"
  },
  "apictrl/plc.AXOpen.Messaging.Static.IAxoMessageProperties.html": {
    "href": "apictrl/plc.AXOpen.Messaging.Static.IAxoMessageProperties.html",
    "title": "Interface IAxoMessageProperties | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoMessageProperties Namespace plc.AXOpen.Messaging.Static INTERFACE IAxoMessageProperties Methods RequireAcknowledgement Public AXOpen.Messaging.Static.IAxoMessageProperties RequireAcknowledgement() Returns IAxoMessageProperties DoNotRequireAcknowledgement Public AXOpen.Messaging.Static.IAxoMessageProperties DoNotRequireAcknowledgement() Returns IAxoMessageProperties IsAcknowledgementRequired Public BOOL IsAcknowledgementRequired() Returns BOOL"
  },
  "apictrl/plc.AXOpen.Messaging.Static.html": {
    "href": "apictrl/plc.AXOpen.Messaging.Static.html",
    "title": "Namespace plc.AXOpen.Messaging.Static | System.Dynamic.ExpandoObject",
    "keywords": "Namespace plc.AXOpen.Messaging.Static Classes AxoMessenger Interfaces IAxoMessageProperties"
  },
  "apictrl/plc.AXOpen.Messaging.eAxoMessageCategory.html": {
    "href": "apictrl/plc.AXOpen.Messaging.eAxoMessageCategory.html",
    "title": "Enum eAxoMessageCategory | System.Dynamic.ExpandoObject",
    "keywords": "Enum eAxoMessageCategory Namespace plc.AXOpen.Messaging Message categories.ATTENTION: Values must be multiply of 100 eAxoMessageCategory : INT Fields Trace message to be used for tracing purpose.Use when you need to track detailed information about internal states of the program for detailed visibility.This is lowest level of category that can be used in production, for detailed observation of PLC program. Debug message to be used for debugging purpose only.Use when you need to report debug information for you as programmer. Info message.Use when you want to deliver information to the user, that has only informative character and does not adversely affect a process. Time-out message.Use this category when you want to report a timed-out information, that may eventually succed. Notification message.Use this category when you want to report a notification that may be of interest to the user, but does not adversly affect a process. Warning message.Use this category when you want to report to the user an information about a possible problem, that may adversly affect a process.Information in this cateogory aims to help the user to identify a problem, the cause of such problem does not necessarily stops the process. Error message.Use this categoty when there is a failure that cannot be immediately recovered and an intervention is needed. This is typically a situation when a device failsto deliver expected result.Do not use this category to report information about failed process like measurement or detection. Programming issue.Use this category to inform about a possible programming error, defect in settings or missing information at a level of programming or system or process settings. Critical error.Use this category when a critical error occured, that is not recoverable by the means of software (reset/restore) but device still operates under such conditions; a detailed inspection and an expert action is required. Fatal error.Use this category when a fatal error occured, that is not recoverable by the means of software (reset/restore) and a detailed inspection is required, the device is not able to continue without special intervention, Catastrophic error.Use this category when there is a situation when the device cannot continue operations due to irrecoverable failure."
  },
  "apictrl/plc.AXOpen.Rtc.IAxoRtc.html": {
    "href": "apictrl/plc.AXOpen.Rtc.IAxoRtc.html",
    "title": "Interface IAxoRtc | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoRtc Namespace plc.AXOpen.Rtc INTERFACE IAxoRtc Methods NowUTC Public LDATE_AND_TIME NowUTC() Returns LDATE_AND_TIME"
  },
  "apictrl/plc.AXOpen.Rtc.html": {
    "href": "apictrl/plc.AXOpen.Rtc.html",
    "title": "Namespace plc.AXOpen.Rtc | System.Dynamic.ExpandoObject",
    "keywords": "Namespace plc.AXOpen.Rtc Interfaces IAxoRtc"
  },
  "apidoc/index.html": {
    "href": "apidoc/index.html",
    "title": "| System.Dynamic.ExpandoObject",
    "keywords": ""
  },
  "articles/configuration/README.html": {
    "href": "articles/configuration/README.html",
    "title": "How to configure Blazor server for Siemens panel | System.Dynamic.ExpandoObject",
    "keywords": "How to configure Blazor server for Siemens panel To configure Blazor Server, you need to follow these two steps: 1. Change the default IP Address To modify the IP address of the website, you have two options: In Program.cs Inside the Program.cs file, add the following lines to specify the URLs: builder.WebHost.UseUrls(\"http://10.10.10.198:5262;https://10.10.10.198:7292\"); or builder.WebHost.UseUrls(\"http://*:5262;https://*:7292\"); In launchSettings.json Open the launchSettings.json file and modify the 'applicationUrl' under the profiles section. For example: \"applicationUrl\": \"http://10.10.10.198:5262;https://10.10.10.198:7292\" Please note that the IP address corresponds to the IP address of your network adapter. 2. Add rules to the firewall Follow these steps to add rules for the desired ports in the Windows Defender Firewall: Go to Control Panel > Windows Defender Firewall > Advanced Settings In the Inbound Rules section, add the rules for the ports you wish to use. If you are using Eset, you should perform the following steps: Navigate to Eset > Setup > Network > Click on settings next to Firewall > Configure. Check the option `Also evaluate rules from Windows Firewall`` or add the rule directly in Eset. If you using Eset you need to: Eset > Setup > Network > click on settings next to Firewall > Configure Warning If you intend to use HTTPS with a self-signed SSL certificate, make sure to adjust the DeveloperSettings.BypassSSLCertificate attribute in Program.cs to true, before start your application. Here's an example of how to do it: DeveloperSettings.BypassSSLCertificate = false;"
  },
  "articles/guidelines/Conventions.html": {
    "href": "articles/guidelines/Conventions.html",
    "title": "WORK IN PROGRESS... | System.Dynamic.ExpandoObject",
    "keywords": "WORK IN PROGRESS... AXOpen Conventions REVISION DATE NOTES 0.0 July 2023 Initial release Introduction Thanks for taking the time to read this document. Here we aim to outline a set of rules that will help us write consistent libraries that will serve their other consumers and us. This document follows recommendations from SIMATIC-AX ST Style guide for AXOpen project(s). This document defines the minimum coding standards and will be updated as the project develops in time. Why do we need to agree on conventions They create a consistent look to the code so that readers can focus on content, not layout. They enable readers to understand the code more quickly by making assumptions based on previous experience. They facilitate copying, changing, and maintaining the code. They demonstrate Structured Text best practices. A general note on naming Names should be self-describing, readable considered in calling context. Use of prefixes is discouraged, except for those outlined in this document. For example to inform/warn about some property like a reference, IN_OUT reference, or to aid to IntelliSense to narrow the scope of search. General note on the use of PLC-Language AXOpen uses exclusively IEC 61131-3 Structured Test (ST). Namespaces Each type must be enclosed in an appropriate namespace. Orphaned types with no namespace are not allowed. Naming Type Naming Block type Notation Prefix Example FB/CLASS name PascalCase NoPrefix Cyclinder ENUM type name PascalCase e eMachineState.Start INTERFACE name PascalCase I ICyclinder FUNCTION name PascalCase NoPrefix Add() STRUCT name PascalCase NoPrefix Data CLASS member naming Variable section Notation Prefix Example METHOD name PascalCase NoPrefix MoveToWork() METHOD arguments camelCase NoPrefix targetPosition : LREAL *PROPERTY name PascalCase NoPrefix IsEnabled CLASS member naming Variable section Notation Prefix Example VAR_INPUT camelCase in inActualPosition : LREAL VAR_OUTPUT camelCase out outActualPosition : LREAL VAR_IN_OUT camelCase ino inoActualPosition : LREAL VAR camelCase _ _actualPosition : LREAL, VAR_STAT camelCase _ _actualPosition : LREAL, VAR_INST camelCase _ _actualPosition : LREAL , VAR CONSTANT UpperCase NoPrefix MAX_747_CRUISING_ALTITUDE REFERENCE PascalCase ref refDrive INTERFACE name PascalCase NoPrefix Cyclinder STRUCT member naming Group Notation Prefix Example VARIABLE PascalCase NoPrefix ActualPosition REFERENCE PascalCase ref refDrive INTERFACE name PascalCase NoPrefix Cyclinder Features to avoid Avoid Use instead FUNCTION_BLOCK CLASS Features to prefer IF YOU REALLY MUST EVERYWHERE ELSE FUNCTION CLASS.METHOD Identifiers Any identifier (variable, methods, properties) should have an identifier that clearly expresses intent. Identifiers with less than 4 characters should be avoided (unless they represent well-known acronyms or expressions). There is no formal constraint on a maximum number of characters; however, about 25 characters should suffice to name the variable appropriately. Scope All variables should be declared closest to the scope where they are used. Avoid using global declarations unless it is necessary or the global scope is required for the application. Global scope Generally, the global scope should be avoided where possible. Member Variables Private CLASS member variables should begin with underscore _, followed by the variable name. VAR PRIVATE _trigger : BOOL; _counter : INT; _analogStatus : AnalogStatus; END_VAR Constants Use constants instead of magic numbers. Constants should be all caps. Where magic numbers are required for low-level domain-specific operations, these should be managed in the highest level block that makes sense without breaking an abstraction layer. Arrays Arrays should be 0 based index due to consistency when used on HMI platforms (based on JavaScript, TypeScript, C#). VAR myArray : ARRAY[0..9] OF BOOL; // Prefered myArray1 : ARRAY[1..10] OF BOOL; // AVOID END_VAR Namespaces Variables defined in referenced libraries must be declared using a fully qualified name with the namespace. VAR _mixer : fbMixer; // AVOID! _mixer : Mixers.fbMixer; // Like this END_VAR Methods Methods names should clearly state the intent. Method name should not have any prefix. The methods should be used to perform some action (Movement, Measurement, Trigger etc.). For obtaining or setting values, prefer properties. piston.MoveToWork(); laser.Measure(); dmcReader.Trigger(); Properties* Property names should clearly describe intent. Properties should not start with any prefix. Parameter transfer in cyclic execution. Whenever a parameter transfer is required during the initialization/cyclic-update of a class, use the Run method, the parameters passed using this method must not be changed at runtime. Components Expecting future implementation"
  },
  "articles/guidelines/PERFORMANCE.html": {
    "href": "articles/guidelines/PERFORMANCE.html",
    "title": "Performance Considerations when Designing AXOpen Applications | System.Dynamic.ExpandoObject",
    "keywords": "Performance Considerations when Designing AXOpen Applications AXOpen boasts a variety of features. However, it's noteworthy that certain features may demand higher performance, affecting both the controller and communication load. This is especially true for hardware-based controllers. This document covers the general guidelines for selecting a suitable controller within the usable range of hardware based controllers is S7-1516 to S7-1518. It is crucial to carefully determine the requirements for the desired controller, taking into consideration the size and performance demands of the application. Hardware Controllers The table below provides an overview of the specifications of various hardware controllers: Controller Max. Controlled Units Traceability Controller Logging Data Load Main Cyclic Loop* S7-1516 FW 3.0 1 No No Low 500ms S7-1517 FW 3.0 5 Yes Yes Modest 250ms S7-1518 FW 3.0 7 Yes Yes Modest 250ms Software Controllers Software controllers also offer a range of capabilities, as detailed in the table below: Controller Max. Controlled Units Traceability Controller Logging Data Load Main Cyclic Loop* S7-1507S 10 Yes Yes Low 50ms S7-1508S 10 Yes Yes Low 50ms Main cyclic loop is the base time interval of the AXOpen application to handle all cyclic requests. Always ensure to align the selection of a controller with the specific needs of your AXOpen application to achieve optimal performance."
  },
  "articles/guidelines/README.html": {
    "href": "articles/guidelines/README.html",
    "title": "| System.Dynamic.ExpandoObject",
    "keywords": ""
  },
  "articles/guidelines/components.html": {
    "href": "articles/guidelines/components.html",
    "title": "WORK IN PORGRESS | System.Dynamic.ExpandoObject",
    "keywords": "WORK IN PORGRESS Components REVISION DATE NOTES 0.0 June 2023 Initial release 0.1 August 2023 Initial release 0.2 August 2023 Documentation requirements and others This document describes the format and practices for writing components in AXOpen. These are universal rules to observe. Each rule knows exception when there is a reasonable argument behind it. General rules Component must inherit from AXOpen.Core.AxoComponent Components methods and properties should not be marked FINAL (sealed) Component should implement appropriate INTERFACE for a public contract; this is the interface that the consumers of the library will use to interact with the component. It represents the public contract that must not change during the lifetime of the particular major version of the library/framework. See semantic versioning. Component members must explicitly state access modifier for methods and properties (PUBLIC, INTERNAL, PROTECTED, or PRIVATE) Component should properly hide implementation details by marking methods preferably PROTECTED. Consider using the PRIVATE access modifier to prevent any access to that member if you deem it necessary. Be aware, though, that private members cannot be overridden by a derived class. If there are any testing methods in the same library with the component, these must be marked INTERNAL. Each action of the component should be implemented using the AxoTask class. There is no exception to this rule, even for the actions that require a single cycle to complete. Task's Invoke should be placed into a method with an appropriate name (MoveAbsolute, MoveHome, Measure). Cyclic call Each component implements the logic required to run cyclically in the Run method of the CLASS. Components methods The methods that perform actions MUST return AXOpen.IAxoTaskStatus (typically AXOpen.Core.AxoTask). This rule applies even to the logic that requires a single-cycle execution. Library placement Library must be placed in src folder of the repository. The containing folder should be named components.[manufacturer].[function_group] (e.g. components.cognex.vision). Abstractions Each component should implement basic contract interface defined in the AxoAbstractions library (e.g. AxoAbbRobot should implenent IAxoRobot, AxoCognexReader should impement IAxoReader) I/O variables Components must not contain I/O (%I*, %Q*) variables directly (no AT directive). I/O variables naming The AxOpen does not use Hungarian prefixes, with few exceptions. IN/OUT and REF_TO method argument parameters are one of those exceptions where it is required to use prefixes ino and ref respectively. Structure Config Config structure can contain arbitrary data relative to the configuration of the component (timeouts, parameters, etc.). Config type must be STRUCT. Config data class must be named in the following format {ComponentName}Config (e.g. AxoCylinderConfig) Config class must be accessible via GetConfig method that returns REF_TO {ComponentName}Config. The backing field of the Config property must be named Config (it must be public to allow access from higher level application) Config class can contain multiple nested and complex classes when it is necessary to organize better the information. Nested classes must be CLASS and must be named in the following format {ComponentName}Config{Specifier} where specifier is descriptive name of the nested information. Wherever possible the data must be initialized to default values (e.g., timeouts, speeds etc.). The default settings should not prevent the component from functioning unless there is a specific requirement to provide parameters relative to the component model or a particular hardware configuration (drive model, gearing ratio, etc.). Each data member of the Config structure must be documented in the code, with an example. Whenever possible, a link to more detailed documentation must also be provided in the in-code documentation. Method SetConfig should be implemented when it is expected an external provision of configuration at runtime. Status Status class can contain arbitrary data relative to the state of the component. Status type must be CLASS. Status data structure must be named in the following format {ComponentName}Status (e.g. AxoCylinderStatus) Status structure must be accessible via GetStatus method that returns RET_TO {ComponentName}Status. - The backing field of the Status must be named Status (it must be public to allow access from higher level application). Status class can contain multiple nested and complex classes when it is necessary to organize the information. Nested structures must be CLASSEs and must be named in the following format {ComponentName}State{Specifier} where specifier is descriptive name of the nested information. Each data member of the Status structure must be documented in the code, with an example. Whenever possible, a link to more detailed documentation must also be provided in the in-code documentation. Tasks Operations are run by tasks (AxoTask). Member variable of the task must have the following format {OperationName}Task. Each task must be exposed via a method in the following format {OperationName} that will return IAxoTaskStatus. Executing logic of a task is run from the Run method of components class. States States are properties or methods that retrieve information about arbitrary states that do not require multiple cycles to return the result (sensor's signal state). All state-related members must be placed into States folder of the component. Component requirements Each component must inherit from AXOpen.Core.AxoComponent, which is an abstract block that requires concrete implementation of following memebers: Restore() method that restores the component into intial state and ManualControl() method that provided additional logic for manual control. Restore() must contain logic that will bring the component's internal states into the initial state. Restore method does not mean getting the component into physical ground position/state; it serves purely the purpose of having the component ready for operations from the programatic perspective. ManualControl() method is required to be implemented. It can contain arbitrary logic that will be executed while the component is in a serviceable state. Each component must implement Run method that will provide cyclic execution of tasks, I/O update, data transformation for given component. Run method is not formally required by AxoComponent and it can take arguments necessary for the cylic update and execution. For variaous scenarions component can implement different Run methods taking advantage of method overload. Components naming conventions The components for particular components are placed into appropriate library. Library name reflects the name of the manufacturer and the class of the product. POUs that belongs to a specific component reflect the product name and products' version information. UNIT NAME PATTERN EXAMPLE (fully qualified name) Library (namespace) AXOpen.{Manufacturer}.[{Group}] AXOpen.ABB.Robotics CLASS v_{ModelVersion}.Axo{Model} AXOpen.ABB.Robotics.v_1_0_0.AxoOmnicore CLASS Config v_{ModelVersion}.Axo{Model}_Config AXOpen.ABB.Robotics.v_1_0_0.AxoOmnicore_Config CLASS Status v_{ModelVersion}.Axo{Model}_Status AXOpen.ABB.Robotics.v_1_0_0.AxoOmnicore_Status other v_{ModelVersion}.Axo{Model}_{DescriptiveName} AXOpen.ABB.Robotics.v_1_0_0.AxoOmnicore_Aux Testing requirements Each public and protected controller's method must be unit-tested using axunit. When reasonable use integration testing using prober library to test the interaction between controller and .NET twin. Documentation requirements Public classes Public and protected members (methods, fields) must have in code documentation. See Documentation comments for more details and docfx markup. Public methods than implement actions and initialization must have application examples (should be referenced from the actuall app code). PLC Application examples should be placed in app/src/Documentation/ of the library folder, the code should be compilable and functional to the extent it is possible with ommited hardware. NET twin examples should be places in app/ix-blazor and app/ix folder. For details how to reference code snippet see here."
  },
  "articles/index.html": {
    "href": "articles/index.html",
    "title": "Source repositories | System.Dynamic.ExpandoObject",
    "keywords": "This documentation is work in progress stay tuned for upcomming releases of AXOpen by following the project on GitHub. AXOpen is an open-source application framework project developed by a group of automation engineers. It is based on SIMATIC AX platfrom and AX# technology Source repositories Underlying technology of AXOpen AX# Sources of AXOpen framework AXOpen Note This project is under development. We periodically release versions that can be used for testing and in non-production environments. Disclaimer Important It is necessary to have a valid license for SIMATIC AX in order to use AX# and AXOpen! SIMATIC AX is currently in a limited sales release in selected European countries only. You will need to request access from the AX team which will check if your use case is suitable for the current state of the product. The first step to getting the approval is contacting your local SIEMENS sales representative or writing an email to simatic-ax@siemens.com. Getting started with application template"
  },
  "articles/localization/README.html": {
    "href": "articles/localization/README.html",
    "title": "Template localization | System.Dynamic.ExpandoObject",
    "keywords": "Template localization Localization is a useful feature of any application. It allows you to translate the application into different languages. This guide will show you how localization is achieved in our template Blazor application - templates.simple. Prerequisites Microsoft.Extensions.Localization NuGet package Localization in Blazor To make use of localization in Blazor, make sure that: Localization services are added in Program.cs: builder.Services.AddLocalization(); Localization middleware with supported languages is added in the correct order to the middleware pipeline in Program.cs: var supportedCultures = new[] { \"en-US\", \"sk-SK\", \"es-ES\"}; var localizationOptions = new RequestLocalizationOptions() .AddSupportedCultures(supportedCultures) .AddSupportedUICultures(supportedCultures); app.UseRequestLocalization(localizationOptions); In _Imports.razor the following @using directives are added: @using System.Globalization @using Microsoft.Extensions.Localization For more information on localization in Blazor visit Microsoft Docs. Adding support for a new language In order to add a new language support to the application, a resource file (.resx) needs to be created. Resource file are in the forefront of localization in .NET. They are used to store app data (in our case strings), that can be easily accessed and changed without recompiling the app. In our template application, resource files are located in the Resources folder. Create a new resource file for the language you want to add. The name of the file should be in the following format: ResourceName.culture.resx, where culture is the culture code of the language. E.g. ResourceName.de.resx would be a resource file for German language. If you want to make resource files easier to work with, check out ResXManager extension for Visual Studio. In _Imports.razor make sure that the @using directive for the newly created resource file is added and inject the IStringLocalizer service of the resource file. E.g.: @using axosimple.hmi.Resources @inject IStringLocalizer<ResourceName> Localizer Changing the language dynamically To change the language dynamically, add a new CultureInfo object to the supportedCultures array in the code section of Index.razor. E.g.: private CultureInfo[] supportedCultures = new[] { new CultureInfo(\"en-US\"), new CultureInfo(\"sk-SK\"), new CultureInfo(\"es-ES\"), new CultureInfo(\"de-DE\") // newly added language }; When selecting a language from the <select> menu in Index.razor, a cookie with selected language is created by ChangeCulture method of CultureController. Using localized strings To use localized strings, simply use Localizer service previously injected in _Imports.razor E.g.: <h1>@Localizer[\"Hello World!\"]</h1> If the string is not found in the resource file, the key is returned instead. If it is found, however, the localized string is returned. English: Slovak: Spanish:"
  },
  "articles/notes/APAX_PACAKGE_GENERAL.html": {
    "href": "articles/notes/APAX_PACAKGE_GENERAL.html",
    "title": "| System.Dynamic.ExpandoObject",
    "keywords": "APAX package registry Important APAX pacakges are now published experimentally This apax package's registry is hosted on github on how to authenticate to the registry see the documentation here and here. apax login --registry https://npm.pkg.github.com --username GH_USER_NAME --password PAT Add registry to your apax.yml file. registries: \"@ix-ax\": https://npm.pkg.github.com/ Note Please notice that all AXOpen packages are being released from a single repository and version numbers are aligned. You can use different versions that have major version number alligned should it be necessary, however we strongly recommend to use pacakge with the same version number, such packages are being built and tested together to enshure best experience."
  },
  "articles/notes/Assets_in_nuget_package.html": {
    "href": "articles/notes/Assets_in_nuget_package.html",
    "title": "Using Assets in nuget package | System.Dynamic.ExpandoObject",
    "keywords": "Using Assets in nuget package When working with static assets in a Blazor package project(bootstap icons, images, styles, ...), for proper function need to be reference like: _content/{PACKAGE ID}/{PATH AND FILE NAME}. For example: <img src=\"_content/AXOpen.Data.Blazor/bootstrap-icons-1.8.2/download.svg\" /> NOT only direct reference, as this approach may not function correctly when you're utilizing assets outside of the default project. <img src=\"/bootstrap-icons-1.8.2/download.svg\" /> For more information, refer Microsoft documentation: Microsoft docs"
  },
  "articles/notes/CYCLIC_UPDATE_NOTICE.html": {
    "href": "articles/notes/CYCLIC_UPDATE_NOTICE.html",
    "title": "| System.Dynamic.ExpandoObject",
    "keywords": "Important This component requires cyclic data updates, which are typically sourced from the I/O system. Before using the component, make sure you invoke the Run method. Additionally, it's crucial to ensure that the Run method is positioned within a call tree that operates cyclically. Failing to initiate the Run method or not guaranteeing its cyclic execution can lead to malfunctions and unpredictable component behavior. In extreme circumstances, this could cause erratic controller behavior, potentially leading to equipment damage."
  },
  "articles/notes/LIBRARYHEADER.html": {
    "href": "articles/notes/LIBRARYHEADER.html",
    "title": "| System.Dynamic.ExpandoObject",
    "keywords": "This library is an integral component of AXOpen. AXOpen is an application framework built on the foundations of SIMATIC-AX and AX# technologies. Utilizing the components described in this document might necessitate a foundational understanding of the AXOpen framework's concepts and methodologies. Additionally, leveraging some advanced features could require a basic familiarity with AX# technology. Additional Resources: AX# Official Documentation UI Rendering Guide Note This document's content is synchronized with the source code of this library. Please note that the images and illustrative visuals included may not mirror the exact appearance in your application. Note Should you identify errors, misleading content, or gaps in this documentation, kindly report the issue here. Alternatively, you're welcome to suggest edits directly by initiating a pull request in this repository."
  },
  "articles/notes/NUGET_PACAKGE_BLAZOR_GENERAL.html": {
    "href": "articles/notes/NUGET_PACAKGE_BLAZOR_GENERAL.html",
    "title": "| System.Dynamic.ExpandoObject",
    "keywords": "NuGet package feed Important NuGet pacakges are now published experimentally This nuget package's feed is hosted on github on how to authenticate to the feed see the documentation here. dotnet nuget add source --username GITHUBUSERNAME --password PAT --store-password-in-clear-text --name gh-packages-ix-ax \"https://nuget.pkg.github.com/ix-ax/index.json\" Replace GITHUBUSERNAME with your github name Replace PAT with your Personal Access Token (how to create your PAT) Note Please notice that all AXOpen packages are being released from a single repository and version numbers are aligned. You can use different versions that have major version number alligned should it be necessary, however we strongly recommend to use pacakge with the same version number, such packages are being built and tested together to enshure best experience."
  },
  "articles/notes/NUGET_PACAKGE_GENERAL.html": {
    "href": "articles/notes/NUGET_PACAKGE_GENERAL.html",
    "title": "| System.Dynamic.ExpandoObject",
    "keywords": "NuGet package feed Important NuGet pacakges are now published experimentally This nuget package's feed is hosted on github on how to authenticate to the feed see the documentation here. dotnet nuget add source --username GITHUBUSERNAME --password PAT --store-password-in-clear-text --name gh-packages-ix-ax \"https://nuget.pkg.github.com/ix-ax/index.json\" Replace GITHUBUSERNAME with your github name Replace PAT with your Personal Access Token (how to create your PAT) Note Please notice that all AXOpen packages are being released from a single repository and version numbers are aligned. You can use different versions that have major version number alligned should it be necessary, however we strongly recommend to use pacakge with the same version number, such packages are being built and tested together to enshure best experience."
  },
  "articles/notes/README.html": {
    "href": "articles/notes/README.html",
    "title": "| System.Dynamic.ExpandoObject",
    "keywords": ""
  },
  "articles/rendering/intro.html": {
    "href": "articles/rendering/intro.html",
    "title": "Automatic Rendering with AXOpen | System.Dynamic.ExpandoObject",
    "keywords": "Automatic Rendering with AXOpen AXOpen leverages AX# rendering to enable a variety of advanced features. This document provides foundational information regarding the presentation methods used within AXOpen. Renderable Content Control While presentation modes in AX# offer several options, AXOpen introduces additional presentation types: Presentation Type Description Command Allows interaction with a UI control, permitting modifications and controls of the component. Status Grants visibility of a UI control without the capability to modify or control the component. Examples: To enable manipulation of the DriveX component: <RenderableContentControl Context=\"@Entry.Plc.Station001.Components.DriveX\" Presentation=\"Command\"/> To view the status of the DriveX component without interaction: <RenderableContentControl Context=\"@Entry.Plc.Station001.Components.DriveX\" Presentation=\"Status\"/> To engage with visual components within the 'Components' structure for manual control: <RenderableContentControl Context=\"@Entry.Plc.Station001.Components\" Presentation=\"Command\"/> To observe the state of visual components within the 'Components' structure without manual interaction: <RenderableContentControl Context=\"@Entry.Plc.Station001.Components\" Presentation=\"Status\"/>"
  },
  "articles/security/INSTALLATION.html": {
    "href": "articles/security/INSTALLATION.html",
    "title": "Installation | System.Dynamic.ExpandoObject",
    "keywords": "Installation All necessary logic for security is located in AxOpen.Security library. 1. Install AxOpen.Security NuGet package or add reference to this project 2. Add reference to AxOpen.Security assembly. Go to App.razor and add AdditionalAssemblies as parameter of Router component. The following line must be added to Router component: AdditionalAssemblies=\"new[] { typeof(BlazorSecurity).Assembly}\"> Also, make sure, that Router component is wrapped inside CascadingAuthenticationState component. At the end, the Router component should look like this: <CascadingAuthenticationState> <Router AppAssembly=\"@typeof(App).Assembly\" AdditionalAssemblies=\"new[] { typeof(BlazorSecurity).Assembly}\"> ... </Router> </CascadingAuthenticationState> 3. Configure Ax Blazor security services in dependency injection container of Blazor application located in Program.cs file. To correctly configure security services you must: configure repository create in-app roles configure AxBlazorSecurity in DI container Configuring repository The security requires 2 instances of repositories: for persistence of user data for persistence of groups of roles Within AXOpen 4 different types of repositories are available: InMemory Json MongoDB RavenDB For example, the Json repository can be configured as follows: static (IRepository<User>, IRepository<Group>) SetUpJSon(string path = \"..\\\\..\\\\..\\\\..\\\\..\\\\JSONREPOS\\\\\") { var executingAssemblyFile = new FileInfo(Assembly.GetExecutingAssembly().Location); var repositoryDirectory = Path.GetFullPath($\"{executingAssemblyFile.Directory}{path}\"); if (!Directory.Exists(repositoryDirectory)) { Directory.CreateDirectory(repositoryDirectory); } IRepository<User> userRepo = new JsonRepository<User>(new JsonRepositorySettings<User>(Path.Combine(repositoryDirectory, \"Users\"))); IRepository<Group> groupRepo = new JsonRepository<Group>(new JsonRepositorySettings<Group>(Path.Combine(repositoryDirectory, \"Groups\"))); return (userRepo, groupRepo); } Add SetUpJson method in Program.cs file. Creating in-app roles In your Blazor application create new static class Roles and specify the roles, that will be used in your application. You can add as many roles as you want. The Roles class can be defined like this: public static class Roles { public static List<Role> CreateRoles() { var roles = new List<Role> { new Role(process_settings_access), new Role(process_traceability_access), }; return roles; } public const string process_settings_access = nameof(process_settings_access); public const string process_traceability_access = nameof(process_traceability_access); } Configure AxBlazorSecurity services Finally, the AxBlazorSecurity security can be configured in DI container of Blazor application. Go to Program.cs file and add following line to builder: builder.Services.ConfigureAxBlazorSecurity(SetUpJSon(), Roles.CreateRoles()); The first parameter is set up repository and the second parameter are created roles. 4. Add security views to application Go to MainLayout.razor located in Shared folder and add LoginDisplay view inside top bar. <main> <div class=\"top-row px-4 auth\"> <AxOpen.Security.Views.LoginDisplay/> </div> <article class=\"content px-4\"> @Body </article> </main> Within Pages of the Blazor application, create new Security.razor page and add there SecurityManagementView. @page \"/Security\" <h3>Security</h3> <AxOpen.Security.Views.SecurityManagementView /> Add you security view inside the navigation menu in NavMenu.razor: <div class=\"nav-item px-3\"> <NavLink class=\"nav-link\" href=\"security\"> <span class=\"oi oi-list-rich\" aria-hidden=\"true\"></span> Security </NavLink> </div> Default login If everything done correctly, now security should be available in Blazor application. Now it should be possible to log-in with default user. The default user is created on application startup with following credentials: Username: admin Password: admin The user has default Administrator role and is in default AdminGroup."
  },
  "articles/security/README.html": {
    "href": "articles/security/README.html",
    "title": "AXOpen.Security | System.Dynamic.ExpandoObject",
    "keywords": "AXOpen.Security AxOpen.Security is library which provides authentication and authorization in Blazor AX applications. It is based on a default solution for authentication in Blazor, which is extended by using implemented repositories within Ax.Open.Data. As a result, multiple storage providers for security can be used. Installation The security library is available in form of NuGet package. Detailed installation instructions of security into empty Blazor project is located in security installation article. Basic concepts Each user is limited to having just a single group. A group is formed by a collection of multiple roles. When a user is assigned to a group, they possess all the roles associated with that group. It is possible for a single role to be assigned to multiple groups. Security views SecurityManagementView component serves for managing users. It is available only if user is logged in with administrator rights. When user is logged in with administrator rights, it is possible to modify all available users and groups. Administrator can delete users or change group. User management The SecurityManagementView component includes a tab dedicated to user management. Within this tab, users can be updated or newly created. When a user is selected, a card is displayed showing the current data for that user, there is an option to update or delete user. Group Management The SecurityManagementView component includes a tab for group management. Within this tab, groups can be updated or newly created. When a group is selected, a card is displayed showing the assigned roles for that group. Users have the option assigned or unassign roles or delete group. Account Management In account management view is possible to change the your user data, like email address or password. User Create In user create view is possible to new user. AuthorizeView and AuthenticationContext There are two ways how to work with authentication and authorization. Use of the AuthorizeView component in Blazor component Use of the AuthenticationStateProvider within a C# class Use of AuthorizeView The AuthorizeView is used to create a secure views within a Blazor application. It contains two child components Authorized and NotAuthorized, which serves for visualizing view in a corresponded views. In addition, the parameter Roles can be used to specified roles, based on which the authorized view is shown. The AuthorizeView contain base class named context, which is used to access identity of currently logged in user. The example of usage of AuthorizeView within a Blazor component is shown below: <AuthorizeView Roles=\"Administrator\"> <Authorized> <h4>You have role Administrator.</h4> <h4>Your name is: @context.User.Identity.Name</h4> </Authorized> <NotAuthorized> <h4>You dont have role Administrator.</h4> </NotAuthorized> </AuthorizeView> If the user is authenticated and is also authorized with the Administrator role, the authorized view is shown. Otherwise, non-authorized view is displayed. Also, there is a possibility to call method from RoleGroupManager called GetRoles, which takes as parameter name of the group and returns corresponded roles. RoleGroupManager is accessible from IRepositoryService. @inject IRepositoryService rs <AuthorizeView Roles=\"@rs.RoleGroupManager.GetRoles(\"AdminGroup\")\"> Use of AuthenticationStateProvider The AuthenticationStateProvider serves for accessing current logged in user and his claims. This provider can be injected to any C# class (either from constructor injection (in ViewModel) or with Inject attribute in Blazor component), where user need to work with authentication context. The authentication context of current user can be accessed in following way: @page \"/mypage\" @inject AuthenticationStateProvider _asp @code { protected override async Task OnInitializedAsync() { var context = await _asp.GetAuthenticationStateAsync(); var isAuth = context.User.Identity.IsAuthenticated; if (isAuth) { Console.Writeline(\"I'm authenticated\"); } } }"
  },
  "articles/themes/README.html": {
    "href": "articles/themes/README.html",
    "title": "AXOpen.Themes | System.Dynamic.ExpandoObject",
    "keywords": "AXOpen.Themes There is a way to change the look of the application by creating and using modified bootstrap files. 1. Modifying bootstrap Each theme is a separate bootstrap file. To get the desired color theme, bootstrap's variables need to be modified before compilation. Example of a file with modified variables: $primary: #0a6105 !default; $secondary: #13c70e !default; $success: #0e9e0a !default; $info: #f7f06d !default; $warning: #ff8a00 !default; $danger: #d33e43 !default; $brand: #f7f06d; $light: #f0f1ee !default; $dark: #021301 !default; $theme-colors: () !default; $theme-colors: map-merge( ( \"primary\": $primary, \"secondary\": $secondary, \"success\": $success, \"info\": $info, \"warning\": $warning, \"danger\": $danger, \"error\": $danger, \"brand\": $brand, \"add\": $primary, \"new\": $info, \"edit\": $primary, \"delete\": $danger, \"nav\": $secondary, \"change\": $warning, \"save\": $success, \"light\": $light, \"dark\": $dark, ), $theme-colors ); Besides changing the colors, the following css rules need to be added pre compilation for optimal look: /* forms */ /* Reduce the default form-group bottom margin*/ .form-group { margin-bottom: 0.25rem; } .form-control:focus { border-color: $warning; box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba($warning, 0.6); outline: 0 !important; } .form-select:focus { border-color: $warning; box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba($warning, 0.6); outline: 0 !important; } .valid.modified:not([type=\"checkbox\"]) { outline: 1px solid #26b050; } .invalid { outline: 1px solid red; } .validation-message { color: red; } /* set new margins and padding for small alerts*/ div.alert-sm .alert { padding: 0.25rem 1.25rem; margin-bottom: 0rem; } .nav-tabs .nav-link.active { color: $warning; } .content { padding-top: 1.1rem; } /* navigation */ .nav-menu .nav-link.active { background-color: $primary; color: $light; } .nav-menu .nav-link:hover { background-color: rgba($primary, 0.7); color: $light; } @media (min-width: 641px) { .nav-menu { border-left: 1px solid $primary; } } 2. Compiling bootstrap Compile these files in the following order using the sass compiler: @import \"Bootstrap/scss/_functions.scss\"; @import \"Bootstrap/custom/_variables\"; // modified variables @import \"Bootstrap/scss/bootstrap\"; @import \"Bootstrap/scss/_utilities\"; @import \"Bootstrap/scss/bootstrap-utilities.scss\"; @import \"Bootstrap/custom/_overrides\"; // modified css rules 3. Using a theme The custom compiled bootstrap files are stored in the wwwroot\\css\\custom folder. Add your custom compiled bootstrap to this folder. In order to be able to switch to your newly created theme, you need to add the name of the theme to the supportedThemes array in the Index.razor file: private string[] supportedThemes = new[] { \"New Theme\", \"Bootstrap\", }; Upon selecting a new theme, redirection to the theme uri is triggered: NavigationManager.NavigateTo($\"/theme?theme={theme}\", true); Upon navigating to the theme uri, the ChangeTheme method of the ThemeController (an API controller) is called: public async Task<ActionResult> ChangeTheme([FromQuery] string theme) { Response.Cookies.Append(\"theme\", theme); return Redirect(\"/\"); } This method creates a cookie with the name theme and the value of the selected theme. The cookie is then used to determine which stylesheet to use. The cookie expires after the browser session ends. In the _Host.cshtml file, the css file of the selected theme is loaded based on the value of the theme cookie: @switch (Request.Cookies[\"theme\"]) { case \"New Theme\": <link rel=\"stylesheet\" href=\"~/css/custom/new_theme.css\" /> break; case \"Bootstrap\": <link rel=\"stylesheet\" href=\"~/css/custom/bootstrap_default_custom.css\" /> break; default: <link rel=\"stylesheet\" href=\"~/css/custom/bootstrap_default_custom.css\" /> break; } Make sure that the string name of your theme in supportedThemes array in Index.razor file matches with the correct case string in the switch statement in the _Host.cshtml file. In case of an unknown theme name from the theme cookie or when the app is opened for the first time (the cookie has not been created yet), the default bootstrap theme is loaded. Theme changes in action:"
  },
  "clientchat/src/README.html": {
    "href": "clientchat/src/README.html",
    "title": "Client Identification | System.Dynamic.ExpandoObject",
    "keywords": "Client Identification Thanks to having AXOpen.Security implemented, we are able to identify users using our application. The same user can be logged in on multiple clients at the same time and it is desirable to be able to have an account of which clients belong to which user. This article explains how this can be achieved and how we can send messages to specific clients in Blazor. This app is built on SignalR, an open-source library that simplifies adding real-time web functionality to apps. Prerequisities: Microsoft.AspNetCore.SignalR.Client NuGet package SignalR hub Creating a hub To create a new SignalR hub, we need to create a class that inherits from the Hub class located in the Microsoft.AspNetCore.SignalR namespace. It is responsible for handling messages from clients and connection management. A simple demo of a SignalR hub can be found in ConnectionHub.cs. The ConnectionHub class has a number of methods that can be overridden and methods specified by the user. E.g.: OnConnectedAsync() - called when a new client connects to the hub OnDisconnectedAsync() - called when a client disconnects from the hub SendMessage() - custom method that can be called by the client ConnectionHub.cs using Microsoft.AspNetCore.SignalR; using Microsoft.IdentityModel.Tokens; namespace clientchat.ClientIdentification; public class ConnectionHub : Hub { private readonly static ConnectionMapping<string> _connections = new(); public async override Task OnConnectedAsync() { string name = Context.User.Identity.Name; if (name != null) { _connections.Add(name, Context.ConnectionId); } await base.OnConnectedAsync(); } public async override Task OnDisconnectedAsync(Exception? exception) { string name = Context.User.Identity.Name; if (name != null) { _connections.Remove(name, Context.ConnectionId); } await base.OnDisconnectedAsync(exception); } public async Task SendMessage(string receiver, string message) { var sender = Context.User.Identity.Name ?? \"Anonymous\"; var receiverConnections = _connections.GetConnections(receiver); if (receiverConnections.IsNullOrEmpty()) { await Clients.All.SendAsync(\"ReceiveMessage\", sender, message); } else { await Clients.Clients(receiverConnections.ToList()).SendAsync(\"ReceiveMessage\", sender, message); } } public async Task RequestConnectionsCounts() { await Clients.Caller.SendAsync(\"ReceiveConnectionsCounts\", _connections.GetConnectionsCounts()); } public async Task RequestUserConnections(string user) { await Clients.Caller.SendAsync(\"ReceiveUserConnections\", _connections.GetConnections(user)); } } Hub set up in Blazor To use the hub across all components in Blazor we need to create a service that will provide the Hub connection. See HubConnectionProvider.cs. The service is registered in the Program.cs file in the service configuration: HubConnectionProvider.cs using Microsoft.AspNetCore.SignalR.Client; namespace clientchat.ClientIdentification; public class HubConnectionProvider { public HubConnection HubConnection { get; set; } } builder.Services.AddSignalR(); builder.Services.AddScoped<HubConnectionProvider>(); Also in Program.cs we need to map the hub to a specific endpoint in the middleware pipeline: app.MapHub<ConnectionHub>(\"/connectionHub\"); In App.razor we can then inject the HubConnectionProvider service and use it to create a connection to the hub: @inject HubConnectionProvider HubConnectionProvider @code { protected override async Task OnInitializedAsync() { HubConnectionProvider.HubConnection = new HubConnectionBuilder() .WithUrl(NavigationManager.ToAbsoluteUri(\"/connectionHub\")) .Build(); await HubConnectionProvider.HubConnection.StartAsync(); } } Communication with the hub To use the hub we need to first inject the HubConnectionProvider service into the component we want to use the hub in. To listen for messages from the hub we need to register a handler (a method that will be called when a message is received) using the On method. In Index.razor.cs e.g.: HubConnectionProvider.HubConnection.On<string, string>(\"ReceiveMessage\", (sender, message) => { // do something }); Pages/Index.razor @page \"/\" <div class=\"d-flex flex-column align-items-center\"> <div class=\"w-50 overflow-hidden\" style=\"margin-bottom: 100px;\"> @foreach (var message in messages) { <div class=\"d-flex flex-column\"> <small class=\"text-dark fw-lighter text-@message.ResolveMessageAlignment()\">@message.Sender</small> <div class=\"alert alert-@message.ResolveMessageColor() text-dark mb-2 p-2\">@message.Text</div> </div> } </div> <div class=\"position-fixed bottom-0 mb-2\"> <div class=\"d-flex align-items-center w-75 ms-auto p-1\"> <label class=\"text-nowrap me-1\"> To user: </label> <input class=\"form-control me-1\" @bind=\"toUserInput\" placeholder=\"User\" /> <button class=\"btn btn-warning\" @onclick=\"ShowConnected\" data-bs-toggle=\"modal\" data-bs-target=\"#usersModal\" disabled=\"@(!IsConnected)\">Clients</button> </div> <div class=\"d-flex p-1\"> <input class=\"form-control me-1\" @bind=\"messageInput\" placeholder=\"Message\" /> <button class=\"btn btn-primary\" @onclick=\"Send\" disabled=\"@(!IsConnected)\">Send</button> </div> </div> </div> <div class=\"modal fade\" id=\"usersModal\" tabindex=\"-1\" aria-labelledby=\"usersModalLabel\" aria-hidden=\"true\"> <div class=\"modal-dialog\"> <div class=\"modal-content\"> <div class=\"modal-header\"> <h5 class=\"modal-title\" id=\"exampleModalLabel\">Logged in users</h5> <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button> </div> <div class=\"modal-body\"> @if (connectionsCounts.Count == 0) { <p class=\"text-center\">No logged in users</p> } else { <table class=\"table table-striped table-hover\"> <thead> <tr> <th scope=\"col\">Username</th> <th scope=\"col\">Number of connections</th> <th scope=\"col\"></th> </tr> </thead> <tbody> @foreach (var user in connectionsCounts) { <tr> <td scope=\"row\">@user.Key</td> <td class=\"text-center\">@user.Value</td> <td> <button class=\"btn btn-primary\" @onclick=\"() => ShowConnections(user.Key)\" data-bs-target=\"#connectionsModal\" data-bs-toggle=\"modal\"> Connections </button> </td> </tr> } </tbody> </table> } </div> </div> </div> </div> <div class=\"modal fade\" id=\"connectionsModal\" aria-hidden=\"true\" aria-labelledby=\"connectionsModal\" tabindex=\"-1\"> <div class=\"modal-dialog\"> <div class=\"modal-content\"> <div class=\"modal-header\"> <h1 class=\"modal-title fs-5\" id=\"exampleModalToggleLabel2\">@userToShowConnections's connections:</h1> <button type=\"button\" class=\"btn-close\" data-bs-target=\"#usersModal\" data-bs-toggle=\"modal\" aria-label=\"Close\"></button> </div> <div class=\"modal-body\"> @if (usersConnections.Count == 0) { <p class=\"text-center\">No connections</p> } else { <ul class=\"list-unstyled\"> @foreach (var connection in usersConnections) { <li>@connection</li> } </ul> } </div> </div> </div> </div> This will register a handler that will be called when a message with the name ReceiveMessage is received. The handler will be called with two parameters - sender and message. The types of the parameters need to be specified in the On method. This ReceiveMessage is called from the ConnectionHub in a SendMessage method: public async Task SendMessage(string receiver, string message) { ... // sends message to all clients regardless of the receiver await Clients.All.SendAsync(\"ReceiveMessage\", sender, message); } To trigger the SendMessage method from the client we can use the InvokeAsync method in a code behind of a component: await HubConnectionProvider.HubConnection.SendAsync(\"SendMessage\", receiver, message); Sequence diagram of the communication between the clients and the hub: sequenceDiagram participant Client 1 participant Client 2 participant Client 3 participant Hub loop Communication Client 3->>Hub: HubConnection.SendAsync(\"SendMessage\", receiver, message) Note over Hub: SendMessage(string receiver, string message)<br/>is called Hub-->>Client 1: Clients.All.SendAsync(\"ReceiveMessage\", sender, message); Hub-->>Client 2: Clients.All.SendAsync(\"ReceiveMessage\", sender, message); Hub-->>Client 3: Clients.All.SendAsync(\"ReceiveMessage\", sender, message); Note over Client 2: HubConnection.On(\"ReceiveMessage\")<br/>listener is triggered on all clients end How to identify clients To be able to access currently logged in user in ConnectionHub we need to obtain the .AspNetCore.Identity.Application cookie used for identification. This is done in the Host.cshtml file: var cookie = HttpContext.Request.Cookies[\".AspNetCore.Identity.Application\"]; The cookie is then passed to the App.razor component as a parameter. In the code behind of the App.razor component, a cookie object is created and added to the HubConnection as a cookie container under options.Cookies: var cookieContainer = new CookieContainer(); var cookie = new Cookie() { Name = \".AspNetCore.Identity.Application\", Domain = NavigationManager.ToAbsoluteUri(\"/\").Host, Value = IdentityCookie }; cookieContainer.Add(cookie); HubConnectionProvider.HubConnection = new HubConnectionBuilder() .WithUrl(NavigationManager.ToAbsoluteUri(\"/connectionHub\"), options => { options.Cookies = cookieContainer; }) .Build(); By providing the cookie to the HubConnection we are now able to access the currently logged in user in the ConnectionHub: string name = Context.User.Identity.Name; // name of the currently logged in user Mapping client connection ids to user names To by able to send messages to only those clients on which the specific user we want to send the message to is logged in, we need to map the client connection ids to the client's logged in user. The ConnectionHub contains a static variable _connections of type ConnectionMapping<string> that maps the client connection ids to the user names. The ConnectionMapping class is a simple dictionary that allows multiple values to be mapped to a single key. The ConnectionMapping class is defined in [ConnectionMapping.cs]. ConnectionMapping.cs using System.Collections.Generic; using System.Linq; namespace clientchat.ClientIdentification; /// <summary> /// Class that maps user names to their connection ids. Connection ids are sotored in a HashSet as value in a Dictionary /// with user name as the key. /// </summary> /// <typeparam name=\"T\"> /// Type of user name. /// </typeparam> public class ConnectionMapping<T> { private readonly Dictionary<T, HashSet<string>> _connections = new Dictionary<T, HashSet<string>>(); /// <summary> /// Returns number of users names in the mapping. /// </summary> public int Count { get { return _connections.Count; } } /// <summary> /// Adds a connection id to a set of connection ids for a user name. /// </summary> /// <param name=\"key\"></param> /// <param name=\"connectionId\"></param> public void Add(T key, string connectionId) { if (key == null) { return; } lock (_connections) { HashSet<string>? connections; if (!_connections.TryGetValue(key, out connections)) { connections = new HashSet<string>(); _connections.Add(key, connections); } lock (connections) { connections.Add(connectionId); } } } public Dictionary<T, int> GetConnectionsCounts() { Dictionary<T, int> connectionsCounts = new(); foreach (var key in _connections.Keys) { connectionsCounts.Add(key, _connections[key].Count); } return connectionsCounts; } /// <summary> /// Returns all connections for a given user name. /// </summary> /// <param name=\"key\"></param> /// <returns> /// Set of connection ids for given user name. /// <code>Enumerable.Empty<string>()</code> if the <c>key</c> is null or it is not found. /// </returns> public IEnumerable<string> GetConnections(T key) { if (key == null) { return Enumerable.Empty<string>(); } HashSet<string>? connections; if (_connections.TryGetValue(key, out connections)) { return connections; } else { return Enumerable.Empty<string>(); } } /// <summary> /// Removes a connection id from a set of connection ids associated with a user name. /// </summary> /// <param name=\"key\"></param> /// <param name=\"connectionId\"></param> public void Remove(T key, string connectionId) { if (key == null) { return; } lock (_connections) { HashSet<string>? connections; if (!_connections.TryGetValue(key, out connections)) { return; } lock (connections) { connections.Remove(connectionId); if (connections.Count == 0) { _connections.Remove(key); } } } } } When a new client connects to the hub, the OnConnectedAsync() method is called. Each connection has a unique id which we can add to the _connections dictionary along with the user name of the currently logged in user: string name = Context.User.Identity.Name; if (name != null) { _connections.Add(name, Context.ConnectionId); } As it is implemented currently, when a user on a client is not logged in, the connection is not added to the mapping. When a client disconnects from the hub, the OnDisconnectedAsync() method is called. We can then remove the connection id from the _connections dictionary: string name = Context.User.Identity.Name; if (name != null) { _connections.Remove(name, Context.ConnectionId); } Sending messages to specific clients To send a message to those clients on which the specific user is logged in, we need to obtain the connection ids of those clients. This is done by getting the values from the _connections dictionary using the user name as a key: var receiverConnections = _connections.GetConnections(receiver); if (!receiverConnections.IsNullOrEmpty()) { await Clients.Clients(receiverConnections.ToList()).SendAsync(\"ReceiveMessage\", name, message); } To send a message to all clients, we can use the Clients.All.SendAsync() method. if we want to send a message only to the caller (the client that called a SendAsync to the hub), we can use the Clients.Caller.SendAsync() method."
  },
  "clientchat/src/index.html": {
    "href": "clientchat/src/index.html",
    "title": "Client Identification | System.Dynamic.ExpandoObject",
    "keywords": "Client Identification Thanks to having AXOpen.Security implemented, we are able to identify users using our application. The same user can be logged in on multiple clients at the same time and it is desirable to be able to have an account of which clients belong to which user. This article explains how this can be achieved and how we can send messages to specific clients in Blazor. This app is built on SignalR, an open-source library that simplifies adding real-time web functionality to apps. Prerequisities: Microsoft.AspNetCore.SignalR.Client NuGet package SignalR hub Creating a hub To create a new SignalR hub, we need to create a class that inherits from the Hub class located in the Microsoft.AspNetCore.SignalR namespace. It is responsible for handling messages from clients and connection management. A simple demo of a SignalR hub can be found in ConnectionHub.cs. The ConnectionHub class has a number of methods that can be overridden and methods specified by the user. E.g.: OnConnectedAsync() - called when a new client connects to the hub OnDisconnectedAsync() - called when a client disconnects from the hub SendMessage() - custom method that can be called by the client ConnectionHub.cs using Microsoft.AspNetCore.SignalR; using Microsoft.IdentityModel.Tokens; namespace clientchat.ClientIdentification; public class ConnectionHub : Hub { private readonly static ConnectionMapping<string> _connections = new(); public async override Task OnConnectedAsync() { string name = Context.User.Identity.Name; if (name != null) { _connections.Add(name, Context.ConnectionId); } await base.OnConnectedAsync(); } public async override Task OnDisconnectedAsync(Exception? exception) { string name = Context.User.Identity.Name; if (name != null) { _connections.Remove(name, Context.ConnectionId); } await base.OnDisconnectedAsync(exception); } public async Task SendMessage(string receiver, string message) { var sender = Context.User.Identity.Name ?? \"Anonymous\"; var receiverConnections = _connections.GetConnections(receiver); if (receiverConnections.IsNullOrEmpty()) { await Clients.All.SendAsync(\"ReceiveMessage\", sender, message); } else { await Clients.Clients(receiverConnections.ToList()).SendAsync(\"ReceiveMessage\", sender, message); } } public async Task RequestConnectionsCounts() { await Clients.Caller.SendAsync(\"ReceiveConnectionsCounts\", _connections.GetConnectionsCounts()); } public async Task RequestUserConnections(string user) { await Clients.Caller.SendAsync(\"ReceiveUserConnections\", _connections.GetConnections(user)); } } Hub set up in Blazor To use the hub across all components in Blazor we need to create a service that will provide the Hub connection. See HubConnectionProvider.cs. The service is registered in the Program.cs file in the service configuration: HubConnectionProvider.cs using Microsoft.AspNetCore.SignalR.Client; namespace clientchat.ClientIdentification; public class HubConnectionProvider { public HubConnection HubConnection { get; set; } } builder.Services.AddSignalR(); builder.Services.AddScoped<HubConnectionProvider>(); Also in Program.cs we need to map the hub to a specific endpoint in the middleware pipeline: app.MapHub<ConnectionHub>(\"/connectionHub\"); In App.razor we can then inject the HubConnectionProvider service and use it to create a connection to the hub: @inject HubConnectionProvider HubConnectionProvider @code { protected override async Task OnInitializedAsync() { HubConnectionProvider.HubConnection = new HubConnectionBuilder() .WithUrl(NavigationManager.ToAbsoluteUri(\"/connectionHub\")) .Build(); await HubConnectionProvider.HubConnection.StartAsync(); } } Communication with the hub To use the hub we need to first inject the HubConnectionProvider service into the component we want to use the hub in. To listen for messages from the hub we need to register a handler (a method that will be called when a message is received) using the On method. In Index.razor.cs e.g.: HubConnectionProvider.HubConnection.On<string, string>(\"ReceiveMessage\", (sender, message) => { // do something }); Pages/Index.razor @page \"/\" <div class=\"d-flex flex-column align-items-center\"> <div class=\"w-50 overflow-hidden\" style=\"margin-bottom: 100px;\"> @foreach (var message in messages) { <div class=\"d-flex flex-column\"> <small class=\"text-dark fw-lighter text-@message.ResolveMessageAlignment()\">@message.Sender</small> <div class=\"alert alert-@message.ResolveMessageColor() text-dark mb-2 p-2\">@message.Text</div> </div> } </div> <div class=\"position-fixed bottom-0 mb-2\"> <div class=\"d-flex align-items-center w-75 ms-auto p-1\"> <label class=\"text-nowrap me-1\"> To user: </label> <input class=\"form-control me-1\" @bind=\"toUserInput\" placeholder=\"User\" /> <button class=\"btn btn-warning\" @onclick=\"ShowConnected\" data-bs-toggle=\"modal\" data-bs-target=\"#usersModal\" disabled=\"@(!IsConnected)\">Clients</button> </div> <div class=\"d-flex p-1\"> <input class=\"form-control me-1\" @bind=\"messageInput\" placeholder=\"Message\" /> <button class=\"btn btn-primary\" @onclick=\"Send\" disabled=\"@(!IsConnected)\">Send</button> </div> </div> </div> <div class=\"modal fade\" id=\"usersModal\" tabindex=\"-1\" aria-labelledby=\"usersModalLabel\" aria-hidden=\"true\"> <div class=\"modal-dialog\"> <div class=\"modal-content\"> <div class=\"modal-header\"> <h5 class=\"modal-title\" id=\"exampleModalLabel\">Logged in users</h5> <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button> </div> <div class=\"modal-body\"> @if (connectionsCounts.Count == 0) { <p class=\"text-center\">No logged in users</p> } else { <table class=\"table table-striped table-hover\"> <thead> <tr> <th scope=\"col\">Username</th> <th scope=\"col\">Number of connections</th> <th scope=\"col\"></th> </tr> </thead> <tbody> @foreach (var user in connectionsCounts) { <tr> <td scope=\"row\">@user.Key</td> <td class=\"text-center\">@user.Value</td> <td> <button class=\"btn btn-primary\" @onclick=\"() => ShowConnections(user.Key)\" data-bs-target=\"#connectionsModal\" data-bs-toggle=\"modal\"> Connections </button> </td> </tr> } </tbody> </table> } </div> </div> </div> </div> <div class=\"modal fade\" id=\"connectionsModal\" aria-hidden=\"true\" aria-labelledby=\"connectionsModal\" tabindex=\"-1\"> <div class=\"modal-dialog\"> <div class=\"modal-content\"> <div class=\"modal-header\"> <h1 class=\"modal-title fs-5\" id=\"exampleModalToggleLabel2\">@userToShowConnections's connections:</h1> <button type=\"button\" class=\"btn-close\" data-bs-target=\"#usersModal\" data-bs-toggle=\"modal\" aria-label=\"Close\"></button> </div> <div class=\"modal-body\"> @if (usersConnections.Count == 0) { <p class=\"text-center\">No connections</p> } else { <ul class=\"list-unstyled\"> @foreach (var connection in usersConnections) { <li>@connection</li> } </ul> } </div> </div> </div> </div> This will register a handler that will be called when a message with the name ReceiveMessage is received. The handler will be called with two parameters - sender and message. The types of the parameters need to be specified in the On method. This ReceiveMessage is called from the ConnectionHub in a SendMessage method: public async Task SendMessage(string receiver, string message) { ... // sends message to all clients regardless of the receiver await Clients.All.SendAsync(\"ReceiveMessage\", sender, message); } To trigger the SendMessage method from the client we can use the InvokeAsync method in a code behind of a component: await HubConnectionProvider.HubConnection.SendAsync(\"SendMessage\", receiver, message); Sequence diagram of the communication between the clients and the hub: sequenceDiagram participant Client 1 participant Client 2 participant Client 3 participant Hub loop Communication Client 3->>Hub: HubConnection.SendAsync(\"SendMessage\", receiver, message) Note over Hub: SendMessage(string receiver, string message)<br/>is called Hub-->>Client 1: Clients.All.SendAsync(\"ReceiveMessage\", sender, message); Hub-->>Client 2: Clients.All.SendAsync(\"ReceiveMessage\", sender, message); Hub-->>Client 3: Clients.All.SendAsync(\"ReceiveMessage\", sender, message); Note over Client 2: HubConnection.On(\"ReceiveMessage\")<br/>listener is triggered on all clients end How to identify clients To be able to access currently logged in user in ConnectionHub we need to obtain the .AspNetCore.Identity.Application cookie used for identification. This is done in the Host.cshtml file: var cookie = HttpContext.Request.Cookies[\".AspNetCore.Identity.Application\"]; The cookie is then passed to the App.razor component as a parameter. In the code behind of the App.razor component, a cookie object is created and added to the HubConnection as a cookie container under options.Cookies: var cookieContainer = new CookieContainer(); var cookie = new Cookie() { Name = \".AspNetCore.Identity.Application\", Domain = NavigationManager.ToAbsoluteUri(\"/\").Host, Value = IdentityCookie }; cookieContainer.Add(cookie); HubConnectionProvider.HubConnection = new HubConnectionBuilder() .WithUrl(NavigationManager.ToAbsoluteUri(\"/connectionHub\"), options => { options.Cookies = cookieContainer; }) .Build(); By providing the cookie to the HubConnection we are now able to access the currently logged in user in the ConnectionHub: string name = Context.User.Identity.Name; // name of the currently logged in user Mapping client connection ids to user names To by able to send messages to only those clients on which the specific user we want to send the message to is logged in, we need to map the client connection ids to the client's logged in user. The ConnectionHub contains a static variable _connections of type ConnectionMapping<string> that maps the client connection ids to the user names. The ConnectionMapping class is a simple dictionary that allows multiple values to be mapped to a single key. The ConnectionMapping class is defined in [ConnectionMapping.cs]. ConnectionMapping.cs using System.Collections.Generic; using System.Linq; namespace clientchat.ClientIdentification; /// <summary> /// Class that maps user names to their connection ids. Connection ids are sotored in a HashSet as value in a Dictionary /// with user name as the key. /// </summary> /// <typeparam name=\"T\"> /// Type of user name. /// </typeparam> public class ConnectionMapping<T> { private readonly Dictionary<T, HashSet<string>> _connections = new Dictionary<T, HashSet<string>>(); /// <summary> /// Returns number of users names in the mapping. /// </summary> public int Count { get { return _connections.Count; } } /// <summary> /// Adds a connection id to a set of connection ids for a user name. /// </summary> /// <param name=\"key\"></param> /// <param name=\"connectionId\"></param> public void Add(T key, string connectionId) { if (key == null) { return; } lock (_connections) { HashSet<string>? connections; if (!_connections.TryGetValue(key, out connections)) { connections = new HashSet<string>(); _connections.Add(key, connections); } lock (connections) { connections.Add(connectionId); } } } public Dictionary<T, int> GetConnectionsCounts() { Dictionary<T, int> connectionsCounts = new(); foreach (var key in _connections.Keys) { connectionsCounts.Add(key, _connections[key].Count); } return connectionsCounts; } /// <summary> /// Returns all connections for a given user name. /// </summary> /// <param name=\"key\"></param> /// <returns> /// Set of connection ids for given user name. /// <code>Enumerable.Empty<string>()</code> if the <c>key</c> is null or it is not found. /// </returns> public IEnumerable<string> GetConnections(T key) { if (key == null) { return Enumerable.Empty<string>(); } HashSet<string>? connections; if (_connections.TryGetValue(key, out connections)) { return connections; } else { return Enumerable.Empty<string>(); } } /// <summary> /// Removes a connection id from a set of connection ids associated with a user name. /// </summary> /// <param name=\"key\"></param> /// <param name=\"connectionId\"></param> public void Remove(T key, string connectionId) { if (key == null) { return; } lock (_connections) { HashSet<string>? connections; if (!_connections.TryGetValue(key, out connections)) { return; } lock (connections) { connections.Remove(connectionId); if (connections.Count == 0) { _connections.Remove(key); } } } } } When a new client connects to the hub, the OnConnectedAsync() method is called. Each connection has a unique id which we can add to the _connections dictionary along with the user name of the currently logged in user: string name = Context.User.Identity.Name; if (name != null) { _connections.Add(name, Context.ConnectionId); } As it is implemented currently, when a user on a client is not logged in, the connection is not added to the mapping. When a client disconnects from the hub, the OnDisconnectedAsync() method is called. We can then remove the connection id from the _connections dictionary: string name = Context.User.Identity.Name; if (name != null) { _connections.Remove(name, Context.ConnectionId); } Sending messages to specific clients To send a message to those clients on which the specific user is logged in, we need to obtain the connection ids of those clients. This is done by getting the values from the _connections dictionary using the user name as a key: var receiverConnections = _connections.GetConnections(receiver); if (!receiverConnections.IsNullOrEmpty()) { await Clients.Clients(receiverConnections.ToList()).SendAsync(\"ReceiveMessage\", name, message); } To send a message to all clients, we can use the Clients.All.SendAsync() method. if we want to send a message only to the caller (the client that called a SendAsync to the hub), we can use the Clients.Caller.SendAsync() method."
  },
  "clientchat/src/wwwroot/css/open-iconic/README.html": {
    "href": "clientchat/src/wwwroot/css/open-iconic/README.html",
    "title": "Open Iconic v1.1.1 | System.Dynamic.ExpandoObject",
    "keywords": "Open Iconic v1.1.1 Open Iconic is the open source sibling of Iconic. It is a hyper-legible collection of 223 icons with a tiny footprint—ready to use with Bootstrap and Foundation. View the collection What's in Open Iconic? 223 icons designed to be legible down to 8 pixels Super-light SVG files - 61.8 for the entire set SVG sprite—the modern replacement for icon fonts Webfont (EOT, OTF, SVG, TTF, WOFF), PNG and WebP formats Webfont stylesheets (including versions for Bootstrap and Foundation) in CSS, LESS, SCSS and Stylus formats PNG and WebP raster images in 8px, 16px, 24px, 32px, 48px and 64px. Getting Started For code samples and everything else you need to get started with Open Iconic, check out our Icons and Reference sections. General Usage Using Open Iconic's SVGs We like SVGs and we think they're the way to display icons on the web. Since Open Iconic are just basic SVGs, we suggest you display them like you would any other image (don't forget the alt attribute). <img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\"> Using Open Iconic's SVG Sprite Open Iconic also comes in a SVG sprite which allows you to display all the icons in the set with a single request. It's like an icon font, without being a hack. Adding an icon from an SVG sprite is a little different than what you're used to, but it's still a piece of cake. Tip: To make your icons easily style able, we suggest adding a general class to the <svg> tag and a unique class name for each different icon in the <use> tag. <svg class=\"icon\"> <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use> </svg> Sizing icons only needs basic CSS. All the icons are in a square format, so just set the <svg> tag with equal width and height dimensions. .icon { width: 16px; height: 16px; } Coloring icons is even easier. All you need to do is set the fill rule on the <use> tag. .icon-account-login { fill: #f00; } To learn more about SVG Sprites, read Chris Coyier's guide. Using Open Iconic's Icon Font... …with Bootstrap You can find our Bootstrap stylesheets in font/css/open-iconic-bootstrap.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\"> <span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …with Foundation You can find our Foundation stylesheets in font/css/open-iconic-foundation.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\"> <span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …on its own You can find our default stylesheets in font/css/open-iconic.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\"> <span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> License Icons All code (including SVG markup) is under the MIT License. Fonts All fonts are under the SIL Licensed."
  },
  "components.abstractions/app/ix-blazor/librarytemplate.blazor/wwwroot/css/open-iconic/README.html": {
    "href": "components.abstractions/app/ix-blazor/librarytemplate.blazor/wwwroot/css/open-iconic/README.html",
    "title": "Open Iconic v1.1.1 | System.Dynamic.ExpandoObject",
    "keywords": "Open Iconic v1.1.1 Open Iconic is the open source sibling of Iconic. It is a hyper-legible collection of 223 icons with a tiny footprint—ready to use with Bootstrap and Foundation. View the collection What's in Open Iconic? 223 icons designed to be legible down to 8 pixels Super-light SVG files - 61.8 for the entire set SVG sprite—the modern replacement for icon fonts Webfont (EOT, OTF, SVG, TTF, WOFF), PNG and WebP formats Webfont stylesheets (including versions for Bootstrap and Foundation) in CSS, LESS, SCSS and Stylus formats PNG and WebP raster images in 8px, 16px, 24px, 32px, 48px and 64px. Getting Started For code samples and everything else you need to get started with Open Iconic, check out our Icons and Reference sections. General Usage Using Open Iconic's SVGs We like SVGs and we think they're the way to display icons on the web. Since Open Iconic are just basic SVGs, we suggest you display them like you would any other image (don't forget the alt attribute). <img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\"> Using Open Iconic's SVG Sprite Open Iconic also comes in a SVG sprite which allows you to display all the icons in the set with a single request. It's like an icon font, without being a hack. Adding an icon from an SVG sprite is a little different than what you're used to, but it's still a piece of cake. Tip: To make your icons easily style able, we suggest adding a general class to the <svg> tag and a unique class name for each different icon in the <use> tag. <svg class=\"icon\"> <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use> </svg> Sizing icons only needs basic CSS. All the icons are in a square format, so just set the <svg> tag with equal width and height dimensions. .icon { width: 16px; height: 16px; } Coloring icons is even easier. All you need to do is set the fill rule on the <use> tag. .icon-account-login { fill: #f00; } To learn more about SVG Sprites, read Chris Coyier's guide. Using Open Iconic's Icon Font... …with Bootstrap You can find our Bootstrap stylesheets in font/css/open-iconic-bootstrap.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\"> <span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …with Foundation You can find our Foundation stylesheets in font/css/open-iconic-foundation.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\"> <span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …on its own You can find our default stylesheets in font/css/open-iconic.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\"> <span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> License Icons All code (including SVG markup) is under the MIT License. Fonts All fonts are under the SIL Licensed."
  },
  "components.abstractions/docs/README.html": {
    "href": "components.abstractions/docs/README.html",
    "title": "Abstractions | System.Dynamic.ExpandoObject",
    "keywords": "Abstractions This documentation contains information about abstractions library. This library is an integral component of AXOpen. AXOpen is an application framework built on the foundations of SIMATIC-AX and AX# technologies. Utilizing the components described in this document might necessitate a foundational understanding of the AXOpen framework's concepts and methodologies. Additionally, leveraging some advanced features could require a basic familiarity with AX# technology. Additional Resources: AX# Official Documentation UI Rendering Guide Note This document's content is synchronized with the source code of this library. Please note that the images and illustrative visuals included may not mirror the exact appearance in your application. Note Should you identify errors, misleading content, or gaps in this documentation, kindly report the issue here. Alternatively, you're welcome to suggest edits directly by initiating a pull request in this repository. Description Abstractions library contains interfaces and abstract classes that are used in other libraries."
  },
  "components.abstractions/docs/TROUBLES.html": {
    "href": "components.abstractions/docs/TROUBLES.html",
    "title": "Troubleshooting | System.Dynamic.ExpandoObject",
    "keywords": "Troubleshooting Unfortunately, we don't have a direct solution to your problem at the moment. If you encounter any issues, please file a report on our GitHub. We appreciate your feedback and patience."
  },
  "components.abstractions/docs/index.html": {
    "href": "components.abstractions/docs/index.html",
    "title": "Abstractions | System.Dynamic.ExpandoObject",
    "keywords": "Abstractions This documentation contains information about abstractions library. This library is an integral component of AXOpen. AXOpen is an application framework built on the foundations of SIMATIC-AX and AX# technologies. Utilizing the components described in this document might necessitate a foundational understanding of the AXOpen framework's concepts and methodologies. Additionally, leveraging some advanced features could require a basic familiarity with AX# technology. Additional Resources: AX# Official Documentation UI Rendering Guide Note This document's content is synchronized with the source code of this library. Please note that the images and illustrative visuals included may not mirror the exact appearance in your application. Note Should you identify errors, misleading content, or gaps in this documentation, kindly report the issue here. Alternatively, you're welcome to suggest edits directly by initiating a pull request in this repository. Description Abstractions library contains interfaces and abstract classes that are used in other libraries."
  },
  "components.cognex.vision/README.html": {
    "href": "components.cognex.vision/README.html",
    "title": "| System.Dynamic.ExpandoObject",
    "keywords": "Controller .NET [!include[Controller](ctrl/README.md)] [!include[.NET](app/README.md)]"
  },
  "components.cognex.vision/app/ix-blazor/wwwroot/css/open-iconic/README.html": {
    "href": "components.cognex.vision/app/ix-blazor/wwwroot/css/open-iconic/README.html",
    "title": "Open Iconic v1.1.1 | System.Dynamic.ExpandoObject",
    "keywords": "Open Iconic v1.1.1 Open Iconic is the open source sibling of Iconic. It is a hyper-legible collection of 223 icons with a tiny footprint—ready to use with Bootstrap and Foundation. View the collection What's in Open Iconic? 223 icons designed to be legible down to 8 pixels Super-light SVG files - 61.8 for the entire set SVG sprite—the modern replacement for icon fonts Webfont (EOT, OTF, SVG, TTF, WOFF), PNG and WebP formats Webfont stylesheets (including versions for Bootstrap and Foundation) in CSS, LESS, SCSS and Stylus formats PNG and WebP raster images in 8px, 16px, 24px, 32px, 48px and 64px. Getting Started For code samples and everything else you need to get started with Open Iconic, check out our Icons and Reference sections. General Usage Using Open Iconic's SVGs We like SVGs and we think they're the way to display icons on the web. Since Open Iconic are just basic SVGs, we suggest you display them like you would any other image (don't forget the alt attribute). <img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\"> Using Open Iconic's SVG Sprite Open Iconic also comes in a SVG sprite which allows you to display all the icons in the set with a single request. It's like an icon font, without being a hack. Adding an icon from an SVG sprite is a little different than what you're used to, but it's still a piece of cake. Tip: To make your icons easily style able, we suggest adding a general class to the <svg> tag and a unique class name for each different icon in the <use> tag. <svg class=\"icon\"> <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use> </svg> Sizing icons only needs basic CSS. All the icons are in a square format, so just set the <svg> tag with equal width and height dimensions. .icon { width: 16px; height: 16px; } Coloring icons is even easier. All you need to do is set the fill rule on the <use> tag. .icon-account-login { fill: #f00; } To learn more about SVG Sprites, read Chris Coyier's guide. Using Open Iconic's Icon Font... …with Bootstrap You can find our Bootstrap stylesheets in font/css/open-iconic-bootstrap.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\"> <span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …with Foundation You can find our Foundation stylesheets in font/css/open-iconic-foundation.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\"> <span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …on its own You can find our default stylesheets in font/css/open-iconic.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\"> <span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> License Icons All code (including SVG markup) is under the MIT License. Fonts All fonts are under the SIL Licensed."
  },
  "components.cognex.vision/docs/AXODATAMAN.html": {
    "href": "components.cognex.vision/docs/AXODATAMAN.html",
    "title": "AxoDataman | System.Dynamic.ExpandoObject",
    "keywords": "AxoDataman AxoDataman provides the essential control and operation of all code-reader of the Dataman family. How to CONTROLLER .NET TWIN BLAZOR How to use component in controller Implementation The AxoDataman is designed to be used as a member of the AxoContext or AxoObject. Therefore its instance must be initialized with the proper AxoContext or AxoObject before any use. Also, the hardware signals must be assigned first before calling any method of this instance. To accomplish this, call the Run method cyclically with the proper variables (i.e. inside the Main method of the relevant AxoContext) as in the example below: Declare component VAR PUBLIC Dataman : AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman; END_VAR Manual Control Dataman.ActivateManualControl(); Initialize & Run Dataman.Run(parent := THIS, refAcquisitionControl := REF(PlcOutputs^._10a1_Acquisition_Control_1), refAcquisitionStatus := REF(PlcInputs^._10a1_Acquisition_Status_1), refResultsControl := REF(PlcOutputs^._10a1_Results_Control_1), refResultsStatus := REF(PlcInputs^._10a1_Results_Status_1), refSoftEventControl := REF(PlcOutputs^._10a1_Soft_Event_Control_1), refSoftEventStatus := REF(PlcInputs^._10a1_Soft_Event_Control_1), refResultData := REF(PlcInputs^._10a1_Result_Data_128_bytes_1), refUserData := REF(PlcOutputs^._10a1_User_Data_128_bytes_1)); Important This component requires cyclic data updates, which are typically sourced from the I/O system. Before using the component, make sure you invoke the Run method. Additionally, it's crucial to ensure that the Run method is positioned within a call tree that operates cyclically. Failing to initiate the Run method or not guaranteeing its cyclic execution can lead to malfunctions and unpredictable component behavior. In extreme circumstances, this could cause erratic controller behavior, potentially leading to equipment damage. There are three public methods to operate the AxoDataman: Restore - restores the state of the AxoDataman to the initial state and resets all the internal variables. ClearResultData - resets the data read and confirms the data received from the device. Example of using ClearResultData method IF Dataman.ClearResultData().IsDone() THEN //Data inside MyDataman1.Results.Data is cleared ; END_IF; Read - triggers the reading sequence and waits for results. Example of using Read method IF Dataman.Read(myDatamanData).IsDone() THEN //Process the result data ; END_IF; How to visualize AxoDataman On the UI side, use the RenderableContentControl and set its Context according to the placement of the instance of the AxoDataman. <RenderableContentControl Context=\"@Entry.Plc.AxoCognexVisionExampleContext.Dataman\" Presentation=\"Command\" />"
  },
  "components.cognex.vision/docs/AXOINSIGHT.html": {
    "href": "components.cognex.vision/docs/AXOINSIGHT.html",
    "title": "AxoInsight | System.Dynamic.ExpandoObject",
    "keywords": "AxoInsight AxoInsight provides the essential control and operation of all vision sensors of the Insight family. How to CONTROLLER .NET TWIN BLAZOR How to use component in controller Implementation The AxoInsight is designed to be used as a member of the AxoContext or AxoObject. Therefore its instance must be initialized with the proper AxoContext or AxoObject before any use. Also, the hardware signals must be assigned first before calling any method of this instance. To accomplish this, call the Run method cyclically with the proper variables (i.e. inside the Main method of the relevant AxoContext) as in the example below: Declare component VAR PUBLIC Insight : AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight; END_VAR Manual Control Insight.ActivateManualControl(); Initialize & Run Insight.Run(parent := THIS, refAcquisitionControl := REF(PlcOutputs^._7600_Acquisition_Control_1), refAcquisitionStatus := REF(PlcInputs^._7600_Acquisition_Status_1), refInspectionControl := REF(PlcOutputs^._7600_Inspection_Control_1), refInspectionStatus := REF(PlcInputs^._7600_Inspection_Status_1), refCommandControl := REF(PlcOutputs^._7600_Command_Control_1), refCommandStatus := REF(PlcInputs^._7600_Command_Control_1), refSoftEventControl := REF(PlcOutputs^._7600_SoftEvent_Control_1), refSoftEventStatus := REF(PlcInputs^._7600_SoftEvent_Control_1), refResultData := REF(PlcInputs^._7600_Results_64_bytes_1), refUserData := REF(PlcOutputs^._7600_User_Data_64_bytes_1)); Important This component requires cyclic data updates, which are typically sourced from the I/O system. Before using the component, make sure you invoke the Run method. Additionally, it's crucial to ensure that the Run method is positioned within a call tree that operates cyclically. Failing to initiate the Run method or not guaranteeing its cyclic execution can lead to malfunctions and unpredictable component behavior. In extreme circumstances, this could cause erratic controller behavior, potentially leading to equipment damage. There are three public methods to operate the AxoInsight: Restore - restores the state of the AxoInsight to the initial state and resets all the internal variables. ClearInspectionResults - resets the inspection data read and confirms the data received from the device. Example of using ClearInspectionResults method IF Insight.ClearInspectionResults().IsDone() THEN //Data inside MyInsight.InspectionResults.Data is cleared ; END_IF; Trigger - triggers the reading sequence and waits for results. Example of using Trigger method IF Insight.Trigger().IsDone() THEN //Process the result data myInsightData := Insight.InspectionResults.Data; END_IF; ChangeJob - changes the sensor job. There are two overloads of the method ChangeJob. First one is with numerical parameter of the job number, second one with the textual parameter of the job name. Example of using ChangeJob method using job number IF Insight.ChangeJob(UINT#5).IsDone() THEN ; END_IF; Example of using ChangeJob method using job name IF Insight.ChangeJob('MyJobName.job').IsDone() THEN ; END_IF; SoftEvent - triggers the soft event of the sensor. Example of using SoftEvent method IF Insight.SoftEvent(UINT#5).IsDone() THEN ; END_IF; How to visualize AxoInsight On the UI side, use the RenderableContentControl and set its Context according to the placement of the instance of the AxoInsight. <RenderableContentControl Context=\"@Entry.Plc.AxoCognexVisionExampleContext.Insight\" Presentation=\"Command\" />"
  },
  "components.cognex.vision/docs/HOWTO.html": {
    "href": "components.cognex.vision/docs/HOWTO.html",
    "title": "How to | System.Dynamic.ExpandoObject",
    "keywords": "How to AxoDataman AxoDataman provides the essential control and operation of all code-reader of the Dataman family. How to CONTROLLER .NET TWIN BLAZOR How to use component in controller Implementation The AxoDataman is designed to be used as a member of the AxoContext or AxoObject. Therefore its instance must be initialized with the proper AxoContext or AxoObject before any use. Also, the hardware signals must be assigned first before calling any method of this instance. To accomplish this, call the Run method cyclically with the proper variables (i.e. inside the Main method of the relevant AxoContext) as in the example below: Declare component VAR PUBLIC Dataman : AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoDataman; END_VAR Manual Control Dataman.ActivateManualControl(); Initialize & Run Dataman.Run(parent := THIS, refAcquisitionControl := REF(PlcOutputs^._10a1_Acquisition_Control_1), refAcquisitionStatus := REF(PlcInputs^._10a1_Acquisition_Status_1), refResultsControl := REF(PlcOutputs^._10a1_Results_Control_1), refResultsStatus := REF(PlcInputs^._10a1_Results_Status_1), refSoftEventControl := REF(PlcOutputs^._10a1_Soft_Event_Control_1), refSoftEventStatus := REF(PlcInputs^._10a1_Soft_Event_Control_1), refResultData := REF(PlcInputs^._10a1_Result_Data_128_bytes_1), refUserData := REF(PlcOutputs^._10a1_User_Data_128_bytes_1)); Important This component requires cyclic data updates, which are typically sourced from the I/O system. Before using the component, make sure you invoke the Run method. Additionally, it's crucial to ensure that the Run method is positioned within a call tree that operates cyclically. Failing to initiate the Run method or not guaranteeing its cyclic execution can lead to malfunctions and unpredictable component behavior. In extreme circumstances, this could cause erratic controller behavior, potentially leading to equipment damage. There are three public methods to operate the AxoDataman: Restore - restores the state of the AxoDataman to the initial state and resets all the internal variables. ClearResultData - resets the data read and confirms the data received from the device. Example of using ClearResultData method IF Dataman.ClearResultData().IsDone() THEN //Data inside MyDataman1.Results.Data is cleared ; END_IF; Read - triggers the reading sequence and waits for results. Example of using Read method IF Dataman.Read(myDatamanData).IsDone() THEN //Process the result data ; END_IF; How to visualize AxoDataman On the UI side, use the RenderableContentControl and set its Context according to the placement of the instance of the AxoDataman. <RenderableContentControl Context=\"@Entry.Plc.AxoCognexVisionExampleContext.Dataman\" Presentation=\"Command\" /> AxoInsight AxoInsight provides the essential control and operation of all vision sensors of the Insight family. How to CONTROLLER .NET TWIN BLAZOR How to use component in controller Implementation The AxoInsight is designed to be used as a member of the AxoContext or AxoObject. Therefore its instance must be initialized with the proper AxoContext or AxoObject before any use. Also, the hardware signals must be assigned first before calling any method of this instance. To accomplish this, call the Run method cyclically with the proper variables (i.e. inside the Main method of the relevant AxoContext) as in the example below: Declare component VAR PUBLIC Insight : AXOpen.Components.Cognex.Vision.v_6_0_0_0.AxoInsight; END_VAR Manual Control Insight.ActivateManualControl(); Initialize & Run Insight.Run(parent := THIS, refAcquisitionControl := REF(PlcOutputs^._7600_Acquisition_Control_1), refAcquisitionStatus := REF(PlcInputs^._7600_Acquisition_Status_1), refInspectionControl := REF(PlcOutputs^._7600_Inspection_Control_1), refInspectionStatus := REF(PlcInputs^._7600_Inspection_Status_1), refCommandControl := REF(PlcOutputs^._7600_Command_Control_1), refCommandStatus := REF(PlcInputs^._7600_Command_Control_1), refSoftEventControl := REF(PlcOutputs^._7600_SoftEvent_Control_1), refSoftEventStatus := REF(PlcInputs^._7600_SoftEvent_Control_1), refResultData := REF(PlcInputs^._7600_Results_64_bytes_1), refUserData := REF(PlcOutputs^._7600_User_Data_64_bytes_1)); Important This component requires cyclic data updates, which are typically sourced from the I/O system. Before using the component, make sure you invoke the Run method. Additionally, it's crucial to ensure that the Run method is positioned within a call tree that operates cyclically. Failing to initiate the Run method or not guaranteeing its cyclic execution can lead to malfunctions and unpredictable component behavior. In extreme circumstances, this could cause erratic controller behavior, potentially leading to equipment damage. There are three public methods to operate the AxoInsight: Restore - restores the state of the AxoInsight to the initial state and resets all the internal variables. ClearInspectionResults - resets the inspection data read and confirms the data received from the device. Example of using ClearInspectionResults method IF Insight.ClearInspectionResults().IsDone() THEN //Data inside MyInsight.InspectionResults.Data is cleared ; END_IF; Trigger - triggers the reading sequence and waits for results. Example of using Trigger method IF Insight.Trigger().IsDone() THEN //Process the result data myInsightData := Insight.InspectionResults.Data; END_IF; ChangeJob - changes the sensor job. There are two overloads of the method ChangeJob. First one is with numerical parameter of the job number, second one with the textual parameter of the job name. Example of using ChangeJob method using job number IF Insight.ChangeJob(UINT#5).IsDone() THEN ; END_IF; Example of using ChangeJob method using job name IF Insight.ChangeJob('MyJobName.job').IsDone() THEN ; END_IF; SoftEvent - triggers the soft event of the sensor. Example of using SoftEvent method IF Insight.SoftEvent(UINT#5).IsDone() THEN ; END_IF; How to visualize AxoInsight On the UI side, use the RenderableContentControl and set its Context according to the placement of the instance of the AxoInsight. <RenderableContentControl Context=\"@Entry.Plc.AxoCognexVisionExampleContext.Insight\" Presentation=\"Command\" />"
  },
  "components.cognex.vision/docs/README.html": {
    "href": "components.cognex.vision/docs/README.html",
    "title": "AXOpenCognexVision | System.Dynamic.ExpandoObject",
    "keywords": "AXOpenCognexVision This documentation contains information about AXOpenCognexVision library. This library is an integral component of AXOpen. AXOpen is an application framework built on the foundations of SIMATIC-AX and AX# technologies. Utilizing the components described in this document might necessitate a foundational understanding of the AXOpen framework's concepts and methodologies. Additionally, leveraging some advanced features could require a basic familiarity with AX# technology. Additional Resources: AX# Official Documentation UI Rendering Guide Note This document's content is synchronized with the source code of this library. Please note that the images and illustrative visuals included may not mirror the exact appearance in your application. Note Should you identify errors, misleading content, or gaps in this documentation, kindly report the issue here. Alternatively, you're welcome to suggest edits directly by initiating a pull request in this repository. Description The AXOpenCognexVision library controls and operates the vision devices from the manufacturer Cognex."
  },
  "components.cognex.vision/docs/TROUBLES.html": {
    "href": "components.cognex.vision/docs/TROUBLES.html",
    "title": "Troubleshooting | System.Dynamic.ExpandoObject",
    "keywords": "Troubleshooting Unfortunately, we don't have a direct solution to your problem at the moment. If you encounter any issues, please file a report on our GitHub. We appreciate your feedback and patience."
  },
  "components.cognex.vision/docs/index.html": {
    "href": "components.cognex.vision/docs/index.html",
    "title": "AXOpenCognexVision | System.Dynamic.ExpandoObject",
    "keywords": "AXOpenCognexVision This documentation contains information about AXOpenCognexVision library. This library is an integral component of AXOpen. AXOpen is an application framework built on the foundations of SIMATIC-AX and AX# technologies. Utilizing the components described in this document might necessitate a foundational understanding of the AXOpen framework's concepts and methodologies. Additionally, leveraging some advanced features could require a basic familiarity with AX# technology. Additional Resources: AX# Official Documentation UI Rendering Guide Note This document's content is synchronized with the source code of this library. Please note that the images and illustrative visuals included may not mirror the exact appearance in your application. Note Should you identify errors, misleading content, or gaps in this documentation, kindly report the issue here. Alternatively, you're welcome to suggest edits directly by initiating a pull request in this repository. Description The AXOpenCognexVision library controls and operates the vision devices from the manufacturer Cognex."
  },
  "components.elements/app/ix-blazor/ElementsComponents.blazor/wwwroot/css/open-iconic/README.html": {
    "href": "components.elements/app/ix-blazor/ElementsComponents.blazor/wwwroot/css/open-iconic/README.html",
    "title": "Open Iconic v1.1.1 | System.Dynamic.ExpandoObject",
    "keywords": "Open Iconic v1.1.1 Open Iconic is the open source sibling of Iconic. It is a hyper-legible collection of 223 icons with a tiny footprint—ready to use with Bootstrap and Foundation. View the collection What's in Open Iconic? 223 icons designed to be legible down to 8 pixels Super-light SVG files - 61.8 for the entire set SVG sprite—the modern replacement for icon fonts Webfont (EOT, OTF, SVG, TTF, WOFF), PNG and WebP formats Webfont stylesheets (including versions for Bootstrap and Foundation) in CSS, LESS, SCSS and Stylus formats PNG and WebP raster images in 8px, 16px, 24px, 32px, 48px and 64px. Getting Started For code samples and everything else you need to get started with Open Iconic, check out our Icons and Reference sections. General Usage Using Open Iconic's SVGs We like SVGs and we think they're the way to display icons on the web. Since Open Iconic are just basic SVGs, we suggest you display them like you would any other image (don't forget the alt attribute). <img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\"> Using Open Iconic's SVG Sprite Open Iconic also comes in a SVG sprite which allows you to display all the icons in the set with a single request. It's like an icon font, without being a hack. Adding an icon from an SVG sprite is a little different than what you're used to, but it's still a piece of cake. Tip: To make your icons easily style able, we suggest adding a general class to the <svg> tag and a unique class name for each different icon in the <use> tag. <svg class=\"icon\"> <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use> </svg> Sizing icons only needs basic CSS. All the icons are in a square format, so just set the <svg> tag with equal width and height dimensions. .icon { width: 16px; height: 16px; } Coloring icons is even easier. All you need to do is set the fill rule on the <use> tag. .icon-account-login { fill: #f00; } To learn more about SVG Sprites, read Chris Coyier's guide. Using Open Iconic's Icon Font... …with Bootstrap You can find our Bootstrap stylesheets in font/css/open-iconic-bootstrap.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\"> <span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …with Foundation You can find our Foundation stylesheets in font/css/open-iconic-foundation.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\"> <span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …on its own You can find our default stylesheets in font/css/open-iconic.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\"> <span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> License Icons All code (including SVG markup) is under the MIT License. Fonts All fonts are under the SIL Licensed."
  },
  "components.elements/docs/AXOAI.html": {
    "href": "components.elements/docs/AXOAI.html",
    "title": "AXOpenElements.AxoAi | System.Dynamic.ExpandoObject",
    "keywords": "AXOpenElements.AxoAi AxoAi is used for checking values of analogue inputs. AxoAi scales input signal based on values in AxoAiConfig class. AxoAiConfig contains: // Configuration class for analog input CLASS AxoAiConfig VAR PUBLIC // Lowest possible value of the raw input. RawLow : DINT; // Highest possible value of the raw input. RawHigh : DINT; // Lowest threshold of scaled value. // `RealLow` and `RealHigh` should represent the real range of an continuous input. RealLow : REAL; // Highest threshold range of scaled value. // `RealLow` and `RealHigh` should represent the real range of an continuous input. RealHigh : REAL; // Allows simple adjustment of the calculated value multiplying the value by factor of `Gain`. Gain : REAL := REAL#1.0; // Allows simple adjustment of the calculated value by adding `Offset` value. Offset : REAL := REAL#0.0; END_VAR END_CLASS How to CONTROLLER .NET TWIN BLAZOR How to use component in controller Declare component VAR PUBLIC _testAi : AXOpen.Elements.AxoAi; END_VAR Declare initialization variables Most of the initialization variable will come from the I/O system. This example is only for demostrational puproses. VAR PUBLIC _testAiInput : DINT := DINT#10; END_VAR Manual Control _testAi.ActivateManualControl(); Initialize & Run _testAi.Run(THIS, _testAiInput); Important This component requires cyclic data updates, which are typically sourced from the I/O system. Before using the component, make sure you invoke the Run method. Additionally, it's crucial to ensure that the Run method is positioned within a call tree that operates cyclically. Failing to initiate the Run method or not guaranteeing its cyclic execution can lead to malfunctions and unpredictable component behavior. In extreme circumstances, this could cause erratic controller behavior, potentially leading to equipment damage."
  },
  "components.elements/docs/AXOAO.html": {
    "href": "components.elements/docs/AXOAO.html",
    "title": "AXOpenElements.AxoAo | System.Dynamic.ExpandoObject",
    "keywords": "AXOpenElements.AxoAo AxoAo is used for setting analogue values. AxoAo un-scales input signal based on SetPoint and values in AxoAoConfig class. AxoAiConfig contains: /// <summary> /// Configuration class for analog output /// </summary> CLASS AxoAoConfig VAR PUBLIC // Lowest possible value of the raw input. RawLow : DINT; // Highest possible value of the raw input. RawHigh : DINT; // Lowest threshold of scaled value. // `RealLow` and `RealHigh` should represent the real range of an continuous input. RealLow : REAL; // Highest threshold range of scaled value. // `RealLow` and `RealHigh` should represent the real range of an continuous input. RealHigh : REAL; // Allows simple adjustment of the calculated value multiplying the value by factor of `Gain`. Gain : REAL := REAL#1.0; // Allows simple adjustment of the calculated value by adding `Offset` value. Offset : REAL := REAL#0.0; END_VAR END_CLASS How to CONTROLLER .NET TWIN BLAZOR How to use component in controller Declare component VAR PUBLIC _testAo : AXOpen.Elements.AxoAo; END_VAR Declare initialization variables Most of the initialization variable will come from the I/O system. This example is only for demostrational puproses. VAR PUBLIC _testAoOutput : DINT; END_VAR Manual Control _testAo.ActivateManualControl(); Initialize & Run _testAo.Run(THIS, _testAoOutput); Important This component requires cyclic data updates, which are typically sourced from the I/O system. Before using the component, make sure you invoke the Run method. Additionally, it's crucial to ensure that the Run method is positioned within a call tree that operates cyclically. Failing to initiate the Run method or not guaranteeing its cyclic execution can lead to malfunctions and unpredictable component behavior. In extreme circumstances, this could cause erratic controller behavior, potentially leading to equipment damage."
  },
  "components.elements/docs/AXODI.html": {
    "href": "components.elements/docs/AXODI.html",
    "title": "AXOpenElements.AxoDi | System.Dynamic.ExpandoObject",
    "keywords": "AXOpenElements.AxoDi AxoDi is used for checking values of digital inputs. How to CONTROLLER .NET TWIN BLAZOR How to use component in controller Declare component VAR PUBLIC _testDi : AXOpen.Elements.AxoDi; END_VAR Declare initialization variables Most of the initialization variable will come from the I/O system. This example is only for demostrational puproses. VAR PUBLIC _testsignal : BOOL; END_VAR Manual Control _testDi.ActivateManualControl(); Initialize & Run _testDi.Run(THIS, _testsignal); Important This component requires cyclic data updates, which are typically sourced from the I/O system. Before using the component, make sure you invoke the Run method. Additionally, it's crucial to ensure that the Run method is positioned within a call tree that operates cyclically. Failing to initiate the Run method or not guaranteeing its cyclic execution can lead to malfunctions and unpredictable component behavior. In extreme circumstances, this could cause erratic controller behavior, potentially leading to equipment damage. Use IF _testDi.IsTrue() THEN ;// handle signal on END_IF;"
  },
  "components.elements/docs/AXODO.html": {
    "href": "components.elements/docs/AXODO.html",
    "title": "AXOpenElements.AxoDo | System.Dynamic.ExpandoObject",
    "keywords": "AXOpenElements.AxoDo AxoDo is used for setting values of digital inputs. How to CONTROLLER .NET TWIN BLAZOR How to use component in controller Declare component VAR PUBLIC _testDo : AXOpen.Elements.AxoDo; END_VAR Declare initialization variables Most of the initialization variable will come from the I/O system. This example is only for demostrational puproses. VAR PUBLIC _testInOutSignal : BOOL; END_VAR Manual Control _testDo.ActivateManualControl(); Initialize & Run _testDo.Run(THIS, _testInOutSignal); Important This component requires cyclic data updates, which are typically sourced from the I/O system. Before using the component, make sure you invoke the Run method. Additionally, it's crucial to ensure that the Run method is positioned within a call tree that operates cyclically. Failing to initiate the Run method or not guaranteeing its cyclic execution can lead to malfunctions and unpredictable component behavior. In extreme circumstances, this could cause erratic controller behavior, potentially leading to equipment damage."
  },
  "components.elements/docs/HOWTO.html": {
    "href": "components.elements/docs/HOWTO.html",
    "title": "How to | System.Dynamic.ExpandoObject",
    "keywords": "How to AXOpenElements.AxoDi AxoDi is used for checking values of digital inputs. How to CONTROLLER .NET TWIN BLAZOR How to use component in controller Declare component VAR PUBLIC _testDi : AXOpen.Elements.AxoDi; END_VAR Declare initialization variables Most of the initialization variable will come from the I/O system. This example is only for demostrational puproses. VAR PUBLIC _testsignal : BOOL; END_VAR Manual Control _testDi.ActivateManualControl(); Initialize & Run _testDi.Run(THIS, _testsignal); Important This component requires cyclic data updates, which are typically sourced from the I/O system. Before using the component, make sure you invoke the Run method. Additionally, it's crucial to ensure that the Run method is positioned within a call tree that operates cyclically. Failing to initiate the Run method or not guaranteeing its cyclic execution can lead to malfunctions and unpredictable component behavior. In extreme circumstances, this could cause erratic controller behavior, potentially leading to equipment damage. Use IF _testDi.IsTrue() THEN ;// handle signal on END_IF; AXOpenElements.AxoDo AxoDo is used for setting values of digital inputs. How to CONTROLLER .NET TWIN BLAZOR How to use component in controller Declare component VAR PUBLIC _testDo : AXOpen.Elements.AxoDo; END_VAR Declare initialization variables Most of the initialization variable will come from the I/O system. This example is only for demostrational puproses. VAR PUBLIC _testInOutSignal : BOOL; END_VAR Manual Control _testDo.ActivateManualControl(); Initialize & Run _testDo.Run(THIS, _testInOutSignal); Important This component requires cyclic data updates, which are typically sourced from the I/O system. Before using the component, make sure you invoke the Run method. Additionally, it's crucial to ensure that the Run method is positioned within a call tree that operates cyclically. Failing to initiate the Run method or not guaranteeing its cyclic execution can lead to malfunctions and unpredictable component behavior. In extreme circumstances, this could cause erratic controller behavior, potentially leading to equipment damage. AXOpenElements.AxoAi AxoAi is used for checking values of analogue inputs. AxoAi scales input signal based on values in AxoAiConfig class. AxoAiConfig contains: // Configuration class for analog input CLASS AxoAiConfig VAR PUBLIC // Lowest possible value of the raw input. RawLow : DINT; // Highest possible value of the raw input. RawHigh : DINT; // Lowest threshold of scaled value. // `RealLow` and `RealHigh` should represent the real range of an continuous input. RealLow : REAL; // Highest threshold range of scaled value. // `RealLow` and `RealHigh` should represent the real range of an continuous input. RealHigh : REAL; // Allows simple adjustment of the calculated value multiplying the value by factor of `Gain`. Gain : REAL := REAL#1.0; // Allows simple adjustment of the calculated value by adding `Offset` value. Offset : REAL := REAL#0.0; END_VAR END_CLASS How to CONTROLLER .NET TWIN BLAZOR How to use component in controller Declare component VAR PUBLIC _testAi : AXOpen.Elements.AxoAi; END_VAR Declare initialization variables Most of the initialization variable will come from the I/O system. This example is only for demostrational puproses. VAR PUBLIC _testAiInput : DINT := DINT#10; END_VAR Manual Control _testAi.ActivateManualControl(); Initialize & Run _testAi.Run(THIS, _testAiInput); Important This component requires cyclic data updates, which are typically sourced from the I/O system. Before using the component, make sure you invoke the Run method. Additionally, it's crucial to ensure that the Run method is positioned within a call tree that operates cyclically. Failing to initiate the Run method or not guaranteeing its cyclic execution can lead to malfunctions and unpredictable component behavior. In extreme circumstances, this could cause erratic controller behavior, potentially leading to equipment damage. AXOpenElements.AxoAo AxoAo is used for setting analogue values. AxoAo un-scales input signal based on SetPoint and values in AxoAoConfig class. AxoAiConfig contains: /// <summary> /// Configuration class for analog output /// </summary> CLASS AxoAoConfig VAR PUBLIC // Lowest possible value of the raw input. RawLow : DINT; // Highest possible value of the raw input. RawHigh : DINT; // Lowest threshold of scaled value. // `RealLow` and `RealHigh` should represent the real range of an continuous input. RealLow : REAL; // Highest threshold range of scaled value. // `RealLow` and `RealHigh` should represent the real range of an continuous input. RealHigh : REAL; // Allows simple adjustment of the calculated value multiplying the value by factor of `Gain`. Gain : REAL := REAL#1.0; // Allows simple adjustment of the calculated value by adding `Offset` value. Offset : REAL := REAL#0.0; END_VAR END_CLASS How to CONTROLLER .NET TWIN BLAZOR How to use component in controller Declare component VAR PUBLIC _testAo : AXOpen.Elements.AxoAo; END_VAR Declare initialization variables Most of the initialization variable will come from the I/O system. This example is only for demostrational puproses. VAR PUBLIC _testAoOutput : DINT; END_VAR Manual Control _testAo.ActivateManualControl(); Initialize & Run _testAo.Run(THIS, _testAoOutput); Important This component requires cyclic data updates, which are typically sourced from the I/O system. Before using the component, make sure you invoke the Run method. Additionally, it's crucial to ensure that the Run method is positioned within a call tree that operates cyclically. Failing to initiate the Run method or not guaranteeing its cyclic execution can lead to malfunctions and unpredictable component behavior. In extreme circumstances, this could cause erratic controller behavior, potentially leading to equipment damage."
  },
  "components.elements/docs/README.html": {
    "href": "components.elements/docs/README.html",
    "title": "AXOpenElements | System.Dynamic.ExpandoObject",
    "keywords": "AXOpenElements This documentation contains information about AXOpenElements library. This library is an integral component of AXOpen. AXOpen is an application framework built on the foundations of SIMATIC-AX and AX# technologies. Utilizing the components described in this document might necessitate a foundational understanding of the AXOpen framework's concepts and methodologies. Additionally, leveraging some advanced features could require a basic familiarity with AX# technology. Additional Resources: AX# Official Documentation UI Rendering Guide Note This document's content is synchronized with the source code of this library. Please note that the images and illustrative visuals included may not mirror the exact appearance in your application. Note Should you identify errors, misleading content, or gaps in this documentation, kindly report the issue here. Alternatively, you're welcome to suggest edits directly by initiating a pull request in this repository. Description The AXOpenElements library provides ability to work with analog a digital I/O signals."
  },
  "components.elements/docs/TROUBLES.html": {
    "href": "components.elements/docs/TROUBLES.html",
    "title": "Troubleshooting | System.Dynamic.ExpandoObject",
    "keywords": "Troubleshooting Unfortunately, we don't have a direct solution to your problem at the moment. If you encounter any issues, please file a report on our GitHub. We appreciate your feedback and patience."
  },
  "components.elements/docs/index.html": {
    "href": "components.elements/docs/index.html",
    "title": "AXOpenElements | System.Dynamic.ExpandoObject",
    "keywords": "AXOpenElements This documentation contains information about AXOpenElements library. This library is an integral component of AXOpen. AXOpen is an application framework built on the foundations of SIMATIC-AX and AX# technologies. Utilizing the components described in this document might necessitate a foundational understanding of the AXOpen framework's concepts and methodologies. Additionally, leveraging some advanced features could require a basic familiarity with AX# technology. Additional Resources: AX# Official Documentation UI Rendering Guide Note This document's content is synchronized with the source code of this library. Please note that the images and illustrative visuals included may not mirror the exact appearance in your application. Note Should you identify errors, misleading content, or gaps in this documentation, kindly report the issue here. Alternatively, you're welcome to suggest edits directly by initiating a pull request in this repository. Description The AXOpenElements library provides ability to work with analog a digital I/O signals."
  },
  "components.pneumatics/app/ix-blazor/PneumaticComponents.blazor/wwwroot/css/open-iconic/README.html": {
    "href": "components.pneumatics/app/ix-blazor/PneumaticComponents.blazor/wwwroot/css/open-iconic/README.html",
    "title": "Open Iconic v1.1.1 | System.Dynamic.ExpandoObject",
    "keywords": "Open Iconic v1.1.1 Open Iconic is the open source sibling of Iconic. It is a hyper-legible collection of 223 icons with a tiny footprint—ready to use with Bootstrap and Foundation. View the collection What's in Open Iconic? 223 icons designed to be legible down to 8 pixels Super-light SVG files - 61.8 for the entire set SVG sprite—the modern replacement for icon fonts Webfont (EOT, OTF, SVG, TTF, WOFF), PNG and WebP formats Webfont stylesheets (including versions for Bootstrap and Foundation) in CSS, LESS, SCSS and Stylus formats PNG and WebP raster images in 8px, 16px, 24px, 32px, 48px and 64px. Getting Started For code samples and everything else you need to get started with Open Iconic, check out our Icons and Reference sections. General Usage Using Open Iconic's SVGs We like SVGs and we think they're the way to display icons on the web. Since Open Iconic are just basic SVGs, we suggest you display them like you would any other image (don't forget the alt attribute). <img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\"> Using Open Iconic's SVG Sprite Open Iconic also comes in a SVG sprite which allows you to display all the icons in the set with a single request. It's like an icon font, without being a hack. Adding an icon from an SVG sprite is a little different than what you're used to, but it's still a piece of cake. Tip: To make your icons easily style able, we suggest adding a general class to the <svg> tag and a unique class name for each different icon in the <use> tag. <svg class=\"icon\"> <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use> </svg> Sizing icons only needs basic CSS. All the icons are in a square format, so just set the <svg> tag with equal width and height dimensions. .icon { width: 16px; height: 16px; } Coloring icons is even easier. All you need to do is set the fill rule on the <use> tag. .icon-account-login { fill: #f00; } To learn more about SVG Sprites, read Chris Coyier's guide. Using Open Iconic's Icon Font... …with Bootstrap You can find our Bootstrap stylesheets in font/css/open-iconic-bootstrap.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\"> <span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …with Foundation You can find our Foundation stylesheets in font/css/open-iconic-foundation.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\"> <span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …on its own You can find our default stylesheets in font/css/open-iconic.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\"> <span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> License Icons All code (including SVG markup) is under the MIT License. Fonts All fonts are under the SIL Licensed."
  },
  "components.pneumatics/ctrl/docs/AXOCYLINDER.html": {
    "href": "components.pneumatics/ctrl/docs/AXOCYLINDER.html",
    "title": "AXOpenComponentsPneumatics | System.Dynamic.ExpandoObject",
    "keywords": "AXOpenComponentsPneumatics The AXOpenComponentsPneumatics library controls and operates the basic pneumatic actuators. AxoCylinder AxoCylinder provides the essential control and operation of a basic pneumatic cylinder, including two controlling output signals for both directions and two end-position sensors. The following preconditions need to be met to make AxoCylinder work as expected. two pneumatic valves must be used when the first valve is open and the second one is closed, the cylinder moves in one direction. When the first valve is closed and the second one is open, the cylinder moves in opposite direction when both valves are closed, the cylinder stops and does not move TODO add pneumatic schematics Implementation The AxoCylinder is designed to be used as a member of the AxoContext or AxoObject. Therefore, its instance must be initialized with the proper AxoContext or AxoObject before any use. Also, the hardware signals must be assigned first before calling any method of this instance. To accomplish this, call the Run method cyclically with the proper variables (i.e. inside the Main method of the relevant AxoContext) as in the example below: Example of the initialization and hardware signal assignment VAR PUBLIC PlcInputs : REF_TO PlcInputs; PlcOutputs : REF_TO PlcOutputs; myAxoCylinder : AXOpen.Components.Pneumatics.AxoCylinder; END_VAR To trigger the movements, two public methods, MoveToHome and MoveToWork are present. Example of using MoveToHome method IF myAxoCylinder.MoveToHome().IsDone() THEN ; END_IF; Example of using MoveToWork method IF myAxoCylinder.MoveToWork().IsDone() THEN ; END_IF; To stop the movement, when the cylinder is moving, the public Stop method is present. Example of using Stop method IF myAxoCylinder.Stop().IsDone() THEN ; END_IF; Note If the Stop method does not work as expected, check if your pneumatic circuit meets the precondition. Blocking the movement To block the movement, there are four public methods present: SuspendMoveToHomeWhile(Condition) - Suspends the movement to the home position while the Condition is TRUE. If the task was already invoked, it remains still executing and, with the falling edge of the Condition cylinder, continues its movement to the home position. If the task is invoked when Condition is already TRUE, the task starts to be executed, but the movement starts also with the falling edge of the Condition. SuspendMoveToWorkWhile(Condition) - Works exactly the same as SuspendMoveToHomeWhile(Condition) but in the opposite direction. Example of using SuspendMoveToHomeWhile method myAxoCylinder.SuspendMoveToHomeWhile(_suspendHomeCondition); Example of using SuspendMoveToWorkWhile method myAxoCylinder.SuspendMoveToWorkWhile(_suspendWorkCondition); AbortMoveToHomeWhen(Condition) - Aborts the movement to the home position when the Condition is TRUE. If the task was already invoked, it is restored and disabled. After the falling edge of the Condition cylinder does not continue its movement to the home position. The task needs to be invoked again to start the movement. AbortMoveToWorkWhen(Condition) - Works exactly the same as AbortMoveToHomeWhen(Condition) but in the opposite direction. Example of using AbortMoveToHomeWhen method myAxoCylinder.AbortMoveToHomeWhen(_abortHomeCondition); Example of using AbortMoveToWorkWhen method myAxoCylinder.AbortMoveToWorkWhen(_abortWorkCondition); How to visualize AxoCylinder On the UI side, use the RenderableContentControl and set its Context according to the placement of the instance of the AxoCylinder. <RenderableContentControl Context=\"@Entry.Plc.documentation.myAxoCylinder\" Presentation=\"Command\" />"
  },
  "components.pneumatics/docs/AXOCYLINDER.html": {
    "href": "components.pneumatics/docs/AXOCYLINDER.html",
    "title": "AxoCylinder | System.Dynamic.ExpandoObject",
    "keywords": "AxoCylinder AxoCylinder provides the essential control and operation of a basic pneumatic cylinder, including two controlling output signals for both directions and two end-position sensors. The following preconditions need to be met to make AxoCylinder work as expected. two pneumatic valves must be used when the first valve is open and the second one is closed, the cylinder moves in one direction. When the first valve is closed and the second one is open, the cylinder moves in opposite direction when both valves are closed, the cylinder stops and does not move CONTROLLER .NET TWIN BLAZOR Implementation The AxoCylinder is designed to be used as a member of the AxoContext or AxoObject. Therefore, its instance must be initialized with the proper AxoContext or AxoObject before any use. Also, the hardware signals must be assigned first before calling any method of this instance. To accomplish this, call the Run method cyclically with the proper variables (i.e. inside the Main method of the relevant AxoContext) as in the example below: Example of the initialization and hardware signal assignment Declare component and initialization variables VAR PUBLIC PlcInputs : REF_TO PlcInputs; PlcOutputs : REF_TO PlcOutputs; myAxoCylinder : AXOpen.Components.Pneumatics.AxoCylinder; END_VAR Initialize & Run METHOD PROTECTED OVERRIDE Main myAxoCylinder.Run( THIS, PlcInputs^.ET200SP_DI_8x24VDC_ST_V1_1_1.%X0, PlcInputs^.ET200SP_DI_8x24VDC_ST_V1_1_1.%X1, PlcOutputs^.ET200SP_DQ_8x24VDC_0_5A_ST_V1_1_1.%X0, PlcOutputs^.ET200SP_DQ_8x24VDC_0_5A_ST_V1_1_1.%X0); END_METHOD Important This component requires cyclic data updates, which are typically sourced from the I/O system. Before using the component, make sure you invoke the Run method. Additionally, it's crucial to ensure that the Run method is positioned within a call tree that operates cyclically. Failing to initiate the Run method or not guaranteeing its cyclic execution can lead to malfunctions and unpredictable component behavior. In extreme circumstances, this could cause erratic controller behavior, potentially leading to equipment damage. Example use To trigger the movements, two public methods, MoveToHome and MoveToWork are present. Example of using MoveToHome method IF myAxoCylinder.MoveToHome().IsDone() THEN ; END_IF; Example of using MoveToWork method IF myAxoCylinder.MoveToWork().IsDone() THEN ; END_IF; To stop the movement, when the cylinder is moving, the public Stop method is present. Example of using Stop method IF myAxoCylinder.Stop().IsDone() THEN ; END_IF; Note If the Stop method does not work as expected, check if your pneumatic circuit meets the precondition. Blocking the movement To block the movement, there are four public methods present: SuspendMoveToHomeWhile(Condition) - Suspends the movement to the home position while the Condition is TRUE. If the task was already invoked, it remains still executing and, with the falling edge of the Condition cylinder, continues its movement to the home position. If the task is invoked when Condition is already TRUE, the task starts to be executed, but the movement starts also with the falling edge of the Condition. SuspendMoveToWorkWhile(Condition) - Works exactly the same as SuspendMoveToHomeWhile(Condition) but in the opposite direction. Example of using SuspendMoveToHomeWhile method myAxoCylinder.SuspendMoveToHomeWhile(_suspendHomeCondition); Example of using SuspendMoveToWorkWhile method myAxoCylinder.SuspendMoveToWorkWhile(_suspendWorkCondition); AbortMoveToHomeWhen(Condition) - Aborts the movement to the home position when the Condition is TRUE. If the task was already invoked, it is restored and disabled. After the falling edge of the Condition cylinder does not continue its movement to the home position. The task needs to be invoked again to start the movement. AbortMoveToWorkWhen(Condition) - Works exactly the same as AbortMoveToHomeWhen(Condition) but in the opposite direction. Example of using AbortMoveToHomeWhen method myAxoCylinder.AbortMoveToHomeWhen(_abortHomeCondition); Example of using AbortMoveToWorkWhen method myAxoCylinder.AbortMoveToWorkWhen(_abortWorkCondition); How to visualize AxoCylinder On the UI side, use the RenderableContentControl and set its Context according to the placement of the instance of the AxoCylinder. <RenderableContentControl Context=\"@Entry.Plc.documentation.myAxoCylinder\" Presentation=\"Command\" />"
  },
  "components.pneumatics/docs/HOWTO.html": {
    "href": "components.pneumatics/docs/HOWTO.html",
    "title": "How to | System.Dynamic.ExpandoObject",
    "keywords": "How to AxoCylinder AxoCylinder provides the essential control and operation of a basic pneumatic cylinder, including two controlling output signals for both directions and two end-position sensors. The following preconditions need to be met to make AxoCylinder work as expected. two pneumatic valves must be used when the first valve is open and the second one is closed, the cylinder moves in one direction. When the first valve is closed and the second one is open, the cylinder moves in opposite direction when both valves are closed, the cylinder stops and does not move CONTROLLER .NET TWIN BLAZOR Implementation The AxoCylinder is designed to be used as a member of the AxoContext or AxoObject. Therefore, its instance must be initialized with the proper AxoContext or AxoObject before any use. Also, the hardware signals must be assigned first before calling any method of this instance. To accomplish this, call the Run method cyclically with the proper variables (i.e. inside the Main method of the relevant AxoContext) as in the example below: Example of the initialization and hardware signal assignment Declare component and initialization variables VAR PUBLIC PlcInputs : REF_TO PlcInputs; PlcOutputs : REF_TO PlcOutputs; myAxoCylinder : AXOpen.Components.Pneumatics.AxoCylinder; END_VAR Initialize & Run METHOD PROTECTED OVERRIDE Main myAxoCylinder.Run( THIS, PlcInputs^.ET200SP_DI_8x24VDC_ST_V1_1_1.%X0, PlcInputs^.ET200SP_DI_8x24VDC_ST_V1_1_1.%X1, PlcOutputs^.ET200SP_DQ_8x24VDC_0_5A_ST_V1_1_1.%X0, PlcOutputs^.ET200SP_DQ_8x24VDC_0_5A_ST_V1_1_1.%X0); END_METHOD Important This component requires cyclic data updates, which are typically sourced from the I/O system. Before using the component, make sure you invoke the Run method. Additionally, it's crucial to ensure that the Run method is positioned within a call tree that operates cyclically. Failing to initiate the Run method or not guaranteeing its cyclic execution can lead to malfunctions and unpredictable component behavior. In extreme circumstances, this could cause erratic controller behavior, potentially leading to equipment damage. Example use To trigger the movements, two public methods, MoveToHome and MoveToWork are present. Example of using MoveToHome method IF myAxoCylinder.MoveToHome().IsDone() THEN ; END_IF; Example of using MoveToWork method IF myAxoCylinder.MoveToWork().IsDone() THEN ; END_IF; To stop the movement, when the cylinder is moving, the public Stop method is present. Example of using Stop method IF myAxoCylinder.Stop().IsDone() THEN ; END_IF; Note If the Stop method does not work as expected, check if your pneumatic circuit meets the precondition. Blocking the movement To block the movement, there are four public methods present: SuspendMoveToHomeWhile(Condition) - Suspends the movement to the home position while the Condition is TRUE. If the task was already invoked, it remains still executing and, with the falling edge of the Condition cylinder, continues its movement to the home position. If the task is invoked when Condition is already TRUE, the task starts to be executed, but the movement starts also with the falling edge of the Condition. SuspendMoveToWorkWhile(Condition) - Works exactly the same as SuspendMoveToHomeWhile(Condition) but in the opposite direction. Example of using SuspendMoveToHomeWhile method myAxoCylinder.SuspendMoveToHomeWhile(_suspendHomeCondition); Example of using SuspendMoveToWorkWhile method myAxoCylinder.SuspendMoveToWorkWhile(_suspendWorkCondition); AbortMoveToHomeWhen(Condition) - Aborts the movement to the home position when the Condition is TRUE. If the task was already invoked, it is restored and disabled. After the falling edge of the Condition cylinder does not continue its movement to the home position. The task needs to be invoked again to start the movement. AbortMoveToWorkWhen(Condition) - Works exactly the same as AbortMoveToHomeWhen(Condition) but in the opposite direction. Example of using AbortMoveToHomeWhen method myAxoCylinder.AbortMoveToHomeWhen(_abortHomeCondition); Example of using AbortMoveToWorkWhen method myAxoCylinder.AbortMoveToWorkWhen(_abortWorkCondition); How to visualize AxoCylinder On the UI side, use the RenderableContentControl and set its Context according to the placement of the instance of the AxoCylinder. <RenderableContentControl Context=\"@Entry.Plc.documentation.myAxoCylinder\" Presentation=\"Command\" />"
  },
  "components.pneumatics/docs/README.html": {
    "href": "components.pneumatics/docs/README.html",
    "title": "AXOpenComponentsPneumatics | System.Dynamic.ExpandoObject",
    "keywords": "AXOpenComponentsPneumatics This documentation contains information about AXOpenComponentsPneumatics library. This library is an integral component of AXOpen. AXOpen is an application framework built on the foundations of SIMATIC-AX and AX# technologies. Utilizing the components described in this document might necessitate a foundational understanding of the AXOpen framework's concepts and methodologies. Additionally, leveraging some advanced features could require a basic familiarity with AX# technology. Additional Resources: AX# Official Documentation UI Rendering Guide Note This document's content is synchronized with the source code of this library. Please note that the images and illustrative visuals included may not mirror the exact appearance in your application. Note Should you identify errors, misleading content, or gaps in this documentation, kindly report the issue here. Alternatively, you're welcome to suggest edits directly by initiating a pull request in this repository. Description The AXOpenComponentsPneumatics library controls and operates the basic pneumatic actuators."
  },
  "components.pneumatics/docs/TROUBLES.html": {
    "href": "components.pneumatics/docs/TROUBLES.html",
    "title": "Troubleshooting | System.Dynamic.ExpandoObject",
    "keywords": "Troubleshooting Unfortunately, we don't have a direct solution to your problem at the moment. If you encounter any issues, please file a report on our GitHub. We appreciate your feedback and patience."
  },
  "components.pneumatics/docs/index.html": {
    "href": "components.pneumatics/docs/index.html",
    "title": "AXOpenComponentsPneumatics | System.Dynamic.ExpandoObject",
    "keywords": "AXOpenComponentsPneumatics This documentation contains information about AXOpenComponentsPneumatics library. This library is an integral component of AXOpen. AXOpen is an application framework built on the foundations of SIMATIC-AX and AX# technologies. Utilizing the components described in this document might necessitate a foundational understanding of the AXOpen framework's concepts and methodologies. Additionally, leveraging some advanced features could require a basic familiarity with AX# technology. Additional Resources: AX# Official Documentation UI Rendering Guide Note This document's content is synchronized with the source code of this library. Please note that the images and illustrative visuals included may not mirror the exact appearance in your application. Note Should you identify errors, misleading content, or gaps in this documentation, kindly report the issue here. Alternatively, you're welcome to suggest edits directly by initiating a pull request in this repository. Description The AXOpenComponentsPneumatics library controls and operates the basic pneumatic actuators."
  },
  "core/app/ix-blazor/axopencore.blazor/wwwroot/css/open-iconic/README.html": {
    "href": "core/app/ix-blazor/axopencore.blazor/wwwroot/css/open-iconic/README.html",
    "title": "Open Iconic v1.1.1 | System.Dynamic.ExpandoObject",
    "keywords": "Open Iconic v1.1.1 Open Iconic is the open source sibling of Iconic. It is a hyper-legible collection of 223 icons with a tiny footprint—ready to use with Bootstrap and Foundation. View the collection What's in Open Iconic? 223 icons designed to be legible down to 8 pixels Super-light SVG files - 61.8 for the entire set SVG sprite—the modern replacement for icon fonts Webfont (EOT, OTF, SVG, TTF, WOFF), PNG and WebP formats Webfont stylesheets (including versions for Bootstrap and Foundation) in CSS, LESS, SCSS and Stylus formats PNG and WebP raster images in 8px, 16px, 24px, 32px, 48px and 64px. Getting Started For code samples and everything else you need to get started with Open Iconic, check out our Icons and Reference sections. General Usage Using Open Iconic's SVGs We like SVGs and we think they're the way to display icons on the web. Since Open Iconic are just basic SVGs, we suggest you display them like you would any other image (don't forget the alt attribute). <img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\"> Using Open Iconic's SVG Sprite Open Iconic also comes in a SVG sprite which allows you to display all the icons in the set with a single request. It's like an icon font, without being a hack. Adding an icon from an SVG sprite is a little different than what you're used to, but it's still a piece of cake. Tip: To make your icons easily style able, we suggest adding a general class to the <svg> tag and a unique class name for each different icon in the <use> tag. <svg class=\"icon\"> <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use> </svg> Sizing icons only needs basic CSS. All the icons are in a square format, so just set the <svg> tag with equal width and height dimensions. .icon { width: 16px; height: 16px; } Coloring icons is even easier. All you need to do is set the fill rule on the <use> tag. .icon-account-login { fill: #f00; } To learn more about SVG Sprites, read Chris Coyier's guide. Using Open Iconic's Icon Font... …with Bootstrap You can find our Bootstrap stylesheets in font/css/open-iconic-bootstrap.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\"> <span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …with Foundation You can find our Foundation stylesheets in font/css/open-iconic-foundation.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\"> <span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …on its own You can find our default stylesheets in font/css/open-iconic.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\"> <span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> License Icons All code (including SVG markup) is under the MIT License. Fonts All fonts are under the SIL Licensed."
  },
  "core/ctrl/README.html": {
    "href": "core/ctrl/README.html",
    "title": "| System.Dynamic.ExpandoObject",
    "keywords": ""
  },
  "core/docs/AXOALERTDIALOG.html": {
    "href": "core/docs/AXOALERTDIALOG.html",
    "title": "AlertDialog | System.Dynamic.ExpandoObject",
    "keywords": "AlertDialog The AlertDialog class provides a notification mechanism in application in form of toasts. In-app usage Alerts dialogs can be simply called anywhere from application by injecting IAlertDialogService and calling AddAlertDialog(type, title, message, time) method. Note IAlertDialogService is a scoped service, therefore alerts are unique to each client and are not synchronized. Make sure your Blazor application references axopen_core_blazor project and AxoCore services are added to builder in Program.cs file. builder.Services.AddAxoCoreServices(); Add AxoAlertToast instance to MainLayout.razor file. @using AXOpen.Core.Blazor.AxoAlertDialog <div class=\"page\"> <main> <TopRow /> <article class=\"content px-4\"> @Body </article> </main> <NavMenu /> <AxoAlertToast/> </div> Inject IAlertDialogService into you Blazor component @inject IAlertDialogService _alerts Invoke notification toast from your Blazor view _alertDialogService.AddAlertDialog(type, title, message, time); Where: type: eAlertDialogType enum representing visualization type: Undefined Info Success Danger Warning title: Refers to the header of alert message: Corresponds to the message time: Specifies the duration in seconds for which the alert will be displayed Invoking alerts from PLC Alerts can be invoked from PLC similarly like AxoDialog, however there is no need for user interaction. VAR PUBLIC _alertDialog : AXOpen.Core.AxoAlertDialog; END_VAR //... IF(_alertDialog.Show(THIS) .WithTitle('Plc alert') .WithType(eDialogType#Success) .WithMessage('This is alert invoked from plc!') .WithTimeToBurn(UINT#5).IsShown() = true) THEN //when task is done, move next THIS.MoveNext(); END_IF; Note Alerts invoked from PLC are synchronized across clients. Make sure your Blazor application references axopen_core_blazor project and AxoCore services are added to builder in Program.cs file. Make sure your MainLayout.razor file contains instance of <AxoAlertToast/> component. Add AxoAlertDialogLocator with provided list of observed objects to your view. You can add it either to: MainLayout.razor file, where in consequence alerts will be displayed and synchronized across whole application. Your own razor file, where alerts will be synchronized across multiple clients but only displayed within that specific razor page. Note Make sure, that exist only one instance of AxoAlertDialogLocator either in MainLayout.razor or in your own page. <AxoAlertDialogLocator ObservedObjects=\"new[] {Entry.Plc.Context.PneumaticManipulator}\"/>"
  },
  "core/docs/AXOCOMPONENT.html": {
    "href": "core/docs/AXOCOMPONENT.html",
    "title": "AxoComponent | System.Dynamic.ExpandoObject",
    "keywords": "AxoComponent AxoComponent is an abstract class extending the AxoObject, and it is the base building block for the \"hardware-related devices\" like a pneumatic piston, servo drive, robot, etc., so as for the, let's say, \"virtual devices\" like counter, database, etc. AxoComponent is designed to group all possible methods, tasks, settings, and status information into one consistent class. As the AxoComponent is an abstract class, it cannot be instantiated and must be extended. In the extended class, two methods are mandatory. Restore() - inside this method, the logic for resetting the AxoComponent or restoring it from any state to its initial state should be placed. ManualControl() - inside this method, the logic for manual operations with the component should be placed. To be able to control the AxoComponent instance manually, the method ActivateManualControl() of this instance needs to be called cyclically. The base class contains two additional method to deal with the manual control of the AxoComponent. ActivateManualControl() - when this method is called cyclically, the AxoComponent changes its behavior to manually controllable and ensure the call of the ManualControl() method in the derived class. IsManuallyControllable() -returns TRUE when the AxoComponent is manually controllable. Layout attributes ComponentHeader and ComponentDetails The visual view of the extended AxoComponent on the UI side could be done both ways. Manually with complete control over the design or by using the auto-rendering mechanism of the RenderableContentControl (TODO add a link to docu of the RenderableContentControl) element, which is, in most cases, more than perfect. To take full advantage of the auto-rendering mechanism, the base class has implemented the additional layout attributes ComponentHeader and ComponentDetails(TabName). The auto-rendered view is divided into two parts: the fAxoed one and the expandable one. All AxoComponent members with the ComponentHeader layout attribute defined will be displayed in the fixed part. All members with the ComponentDetails(TabName) layout attribute defined will be displayed in the expandable part inside the TabControl with \"TabName\". All members are added in the order in which they are defined, taking into account their layout attributes like Container(Layout.Wrap) or Container(Layout.Stack). How to implement AxoComponent Example of the implementation very simple AxoComponent with members placed only inside the Header. {#ix-attr:[Container(Layout.Stack)]} {#ix-set:AttributeName = \"AxoComponent with header only example\"} CLASS PUBLIC AxoComponentHeaderOnlyExample EXTENDS AXOpen.Core.AxoComponent METHOD PROTECTED OVERRIDE Restore: IAxoTask // Some logic for Restore could be placed here. For Example: valueReal := REAL#1.0; valueDint := DINT#0; END_METHOD METHOD PROTECTED OVERRIDE ManualControl // Some logic for manual control could be placed here. ; END_METHOD // Main method of the `AxoComponent` that must be // called inside the `AxoContext` cyclically. METHOD PUBLIC Run // Declaration of the input and output variables. // In the case of \"hardware-related\" `AxoComponent`, // these would be the variables linked to the hardware. VAR_INPUT inReal : REAL; inDint : DINT; END_VAR VAR_OUTPUT outReal : REAL; outDint : DINT; END_VAR // This must be called first. SUPER.Open(); // Place the custom logic here. valueReal := valueReal * inReal; valueDint := valueDint + inDint; outReal := valueReal; outDint := valueDint; END_METHOD VAR PUBLIC {#ix-attr:[Container(Layout.Wrap)]} {#ix-attr:[ComponentHeader()]} {#ix-set:AttributeName = \"Real product value\"} valueReal : REAL := REAL#1.0; {#ix-attr:[ComponentHeader()]} {#ix-set:AttributeName = \"Dint sum value\"} valueDint : DINT:= DINT#0; END_VAR END_CLASS How to use AxoComponent The instance of the extended AxoComponent must be defined inside the AxoContext. CLASS ComponentHeaderOnlyExampleContext EXTENDS AxoContext VAR PUBLIC {#ix-set:AttributeName = \"Very simple component example with header only defined\"} MyComponentWithHeaderOnly : AxoComponentHeaderOnlyExample; {#ix-set:AttributeName = \"<#Activate manual control#>\"} ActivateManualControl : BOOL; inHwReal : REAL := REAL#1.0001; inHwDint : DINT := DINT#1; outHwReal : REAL; outHwDint : DINT; END_VAR METHOD PROTECTED OVERRIDE Main // The `Initialize()` method must be called before any other method. MyComponentWithHeaderOnly.Initialize(THIS); // Example of the activation of the manual control. IF ActivateManualControl THEN MyComponentWithHeaderOnly.ActivateManualControl(); END_IF; // Calling the main method `Run` with respective input and output variables. MyComponentWithHeaderOnly.Run(inReal := inHwReal, inDint := inHwDint, outReal => outHwReal, outDint => outHwDint); END_METHOD END_CLASS Inside the Main() method of the related AxoContext following rules must be applied. The Initialize() method of the extended instance of the AxoComponent must be called first. The Run() method with the respective input and output variables must be called afterwards. How to visualize AxoComponent On the UI side use the RenderableContentControl and set its Context according the placement of the instance of the AxoComponent. <RenderableContentControl Context=\"@Entry.Plc.myComponentHeaderOnlyExample.MyComponentWithHeaderOnly\" Presentation=\"Command\" /> The rendered result should then looks as follows: In case of more complex AxoComponent the most important members should be placed in the fixed part (Header) and the rest of the members should be placed inside the expandable part (Details). The members inside the expandable part should be organize inside the tabs. More complex AxoComponent Example of the implementation more complex AxoComponent with members placed also in several tabs inside the expandable part (Details). {#ix-attr:[Container(Layout.Stack)]} {#ix-set:AttributeName = \"AxoComponent example name\"} CLASS PUBLIC AxoComponentExample EXTENDS AXOpen.Core.AxoComponent METHOD PROTECTED OVERRIDE Restore: IAxoTask ; END_METHOD METHOD PROTECTED OVERRIDE ManualControl ; END_METHOD METHOD PUBLIC Run VAR_INPUT inReal : REAL; inDint : DINT; END_VAR VAR_OUTPUT outReal : REAL; outDint : DINT; END_VAR // This must be called first. SUPER.Open(); // Place the custom logic here. Status.SomeStatusValue1 := Status.SomeStatusValue1 * inReal; Status.SomeStatusValue2 := Status.SomeStatusValue2 + inDint; outReal := Status.SomeStatusValue1; outDint := Status.SomeStatusValue2; END_METHOD VAR PUBLIC // Complete structure as a part of the component header. // All structure members are going to be displayed in the component header. {#ix-attr:[Container(Layout.Wrap)]} {#ix-attr:[ComponentHeader()]} Header : Header_ComponentExample; // Two separate tasks as a part of the component header. // These tasks are going to be added to the previous members of the component header. {#ix-attr:[ComponentHeader()]} {#ix-set:AttributeName = \"Header task 1\"} HeaderTask1 : AxoTask; // Complete structure as a part of the component details tab `Tasks`. // All structure members are going to be added to the previous members of the component details tab `Tasks`. {#ix-set:AttributeName = \"Tasks\"} {#ix-attr:[Container(Layout.Stack)]} Tasks : Tasks_ComponentExample; // Single task as a part of the component details tab `Tasks`. // This task is going to be displayed in the component details tab `Tasks` {#ix-attr:[ComponentDetails(\"Tasks\")]} {#ix-attr:[Container(Layout.Stack)]} {#ix-set:AttributeName = \"Detail task in Tasks tab\"} DetailTaskInTasksTab : AxoTask; // Additional separate task as a part of the component header. // This task is going to be added to the previous members of the component header. {#ix-attr:[ComponentHeader()]} {#ix-set:AttributeName = \"Header task 2\"} HeaderTask2 : AxoTask; // Complete structure as a part of the component details tab `Status` as the attribute [ComponentDetails(\"Status\")] // is defined on the class Status_ComponentExample. // All structure members are going to be added to the previous members of the component details tab `Status`. {#ix-set:AttributeName = \"Status class\"} Status :Status_ComponentExample; // Single variable as a part of the component details tab `Status`. // This variable is going to be added to the previous members of the component details tab `Status`. {#ix-attr:[ComponentDetails(\"Status\")]} {#ix-attr:[Container(Layout.Stack)]} {#ix-set:AttributeName = \"Status string\"} Status2 : string; // Additional separate task as a part of the component header. // This task is going to be added to the previous members of the component header. {#ix-attr:[ComponentHeader()]} {#ix-set:AttributeName = \"Header task 3\"} HeaderTask3 : AxoTask; // Complete structure as a part of the component details tab `Settings` as the attribute [ComponentDetails(\"Settings\")] // is defined on the class Settings_ComponentExample. // All structure members are going to be added to the previous members of the component details tab `Settings`. {#ix-set:AttributeName = \"Settings\"} Settings : Settings_ComponentExample; // Complete structure as a part of the component details tab `Diagnostics` as the attribute [ComponentDetails(\"Diagnostics\")] // is defined on the class Diagnostics_ComponentExample. git // All structure members are going to be added to the previous members of the component details tab `Diagnostics`. {#ix-set:AttributeName = \"Diagnostics\"} Diagnostics : Diagnostics_ComponentExample; // Complete structure as a part of the component details tab `Help` as the attribute [ComponentDetails(\"Help\")] // is defined on the class Help_ComponentExample. // All structure members are going to be added to the previous members of the component details tab `Help`. {#ix-set:AttributeName = \"Help\"} Help : Help_ComponentExample; END_VAR END_CLASS For the complex types of the AxoComponent it is also recomended to organize partial groups of the members into the classes as it is in this example. CLASS PUBLIC Header_ComponentExample VAR PUBLIC {#ix-set:AttributeName = \"Start\"} Start : AxoTask; {#ix-set:AttributeName = \"Stop\"} Stop : AxoTask; {#ix-set:AttributeName = \"Status\"} Status : STRING:='Some status description'; END_VAR END_CLASS {#ix-attr:[Container(Layout.Stack)]} {#ix-attr:[ComponentDetails(\"Tasks\")]} CLASS PUBLIC Tasks_ComponentExample VAR PUBLIC {#ix-set:AttributeName = \"Some status value 1\"} SomeStatusValue1 : REAL := REAL#45.3; {#ix-set:AttributeName = \"Some advanced component task 1\"} SomeAdvancedComponentTask1 : AxoTask; {#ix-set:AttributeName = \"Some advanced component task 2\"} SomeAdvancedComponentTask2 : AxoTask; {#ix-set:AttributeName = \"Some advanced component task 3\"} SomeAdvancedComponentTask3 : AxoTask; {#ix-set:AttributeName = \"Some advanced component task 4\"} SomeAdvancedComponentTask4 : AxoTask; {#ix-set:AttributeName = \"Some advanced component task 5\"} SomeAdvancedComponentTask5 : AxoTask; END_VAR END_CLASS {#ix-attr:[Container(Layout.Stack)]} {#ix-attr:[ComponentDetails(\"Status\")]} CLASS PUBLIC Status_ComponentExample VAR PUBLIC {#ix-set:AttributeName = \"Some status value 1\"} SomeStatusValue1 : REAL := REAL#45.3; {#ix-set:AttributeName = \"Some status value 2\"} SomeStatusValue2 : DINT := DINT#46587; {#ix-set:AttributeName = \"Some status value 3\"} SomeStatusValue3 : STRING := 'some description'; END_VAR END_CLASS {#ix-attr:[ComponentDetails(\"Settings\")]} {#ix-attr:[Container(Layout.Stack)]} CLASS PUBLIC Settings_ComponentExample VAR PUBLIC {#ix-set:AttributeName = \"Some setting value 1\"} SomeSettingValue1 : REAL := REAL#45.3; {#ix-set:AttributeName = \"Some setting value 2\"} SomeSettingValue2 : DINT := DINT#46587; {#ix-set:AttributeName = \"Some setting value 3\"} SomeSettingValue3 : STRING := 'some setting'; END_VAR END_CLASS {#ix-attr:[ComponentDetails(\"Diagnostics\")]} {#ix-attr:[Container(Layout.Stack)]} CLASS PUBLIC Diagnostics_ComponentExample VAR PUBLIC {#ix-set:AttributeName = \"Some diagnostic message\"} SomeDiagnosticMessage : STRING := 'TODO: Some diagnostic message needs to be placed here'; END_VAR END_CLASS {#ix-attr:[ComponentDetails(\"Help\")]} {#ix-attr:[Container(Layout.Stack)]} CLASS PUBLIC Help_ComponentExample VAR PUBLIC {#ix-set:AttributeName = \"Some help\"} SomeHelp : STRING := 'TODO: Provide some help'; END_VAR END_CLASS Instantiate and call the AxoComponent instance. CLASS ComponentExampleContext EXTENDS AxoContext VAR PUBLIC {#ix-set:AttributeName = \"Component example name\"} MyComponent : AxoComponentExample; {#ix-set:AttributeName = \"<#Activate manual control#>\"} ActivateManualControl : BOOL; inHwReal : REAL := REAL#1.0001; inHwDint : DINT := DINT#1; outHwReal : REAL; outHwDint : DINT; END_VAR METHOD PROTECTED OVERRIDE Main // The `Initialize()` method must be called before any other method. MyComponent.Initialize(THIS); // Example of the activation of the manual control. IF ActivateManualControl THEN MyComponent.ActivateManualControl(); END_IF; // Calling the main method `Run` with respective input and output variables. MyComponent.Run(inReal := inHwReal, inDint := inHwDint, outReal => outHwReal, outDint => outHwDint); END_METHOD END_CLASS UI side of the AxoComponent. <RenderableContentControl Context=\"@Entry.Plc.myComponentExample.MyComponent\" Presentation=\"Command\" /> and the rendered result: Alarm Level AxoComponent provides visual indicators to represent different alarm levels. Below is an explanation of each alarm level and its corresponding visual indicator. 1. No Alarms Description: No active alarms or messages are present. Icon: There's no visual indicator for this state. 2. Unacknowledged Description: There are messages that are waiting for acknowledgment. 3. Active Info Description: Active informational messages are present. 4. Active Warnings Description: Active warning messages are present. 5. Active Errors Description: Active error messages are present."
  },
  "core/docs/AXOCONTEXT.html": {
    "href": "core/docs/AXOCONTEXT.html",
    "title": "AxoContext | System.Dynamic.ExpandoObject",
    "keywords": "AxoContext AxoContext encapsulates entire application or application units. Any solution may contain one or more contexts, however the each should be considered to be an isolated island and any direct inter-context access to members must be avoided. Note Each AxoContext must belong to a single PLC task.Multiple AxoContexts can be however running on the same task. classDiagram class Context{ +Main()* +Run() } In its basic implementation AxoContext has relatively simple interface. Main is the method where we place all calls of our sub-routines. In other words the Run is the root of the call tree of our program. Run method runs the AxoContext. It must be called cyclically within a program unit that is attached to a cyclic task. Why do we need AxoContext AxoContext provides counters, object identification and other information about the execution of the program. These information is then used by the objects contained at different levels of the AxoContext. How AxoContext works When you call Run method on an instance of a AxoContext, it will ensure opening AxoContext, running Main method (root of all your program calls) and AxoContext closing. flowchart LR classDef run fill:#80FF00,stroke:#0080FF,stroke-width:4px,color:#7F00FF,font-size:15px,font-weight:bold classDef main fill:#ff8000,stroke:#0080ff,stroke-width:4px,color:#7F00FF,font-size:15px,font-weight:bold id1(Open):::run-->id2(#Main*):::main-->id3(Close):::run-->id1 How to use AxoContext Base class for the AxoContext is AXOpen.Core.AxoContext. The entry point of call execution of the AxoContext is Main method. Notice that the AxoContext class is abstract and cannot be instantiated if not extended. Main method must be overridden in derived class notice the use of override keyword and also that the method is protected which means the it is visible only from within the AxoContext and derived classes. How to extend AxoContext class CLASS PUBLIC AxoContextExample EXTENDS AXOpen.Core.AxoContext METHOD PROTECTED OVERRIDE Main // Here goes all your logic for given AxoContext. ; END_METHOD END_CLASS Cyclical call of the AxoContext logic (Main method) is ensured when AxoContext Run method is called. Run method is public therefore accessible and visible to any part of the program that whishes to call it. How to start AxoContext's execution PROGRAM ProgramExample VAR MyContext : AxoContextExample; END_VAR MyContext.Run(); END_PROGRAM"
  },
  "core/docs/AXODIALOG.html": {
    "href": "core/docs/AXODIALOG.html",
    "title": "AxoDialogs | System.Dynamic.ExpandoObject",
    "keywords": "AxoDialogs AxoDialogs provide capability to interact with the user by rising dialogs directly from the PLC program. Example VAR PUBLIC _dialog : AXOpen.Core.AxoDialog; END_VAR //---------------------------------------------- IF(_dialog.Show(THIS) .WithOk() .WithType(eDialogType#Success) .WithCaption('What`s next?') .WithText('To continue click OK?').Answer() = eDialogAnswer#OK) THEN //if answer is ok, move next in sequence THIS.MoveNext(); END_IF; Getting started Make sure your Blazor application references axopen_core_blazor project and AxoCore services are added to builder in Program.cs file. Also, map dialoghub which is needed for dialog synchronization using SignalR technology. builder.Services.AddAxoCoreServices(); //... app.MapHub<DialogHub>(\"/dialoghub\"); Go to your page, where you wish to have dialogs and include AxoDialogLocator component at the end of that page. Provide list of ObservedObjects, on which you want to observe dialogs. You can also provide DialogId, which serves for synchronization of dialogs between multiple clients. If DialogId is not provided, the current URI is used as an id. Important Make sure, that each page has only one instance of AxoDialogLocator and that provided DialogId is unique across the application! If you wish to observe multiple objects, add them into ObservedObjects list. <AxoDialogLocator DialogId=\"custation001\" ObservedObjects=\"new[] {Entry.Plc.Context.PneumaticManipulator}\"/> Now, when dialog is invoked in PLC, it will show on all clients and pages, where AxoDialogLocator is present with corresponding observed objects. The answers are synchronized across multiple clients. AxoDialog types AxoDialogs contains currently 3 types of predefined dialogs: Okay dialog YesNo dialog YesNoCancel dialog Also, the visual type of corresponding dialog can be adjusted with eDialogType enum, which is defined as follows: eDialogType : INT ( Undefined := 0, Info := 10, Success := 20, Danger := 30, Warning := 40 ); Answer synchronization on multiple clients Answers of dialogs are synchronized across multiple clients with the SignalR technology. Closing a dialog with external signal External signals can be provided to dialog instance within a ShowWithExternalClose method, which can be then used to close dialog externally (for example from other page of application, or by pressing a hardware button...). 4 different signals can be monitored in ShowWithExternalClose method: inOkAnswerSignal inYesAnswerSignal inNoAnswerSignal inCancelAnswerSignal Below is an example of closing dialog with _externalCloseOkSignal bool variable, which is set in other part of application: VAR PUBLIC _dialog : AXOpen.Core.AxoDialog; _externalCloseOkSignal : BOOL; _dialogAnswer : eDialogAnswer; END_VAR //---------------------------------------------- _dialogAnswer := _dialog.ShowWithExternalClose(THIS, _externalCloseOkSignal) .WithOK() .WithType(eDialogType#Info) .WithCaption('Hello world!') .WithText('You can also close me externally!').Answer(); IF(_dialog3Answer = eDialogAnswer#Ok) THEN // if answer is provided, move next THIS.MoveNext(); END_IF; Creation of own modal dialog PLC side Create own PLC instance of dialog, which extends AxoDialogBase. Define dialog structure and corresponding show method, which will initialize and invoke remote task needed for dialog creation. Blazor side Define Blazor view of modal dialog, which is then generated by RenderableContentControl according to presentation pipeline. For example, when Dialog plc type is MyCustomModal, the view must by named MyCustomModalDialogView, because implementation is using Dialog presentation type. The Blazor view must inherits from @AxoDialogBaseView<MyCustomModal>, where correct generic type of dialog from PLC must be passed. The opening/closing of dialog is managed in base class by virtual methods, which can be overridden if needed. It is recommended to use provided ModalDialog Blazor component, which can be customized by user needs and is fully compatible with closing/opening synchronization approach provided in base class. Otherwise, the open/close virtual methods from base class must be overridden and accordingly adapted."
  },
  "core/docs/AXOLOGGER.html": {
    "href": "core/docs/AXOLOGGER.html",
    "title": "Logging with AXOpen.Core | System.Dynamic.ExpandoObject",
    "keywords": "Logging with AXOpen.Core Effective logging is vital for monitoring the health and performance of software applications. By providing real-time insights into application behaviour and detailed diagnostic information during troubleshooting, logging plays a crucial role in development, debugging, and ongoing maintenance. In the world of PLC applications, logging can be a bit more complex due to the intricacies of the systems involved. AXOpen.Core, a library developed for industrial automation software, provides robust logging capabilities that meet these specific needs. With the AxoLogger class, it offers a potent tool for logging in both PLC controller software and .NET applications. In this guide, we explore the usage of AXOpen.Core's logging capabilities. We demonstrate how to declare, configure, and utilize the AxoLogger to log messages of various severity levels. We also cover the process of accessing a logger from within a nested object and configuring a logger in a .NET application using the Serilog library. A key aspect we will highlight is the ability to manage the verbosity of logs independently in the controller software and the .NET application, providing you with flexible control over your logging activities. Please keep in mind that excessive logging from the controller can degrade the overall system performance due to the limits imposed by the controller. There's also a limit of 100 log entries that can be stored in the logger's queue. If this limit is reached, the oldest log entries will be removed from the queue as new entries are added. Overview In this example, we illustrate how to use the logging functionalities provided by AxoLogger. Our objective is to create and use loggers, produce log messages of various severity levels, and showcase how to access a logger from the context within a nested object. We'll be using two classes for our demonstration: Loggers and ContextLoggerInNestedObject. CONTROLLER .NET TWIN [!NOTE] AxoLogger works only in conjunction with its .NET counterpart. Ensure that you implement both. Loggers Class The Loggers class is an extension of AxoContext, part of the AXOpen.Core namespace. This class is the central hub for the logging actions carried out in this example. Logger Declarations We declare two instances of AxoLogger, named LoggerOne and LoggerTwo. Additionally, we declare InnerObject, which is an instance of the ContextLoggerInNestedObject class. VAR PUBLIC LoggerOne : AXOpen.Logging.AxoLogger; LoggerTwo : AXOpen.Logging.AxoLogger; InnerObject : ContextLoggerInNestedObject; END_VAR Logging Activities In the Main method, we first inject LoggerOne into THIS, which refers to the current instance of Loggers. Following this injection, we set the minimum log level for LoggerOne to Error using THIS.GetLogger().SetMinimumLevel(eLogLevel#Error);. This configuration ensures that LoggerOne will only log messages with a severity level of Error or higher. Subsequently, we create an error log message and an informational log message using LoggerOne. Note that due to the log level setting, the informational message will not be logged. Next, we inject LoggerTwo into THIS and set the minimum log level for LoggerTwo to Information using THIS.GetLogger().SetMinimumLevel(eLogLevel#Information);. This configuration will cause LoggerTwo to log all messages with a severity level of Information or higher. We then create an error log message and an informational log message using LoggerTwo. Due to the log level setting, both messages will be logged. Finally, we initialize InnerObject and invoke its Foo method to showcase logging from within a nested object. By adjusting the minimum log level for each logger, we can control the severity of messages that each logger will handle. This offers flexibility in categorizing and prioritizing log messages based on their importance. METHOD PROTECTED OVERRIDE Main // Logging to `LoggerOne` THIS.InjectLogger(LoggerOne); // This will report only Errors and more severe THIS.GetLogger().SetMinimumLevel(eLogLevel#Error); THIS.GetLogger().Log('Here I am logging an error.', eLogLevel#Error); THIS.GetLogger().Log('Here I am logging an infomation.', eLogLevel#Information); // Logging to `LoggerTwo` THIS.InjectLogger(LoggerTwo); // This will report all messages from Infomation level and more severe THIS.GetLogger().SetMinimumLevel(eLogLevel#Information); THIS.GetLogger().Log('Here I am logging an error.', eLogLevel#Error); THIS.GetLogger().Log('Here I am logging an infomation.', eLogLevel#Information); // Logging from inner object InnerObject.Initialize(THIS); InnerObject.Foo(); END_METHOD Logging from nested objects This class demonstrates how to fetch and log messages using a logger from a parent context from within a nested object. The Foo method retrieves the context's logger using THIS.GetContext().GetLogger() and logs an Error level message. This shows how to access and use the logger of a containing context, enabling nested objects to utilize the same logging functionalities as their parent. CLASS ContextLoggerInNestedObject EXTENDS AxoObject METHOD PUBLIC Foo THIS.GetContext().GetLogger().Log('Loggin on context logger', eLogLevel#Error, THIS); END_METHOD END_CLASS Summary Through this example, we've shown how to declare and utilize the AxoLogger for logging messages with different levels of severity. We've also illustrated how nested objects can retrieve and use the logger of their parent context to log messages, showcasing a flexible and potent approach to handle logging in applications with complex, nested structures. Initialization of Logger in .NET In this section, we'll be discussing how to initialize the logger in a .NET application, specifically using the Serilog library for logging. We'll also demonstrate how to link the logger to our AxoLogger instances from our previous examples: LoggerOne and LoggerTwo. Initializing Object Identities Before you start logging with AxoLogger, you need to ensure the object identities are initialized. This is important because it allows the AxoLogger to correctly identify the source of log messages, which aids in debugging and log analysis. To initialize the object identities in a .NET part of your application, use the following method: await Entry.Plc.Connector.IdentityProvider.ConstructIdentitiesAsync(); This method call is usually performed during the application initialization process, right after the AxoApplication and loggers are configured. It constructs all the identities required by the application, preparing the AxoLogger for logging. Here's how it could fit into the .NET application initialization process: // Initialize the object identities. Entry.Plc.Connector.SubscriptionMode = ReadSubscriptionMode.Polling; Entry.Plc.Connector.BuildAndStart().ReadWriteCycleDelay = 250; await Entry.Plc.Connector.IdentityProvider.ConstructIdentitiesAsync(); This sets up the AxoApplication, configures a logger with Serilog, initializes the object identities, and then connects AxoLogger instances to the application. Remember to always await the ConstructIdentitiesAsync method, as it is an asynchronous operation and your application should not proceed until it has been completed. This ensures all object identities are fully initialized before your AxoLogger instances start logging. Important Failure to initialize object identities before starting the logging process can result in incorrect or incomplete log entries, which can hinder the debugging and analysis of your application. Always ensure that object identities are correctly initialized before you start logging. Creating the AxoApplication Before initializing the logger, we first create an instance of AxoApplication using the CreateBuilder method. This sets up the application builder required for the logger configuration. var axoAppBuilder = AxoApplication.CreateBuilder(); Configuring the Logger Next, we configure our logger. We are using the Serilog library, a popular .NET logging library that allows flexible and complex logging setups. In this example, we're creating a simple setup where all logs of any level (Verbose level and above) will be written to the console. // Creates serilog logger with single sink to Console window. axoAppBuilder.ConfigureLogger(new SerilogLogger(new LoggerConfiguration() .WriteTo.Console().MinimumLevel.Verbose() .CreateLogger())); This code sets up a new Serilog logger with a single sink directed to the console window. The MinimumLevel.Verbose() method specifies that all logs, regardless of their severity level, will be outputted to the console. Connecting Loggers to the Application Finally, we connect our previously defined AxoLogger instances, LoggerOne and LoggerTwo, to our application. Entry.Plc.AxoLoggers.LoggerOne.StartDequeuing(AxoApplication.Current.Logger, 250); The StartDequeuing method is now called with two parameters. The first parameter AxoApplication.Current.Logger refers to the instance of the logger that was created and configured in the previous step. The second parameter is 250. This starts a loop that dequeues log messages from the AxoLogger's message queue every 250 milliseconds, passing them to the configured sinks—in our case, the console window. Adding Custom Target Loggers The Serilog library allows you to add and configure custom target loggers. In the previous example, we've used AxoApplication.Current.Logger as our target logger. This is the logger instance created and configured during the application setup. However, if you want to log messages to a different target, you can create and configure additional Serilog loggers. For example, you might want to create a logger that writes to a file, a database, or a remote logging server. To add a new target logger, you would follow similar steps as before, but specify your custom target in the WriteTo method. var fileLogger = new LoggerConfiguration() .WriteTo.File(\"log.txt\") .CreateLogger(); var databaseLogger = new LoggerConfiguration() .WriteTo.MyDatabase(myConnectionString) .CreateLogger(); In these examples, fileLogger is a logger that writes logs to a text file named log.txt, and databaseLogger is a logger that writes logs to a database, using a connection string myConnectionString. The WriteTo.MyDatabase(myConnectionString) method is a placeholder; replace this with the appropriate method for your specific database sink. After creating these loggers, you can connect them to your AxoLogger instances using the StartDequeuing method, just as we did before with AxoApplication.Current.Logger. Entry.Plc.AxoLoggers.LoggerOne.StartDequeuing(fileLogger, 250); Entry.Plc.AxoLoggers.LoggerTwo.StartDequeuing(databaseLogger, 250); In this configuration, LoggerOne will send its queued log messages to log.txt every quarter of a second, while LoggerTwo will send its messages to the specified database. Please note that these are just examples, and the Serilog library supports many different types of log targets (also known as \"sinks\"), which you can use to customize the logging behavior of your application as needed. Always refer to the official Serilog documentation for more detailed information and the latest features. Summary This example showcases how to initialize a logger in a .NET application using the Serilog library and then how to connect the AxoLogger instances from our Loggers class to it. With this setup, the AxoLogger instances will send their queued log messages to the console every quarter of a second. Important In the context of logging level configuration, it's important to note that the minimum logging level of the .NET logger (set up in C#) and the AxoLogger (set up in the controller's software) are independent settings. You can configure them individually to fine-tune the verbosity of your logs both at the controller level and in your .NET application. AxoLogger and AxoMessenger AxoMessenger uses Context AxoLogger to log the rising and falling of an alarm. There is no particular need for the configuration fo this behaviour. Here are the mappings between eAxoMessageCategory and eLogLevel as per the code: Trace messages are logged as Verbose. Debug messages are logged as Debug. Info, TimedOut, and Notification messages are logged as - Information. Warning messages are logged as Warning. Error and ProgrammingError messages are logged as Error. Critical, Fatal, and Catastrophic messages are logged as Fatal. Limitations Log Entry Limit Important Please note that the AxoLogger instances in this example (LoggerOne and LoggerTwo) have an internal limit of 100 log entries. This means that once the number of log entries in the logger's queue reaches this limit, any new log entries will be discarded until older log entries are dequeued and the total number drops below this limit. This limit is designed to prevent excessive memory usage if the dequeuing process is unable to keep up with the rate of new log entries. Regularly dequeuing log entries, as shown in this example with the StartDequeuing(250) calls, helps to ensure that log entries are processed promptly and do not exceed this limit. As always, it is important to consider the potential for high rates of log entries when designing your application's logging strategy and ensure that your dequeuing interval and log entry limit are appropriately configured for your specific needs. Logging Performance Considerations Important Logging in an application, while essential for debugging and monitoring, can impact the overall performance of your controller, especially when logging at high rates. The controller may have resource limitations such as CPU power and memory, which can be strained by excessive logging activities. Each log operation involves creating the log entry, formatting it, and adding it to the logger's message queue. These operations consume computational resources and memory. If the log entry queue becomes excessively large due to high logging rates and insufficient dequeuing, it can further strain the controller's resources. Also, note that the communication between the controller and the logger can introduce additional latency, especially if network-based logging is used. If a large number of log entries are sent over the network, this can congest the network and slow down other network operations. Therefore, it is crucial to balance the need for detailed logging with the impact on the controller's performance and resource usage. It's recommended to carefully select what needs to be logged based on its importance and potential to aid in debugging and monitoring. Optimizing the logging level, choosing an appropriate dequeuing interval, and regularly reviewing and maintaining your logging strategy can help to minimize the performance impact. Always keep these considerations in mind when designing and implementing logging in your applications, particularly in resource-constrained environments such as controllers."
  },
  "core/docs/AXOMESSENGER.html": {
    "href": "core/docs/AXOMESSENGER.html",
    "title": "AxoMessenger | System.Dynamic.ExpandoObject",
    "keywords": "AxoMessenger Static AxoMessenger is a class that provides a mechanism for delivering static messages to the supervising applications (SCADA/HMI). This static messenger uses the text defined in the declaration. This text cannot be changed during runtime as the text is \"transferred\" just once during the compilation, and it is not read during the runtime. The PLC code of the AxoMessenger just ensures the activation, deactivation and acknowledgement of the messages. AxoMessenger contains the following public methods. Serve() - this method must be called cyclically. It ensures the initialization of the instance so as the deactivation of the message. classDiagram class AxoMessenger{ +Serve(IAxoContext _context) +Serve(IAxoObject _object) } Activate(_category) - this method immediately activates the message of the category where the _category is of the type eAxoMessageCategory. Deactivation is detected after one PLC cycle without calling the method Activate. ActivateOnCondition(_condition,_category) - this method activates the message of the category where the _category is of the type eAxoMessageCategory on the rising edge of the _condition and immediately deactivates the message on the falling edge of the _condition. The ActivateOnCondition method is designed to be called cyclically. ActivateOnCondition(_messageCode,_condition,_category) - this method activates the message of the category where the _category is of the type eAxoMessageCategory on the rising edge of the _condition and immediately deactivates the message on the falling edge of the _condition. The ActivateOnCondition method is designed to be called cyclically. By using the _messageCode of value greater than zero, the proper item of the text list is used as a text message. The text list can be declared in the PLC code by using the PlcTextList attribute or on the .NET side. Note Do not use different activation methods on the same AxoMessenger instance. Please use just one of them. Restore() - restores all members of this instance to their initial states. Depending on the eAxoMessageCategory the messenger should require the acknowledgement. By default the acknowledgement is not required for the levels Trace,Debug,Info,TimedOut,Notification and Warning. This could be overwritten by calling the RequireAcknowledgement() method. Contrariwise, the acknowledgement is required for the levels Error,ProgrammingError,Critical,Fatal and Catastrophic by default. This could be overwritten by calling the DoNotRequireAcknowledgement() method. Attributes MessageText, Help and PlcTextList These attributes are used to set the values of the static texts of the messenger. These values are read out at the compilation time, transferred to .NET counterpart and set as constant strings. Therefore, they can't be changed at the runtime. Example of declaration of the instance and defining the attributes MessageText and Help. {#ix-set:MessageText = \"<#Static message text for messenger 1 declared in the PLC code#>\"} {#ix-set:Help = \"<#Static help text for messenger 1 declared in the PLC code#>\"} _messenger1 : AXOpen.Messaging.Static.AxoMessenger; Example of declaration of the instance and defining the attribute PlcTextList. {#ix-set:PlcTextList = \"[10]:'<#Messenger 3: static message text for message code 10 declared in the PLC code#>':'<#Messenger 3: static help text for message code 10 declared in the PLC code#>';[20]:'<#Messenger 3: static message text for message code 20 declared in the PLC code#>':'<#Messenger 3: static help text for message code 20 declared in the PLC code#>'\"} _messenger3 : AXOpen.Messaging.Static.AxoMessenger; How to use AxoMessenger The instance of the AxoMessenger must be defined inside the AxoContext or AxoObject. Inside the Main() method of the related AxoContext or inside the cyclically called method of the AxoObject, the following rules must be applied. The Serve() method of the instance of the AxoMessenger must be called cyclically. The Activate method should be used called the required condition, or the ActivateOnCondition method should be called cyclically. In the case of ActivateOnCondition method is used without _messageCode parameter for the MessageText and Help, the values from the attributes MessageText and Help defined in the PLC code are used. In the case of ActivateOnCondition method is used with _messageCode parameter greater than zero for the MessageText and Help, the values from the text list are used. In the case of PlcTextList attribute is defined, the parsed values from this attribute are used. In the case of PlcTextList attribute is not defined, the text list should be defined on the .NET side as in the example below. public partial class Messengers : AXOpen.Core.AxoContext { partial void PostConstruct(ITwinObject parent, string readableTail, string symbolTail) { try { InitializeMessenger4(); } catch (Exception) { throw; } } private void InitializeMessenger4() { List<KeyValuePair<ulong, AxoMessengerTextItem>> messengerTextList = new List<KeyValuePair<ulong, AxoMessengerTextItem>> { new KeyValuePair<ulong, AxoMessengerTextItem>(0, new AxoMessengerTextItem(\" \", \" \")), new KeyValuePair<ulong, AxoMessengerTextItem>(10, new AxoMessengerTextItem(\"Messenger 4: static message text for message code 10 declared in .NET\", \"Messenger 5: static help text for message code 10 declared in .NET\")), new KeyValuePair<ulong, AxoMessengerTextItem>(20, new AxoMessengerTextItem(\"Messenger 4: static message text for message code 20 declared in .NET\", \"Messenger 5: static help text for message code 20 declared in .NET\")), new KeyValuePair<ulong, AxoMessengerTextItem>(30, new AxoMessengerTextItem(\"Messenger 4: static message text for message code 30 declared in .NET\", \"Messenger 5: static help text for message code 30 declared in .NET\")), new KeyValuePair<ulong, AxoMessengerTextItem>(40, new AxoMessengerTextItem(\"Messenger 4: static message text for message code 40 declared in .NET\", \"Messenger 5: static help text for message code 40 declared in .NET\")), new KeyValuePair<ulong, AxoMessengerTextItem>(50, new AxoMessengerTextItem(\"Messenger 4: static message text for message code 50 declared in .NET\", \"Messenger 5: static help text for message code 50 declared in .NET\")) }; _messenger4.DotNetMessengerTextList = messengerTextList; } } Avoid mixing several activation principles with the same instance. If necessary, the default behaviour of the acknowledgeable messenger should be changed as follows. _messenger2.ActivateOnCondition(_messenger2condition,eAxoMessageCategory#Error).DoNotRequireAcknowledgement(); Contrariwise, the default behaviour of the unacknowledgeable messenger should be changed as follows. _messenger2.ActivateOnCondition(_messenger2condition,eAxoMessageCategory#Warning).RequireAcknowledgement(); How to visualize AxoMessenger On the UI side, use the RenderableContentControl and set its Context according to the placement of the instance of the AxoMessenger. <RenderableContentControl Context=\"@Entry.Plc.AxoMessengersDocu._messenger1\" Presentation=\"Command-Control\" Class=\"ps-2\"/> See also AxoLogger"
  },
  "core/docs/AXOMOMENTARYTASK.html": {
    "href": "core/docs/AXOMOMENTARYTASK.html",
    "title": "AxoMomentaryTask | System.Dynamic.ExpandoObject",
    "keywords": "AxoMomentaryTask AxoMomentaryTask provides basic momentary function. It is mainly designed for some manual operations from the UI side. AxoMomentaryTask needs to be initialized to set the proper AxoContext. AxoMomentaryTask initialization within a AxoContext CLASS AxoMomentaryTaskDocuExample EXTENDS AXOpen.Core.AxoContext VAR PUBLIC {#ix-set:AttributeName = \"<#Momentary task example#>\"} {#ix-set:AttributeStateOnDesc = \"<#Currently On#>\"} {#ix-set:AttributeStateOffDesc = \"<#Currently Off#>\"} _myMomentaryTask : AxoMomentaryTask; END_VAR METHOD PUBLIC Initialize // Initialization of the context needs to be called first // It does not need to be called cyclically, just once _myMomentaryTask.Initialize(THIS); END_METHOD END_CLASS To check the state of the task there are two methods: IsSwitchOn() - returns TRUE if the state of the task is TRUE. IsSwitchOff() - returns TRUE if the state of the task is FALSE. Example of using IsSwitchOn() method: IF _myMomentaryTask.IsSwitchedOn() THEN ; // do something END_IF; Example of using IsSwitchOff() method: IF _myMomentaryTask.IsSwitchedOff() THEN ; // do something END_IF; Moreover, there are five more \"event-like\" methods that are called when a specific event occurs (see the chart below). To implement any of the already mentioned \"event-like\" methods the new class that extends from the AxoMomentaryTask needs to be created. The required method with PROTECTED OVERRIDE access modifier needs to be created as well, and the custom logic needs to be placed in. These methods are: OnSwitchedOn() - executes once when the task changes its state from FALSE to TRUE. OnSwitchedOff() - executes once when the task changes its state from TRUE to FALSE. OnStateChanged() - executes once when the task changes its state. SwitchedOn() - executes repeatedly while the task is in TRUE state. SwitchedOff() - executes repeatedly while the task is in FALSE state. Example of implementing \"event-like\" methods: CLASS MyMomentaryTaskExample Extends AxoMomentaryTask VAR OnSwitchedOnCounter : ULINT; OnSwitchedOffCounter : ULINT; OnStateChangedCounter : ULINT; SwitchOnExecutionCounter : ULINT; SwitchOffExecutionCounter : ULINT; END_VAR METHOD PROTECTED OVERRIDE OnSwitchedOn OnSwitchedOnCounter := OnSwitchedOnCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnSwitchedOff OnSwitchedOffCounter := OnSwitchedOffCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnStateChanged OnStateChangedCounter := OnStateChangedCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE SwitchedOn SwitchOnExecutionCounter := SwitchOnExecutionCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE SwitchedOff SwitchOffExecutionCounter := SwitchOffExecutionCounter + ULINT#1; END_METHOD END_CLASS How to visualize AxoMomentaryTask On the UI side there are several possibilities how to visualize the AxoMomentaryTask. You use the AxoMomentaryTaskView and set its Component according the placement of the instance of the AxoMomentaryTask. Based on the value of Disable the control element could be controllable: <AxoMomentaryTaskView Component=\"@Entry.Plc.AxoMomentaryTaskDocu._myMomentaryTask\" Disable=\"false\" /> or display only: <AxoMomentaryTaskView Component=\"@Entry.Plc.AxoMomentaryTaskDocu._myMomentaryTask\" Disable=\"true\" /> The next possibility is to use the RenderableContentControl and set its Context according the placement of the instance of the AxoMomentaryTask. Again as before the element could be controlable when the value of the Presentation is Command: <RenderableContentControl Context=\"@Entry.Plc.AxoMomentaryTaskDocu._myMomentaryTask\" Presentation=\"Command\" /> or display only when the value of the Presentation is Status <RenderableContentControl Context=\"@Entry.Plc.AxoMomentaryTaskDocu._myMomentaryTask\" Presentation=\"Status\" /> The displayed result should looks like:"
  },
  "core/docs/AXOOBJECT.html": {
    "href": "core/docs/AXOOBJECT.html",
    "title": "AxoObject | System.Dynamic.ExpandoObject",
    "keywords": "AxoObject AxoObject is the base class for any other classes of AXOpen.Core. It provides access to the parent AxoObject and the AxoContext in which it was initialized. classDiagram class Object{ +Initialize(IAxoContext context) +Initialize(IAxoObject parent) } AxoObject initialization within a AxoContext CLASS PUBLIC MyContext EXTENDS AXOpen.Core.AxoContext VAR _myObject : AxoObject; END_VAR METHOD PROTECTED OVERRIDE Main _myObject.Initialize(THIS); END_METHOD END_CLASS AxoObject initialization within another AxoObject CLASS PUBLIC MyParentObject EXTENDS AxoContext VAR _myChildObject : AxoObject; END_VAR METHOD PROTECTED OVERRIDE Main _myChildObject.Initialize(THIS); END_METHOD END_CLASS"
  },
  "core/docs/AXOREMOTETASK.html": {
    "href": "core/docs/AXOREMOTETASK.html",
    "title": "AxoRemoteTask | System.Dynamic.ExpandoObject",
    "keywords": "AxoRemoteTask AxoRemoteTask provides task execution, where the execution of the task is deferred to .NET environment. AxoRemoteTask derives from AxoTask. AxoRemoteTask needs to be initialized to set the proper AxoContext. Important The deferred execution in .NET environment is not hard-real time nor deterministic. You would typically use the AxoRemoteTask when it would be hard to achieve a goal in the PLC, but you can delegate the access to the non-hard-real and nondeterministic environment. Examples of such use would be database access, complex calculations, and email sending. AxoTask initialization within a AxoContext _remoteTask.Initialize(THIS); // THIS = IAxoContext There are two key methods for managing the AxoRemoteTask: Invoke() fires the execution of the AxoRemoteTask (can be called fire&forget or cyclically) Execute() method must be called cyclically. In contrast to AxoTask the method does not execute any logic. You will need to call the Execute method cyclically which will deffer the logic execution in .NET environment. There are the following differences in behavior of DoneWhen and ThrowWhen methods: DoneWhen(Done_Condition) - Unlike AxoTask Done condition is handled internally. It does not have an effect. ThrowWhen(Error_Condition) - Unlike AxoTask Exception emission is handled internally. It does not have an effect. For termination of the execution of the AxoRemoteTask there are the following methods: Abort() - terminates the execution of the AxoRemoteTask and enters the Ready state if the AxoRemoteTask is in the Busy state; otherwise does nothing. To reset the AxoRemoteTask from any state at any moment, there is the following method: Restore() acts as a reset of the AxoRemoteTask (sets the state into Ready from any state of the AxoRemoteTask). The AxoRemoteTask executes upon the Invoke method call. Invoke fires the execution of Execute logic upon the first call, and Invoke does not need cyclical calling. _remoteTask.Invoke('hello'); Invoke() method returns IAxoTaskState with the following members: IsBusy indicates the execution started and is running. IsDone indicates the execution completed with success. HasError indicates the execution terminated with a failure. IsAborted indicates that the execution of the AxoRemoteTask has been aborted. It should continue by calling the method Resume(). Task initialization in .NET Entry.Plc.AxoRemoteTasks._remoteTask.Initialize(() => Console.WriteLine($\"Remote task executed PLC sent this string: '{Entry.Plc.AxoRemoteTasks._remoteTask.Message.GetAsync().Result}'\")); In this example, when the PLC invokes this task it will write a message into console. You can use arbitrary code in place of the labmda expression. Executing from PLC Invoking the AxoRemoteTask and waiting for its completion at the same place. IF(_remoteTask.Invoke('hello').IsDone()) THEN _doneCounter := _doneCounter + 1; END_IF; Invoking the AxoRemoteTask and waiting for its completion at the different places. // Fire & Forget _remoteTask.Invoke('hello'); // Wait for done somwhere else IF(_remoteTask.IsDone()) THEN _doneCounter := _doneCounter + 1; END_IF; Checking if the AxoRemoteTask is executing. IF(_remoteTask.IsBusy()) THEN ;// Do something after task started END_IF; Check for the AxoRemoteTask's error state. IF(_remoteTask.HasError()) THEN ;// Do something when an exception occurs on remote task. END_IF;"
  },
  "core/docs/AXOSEQUENCER.html": {
    "href": "core/docs/AXOSEQUENCER.html",
    "title": "AxoSequencer | System.Dynamic.ExpandoObject",
    "keywords": "AxoSequencer AxoSequencer is an AxoCordinator class provides triggering the AxoStep-s inside the sequence in the order they are written. AxoSequencer extends from AxoTask so it also has to be initialized by calling its Initialize() method and started using its Invoke() method. AxoSequencer contains following methods: Open(): this method must be called cyclically before any logic. All the logic of the sequencers must be placed inside the if condition. It provides some configuration mechanism that ensures that the steps are going to be executed in the order, they are written. During the very first call of the sequence, no step is executed as the AxoSequencer is in the configuring state. From the second context cycle after the AxoSequencer has been invoked the AxoSequencer change its state to running and starts the execution from the first step upto the last one. When AxoSequencer is in running state, order of the step cannot be changed. MoveNext(): Terminates the currently executed step and moves the AxoSequencer's pointer to the next step in order of execution. RequestStep(): Terminates the currently executed step and set the AxoSequencer's pointer to the order of the RequestedStep. When the order of the RequestedStep is higher than the order of the currently finished step (the requested step is \"after\" the current one) the requested step is started in the same context cycle. When the order of the RequestedStep is lower than the order of the currently finished step (the requested step is \"before\" the current one) the requested step is started in the next context cycle. CompleteSequence(): Terminates the currently executed step, completes (finishes) the execution of this AxoSequencer and set the coordination state to Idle. If the SequenceMode of the AxoSequencer is set to Cyclic, following Open() method call in the next context cycle switch it again into the configuring state, reasign the order of the individual steps (even if the orders have been changed) and subsequently set AxoSequencer back into the running state. If the SequenceMode of the AxoSequencer is set to RunOnce, terminates also execution of the AxoSequencer itself. `GetCoordinatorState()': Returns the current state of the AxoSequencer. Idle Configuring: assigning the orders to the steps, no step is executed. Running: orders to the steps are already assigned, step is executed. SetSteppingMode(): Sets the stepping mode of the AxoSequencer. Following values are possible. None: StepByStep: if this mode is choosen, each step needs to be started by the invocation of the StepIn commmand. Continous: if this mode is choosen (default), each step is started automaticcaly after the previous one has been completed. GetSteppingMode(): Gets the current stepping mode of the AxoSequencer. SetSequenceMode(): Sets the sequence mode of the AxoSequencer. Following values are possible. None: RunOnce: if this mode is choosen, after calling the method CompleteSequence() the execution of the sequence is terminated. Cyclic: if this mode is choosen (default), after calling the method CompleteSequence() the execution of the sequence is \"reordered\" and started from beginning. GetSequenceMode(): Gets the current sequence mode of the AxoSequencer. GetNumberOfConfiguredSteps(): Gets the number of the configured steps in the sequence. Example of using AxoSequencer Example of the declaration of the AxoSequencer and AxoStep CLASS AxoSequencerDocuExample EXTENDS AXOpen.Core.AxoContext VAR PUBLIC _mySequencer : AXOpen.Core.AxoSequencer; _step_1 : AxoStep; _step_2 : AxoStep; _step_3 : AxoStep; _myCounter : ULINT; END_VAR END_CLASS Initialization Initialization of the context needs to be called first. It does not need to be called cyclically, just once. METHOD PUBLIC Initialize _mySequencer.Initialize(THIS); _step_1.Initialize(THIS); _step_2.Initialize(THIS); _step_3.Initialize(THIS); END_METHOD Open The Open() method must be called cyclically before any logic. All the logic of the sequencers must be placed inside the if condition, as follows. THIS.Initialize(); IF _mySequencer.Open() THEN //All sequence logic needs to be placed inside the condition _myCounter := _myCounter + ULINT#1; IF _step_1.Execute(_mySequencer) THEN IF (_myCounter > ULINT#50) THEN _mySequencer.MoveNext(); END_IF; END_IF; IF _step_2.Execute(_mySequencer) THEN IF (_myCounter > ULINT#100) THEN _mySequencer.MoveNext(); END_IF; END_IF; IF _step_3.Execute(_mySequencer) THEN IF (_myCounter > ULINT#150) THEN _myCounter := ULINT#0; _mySequencer.CompleteSequence(); END_IF; END_IF; END_IF; Step Example of the most simple use of the Execute() method of the AxoStep class, only with the AxoCoordinator defined. IF _step_1.Execute(_mySequencer) THEN _myCounter := _myCounter + ULINT#1; // do something IF (_myCounter MOD ULINT#5) = ULINT#0 THEN // continue to the next step of the sequence _mySequencer.MoveNext(); END_IF; END_IF; Example of use of the Execute() method of the AxoStep class with the Enable condition. This step is going to be executed just in the first run of the sequence, as during the second one, the Enable parameter will have the value of FALSE. IF _step_2.Execute(coord := _mySequencer, Enable := _myCounter <= ULINT#20) THEN _myCounter := _myCounter + ULINT#1; IF _myCounter = ULINT#20 THEN // Jumping to step 1. As it is jumping backwards, the execution of step 1 // is going to be started in the next context cycle. _mySequencer.RequestStep(_step_1); END_IF; END_IF; Example of use of the Execute() method of the AxoStep class with all three parameters defined. IF _step_3.Execute(coord := _mySequencer, Enable := TRUE, Description := 'This is a description of the step 3' ) THEN _myCounter := _myCounter + ULINT#1; IF (_myCounter MOD ULINT#7) = ULINT#0 THEN // Finalize the sequence and initiate the execution from the first step. _mySequencer.CompleteSequence(); END_IF; END_IF;"
  },
  "core/docs/AXOSEQUENCERCONTAINER.html": {
    "href": "core/docs/AXOSEQUENCERCONTAINER.html",
    "title": "AxoSequencerContainer | System.Dynamic.ExpandoObject",
    "keywords": "AxoSequencerContainer AxoSequencerContainer is an AxoCordinator class that extends from AxoSequencer. The main difference is that this class is abstract so it is not possible to instantiate it directly. The user-defined class that extends from AxoSequencerContainer needs to be created and then instantiated. In the extended class MAIN() method needs to be created and all sequencer logic needs to be placed there. Then the sequencer is called via Run(IAxoObject) or Run(IAxoContext) methods, that ensure initialization of the sequencer with AxoObject or with AxoContext. Moreover the Run() method also ensures calling the Open() method, so it is not neccessary to call it explicitelly in comparison with AxoSequencer. Example of using AxoSequencerContainer Example of the declaration of the user-defined class that extends from AxoSequencerContainer CLASS AxoSequencerContainerDocuExample EXTENDS AXOpen.Core.AxoSequencerContainer VAR PUBLIC _step_1 : AxoStep; _step_2 : AxoStep; _step_3 : AxoStep; _myCounter : ULINT; END_VAR END_CLASS Example of implementation MAIN method inside the user-defined class that extends from AxoSequencerContainer All the custom logic of the sequencer needs to be placed here. METHOD PROTECTED OVERRIDE MAIN _step_1.Initialize(THIS); _step_2.Initialize(THIS); _step_3.Initialize(THIS); _myCounter := _myCounter + ULINT#1; IF(_step_1.Execute(THIS)) THEN IF(_myCounter >= ULINT#100 ) THEN _myCounter := ULINT#0; THIS.MoveNext(); END_IF; END_IF; IF(_step_2.Execute(THIS)) THEN IF(_myCounter >= ULINT#100) THEN _myCounter := ULINT#0; THIS.MoveNext(); END_IF; END_IF; IF(_step_3.Execute(THIS)) THEN IF(_myCounter >= ULINT#100) THEN _myCounter := ULINT#0; _step_3.ThrowWhen(TRUE); THIS.CompleteSequence(); END_IF; END_IF; END_METHOD Example of declaration of the instance of the user-defined class that extends from AxoSequencerContainer VAR PUBLIC _mySequencerContainer : AxoSequencerContainerDocuExample; END_VAR Example of calling of the instance of the user-defined class that extends from AxoSequencerContainer _mySequencerContainer.Run(THIS);"
  },
  "core/docs/AXOSTEP.html": {
    "href": "core/docs/AXOSTEP.html",
    "title": "AxoStep | System.Dynamic.ExpandoObject",
    "keywords": "AxoStep AxoStep is an extension class of the AxoTask and provides the basics for the coordinated controlled execution of the task in the desired order based on the coordination mechanism used. AxoStep contains the Execute() method so as its base class overloaded and extended by following parameters: coord (mandatory): instance of the coordination controlling the execution of the AxoStep. Enable (optional): if this value is FALSE, AxoStep body is not executed and the current order of the execution is incremented. Description (optional): AxoStep description text describing the action the AxoStep is providing. AxoStep class contains following public members: Order: Order of the AxoStep in the coordination. This value can be set by calling the method SetStepOrder() and read by the method GetStepOrder(). StepDescription: AxoStep description text describing the action the AxoStep is providing. This value can be set by calling the Execute() method with Description parameter. IsActive: if TRUE, the AxoStep is currently executing, or is in the order of the execution, otherwise FALSE. This value can be set by calling the method SetIsActive() and read by the method GetIsActive(). IsEnabled: if FALSE, AxoStep body is not executed and the current order of the execution is incremented. This value can be set by calling the method SetIsEnabled() or calling the Execute() method with Enable parameter and read by the method GetIsEnabled()."
  },
  "core/docs/AXOTASK.html": {
    "href": "core/docs/AXOTASK.html",
    "title": "AxoTask | System.Dynamic.ExpandoObject",
    "keywords": "AxoTask AxoTask provides basic task execution. AxoTask needs to be initialized to set the proper AxoContext. AxoTask initialization within a AxoContext CLASS AxoTaskDocuExample EXTENDS AXOpen.Core.AxoContext VAR PUBLIC {#ix-set:AttributeName = \"<#Task name#>\"} _myTask : AxoTask; _myCounter : ULINT; END_VAR METHOD PUBLIC Initialize // Initialization of the context needs to be called first // It does not need to be called cyclically, just once _myTask.Initialize(THIS); END_METHOD END_CLASS There are two key methods for managing the AxoTask: Invoke() fires the execution of the AxoTask (can be called fire&forget or cyclically) Execute() method must be called cyclically. The method returns TRUE when the AxoTask is required to run until enters Done state or terminates in error. For termination of the execution of the AxoTask there are following methods: DoneWhen(Done_Condition) - terminates the execution of the AxoTask and enters the Done state when the Done_Condition is TRUE. ThrowWhen(Error_Condition) - terminates the execution of the AxoTask and enters the Error state when the Error_Condition is TRUE. Abort() - terminates the execution of the AxoTask and enters the Ready state if the AxoTask is in the Busy state, otherwise does nothing. To reset the AxoTask from any state in any moment there is following method: Restore() acts as reset of the AxoTask (sets the state into Ready state from any state of the AxoTask). Moreover, there are seven more \"event-like\" methods that are called when a specific event occurs (see the chart below). flowchart TD classDef states fill:#80FF00,stroke:#0080FF,stroke-width:4px,color:#7F00FF,font-size:15px,font-weight:bold classDef actions fill:#ff8000,stroke:#0080ff,stroke-width:4px,color:#7F00FF,font-size:15px,font-weight:bold classDef events fill:#80FF00,stroke:#0080ff,stroke-width:4px,color:#7F00FF,font-size:15px,font-weight:bold s1((Ready)):::states s2((Kicking)):::states s3((Busy)):::states s4((Done)):::states s5((Error)):::states s6((Aborted)):::states a1(\"Invoke()#128258;\"):::actions a2(\"Execute()#128260;\"):::actions a3(\"DoneWhen(TRUE)#128258;\"):::actions a4(\"ThrowWhen(TRUE)#128258;\"):::actions a5(\"NOT Invoke() call for at<br>least two Context cycles#128260;\"):::actions a6(\"Restore()#128258;\"):::actions a7(\"Abort()#128258;\"):::actions a8(\"Resume()#128258;\"):::actions e1{{\"OnStart()#128258;\"}}:::events e2{{\"OnError()#128258;\"}}:::events e3{{\"WhileError()#128260;\"}}:::events e4{{\"OnDone()#128258;\"}}:::events e5{{\"OnAbort()#128258;\"}}:::events e6{{\"OnRestore()#128258;\"}}:::events subgraph legend[\" \"] direction LR s((State)):::states ac(\"Action #128260;:called<br>cyclically\"):::actions as(\"Action #128258;:single<br>or cyclical call \"):::actions ec{{\"Event #128260;:called<br>cyclically\"}}:::events es{{\"Event #128258;:triggered<br>once \"}}:::events end subgraph chart[\" \"] direction TB s1 s1-->a1 a1-->s2 s2-->a2 s3-->a3 s3-->a7 a7-->e5 a7-->s6 s6-->a8 a8-->s3 a3-->s4 s4---->a5 a5-->a1 a2--->s3 s3--->a4 a4-->s5 s5-->a6 a6-->e6 a2-->e1 a4-->e2 a4-->e3 a3-->e4 a6-->s1 end Example of using AxoTask: CLASS AxoTaskDocuExample EXTENDS AXOpen.Core.AxoContext VAR PUBLIC {#ix-set:AttributeName = \"<#Task name#>\"} _myTask : AxoTask; _myCounter : ULINT; END_VAR METHOD PUBLIC Initialize // Initialization of the context needs to be called first // It does not need to be called cyclically, just once _myTask.Initialize(THIS); END_METHOD METHOD PROTECTED OVERRIDE Main _myTask.Initialize(THIS); // Cyclicall call of the Execute IF _myTask.Execute() THEN _myCounter := _myCounter + ULINT#1; _myTask.DoneWhen(_myCounter = ULINT#100); END_IF; IF _myTask.IsDone() THEN _myCounter := ULINT#0; END_IF; END_METHOD END_CLASS The AxoTask executes upon the Invoke method call. Invoke fires the execution of Execute logic upon the first call, and it does not need cyclical calling. _myTask.Invoke(); Invoke() method returns IAxoTaskState with the following members: IsBusy indicates the execution started and is running. IsDone indicates the execution completed with success. HasError indicates the execution terminated with a failure. IsAborted indicates that the execution of the AxoTask has been aborted. It should continue by calling the method Resume(). Examples of using: Invoking the AxoTask and waiting for its completion at the same place. IF _myTask.Invoke().IsDone() THEN ; //Do something END_IF; Invoking the AxoTask and waiting for its completion at the different places. _myTask.Invoke(); IF _myTask.IsDone() THEN ; //Do something END_IF; Checking if the AxoTask is executing. IF _myTask.Invoke().IsBusy() THEN ; //Do something END_IF; Check for the AxoTask's error state. IF _myTask.Invoke().HasError() THEN ; //Do something END_IF; The AxoTask can be started only from the Ready state by calling the Invoke() method in the same Context cycle as the Execute() method is called, regardless the order of the methods calls. After AxoTask completion, the state of the AxoTask will remain in Done, unless: 1.) AxoTask's Restore method is called (AxoTask changes it's state to Ready state). 2.) Invoke method is not called for two or more consecutive cycles of its context (that usually means the same as PLC cycle); successive call of Invoke will switch the task into the Ready state and immediately into the Kicking state. The AxoTask may finish also in an Error state. In that case, the only possibility to get out of Error state is by calling the Restore() method. To implement any of the already mentioned \"event-like\" methods the new class that extends from the AxoTask needs to be created. The required method with PROTECTED OVERRIDE access modifier needs to be created as well, and the custom logic needs to be placed in. These methods are: OnAbort() - executes once when the task is aborted. OnResume() - executes once when the task is resumed. OnDone() - executes once when the task reaches the Done state. OnError() - executes once when the task reaches the Error state. OnRestore() - executes once when the task is restored. OnStart() - executes once when the task starts (at the moment of transition from the Kicking state into the Busy state). WhileError() - executes repeatedly while the task is in Error state (and Execute() method is called). Example of implementing \"event-like\" methods: CLASS MyTaskExample EXTENDS AXOpen.Core.AxoTask VAR OnAbortCounter : ULINT; OnResumeCounter : ULINT; OnDoneCounter : ULINT; OnErrorCounter : ULINT; OnRestoreCounter : ULINT; OnStartCounter : ULINT; WhileErrorCounter : ULINT; END_VAR METHOD PROTECTED OVERRIDE OnAbort OnAbortCounter := OnAbortCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnResume OnResumeCounter := OnResumeCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnDone OnDoneCounter := OnDoneCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnError OnErrorCounter := OnErrorCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnRestore OnRestoreCounter := OnRestoreCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnStart OnStartCounter := OnStartCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE WhileError WhileErrorCounter := WhileErrorCounter + ULINT#1; END_METHOD END_CLASS How to visualize AxoTask On the UI side there are several possibilities how to visualize the AxoTask. You use the AxoTaskView and set its Component according the placement of the instance of the AxoTask. Based on the value of Disable the control element could be controllable: <AxoTaskView Component=\"@Entry.Plc.AxoTaskDocu._myTask\" Disable=\"false\" /> or display only: <AxoTaskView Component=\"@Entry.Plc.AxoTaskDocu._myTask\" Disable=\"true\" /> The next possibility is to use the RenderableContentControl and set its Context according the placement of the instance of the AxoTask. Again as before the element could be controlable when the value of the Presentation is Command: <RenderableContentControl Context=\"@Entry.Plc.AxoTaskDocu._myTask\" Presentation=\"Command\" /> or display only when the value of the Presentation is Status <RenderableContentControl Context=\"@Entry.Plc.AxoTaskDocu._myTask\" Presentation=\"Status\"/> The displayed result should looks like:"
  },
  "core/docs/AXOTEXTLIST.html": {
    "href": "core/docs/AXOTEXTLIST.html",
    "title": "AxoTextList | System.Dynamic.ExpandoObject",
    "keywords": "AxoTextList AxoTextList provides displaying the string value from the list defined in the extended class inside the .NET twin based on the numerical value read out from the PLC. Moreover, the display form could also change the background colour with the numerical value change. To achieve this, the attributes WarningLevel and ErrorLevel need to be declared as in the following example. {#ix-set:AttributeName = \"Description: |[[1]TextList]|\"} {#ix-attr:[WarningLevel(600)]} {#ix-attr:[ErrorLevel(700)]} _myTextList1 : AXOpen.Core.AxoTextList; The final text displayed in the UI application will be static prefix+[text value from text list(Id)](for example Description : + [TextList(Id)]). The static prefix is optional. Use the following example to display the same text list without static prefix and with different levels. {#ix-set:AttributeName = \"|[[1]TextList]|\"} {#ix-attr:[WarningLevel(300)]} {#ix-attr:[ErrorLevel(500)]} _myTextList2 : AXOpen.Core.AxoTextList; If the WarningLevel is greater than 0 and the ErrorLevel is greater than the WarningLevel, all items with the Id lower than the WarningLevel are displayed with the Primary background, all items with the Id greater or equal to the WarningLevel and lower then the ErrorLevel are displayed with the Warning background and all the rest are displayed with the Danger background. The final colours depend on the style used. If the attributes WarningLevel and ErrorLevel are not declared as in the following example, all items are displayed with the Primary background. {#ix-set:AttributeName = \"Totaly different description without error elevation: |[[1]DifferentTextList]|\"} _myTextList3 : AXOpen.Core.AxoTextList; For each AxoTextList, there must be a defined property, named exactly as in the Attributes inside the examples above. It must be defined in the extended class that the particular AxoTextList is a member of. This property must return a string value from the dictionary defined in the same class based on the numerical value of the Id variable. Declaration of the dictionary: Dictionary<uint, string> textList = new Dictionary<uint, string>(); Filling the items of the dictionary: if (textList == null) { textList = new Dictionary<uint, string>(); } if (textList.Count == 0) { textList.Add(0, \" \"); for (int i = 1; i < 1000; i++) { textList.Add((uint)i, \"Text list item : \" + i.ToString()); } } Returning the string item from the dictionary: string _textItem = \" \"; if (textList.TryGetValue(_myTextList1.Id.LastValue, out _textItem)) { return _textItem; } else { return \" \"; } Complete example for two different AxoTextList: using System.Collections.Generic; namespace AxoTextListExample { public partial class AxoTextListExampleContext : AXOpen.Core.AxoContext { //<DeclarationOfTheDictionary> Dictionary<uint, string> textList = new Dictionary<uint, string>(); //</DeclarationOfTheDictionary> public string TextList { get { //<FillingTheItemsOfTheDictionary> if (textList == null) { textList = new Dictionary<uint, string>(); } if (textList.Count == 0) { textList.Add(0, \" \"); for (int i = 1; i < 1000; i++) { textList.Add((uint)i, \"Text list item : \" + i.ToString()); } } //</FillingTheItemsOfTheDictionary> //<ReturningTheItemBasedOnId> string _textItem = \" \"; if (textList.TryGetValue(_myTextList1.Id.LastValue, out _textItem)) { return _textItem; } else { return \" \"; } //</ReturningTheItemBasedOnId> } } Dictionary<uint, string> differentTextList = new Dictionary<uint, string>(); public string DifferentTextList { get { if (differentTextList == null) { differentTextList = new Dictionary<uint, string>(); } if (differentTextList.Count == 0) { differentTextList.Add(0, \" \"); for (int i = 1; i < 1000; i++) { differentTextList.Add((uint)i, \"Item from the totally different text list : \" + i.ToString()); } } string differentTextItem = \" \"; if (differentTextList.TryGetValue(_myTextList3.Id.LastValue, out differentTextItem)) { return differentTextItem; } else { return \" \"; } } } } } How to visualize AxoTextList On the UI side, to visualize the AxoTextList, use the RenderableContentControl and set its Context according to the placement of the instance of the AxoTextList. <div class=\"col\"> <RenderableContentControl Context=\"@Entry.Plc.AxoTextListExampleContext._myTextList1\" /> </div> <div class=\"col\"> <RenderableContentControl Context=\"@Entry.Plc.AxoTextListExampleContext._myTextList2\" /> </div> <div class=\"col\"> <RenderableContentControl Context=\"@Entry.Plc.AxoTextListExampleContext._myTextList3\" /> </div> The displayed result should look like this:"
  },
  "core/docs/AXOTOGGLETASK.html": {
    "href": "core/docs/AXOTOGGLETASK.html",
    "title": "AxoToggleTask | System.Dynamic.ExpandoObject",
    "keywords": "AxoToggleTask AxoToggleTask provides basic switching on and off functions. AxoToggleTask needs to be initialized to set the proper AxoContext. AxoToggleTask initialization within a AxoContext CLASS AxoToggleTaskDocuExample EXTENDS AXOpen.Core.AxoContext VAR PUBLIC {#ix-set:AttributeName = \"<#Toggle task example#>\"} {#ix-set:AttributeStateOnDesc = \"<#SwitchedOn#>\"} {#ix-set:AttributeStateOffDesc = \"<#SwitchedOff#>\"} _myToggleTask : AxoToggleTask; _myCounter : ULINT; END_VAR METHOD PUBLIC Initialize // Initialization of the context needs to be called first // It does not need to be called cyclically, just once _myToggleTask.Initialize(THIS); END_METHOD END_CLASS There are three key methods for managing the AxoToggleTask: SwitchOn() -ones is called and the AxoToggleTask is not Disabled, changes the state of the AxoToggleTask to TRUE if its previous state was FALSE. (can be called fire&forget or cyclically). The method returns TRUE if the change of the state was performed, otherwise FALSE. SwitchOff() -ones is called and the AxoToggleTask is not Disabled, changes the state of the AxoToggleTask to FALSE if its previous state was TRUE. (can be called fire&forget or cyclically). The method returns TRUE if the change of the state was performed, otherwise FALSE. Toggle() -ones is called and the AxoToggleTask is not Disabled, changes the state of the AxoToggleTask to TRUE if its previous state was FALSE and vice-versa . (can be called fire&forget or cyclically). The method returns TRUE if the change of the state was performed, otherwise FALSE. The methods SwitchOn() and SwitchOff() are designed to be used inside automatic logic, where change to exact value has to be performed, while Toggle() is designed to be used mostly in connection with manual control. Example of using SwitchOn() method with its return value. IF _myToggleTask.SwitchOn() THEN ; // do something on rising edge END_IF; Example of using SwitchOff() method with its return value. IF _myToggleTask.SwitchOff()THEN ; // do something on falling edge END_IF; Example of using Toggle() method with its return value. IF _myToggleTask.Toggle()THEN ; // do something on state change END_IF; To check the state of the task there are two methods: IsSwitchOn() - returns TRUE if the state of the task is TRUE. IsSwitchOff() - returns TRUE if the state of the task is FALSE. Example of using IsSwitchOn() method: IF _myToggleTask.IsSwitchedOn() THEN ; // do something END_IF; Example of using IsSwitchOff() method: IF _myToggleTask.IsSwitchedOff() THEN ; // do something END_IF; Moreover, there are five more \"event-like\" methods that are called when a specific event occurs (see the chart below). To implement any of the already mentioned \"event-like\" methods the new class that extends from the AxoToggleTask needs to be created. The required method with PROTECTED OVERRIDE access modifier needs to be created as well, and the custom logic needs to be placed in. These methods are: OnSwitchedOn() - executes once when the task changes its state from FALSE to TRUE. OnSwitchedOff() - executes once when the task changes its state from TRUE to FALSE. OnStateChanged() - executes once when the task changes its state. SwitchedOn() - executes repeatedly while the task is in TRUE state. SwitchedOff() - executes repeatedly while the task is in FALSE state. Example of implementing \"event-like\" methods: CLASS MyToogleTaskExample Extends AxoToggleTask VAR OnSwitchedOnCounter : ULINT; OnSwitchedOffCounter : ULINT; OnStateChangedCounter : ULINT; SwitchOnExecutionCounter : ULINT; SwitchOffExecutionCounter : ULINT; END_VAR METHOD PROTECTED OVERRIDE OnSwitchedOn OnSwitchedOnCounter := OnSwitchedOnCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnSwitchedOff OnSwitchedOffCounter := OnSwitchedOffCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnStateChanged OnStateChangedCounter := OnStateChangedCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE SwitchedOn SwitchOnExecutionCounter := SwitchOnExecutionCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE SwitchedOff SwitchOffExecutionCounter := SwitchOffExecutionCounter + ULINT#1; END_METHOD END_CLASS How to visualize AxoToggleTask On the UI side there are several possibilities how to visualize the AxoToggleTask. You use the AxoToggleTaskView and set its Component according the placement of the instance of the AxoToggleTask. Based on the value of Disable the control element could be controllable: <AxoToggleTaskView Component=\"@Entry.Plc.AxoToggleTaskDocu._myToggleTask\" Disable=\"false\" /> or display only: <AxoToggleTaskView Component=\"@Entry.Plc.AxoToggleTaskDocu._myToggleTask\" Disable=\"true\" /> The next possibility is to use the RenderableContentControl and set its Context according the placement of the instance of the AxoToggleTask. Again as before the element could be controlable when the value of the Presentation is Command: <RenderableContentControl Context=\"@Entry.Plc.AxoToggleTaskDocu._myToggleTask\" Presentation=\"Command\" /> or display only when the value of the Presentation is Status <RenderableContentControl Context=\"@Entry.Plc.AxoToggleTaskDocu._myToggleTask\" Presentation=\"Status\" /> The displayed result should looks like:"
  },
  "core/docs/README.html": {
    "href": "core/docs/README.html",
    "title": "AXOpen.Core | System.Dynamic.ExpandoObject",
    "keywords": "AXOpen.Core This library is an integral component of AXOpen. AXOpen is an application framework built on the foundations of SIMATIC-AX and AX# technologies. Utilizing the components described in this document might necessitate a foundational understanding of the AXOpen framework's concepts and methodologies. Additionally, leveraging some advanced features could require a basic familiarity with AX# technology. Additional Resources: AX# Official Documentation UI Rendering Guide Note This document's content is synchronized with the source code of this library. Please note that the images and illustrative visuals included may not mirror the exact appearance in your application. Note Should you identify errors, misleading content, or gaps in this documentation, kindly report the issue here. Alternatively, you're welcome to suggest edits directly by initiating a pull request in this repository. AXOpen.Core offers the foundational blocks for constructing AXOpen applications. Contexts and Objects: These are at the core of the AXOpen application logic. AxoContext acts as the container for an AXOpen application, supplying information to each AxoObject. AxoObject serves as the base class for any other class in an AXOpen application. Tasks: These facilitate basic coordination mechanisms to align partial tasks in a consistent manner. Components: rudimentary implementations for any component associated with AXOpen. A component can be a physical device such as a pneumatic cylinder, servo drive robot, or a virtual device. Components in AXOpen are designed to furnish ready-to-use driver pieces, allowing rapid application composition. Dialogs and alerts: provide neat way of informing and interacting with human operator. Coordination: This provides a suite of classes for advanced task coordination and visualization, ensuring high visibility into device operations. Messengers: They make it straightforward to report alarms and convey messages to operating personnel. Logging: This feature enables users to monitor and accumulate data regarding internal events within the controller."
  },
  "core/docs/index.html": {
    "href": "core/docs/index.html",
    "title": "AXOpen.Core | System.Dynamic.ExpandoObject",
    "keywords": "AXOpen.Core This library is an integral component of AXOpen. AXOpen is an application framework built on the foundations of SIMATIC-AX and AX# technologies. Utilizing the components described in this document might necessitate a foundational understanding of the AXOpen framework's concepts and methodologies. Additionally, leveraging some advanced features could require a basic familiarity with AX# technology. Additional Resources: AX# Official Documentation UI Rendering Guide Note This document's content is synchronized with the source code of this library. Please note that the images and illustrative visuals included may not mirror the exact appearance in your application. Note Should you identify errors, misleading content, or gaps in this documentation, kindly report the issue here. Alternatively, you're welcome to suggest edits directly by initiating a pull request in this repository. AXOpen.Core offers the foundational blocks for constructing AXOpen applications. Contexts and Objects: These are at the core of the AXOpen application logic. AxoContext acts as the container for an AXOpen application, supplying information to each AxoObject. AxoObject serves as the base class for any other class in an AXOpen application. Tasks: These facilitate basic coordination mechanisms to align partial tasks in a consistent manner. Components: rudimentary implementations for any component associated with AXOpen. A component can be a physical device such as a pneumatic cylinder, servo drive robot, or a virtual device. Components in AXOpen are designed to furnish ready-to-use driver pieces, allowing rapid application composition. Dialogs and alerts: provide neat way of informing and interacting with human operator. Coordination: This provides a suite of classes for advanced task coordination and visualization, ensuring high visibility into device operations. Messengers: They make it straightforward to report alarms and convey messages to operating personnel. Logging: This feature enables users to monitor and accumulate data regarding internal events within the controller."
  },
  "data/app/ix-blazor/librarytemplate.blazor/wwwroot/css/open-iconic/README.html": {
    "href": "data/app/ix-blazor/librarytemplate.blazor/wwwroot/css/open-iconic/README.html",
    "title": "Open Iconic v1.1.1 | System.Dynamic.ExpandoObject",
    "keywords": "Open Iconic v1.1.1 Open Iconic is the open source sibling of Iconic. It is a hyper-legible collection of 223 icons with a tiny footprint—ready to use with Bootstrap and Foundation. View the collection What's in Open Iconic? 223 icons designed to be legible down to 8 pixels Super-light SVG files - 61.8 for the entire set SVG sprite—the modern replacement for icon fonts Webfont (EOT, OTF, SVG, TTF, WOFF), PNG and WebP formats Webfont stylesheets (including versions for Bootstrap and Foundation) in CSS, LESS, SCSS and Stylus formats PNG and WebP raster images in 8px, 16px, 24px, 32px, 48px and 64px. Getting Started For code samples and everything else you need to get started with Open Iconic, check out our Icons and Reference sections. General Usage Using Open Iconic's SVGs We like SVGs and we think they're the way to display icons on the web. Since Open Iconic are just basic SVGs, we suggest you display them like you would any other image (don't forget the alt attribute). <img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\"> Using Open Iconic's SVG Sprite Open Iconic also comes in a SVG sprite which allows you to display all the icons in the set with a single request. It's like an icon font, without being a hack. Adding an icon from an SVG sprite is a little different than what you're used to, but it's still a piece of cake. Tip: To make your icons easily style able, we suggest adding a general class to the <svg> tag and a unique class name for each different icon in the <use> tag. <svg class=\"icon\"> <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use> </svg> Sizing icons only needs basic CSS. All the icons are in a square format, so just set the <svg> tag with equal width and height dimensions. .icon { width: 16px; height: 16px; } Coloring icons is even easier. All you need to do is set the fill rule on the <use> tag. .icon-account-login { fill: #f00; } To learn more about SVG Sprites, read Chris Coyier's guide. Using Open Iconic's Icon Font... …with Bootstrap You can find our Bootstrap stylesheets in font/css/open-iconic-bootstrap.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\"> <span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …with Foundation You can find our Foundation stylesheets in font/css/open-iconic-foundation.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\"> <span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …on its own You can find our default stylesheets in font/css/open-iconic.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\"> <span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> License Icons All code (including SVG markup) is under the MIT License. Fonts All fonts are under the SIL Licensed."
  },
  "data/ctrl/README.html": {
    "href": "data/ctrl/README.html",
    "title": "ix.core | System.Dynamic.ExpandoObject",
    "keywords": "ix.core ix.core provides basic blocks for building AXOpen applications. Basic concepts AxoContext AxoContext encapsulates entire application or application units. Any solution may contain one or more contexts, however the each should be considered to be an isolated island and any direct inter-context access to members must be avoided. IMPORTANT Each AxoContext must belong to a single PLC task. Multiple IxContexts can be however running on the same task. classDiagram class Context{ #Main()* +Run() } In its basic implementation AxoContext has relatively simple interface. The main method is the method where we place all calls of our sub-routines. In other words the Main is the root of the call tree of our program. Run method runs the AxoContext. It must be called cyclically within a program unit that is attached to a cyclic task. Why do we need AxoContext AxoContext provides counters, object identification and other information about the execution of the program. These information is then used by the objects contained at different levels of the AxoContext. How AxoContext works When you call Run method on an instance of a AxoContext, it will ensure opening AxoContext, running Main method (root of all your program calls) and AxoContext closing. flowchart LR classDef run fill:#80FF00,stroke:#0080FF,stroke-width:4px,color:#7F00FF,font-size:15px,font-weight:bold classDef main fill:#ff8000,stroke:#0080ff,stroke-width:4px,color:#7F00FF,font-size:15px,font-weight:bold id1(Open):::run-->id2(#Main*):::main-->id3(Close):::run-->id1 How to use AxoContext Base class for the AxoContext is ix.core.AxoContext. The entry point of call execution of the AxoContext is Main method. Notice that the AxoContext class is abstract and cannot be instantiated if not extended. Main method must be overridden in derived class notice the use of override keyword and also that the method is protected which means the it is visible only from within the AxoContext and derived classes. How to extend AxoContext class USING ix.core CLASS PUBLIC MyContext EXTENDS AxoContext METHOD PROTECTED OVERRIDE Main // Here goes all your logic for given AxoContext. END_METHOD END_CLASS Cyclical call of the AxoContext logic (Main method) is ensured when AxoContext Execute method is called. Execute method is public therefore accessible and visible to any part of the program that whishes to call it. How to start AxoContext's execution PROGRAM MyProgram VAR _myContext : MyContext; END_VAR _myContext.Run(); END_PROGRAM AxoObject AxoObject is the base class for any other classes of AXOpen. It provides access to the parent AxoObject and the AxoContext in which it was initialized. classDiagram class Object{ +Initialize(IAxoContext context) +Initialize(IAxoObject parent) } AxoObject initialization within a AxoContext CLASS PUBLIC MyContext EXTENDS ix.core.AxoContext VAR _myObject : ix.core.AxoObject; END_VAR METHOD PROTECTED OVERRIDE Main _myObject.Initialize(THIS); END_METHOD END_CLASS AxoObject initialization within another AxoObject CLASS PUBLIC MyParentObject EXTENDS ix.core.AxoObject VAR _myChildObject : ix.core.AxoObject; END_VAR METHOD PROTECTED OVERRIDE Main _myChildObject.Initialize(THIS); END_METHOD END_CLASS AxoTask AxoTask provides basic task execution. AxoTask needs to be initialized to set the proper AxoContext. AxoTask initialization within a AxoContext CLASS IxTaskExample EXTENDS AxoContext VAR PUBLIC _myTask : AxoTask; _myCounter : ULINT; END_VAR METHOD PUBLIC Initialize // Initialization of the context needs to be called first // It does not need to be called cyclically, just once _myTask.Initialize(THIS); END_METHOD END_CLASS There are two key methods for managing the AxoTask: Invoke() fires the execution of the AxoTask (can be called fire&forget or cyclically) Execute() method must be called cyclically. The method returns TRUE when the AxoTask is required to run until enters Done state or terminates in error. For termination of the execution of the AxoTask there are following methods: DoneWhen(Done_Condition) - terminates the execution of the AxoTask and enters the Done state when the Done_Condition is TRUE. ThrowWhen(Error_Condition) - terminates the execution of the AxoTask and enters the Error state when the Error_Condition is TRUE. Abort() - terminates the execution of the AxoTask and enters the Ready state if the AxoTask is in the Busy state, otherwise does nothing. To reset the AxoTask from any state in any moment there is following method: Restore() acts as reset of the AxoTask (sets the state into Ready state from any state of the AxoTask). Moreover, there are seven more \"event-like\" methods that are called when a specific event occurs (see the chart below). flowchart TD classDef states fill:#80FF00,stroke:#0080FF,stroke-width:4px,color:#7F00FF,font-size:15px,font-weight:bold classDef actions fill:#ff8000,stroke:#0080ff,stroke-width:4px,color:#7F00FF,font-size:15px,font-weight:bold classDef events fill:#80FF00,stroke:#0080ff,stroke-width:4px,color:#7F00FF,font-size:15px,font-weight:bold s1((Ready)):::states s2((Kicking)):::states s3((Busy)):::states s4((Done)):::states s5((Error)):::states s6((Aborted)):::states a1(\"Invoke()#128258;\"):::actions a2(\"Execute()#128260;\"):::actions a3(\"DoneWhen(TRUE)#128258;\"):::actions a4(\"ThrowWhen(TRUE)#128258;\"):::actions a5(\"NOT Invoke() call for at<br>least two Context cycles#128260;\"):::actions a6(\"Restore()#128258;\"):::actions a7(\"Abort()#128258;\"):::actions a8(\"Resume()#128258;\"):::actions e1{{\"OnStart()#128258;\"}}:::events e2{{\"OnError()#128258;\"}}:::events e3{{\"WhileError()#128260;\"}}:::events e4{{\"OnDone()#128258;\"}}:::events e5{{\"OnAbort()#128258;\"}}:::events e6{{\"OnRestore()#128258;\"}}:::events subgraph legend[\" \"] direction LR s((State)):::states ac(\"Action #128260;:called<br>cyclically\"):::actions as(\"Action #128258;:single<br>or cyclical call \"):::actions ec{{\"Event #128260;:called<br>cyclically\"}}:::events es{{\"Event #128258;:triggered<br>once \"}}:::events end subgraph chart[\" \"] direction TB s1 s1-->a1 a1-->s2 s2-->a2 s3-->a3 s3-->a7 a7-->e5 a7-->s6 s6-->a8 a8-->s3 a3-->s4 s4---->a5 a5-->a1 a2--->s3 s3--->a4 a4-->s5 s5-->a6 a6-->e6 a2-->e1 a4-->e2 a4-->e3 a3-->e4 a6-->s1 end Example of using AxoTask: CLASS IxTaskExample EXTENDS AxoContext VAR PUBLIC _myTask : AxoTask; _myCounter : ULINT; END_VAR METHOD PUBLIC Initialize // Initialization of the context needs to be called first // It does not need to be called cyclically, just once _myTask.Initialize(THIS); END_METHOD METHOD PROTECTED OVERRIDE Main // Cyclicall call of the Execute IF _myTask.Execute() THEN _myCounter := _myCounter + ULINT#1; _myTask.DoneWhen(_myCounter = ULINT#100); END_IF; END_METHOD END_CLASS The AxoTask executes upon the Invoke method call. Invoke fires the execution of Execute logic upon the first call, and it does not need cyclical calling. _myTask.Invoke(); Invoke() method returns IAxoTaskState with the following members: IsBusy indicates the execution started and is running. IsDone indicates the execution completed with success. HasError indicates the execution terminated with a failure. IsAborted indicates that the execution of the AxoTask has been aborted. It should continue by calling the method Resume(). // Wait for AxoTask to Complete IF _myTask.Invoke().IsDone() THEN ; //Do something END_IF; // ALTERNATIVELY _myTask.Invoke(); IF _myTask.IsDone() THEN ; //Do something ALTERNATIV END_IF; // Make sure that the AxoTask is executing IF _myTask.Invoke().IsBusy() THEN ; //Do something END_IF; // Check for AxoTask's error IF _myTask.Invoke().HasError() THEN ; //Do something END_IF; The AxoTask can be started only from the Ready state by calling the Invoke() method in the same Context cycle as the Execute() method is called, regardless the order of the methods calls. After AxoTask completion, the state of the AxoTask will remain in Done, unless: 1.) AxoTask's Restore method is called (AxoTask changes it's state to Ready state). 2.) Invoke method is not called for two or more consecutive cycles of its context (that usually means the same as PLC cycle); successive call of Invoke will switch the task into the Ready state and immediately into the Kicking state. The AxoTask may finish also in an Error state. In that case, the only possibility to get out of Error state is by calling the Restore() method. To implement any of the already mentioned \"event-like\" methods the new class that extends from the AxoTask needs to be created. The required method with PROTECTED OVERRIDE access modifier needs to be created as well, and the custom logic needs to be placed in. These methods are: OnAbort() - executes once when the task is aborted. OnResume() - executes once when the task is resumed. OnDone() - executes once when the task reaches the Done state. OnError() - executes once when the task reaches the Error state. OnRestore() - executes once when the task is restored. OnStart() - executes once when the task starts (at the moment of transition from the Kicking state into the Busy state). WhileError() - executes repeatedly while the task is in Error state (and Execute() method is called). Example of implementing \"event-like\" methods: CLASS MyCommandTask Extends CommandTask VAR OnAbortCounter : ULINT; OnResumeCounter : ULINT; OnDoneCounter : ULINT; OnErrorCounter : ULINT; OnRestoreCounter : ULINT; OnStartCounter : ULINT; WhileErrorCounter : ULINT; END_VAR METHOD PROTECTED OVERRIDE OnAbort OnAbortCounter := OnAbortCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnResume OnResumeCounter := OnResumeCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnDone OnDoneCounter := OnDoneCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnError OnErrorCounter := OnErrorCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnRestore OnRestoreCounter := OnRestoreCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnStart OnStartCounter := OnStartCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE WhileError WhileErrorCounter := WhileErrorCounter + ULINT#1; END_METHOD END_CLASS Step AxoStep is an extension class of the AxoTask and provides the basics for the coordinated controlled execution of the task in the desired order based on the coordination mechanism used. AxoStep contains the Execute() method so as its base class overloaded and extended by following parameters: coord (mandatory): instance of the coordination controlling the execution of the AxoStep. Enable (optional): if this value is FALSE, AxoStep body is not executed and the current order of the execution is incremented. Description (optional): AxoStep description text describing the action the AxoStep is providing. AxoStep class contains following public members: Order: Order of the AxoStep in the coordination. This value can be set by calling the method SetSteoOrder() and read by the method GetStepOrder(). StepDescription: AxoStep description text describing the action the AxoStep is providing. This value can be set by calling the Execute() method with Description parameter. IsActive: if TRUE, the AxoStep is currently executing, or is in the order of the execution, otherwise FALSE. This value can be set by calling the method SetIsActive() and read by the method GetIsActive(). IsEnabled: if FALSE, AxoStep body is not executed and the current order of the execution is incremented. This value can be set by calling the method SetIsEnabled() or calling the Execute() method with Enable parameter and read by the method GetIsEnabled(). AxoSequencer AxoSequencer is an IxCordinator class provides triggering the AxoStep-s inside the sequence in the order they are written. AxoSequencer extends from AxoTask so it also has to be initialized by calling its Initialize() method and started using its Invoke() method. AxoSequencer contains following methods: Open(): this method must be called cyclically before any logic. It provides some configuration mechanism that ensures that the steps are going to be executed in the order, they are written. During the very first call of the sequence, no step is executed as the AxoSequencer is in the configuring state. From the second context cycle after the AxoSequencer has been invoked the AxoSequencer change its state to running and starts the execution from the first step upto the last one. When AxoSequencer is in running state, order of the step cannot be changed. MoveNext(): Terminates the currently executed step and moves the AxoSequencer's pointer to the next step in order of execution. RequestStep(): Terminates the currently executed step and set the AxoSequencer's pointer to the order of the RequestedStep. When the order of the RequestedStep is higher than the order of the currently finished step (the requested step is \"after\" the current one) the requested step is started in the same context cycle. When the order of the RequestedStep is lower than the order of the currently finished step (the requested step is \"before\" the current one) the requested step is started in the next context cycle. CompleteSequence(): Terminates the currently executed step, completes (finishes) the execution of this AxoSequencer and set the coordination state to Idle. If the SequenceMode of the AxoSequencer is set to Cyclic, following Open() method call in the next context cycle switch it again into the configuring state, reasign the order of the individual steps (even if the orders have been changed) and subsequently set AxoSequencer back into the running state. If the SequenceMode of the AxoSequencer is set to RunOnce, terminates also execution of the AxoSequencer itself. `GetCoordinatorState()': Returns the current state of the AxoSequencer. Idle Configuring: assigning the orders to the steps, no step is executed. Running: orders to the steps are already assigned, step is executed. SetSteppingMode(): Sets the stepping mode of the AxoSequencer. Following values are possible. None: StepByStep: if this mode is choosen, each step needs to be started by the invocation of the StepIn commmand. Continous: if this mode is choosen (default), each step is started automaticcaly after the previous one has been completed. GetSteppingMode(): Gets the current stepping mode of the AxoSequencer. SetSequenceMode(): Sets the sequence mode of the AxoSequencer. Following values are possible. None: RunOnce: if this mode is choosen, after calling the method CompleteSequence() the execution of the sequence is terminated. Cyclic: if this mode is choosen (default), after calling the method CompleteSequence() the execution of the sequence is \"reordered\" and started from beginning. GetSequenceMode(): Gets the current sequence mode of the AxoSequencer. GetNumberOfConfiguredSteps(): Gets the number of the configured steps in the sequence. CLASS IxSequencerExample EXTENDS AxoContext VAR PUBLIC _mySequencer : AxoSequencer; _step_1 : AxoStep; _step_2 : AxoStep; _step_3 : AxoStep; _myCounter : ULINT; END_VAR METHOD PUBLIC Initialize // Initialization of the context needs to be called first // It does not need to be called cyclically, just once _mySequencer.Initialize(THIS); _step_1.Initialize(THIS); _step_2.Initialize(THIS); _step_3.Initialize(THIS); END_METHOD METHOD PROTECTED OVERRIDE Main _mySequencer.Open(); // Example of the most simple use of Execute() method of step class, only with IxCoordinator defined. IF _step_1.Execute(_mySequencer) THEN // do something _myCounter := _myCounter + ULINT#1; IF (_myCounter MOD ULINT#5) = ULINT#0 THEN // continue to the next step of the sequence _mySequencer.MoveNext(); END_IF; END_IF; // Example of use of the Execute() method of step class with Enable condition. // This step is going to be executed just in the first run of the sequence, // as during the second run, the Enable parameter will have the value of FALSE. IF _step_2.Execute(coord := _mySequencer, Enable := _myCounter <= ULINT#20) THEN _myCounter := _myCounter + ULINT#1; IF _myCounter = ULINT#20 THEN // Jumping to step 1. As it is jumping backwards, the execution of step 1 // is going to be started in the next context cycle. _mySequencer.RequestStep(_step_1); END_IF; END_IF; // Example of use of the Execute() method of step class with all three parameters defined. IF _step_3.Execute(coord := _mySequencer, Enable := TRUE, Description := 'This is a description of the step 3' ) THEN _myCounter := _myCounter + ULINT#1; IF (_myCounter MOD ULINT#7) = ULINT#0 THEN // Finalize the sequence and initiate the execution from the first step. _mySequencer.CompleteSequence(); END_IF; END_IF; END_METHOD END_CLASS AxoComponent AxoComponent is an abstract class extending the AxoObject, and it is the base building block for the \"hardware-related devices\" like a pneumatic piston, servo drive, robot, etc., so as for the, let's say, \"virtual devices\" like counter, database, etc. AxoComponent is designed to group all possible methods, tasks, settings, and status information into one consistent class. As the AxoComponent is an abstract class, it cannot be instantiated and must be extended. In the extended class, two methods are mandatory. Restore() - inside this method, the logic for resetting the AxoComponent or restoring it from any state to its initial state should be placed. ManualControl() - inside this method, the logic for manual operations with the component should be placed. To be able to control the AxoComponent instance manually, the method ActivateManualControl() of this instance needs to be called cyclically. The base class contains two additional method to deal with the manual control of the AxoComponent. ActivateManualControl() - when this method is called cyclically, the AxoComponent changes its behavior to manually controllable and ensure the call of the ManualControl() method in the derived class. IsManuallyControllable() -returns TRUE when the AxoComponent is manually controllable. Layout attributes ComponentHeader and ComponentDetails The visual view of the extended AxoComponent on the UI side could be done both ways. Manually with complete control over the design or by using the auto-rendering mechanism of the RenderableContentControl (TODO add a link to docu of the RenderableContentControl) element, which is, in most cases, more than perfect. To take full advantage of the auto-rendering mechanism, the base class has implemented the additional layout attributes ComponentHeader and ComponentDetails(TabName). The auto-rendered view is divided into two parts: the fixed one and the expandable one. All AxoComponent members with the ComponentHeader layout attribute defined will be displayed in the fixed part. All members with the ComponentDetails(TabName) layout attribute defined will be displayed in the expandable part inside the TabControl with \"TabName\". All members are added in the order in which they are defined, taking into account their layout attributes like Container(Layout.Wrap) or Container(Layout.Stack). How to implement AxoComponent Example of the implementation very simple AxoComponent with members placed only inside the Header. using AXOpen.Core; {#ix-attr:[Container(Layout.Stack)]} {#ix-set:AttributeName = \"Component with header only example\"} CLASS PUBLIC ComponentHeaderOnlyExample EXTENDS AxoComponent METHOD PROTECTED OVERRIDE Restore: IAxoTask // Some logic for Restore could be placed here. // For Example: valueReal := REAL#0.0; valueDint := DINT#0; END_METHOD METHOD PROTECTED OVERRIDE ManualControl // Some logic for manual control could be placed here. ; END_METHOD // Main method of the `AxoComponent` that needs to be called inside the `AxoContext` cyclically. METHOD PUBLIC Run // Declaration of the input and output variables. // In the case of \"hardware-related\" `AxoComponent`, // these would be the variables linked to the hardware. VAR_INPUT inReal : REAL; inDint : DINT; END_VAR VAR_OUTPUT outReal : REAL; outDint : DINT; END_VAR // This must be called first. SUPER.Open(); // Place the custom logic here. valueReal := valueReal * inReal; valueDint := valueDint + inDint; outReal := valueReal; outDint := valueDint; END_METHOD VAR PUBLIC {#ix-attr:[Container(Layout.Wrap)]} {#ix-attr:[ComponentHeader()]} {#ix-set:AttributeName = \"Real product value\"} valueReal : REAL := REAL#1.0; {#ix-attr:[ComponentHeader()]} {#ix-set:AttributeName = \"Dint sum value\"} valueDint : DINT:= DINT#0; END_VAR END_CLASS How to use AxoComponent The instance of the extended AxoComponent must be defined inside the AxoContext. .....................EXTENDS AxoContext VAR PUBLIC {#ix-set:AttributeName = \"Very simple component example with header only defined\"} MyComponentWithHeaderOnly : ComponentHeaderOnlyExample; END_VAR Inside the Main() method of the related AxoContext following rules must be applied. The Initialize() method of the extended instance of the AxoComponent must be called first. The Run() method with the respective input and output variables must be called afterwards."
  },
  "data/docs/AxoDataExchange.html": {
    "href": "data/docs/AxoDataExchange.html",
    "title": "AxoDataExchange | System.Dynamic.ExpandoObject",
    "keywords": "AxoDataExchange Getting started Data exchange manager Data exchange object must be extended by AxoDataExchange. CLASS AxoProcessDataManager EXTENDS AXOpen.Data.AxoDataExchange VAR PUBLIC {#ix-generic:TOnline} {#ix-generic:TPlain as POCO} {#ix-attr:[AXOpen.Data.AxoDataEntityAttribute]} Set : AxoProcessData; // <- Manager will operate on this member. END_VAR END_CLASS Data exchange object The data entity variable must be created. It contains data that we want to exchange between PLC and repository. This variable must be annotated with following attributes: AxoDataEntityAttribute -- unique attribute for finding a correct instance of data exchange. #ix-generic:TOnline -- type information attribute. #ix-generic:TPlain as POCO -- type information attribute. Note The AxoDataExchange object must be unique. Annotations AxoDataEntityAttribute, #ix-generic:TOnline and #ix-generic:TPlain as POCO must be attributed to only one member AxoDataExchange object, which is used to locate data object that contains data to be exchanged between PLC and the target repository. An exception is thrown when AxoDataEntityAttribute is missing or multiple members have the annotation. Note The 'Data' variable must be of a type that extends AxoDataEntity. CLASS AxoProcessData EXTENDS AXOpen.Data.AxoDataEntity VAR PUBLIC {#ix-set:AttributeName = \"Some string\"} SomeString : STRING; {#ix-set:AttributeName = \"Some int\"} SomeInt : INT; END_VAR END_CLASS Data exchange initialization in PLC As mentioned earlier, we use remote calls to execute the CRUD operations. These calls are a variant of AxoTask, which allows for invoking a C# code. We will now need to create an instance of AxoProcessDataManager in a context object (AxoContext) (or as a member of another class that derives from AxoObject). We will also need to call DataManager in the Main method of appropriate context. CLASS PUBLIC Context EXTENDS AXOpen.Core.AxoContext VAR PUBLIC DataManager : AxoProcessDataManager; END_VAR METHOD OVERRIDE Main DataManager.Run(THIS); END_METHOD END_CLASS Execute run method in CU CLASS CU EXTENDS AXOpen.Core.AxoObject VAR PUBLIC ProcessData : REF_TO AxoProcessDataManager; END_VAR METHOD PRIVATE Execute ProcessData^.Run(THIS); END_METHOD END_CLASS Use in Automat Sequence CLASS PUBLIC AutomatSequence EXTENDS AXOpen.Core.AxoSequencerContainer VAR PRIVATE ProcessData : REF_TO AxoProcessDataManager; END_VAR METHOD INTERNAL Run VAR_INPUT _processData : REF_TO AxoProcessDataManager; END_VAR ProcessData := _processData; END_METHOD METHOD OVERRIDE Main ; END_METHOD END_CLASS Data exchange initialization in .NET At this point, we have everything ready in the PLC. We must now tell the DataManager what repository to use. As a example, data repository is set as JSON files. Let's create a configuration for the repository and initialize remote data exchange: var AxoProcessDataRepository = new InMemoryRepositorySettings<Pocos.AxoDataExchangeExample.AxoProcessData>().Factory(); Entry.Plc.AxoDataExchangeManager.InitializeRemoteDataExchange(AxoProcessDataRepository); Note MyData should be of type from Pocos."
  },
  "data/docs/AxoDataFragmentExchange.html": {
    "href": "data/docs/AxoDataFragmentExchange.html",
    "title": "AxoDataFragmentExchange | System.Dynamic.ExpandoObject",
    "keywords": "AxoDataFragmentExchange Fragment data exchange allows to group of multiple data managers into a single object and perform repository operations jointly on all nested repositories. Getting started Data fragment exchange manager Data exchange object must be extended by AxoDataFragmentExchange. CLASS AxoProcessDataManager EXTENDS AXOpen.Data.AxoDataFragmentExchange VAR PUBLIC {#ix-attr:[AXOpen.Data.AxoDataFragmentAttribute]} SharedHeader : SharedDataHeaderManger; {#ix-attr:[AXOpen.Data.AxoDataFragmentAttribute]} Station_1 : Station_1_ProcessDataManger; END_VAR END_CLASS Nesting AxoDataExchanger(s) AxoDataFragmenExchange can group several data managers where each can point to a different repository. Nested data managers must be set up as explained here. Note Note that each data manager must be annotated with AXOpen.Data.AxoDataFragmentAttribute that will provide information to the parent manager that the member takes part in data operations. Important First data manager declared as a fragment is considered a master fragment. The overview and list of existing data are retrieved only from the master fragment. Initialization and handling in the controller We will now need to create an instance of AxoDataFragmentExchange in a context object (AxoContext) (or as a member of another class that derives from AxoObject). We will also need to call AxoDataFragmentExchangeContext in the Main method of appropriate context. CLASS Context EXTENDS AXOpen.Core.AxoContext VAR PUBLIC DataManager : AxoProcessDataManager; END_VAR METHOD PROTECTED OVERRIDE Main DataManager.Run(THIS); END_METHOD END_CLASS Execute run method in CU CLASS CU EXTENDS AXOpen.Core.AxoObject VAR PUBLIC ProcessData : REF_TO AxoProcessDataManager; END_VAR METHOD PRIVATE Execute ProcessData^.Run(THIS); END_METHOD END_CLASS Use in Automat Sequence CLASS PUBLIC AutomatSequence EXTENDS AXOpen.Core.AxoSequencerContainer VAR PRIVATE ProcessData : REF_TO AxoProcessDataManager; END_VAR METHOD INTERNAL Run VAR_INPUT _processData : REF_TO AxoProcessDataManager; END_VAR ProcessData := _processData; END_METHOD METHOD OVERRIDE Main ; END_METHOD END_CLASS Data exchange initialization in .NET At this point, we have everything ready in the PLC. If the nested data exchange object does not have the repository set previously, we will need to tell the to fragment manager wich repositories we be used by in data exchange. We will work with data stored in files in JSON format. var SharedDataHeaderDataRepository = new InMemoryRepositorySettings<Pocos.AxoDataFramentsExchangeExample.SharedDataHeaderData>().Factory(); var Station_1_DataRepository = new InMemoryRepositorySettings<Pocos.AxoDataFramentsExchangeExample.Station_1_Data>().Factory(); var AxoProcessDataManager = Entry.Plc.AxoDataFramentsExchangeManager.CreateBuilder<AxoDataFramentsExchangeExample.AxoProcessDataManager>(); AxoProcessDataManager.SharedHeader.SetRepository(SharedDataHeaderDataRepository); AxoProcessDataManager.Station_1.SetRepository(Station_1_DataRepository); AxoProcessDataManager.InitializeRemoteDataExchange(); Note MyData should be of type from Pocos."
  },
  "data/docs/COLUMNS.html": {
    "href": "data/docs/COLUMNS.html",
    "title": "Custom columns | System.Dynamic.ExpandoObject",
    "keywords": "Custom columns There is a possibility to add custom columns if it is needed. You must add AXOpen.Data.ColumnData view as a child in DataView. The BindingValue must be set in ColumnData and contains a string representing the attribute name of custom columns. If you want to add a custom header name, you can set the name in HeaderName attribute. Also, there is an attribute to make the column not clickable, which is clickable by default. The example using all attributes: <DataExchangeView Vm=\"@_vm\" Presentation=\"Command\"> <ColumnData HeaderName=\"Some data\" BindingValue=\"SomeData\" Clickable=\"false\" /> <ColumnData HeaderName=\"A number\" BindingValue=\"SomeNumber\" Clickable=\"false\" /> <ColumnData HeaderName=\"Yes/No\" BindingValue=\"SomeBool\" Clickable=\"false\" /> </DataExchangeView> When adding data view manually, you will need to create ViewModel: @code { private DataExchangeViewModel _vm; protected override void OnInitialized() { _vm = new DataExchangeViewModel { Model = Entry.Plc.AxoDataFramentsExchangeManager, AlertDialogService = _alertDialogService, AuthenticationProvider = _authenticationProvider }; } } Note When creating ViewModel, don't forget to provide AlertDialogService and AuthenticationProvider. Note In AxoDataFragmentExchange, Custom columns can only be added from master fragment (the first declared repository)."
  },
  "data/docs/EXPORT.html": {
    "href": "data/docs/EXPORT.html",
    "title": "Export/Import | System.Dynamic.ExpandoObject",
    "keywords": "Export/Import If you want to be able to export data, you must add CanExport attribute with true value. Like this: <DataExchangeView Vm=\"@_vm\" Presentation=\"Command\" CanExport=\"true\" /> With this option, buttons for export and import data will appear. After clicking on the export button, the .zip file will be created, which contains all existing records. If you want to import data, you must upload .zip file with an equal data structure as we get in the export file. Custom export You have the option to customize the exported files according to your preferences. This includes selecting specific columns and rows, choosing the desired file type, and specifying the separator. It's important to note that if you don't select all columns for export, importing the files may not be done correctly. During the importing process, it is crucial to enter the same separator that was used during the export. If the default separator was used during the export, there is no need to make any changes. You also can create own exporter. To do this, you must create a class that implements IDataExporter<TPlain, TOnline> interface. This interface requires you to implement the Export, Import and GetName method. Once you've done this, your custom exporter will be displayed in the custom export and import modal view. Users will be able to choose the exported file type through this view. For a better user experience, it is strongly recommended to clean the Temp directory when starting the application. The best way to do this is to add the following lines to the \"Program.cs\" file: // Clean Temp directory AXOpen.Data.IAxoDataExchange.CleanUp(); Important Export and import function will create high load on the application. Don't use with large datasets. These function can be used only on a limited number (100 or less) documents. Typical used would be for recipes and settings, but not for large collections of production or event data."
  },
  "data/docs/MODALVIEW.html": {
    "href": "data/docs/MODALVIEW.html",
    "title": "Modal detail view | System.Dynamic.ExpandoObject",
    "keywords": "Modal detail view The Detail View is default shown like modal view. That means if you click on some record, the modal window with a detail view will be shown. If necessary, this option can be changed with ModalDetailView attribute. This change will show a detail view under the record table. Example with ModalDetailView attribute: <DataExchangeView Vm=\"@_vm\" Presentation=\"Command\" ModalDetailView=\"false\" />"
  },
  "data/docs/README.html": {
    "href": "data/docs/README.html",
    "title": "AXOpen.Data | System.Dynamic.ExpandoObject",
    "keywords": "AXOpen.Data AXOpen.Data provides data exchange between the controller and an arbitrary repository. AXOpen.Data library provides a simple yet powerful data exchange between PLC and an arbitrary data repository. It includes the implementation of a series of repository operations known as CRUD (Create Read Update Delete), accessible directly from the PLC. Benefits The main benefit of this solution is data scalability; once the repository is set up, any modification of the data structure(s) will result in an automatic update of mapped objects. And therefore, there is no need for additional coding and configuration. How it works The basic PLC block is AxoDataExchange, which has its .NET counterpart (or .NET twin) that handles complex repository operations using a modified AxoRemoteTask, which is a form of RPC (Remote Procedure Call), that allows you to execute the code from the PLC in a remote .NET application. Implemented repositories The AxoDataExchange uses a predefined interface, IRepository, that allows for the virtually unlimited implementation of different target repositories. At this point, AXOpen supports these repositories directly: InMemory Json MongoDB RavenDB [!include[AxoDataExchange](docs/AxoDataExchange.md)][!include[AxoDataFragmentExchange](docs/AxoDataFragmentExchange.md)]"
  },
  "data/docs/SECURITY.html": {
    "href": "data/docs/SECURITY.html",
    "title": "Security | System.Dynamic.ExpandoObject",
    "keywords": "Security Tracking changes Every change to the data is meticulously tracked and saved. These changes are recorded in two distinct locations: Directly in the Database - Each record maintains its own history of changes: { \"ComesFrom\": 1, \"GoesTo\": 0, \"RecordId\": null, \"Changes\": [ { \"DateTime\": \"2020-10-10T10:10:10.00\", \"UserName\": \"admin\", \"ValueTag\": { \"HumanReadable\": \"PneumaticManipulator.ProcessData.Shared.Set.ComesFrom\", \"Symbol\": \"Context.PneumaticManipulator.ProcessData.Shared.Set.ComesFrom\" }, \"OldValue\": 0, \"NewValue\": 1 } ], \"DataEntityId\": \"testRecord\" } In Logs - All operations involving records are meticulously logged: [10:10:10 INF] Create testRecord in examples.PneumaticManipulator.ProcessDataManger by user action. { UserName = admin } [10:10:10 INF] Value change Context.PneumaticManipulator.ProcessData.Shared.Set.ComesFrom of testRecord from 0 to 1 changed by user action. { UserName = admin } Every action as creation, update, deletion, or copying data is captured in the logs. Also every record has its own set of changes. Its important to note that modifications originating from the PLC are not logged, tracked, or saved. Locking When a client is in the process of editing, copying, or attempting to delete a record, the entire repository becomes locked. While the repository is locked, no one can make edits to records, until the repository is unlocked. Important The repository is locked by clicking on the edit, copy, or delete buttons, and it can be unlocked by clicking the save or close button. If the modal is closed in an incorrect manner, such as clicking outside of it, the repository will remain locked. Hashing Data are hashed each time they are created or updated. To enable hash verification, you can add the attribute: {#ix-attr:[AXOpen.Data.AxoDataVerifyHashAttribute]} above the data manager. With this attribute in place, the hash will be checked whenever you interact with the data. In case the verification process fails, a log will be generated, and the user will be warned about external modifications to the record."
  },
  "data/docs/USAGE.html": {
    "href": "data/docs/USAGE.html",
    "title": "Usage | System.Dynamic.ExpandoObject",
    "keywords": "Usage Now we can freely shuffle the data between PLC and the local folder. CLASS UseManager VAR _create : BOOL; _read : BOOL; _update : BOOL; _delete : BOOL; _id : STRING; END_VAR METHOD Use VAR_IN_OUT DataManager : AxoProcessDataManager; END_VAR IF(_create) THEN IF(DataManager.Create(_id).IsDone()) THEN _create := FALSE; END_IF; END_IF; IF(_read) THEN IF(DataManager.Read(_id).IsDone()) THEN _read := FALSE; END_IF; END_IF; IF(_update) THEN IF(DataManager.Update(_id).IsDone()) THEN _update := FALSE; END_IF; END_IF; IF(_delete) THEN IF(DataManager.Delete(_id).IsDone()) THEN _delete := FALSE; END_IF; END_IF; END_METHOD END_CLASS"
  },
  "data/docs/VISUALIZATION.html": {
    "href": "data/docs/VISUALIZATION.html",
    "title": "Data visualization | System.Dynamic.ExpandoObject",
    "keywords": "Data visualization Automated rendering using RenderableContentControl With Command presentation type, options exist for adding, editing, and deleting records. <RenderableContentControl Context=\"@Entry.Plc.AxoDataFramentsExchangeManager\" Presentation=\"Command\" /> If you use Status presentation type, data will be only displayed and cannot be manipulated. <RenderableContentControl Context=\"@Entry.Plc.AxoDataFramentsExchangeManager\" Presentation=\"Status\" />"
  },
  "data/docs/index.html": {
    "href": "data/docs/index.html",
    "title": "AXOpen.Data | System.Dynamic.ExpandoObject",
    "keywords": "AXOpen.Data AXOpen.Data provides data exchange between the controller and an arbitrary repository. AXOpen.Data library provides a simple yet powerful data exchange between PLC and an arbitrary data repository. It includes the implementation of a series of repository operations known as CRUD (Create Read Update Delete), accessible directly from the PLC. Benefits The main benefit of this solution is data scalability; once the repository is set up, any modification of the data structure(s) will result in an automatic update of mapped objects. And therefore, there is no need for additional coding and configuration. How it works The basic PLC block is AxoDataExchange, which has its .NET counterpart (or .NET twin) that handles complex repository operations using a modified AxoRemoteTask, which is a form of RPC (Remote Procedure Call), that allows you to execute the code from the PLC in a remote .NET application. Implemented repositories The AxoDataExchange uses a predefined interface, IRepository, that allows for the virtually unlimited implementation of different target repositories. At this point, AXOpen supports these repositories directly: InMemory Json MongoDB RavenDB [!include[AxoDataExchange](docs/AxoDataExchange.md)][!include[AxoDataFragmentExchange](docs/AxoDataFragmentExchange.md)]"
  },
  "data/src/exporters/AXOpen.Data.Exporters.Excel/ExcelData.html": {
    "href": "data/src/exporters/AXOpen.Data.Exporters.Excel/ExcelData.html",
    "title": "Exporting data to Excel | System.Dynamic.ExpandoObject",
    "keywords": "Exporting data to Excel Overview Data is transported to .xlsx format. There is one file (workbook) generated with the name defined by the fileName variable in ExcelDataExporter.cs class. Each fragment is represented by a worksheet in the file. Export function does not call the BaseExport method of BaseDataExporter class but works in pretty much the same way with the exception of exporting data to Excel workbook. Import analogically does not call the BaseImport method of BaseDataExporter. IHowever, its functionality is almost identical to BaseImport. It calls UpdateDocument method of BaseDataExporter which has had its accessibility changed to protected. Additionally, the accessibility of the ImportItems method has been changed to protected, and its members have been changed to public so that they can be accessed from the Import method of the ExcelDataExporter class. Prerequisites ClosedXML NuGet package - MIT license Working with ClosedXML Before export and import a workbook of type XLWorkbook needs to be initialized. It can be done be creating a completely new workbook or by loading an existing one. A workbook must have at least one worksheet Limitations of .xlsx A name of a worksheet cannot be longer than 31 characters. A name of a worksheet must be unique within a workbook. See Excel specifications and limits for more information."
  },
  "data/src/repositories/RavenDb/README.html": {
    "href": "data/src/repositories/RavenDb/README.html",
    "title": "RavenDB Repository | System.Dynamic.ExpandoObject",
    "keywords": "RavenDB Repository This is an implementation of data persistence via RavenDB. What is RavenDB? RavenDB is an Open Source ACID NoSQL database. It started in 2009 as a document database, but over time included many ways to model data, so you will be able to accomodate various business and industry scenarios. You will be able to use it a fast CRUD engine to read and write JSON as a native format, but also to manipulate and index JSON via Map and Map/Reduce indexes which are powering fast Queries even with multi-terabyte datasets. How to install it? On-premise You can install and maintain yourself a single node or multinode cluster. Follow instructions to easily set up secured instance of RavenDB. Various options are at your disposal Native installation on Linux and Windows Raspberry Pi Docker Kubernetes ARM processors but Dockerized one is probably most straightforward one docker run -d -p 8080:8080 -p 38888:38888 -e RAVEN_ARGS=\"--Setup.Mode=None --License.Eula.Accepted=true\" ravendb/ravendb and RavenDB instance will be available in a few moments at http://127.0.0.1:8080/ In the cloud RavenDB offers its own Database-as-a-Service (DBaaS) RavenDB Cloud where you can create cluster residing on AWS, Azure or GCP infrastructure. With this option, you can concentrate on developing your application while complete DevOps including automated offsite backups will be handled by RavenDB DevOps team. If your project is a low-demand one, there is a Free 1-node cluster available. What about the license? Open Source projects RavenDB is licensed under AGPLv3 license, so you are free to use it with your open source project. Commercial projects During development, free Developer license is available (just register with your email address). Once you go into production, free Community license is suitable for commercial usage. However, if you decide to go with RavenDB Cloud your Enterprise license will be provided out of the box with every instance or cluster you create."
  },
  "index.html": {
    "href": "index.html",
    "title": "Source repositories | System.Dynamic.ExpandoObject",
    "keywords": "This documentation is work in progress stay tuned for upcomming releases of AXOpen by following the project on GitHub. AXOpen is an open-source application framework project developed by a group of automation engineers. It is based on SIMATIC AX platfrom and AX# technology Source repositories Underlying technology of AXOpen AX# Sources of AXOpen framework AXOpen Note This project is under development. We periodically release versions that can be used for testing and in non-production environments. Disclaimer Important It is necessary to have a valid license for SIMATIC AX in order to use AX# and AXOpen! SIMATIC AX is currently in a limited sales release in selected European countries only. You will need to request access from the AX team which will check if your use case is suitable for the current state of the product. The first step to getting the approval is contacting your local SIEMENS sales representative or writing an email to simatic-ax@siemens.com. Getting started with application template"
  },
  "inspectors/app/ix-blazor/AXOpen.Inspectors.blazor/wwwroot/css/open-iconic/README.html": {
    "href": "inspectors/app/ix-blazor/AXOpen.Inspectors.blazor/wwwroot/css/open-iconic/README.html",
    "title": "Open Iconic v1.1.1 | System.Dynamic.ExpandoObject",
    "keywords": "Open Iconic v1.1.1 Open Iconic is the open source sibling of Iconic. It is a hyper-legible collection of 223 icons with a tiny footprint—ready to use with Bootstrap and Foundation. View the collection What's in Open Iconic? 223 icons designed to be legible down to 8 pixels Super-light SVG files - 61.8 for the entire set SVG sprite—the modern replacement for icon fonts Webfont (EOT, OTF, SVG, TTF, WOFF), PNG and WebP formats Webfont stylesheets (including versions for Bootstrap and Foundation) in CSS, LESS, SCSS and Stylus formats PNG and WebP raster images in 8px, 16px, 24px, 32px, 48px and 64px. Getting Started For code samples and everything else you need to get started with Open Iconic, check out our Icons and Reference sections. General Usage Using Open Iconic's SVGs We like SVGs and we think they're the way to display icons on the web. Since Open Iconic are just basic SVGs, we suggest you display them like you would any other image (don't forget the alt attribute). <img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\"> Using Open Iconic's SVG Sprite Open Iconic also comes in a SVG sprite which allows you to display all the icons in the set with a single request. It's like an icon font, without being a hack. Adding an icon from an SVG sprite is a little different than what you're used to, but it's still a piece of cake. Tip: To make your icons easily style able, we suggest adding a general class to the <svg> tag and a unique class name for each different icon in the <use> tag. <svg class=\"icon\"> <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use> </svg> Sizing icons only needs basic CSS. All the icons are in a square format, so just set the <svg> tag with equal width and height dimensions. .icon { width: 16px; height: 16px; } Coloring icons is even easier. All you need to do is set the fill rule on the <use> tag. .icon-account-login { fill: #f00; } To learn more about SVG Sprites, read Chris Coyier's guide. Using Open Iconic's Icon Font... …with Bootstrap You can find our Bootstrap stylesheets in font/css/open-iconic-bootstrap.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\"> <span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …with Foundation You can find our Foundation stylesheets in font/css/open-iconic-foundation.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\"> <span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …on its own You can find our default stylesheets in font/css/open-iconic.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\"> <span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> License Icons All code (including SVG markup) is under the MIT License. Fonts All fonts are under the SIL Licensed."
  },
  "inspectors/docs/AXOANALOGUEINSPECTOR.html": {
    "href": "inspectors/docs/AXOANALOGUEINSPECTOR.html",
    "title": "AxoAnalogueInspector | System.Dynamic.ExpandoObject",
    "keywords": "AxoAnalogueInspector Provides evaluation of continuous values. The inspector checks that the input value falls within the limit of Min and Max. The inspection passes when the input value is within the required limit without interruption for the duration of stabilization time. Common inspector data are extended with following analogue inspector data: {#ix-set:AttributeName = \"<#Min#>\"} RequiredMin : LREAL; {#ix-attr:[ReadOnly()]} {#ix-set:AttributeName = \"<#Detected#>\"} DetectedStatus : LREAL; {#ix-set:AttributeName = \"<#Max#>\"} RequiredMax: LREAL;"
  },
  "inspectors/docs/AXODATAINSPECTOR.html": {
    "href": "inspectors/docs/AXODATAINSPECTOR.html",
    "title": "AxoDataInspector | System.Dynamic.ExpandoObject",
    "keywords": "AxoDataInspector Provides evaluation of alphanumerical values. The input value compares against the Required value. The inspection passes when the input value matches the required value without interruption for the duration of stabilization time. In addition to exact comparison, data inspector allows for simple pattern matching where # = any number and * = any character. Common inspector data are extended with following data inspector data: {#ix-set:AttributeName = \"<#Required#>\"} RequiredStatus: STRING; {#ix-attr:[ReadOnly()]} {#ix-set:AttributeName = \"<#Detected#>\"} DetectedStatus : STRING; {#ix-set:AttributeName = \"<#Star notation#>\"} StarNotationEnabled: BOOL;"
  },
  "inspectors/docs/AXODIGITALINSPECTOR.html": {
    "href": "inspectors/docs/AXODIGITALINSPECTOR.html",
    "title": "AxoDigitalInspector | System.Dynamic.ExpandoObject",
    "keywords": "AxoDigitalInspector Inspector provides evaluation of discrete value. The input value compares against the Required value. The inspection passes when the input value matches the required value without interruption for the duration of stabilization time. Common inspector data are extended with following digital inspector data: {#ix-set:AttributeName = \"<#Required#>\"} RequiredStatus : BOOL; {#ix-attr:[ReadOnly()]} {#ix-set:AttributeName = \"<#Detected#>\"} DetectedStatus : BOOL;"
  },
  "inspectors/docs/README.html": {
    "href": "inspectors/docs/README.html",
    "title": "AXOpen.Inspectors | System.Dynamic.ExpandoObject",
    "keywords": "AXOpen.Inspectors AXOpen.Inspectors provides mechanism of inspection of different types of data. The input value is compared to required value. If input value is the same as required value for a stabilization time period, the inspection will succeed. If values are different, timeout will occur and inspection will fail. Inspectors can integrate with coordination primitives like AxoSequencer. In consequence, inspectors offer extended capabilities in decision flow for failed checks. Each inspector contains: Inspect method, which input is current parent and inspection variable OnFail method, which provides methods for making a decision after a failed inspection (see Handling failure section) UpdateComprehensiveResult method, which input is object of type AxoComprehesiveResult, which can be used to gather results of all inspections. Common data about inspection inputs and result. See below. Simple example inspection Declare variables VAR PUBLIC _digitalInspector: AXOpen.Inspectors.AxoDigitalInspector; _analogueInspector: AXOpen.Inspectors.AxoAnalogueInspector; _dataInspector: AXOpen.Inspectors.AxoDataInspector; _inspectionResult: BOOL; _inspectionValue: LREAL; _inspectionData: STRING; END_VAR Set initial inspection pass and fail timers _digitalInspector.Data()^.FailTime := TIME#3s; _analogueInspector.Data()^.FailTime := TIME#3s; _dataInspector.Data()^.FailTime := TIME#3s; _digitalInspector.Data()^.PassTime := TIME#2s; _analogueInspector.Data()^.PassTime := TIME#2s; _dataInspector.Data()^.PassTime := TIME#2s; Run inspections _digitalInspector.Inspect(THIS, _inspectionResult); _analogueInspector.Inspect(THIS, _inspectionValue); _dataInspector.Inspect(THIS, _inspectionData); Check each inspector's data for results Note Inspectors use AxOpen.Timers for counting time during inspections. Make sure, that PLC cycle time value in configuration.st is set accordingly to Pass and Fail timers (it should be in tens or hundreds milliseconds, the value shouldn't higher than lowest difference between pass and fail timers). If there are small differences (in ms) between pass and fail times and PLC cycle time is higher number (e.g. 1000 ms), unexpected behavior may occur and inspections can fail (even if they should pass). Example inspection with Coordinator Example of inspection within a sequencer in PLC: _digitalInspector.WithCoordinator(THIS).Inspect(THIS,_inspectionResult).UpdateComprehensiveResult(_comprehensiveResult).OnFail().CarryOn(); A _presenceInspector is created instance of AxoDigitalInspector A coordinator is passed to this inspector with WithCoordinator(THIS) method, in this case it is a sequencer, a parent object. Inspect methods takes parent and inspection variable, on which inspection is performing. If inspection fails, the result is updated to _comprehensiveResult object with UpdateComprehensiveResult method. If inspection fails, OnFail method provides CarryOn method, which tells the coordinator to continue in execution. Common inspector data Inspectors contain common data, which are used to store data about inspection. Each inspector contain following data: //timestamp of inspection {#ix-set:AttributeName = \"<#TimeStamp#>\"} Timestamp: LDATE_AND_TIME; //stabilization time, inspection must be success for this period of time {#ix-set:AttributeName = \"<#Stab.Time#>\"} PassTime : TIME; //timeout, after which inspection fails {#ix-set:AttributeName = \"<#Timeout#>\"} FailTime : TIME; //result of inspection {#ix-set:AttributeName = \"<#Result#>\"} Result : eInspectorResult; //inspection will be performed, however result will be omitted in overall result {#ix-set:AttributeName = \"<#Excluded#>\"} IsExcluded: BOOL; //inspection will be skipped {#ix-set:AttributeName = \"<#Bypass#>\"} IsByPassed : BOOL; //maximum number of retries of inspection {#ix-set:AttributeName = \"<#Re-tries#>\"} NumberOfAllowedRetries : UINT; //actual number of retries {#ix-set:AttributeName = \"<#Attempts#>\"} RetryAttemptsCount : UINT; AxoDigitalInspector Inspector provides evaluation of discrete value. The input value compares against the Required value. The inspection passes when the input value matches the required value without interruption for the duration of stabilization time. Common inspector data are extended with following digital inspector data: {#ix-set:AttributeName = \"<#Required#>\"} RequiredStatus : BOOL; {#ix-attr:[ReadOnly()]} {#ix-set:AttributeName = \"<#Detected#>\"} DetectedStatus : BOOL; AxoAnalogueInspector Provides evaluation of continuous values. The inspector checks that the input value falls within the limit of Min and Max. The inspection passes when the input value is within the required limit without interruption for the duration of stabilization time. Common inspector data are extended with following analogue inspector data: {#ix-set:AttributeName = \"<#Min#>\"} RequiredMin : LREAL; {#ix-attr:[ReadOnly()]} {#ix-set:AttributeName = \"<#Detected#>\"} DetectedStatus : LREAL; {#ix-set:AttributeName = \"<#Max#>\"} RequiredMax: LREAL; AxoDataInspector Provides evaluation of alphanumerical values. The input value compares against the Required value. The inspection passes when the input value matches the required value without interruption for the duration of stabilization time. In addition to exact comparison, data inspector allows for simple pattern matching where # = any number and * = any character. Common inspector data are extended with following data inspector data: {#ix-set:AttributeName = \"<#Required#>\"} RequiredStatus: STRING; {#ix-attr:[ReadOnly()]} {#ix-set:AttributeName = \"<#Detected#>\"} DetectedStatus : STRING; {#ix-set:AttributeName = \"<#Star notation#>\"} StarNotationEnabled: BOOL; Handling failure When an inspector fails, OnFail() provides a series of methods for making decisions about the process. In order for this is feature to work the inspector needs to be aware of the coordinator of IAxoCoordinator. The coordinator must be passed to the inspector by WithCoordinator(coordinator) method. Syntax Description Dialog(inRetryStep, inTerminateStep) Opens dialog for the user to take a decision. Parameter inRetryStep represent state from which the inspection should start again. Parameter inTerminateStep represent terminate state of coordinator. Retry(inRetryStep) Retries the inspector. Retry state parameter tells from which state the inspection should start again. Override() Marks the inspection as failed but continues with the following states of the coordinator. Terminate(inTerminateStep) Marks the inspection as failed and aborts the execution of the coordinator. The following example specify, that when inspection fails, dialog is shown and is requesting user decision. _dataInspector.WithCoordinator(THIS).Inspect(THIS,_inspectionData).UpdateComprehensiveResult(_comprehensiveResult).OnFail().Dialog(Steps[20], Steps[45],_dataInspectorDialog); Over-inspection When RetryAttemptsCount is same as NumberOfAllowedRetries, no more inspection are allowed, as data are overinspected. Preserving overall result Overall result of a series of inspections can be preserved in AxoComprehensiveResult. Each inspector has UpdateComprehensiveResult method that provides the update function. Once the UpdateComprehensiveResult marks the overall result as Failed, successive inspection will not overwrite the result. IF (Steps[30].Execute(THIS, TRUE, 'Example Digital inspection')) THEN _digitalInspector.WithCoordinator(THIS).Inspect(THIS,_inspectionResult).UpdateComprehensiveResult(_comprehensiveResult).OnFail().CarryOn(); END_IF; IF (Steps[35].Execute(THIS, TRUE, 'Example Analog inspection')) THEN _analogueInspector.WithCoordinator(THIS).Inspect(THIS,_inspectionValue).UpdateComprehensiveResult(_comprehensiveResult).OnFail().CarryOn(); END_IF;"
  },
  "inspectors/docs/index.html": {
    "href": "inspectors/docs/index.html",
    "title": "AXOpen.Inspectors | System.Dynamic.ExpandoObject",
    "keywords": "AXOpen.Inspectors AXOpen.Inspectors provides mechanism of inspection of different types of data. The input value is compared to required value. If input value is the same as required value for a stabilization time period, the inspection will succeed. If values are different, timeout will occur and inspection will fail. Inspectors can integrate with coordination primitives like AxoSequencer. In consequence, inspectors offer extended capabilities in decision flow for failed checks. Each inspector contains: Inspect method, which input is current parent and inspection variable OnFail method, which provides methods for making a decision after a failed inspection (see Handling failure section) UpdateComprehensiveResult method, which input is object of type AxoComprehesiveResult, which can be used to gather results of all inspections. Common data about inspection inputs and result. See below. Simple example inspection Declare variables VAR PUBLIC _digitalInspector: AXOpen.Inspectors.AxoDigitalInspector; _analogueInspector: AXOpen.Inspectors.AxoAnalogueInspector; _dataInspector: AXOpen.Inspectors.AxoDataInspector; _inspectionResult: BOOL; _inspectionValue: LREAL; _inspectionData: STRING; END_VAR Set initial inspection pass and fail timers _digitalInspector.Data()^.FailTime := TIME#3s; _analogueInspector.Data()^.FailTime := TIME#3s; _dataInspector.Data()^.FailTime := TIME#3s; _digitalInspector.Data()^.PassTime := TIME#2s; _analogueInspector.Data()^.PassTime := TIME#2s; _dataInspector.Data()^.PassTime := TIME#2s; Run inspections _digitalInspector.Inspect(THIS, _inspectionResult); _analogueInspector.Inspect(THIS, _inspectionValue); _dataInspector.Inspect(THIS, _inspectionData); Check each inspector's data for results Note Inspectors use AxOpen.Timers for counting time during inspections. Make sure, that PLC cycle time value in configuration.st is set accordingly to Pass and Fail timers (it should be in tens or hundreds milliseconds, the value shouldn't higher than lowest difference between pass and fail timers). If there are small differences (in ms) between pass and fail times and PLC cycle time is higher number (e.g. 1000 ms), unexpected behavior may occur and inspections can fail (even if they should pass). Example inspection with Coordinator Example of inspection within a sequencer in PLC: _digitalInspector.WithCoordinator(THIS).Inspect(THIS,_inspectionResult).UpdateComprehensiveResult(_comprehensiveResult).OnFail().CarryOn(); A _presenceInspector is created instance of AxoDigitalInspector A coordinator is passed to this inspector with WithCoordinator(THIS) method, in this case it is a sequencer, a parent object. Inspect methods takes parent and inspection variable, on which inspection is performing. If inspection fails, the result is updated to _comprehensiveResult object with UpdateComprehensiveResult method. If inspection fails, OnFail method provides CarryOn method, which tells the coordinator to continue in execution. Common inspector data Inspectors contain common data, which are used to store data about inspection. Each inspector contain following data: //timestamp of inspection {#ix-set:AttributeName = \"<#TimeStamp#>\"} Timestamp: LDATE_AND_TIME; //stabilization time, inspection must be success for this period of time {#ix-set:AttributeName = \"<#Stab.Time#>\"} PassTime : TIME; //timeout, after which inspection fails {#ix-set:AttributeName = \"<#Timeout#>\"} FailTime : TIME; //result of inspection {#ix-set:AttributeName = \"<#Result#>\"} Result : eInspectorResult; //inspection will be performed, however result will be omitted in overall result {#ix-set:AttributeName = \"<#Excluded#>\"} IsExcluded: BOOL; //inspection will be skipped {#ix-set:AttributeName = \"<#Bypass#>\"} IsByPassed : BOOL; //maximum number of retries of inspection {#ix-set:AttributeName = \"<#Re-tries#>\"} NumberOfAllowedRetries : UINT; //actual number of retries {#ix-set:AttributeName = \"<#Attempts#>\"} RetryAttemptsCount : UINT; AxoDigitalInspector Inspector provides evaluation of discrete value. The input value compares against the Required value. The inspection passes when the input value matches the required value without interruption for the duration of stabilization time. Common inspector data are extended with following digital inspector data: {#ix-set:AttributeName = \"<#Required#>\"} RequiredStatus : BOOL; {#ix-attr:[ReadOnly()]} {#ix-set:AttributeName = \"<#Detected#>\"} DetectedStatus : BOOL; AxoAnalogueInspector Provides evaluation of continuous values. The inspector checks that the input value falls within the limit of Min and Max. The inspection passes when the input value is within the required limit without interruption for the duration of stabilization time. Common inspector data are extended with following analogue inspector data: {#ix-set:AttributeName = \"<#Min#>\"} RequiredMin : LREAL; {#ix-attr:[ReadOnly()]} {#ix-set:AttributeName = \"<#Detected#>\"} DetectedStatus : LREAL; {#ix-set:AttributeName = \"<#Max#>\"} RequiredMax: LREAL; AxoDataInspector Provides evaluation of alphanumerical values. The input value compares against the Required value. The inspection passes when the input value matches the required value without interruption for the duration of stabilization time. In addition to exact comparison, data inspector allows for simple pattern matching where # = any number and * = any character. Common inspector data are extended with following data inspector data: {#ix-set:AttributeName = \"<#Required#>\"} RequiredStatus: STRING; {#ix-attr:[ReadOnly()]} {#ix-set:AttributeName = \"<#Detected#>\"} DetectedStatus : STRING; {#ix-set:AttributeName = \"<#Star notation#>\"} StarNotationEnabled: BOOL; Handling failure When an inspector fails, OnFail() provides a series of methods for making decisions about the process. In order for this is feature to work the inspector needs to be aware of the coordinator of IAxoCoordinator. The coordinator must be passed to the inspector by WithCoordinator(coordinator) method. Syntax Description Dialog(inRetryStep, inTerminateStep) Opens dialog for the user to take a decision. Parameter inRetryStep represent state from which the inspection should start again. Parameter inTerminateStep represent terminate state of coordinator. Retry(inRetryStep) Retries the inspector. Retry state parameter tells from which state the inspection should start again. Override() Marks the inspection as failed but continues with the following states of the coordinator. Terminate(inTerminateStep) Marks the inspection as failed and aborts the execution of the coordinator. The following example specify, that when inspection fails, dialog is shown and is requesting user decision. _dataInspector.WithCoordinator(THIS).Inspect(THIS,_inspectionData).UpdateComprehensiveResult(_comprehensiveResult).OnFail().Dialog(Steps[20], Steps[45],_dataInspectorDialog); Over-inspection When RetryAttemptsCount is same as NumberOfAllowedRetries, no more inspection are allowed, as data are overinspected. Preserving overall result Overall result of a series of inspections can be preserved in AxoComprehensiveResult. Each inspector has UpdateComprehensiveResult method that provides the update function. Once the UpdateComprehensiveResult marks the overall result as Failed, successive inspection will not overwrite the result. IF (Steps[30].Execute(THIS, TRUE, 'Example Digital inspection')) THEN _digitalInspector.WithCoordinator(THIS).Inspect(THIS,_inspectionResult).UpdateComprehensiveResult(_comprehensiveResult).OnFail().CarryOn(); END_IF; IF (Steps[35].Execute(THIS, TRUE, 'Example Analog inspection')) THEN _analogueInspector.WithCoordinator(THIS).Inspect(THIS,_inspectionValue).UpdateComprehensiveResult(_comprehensiveResult).OnFail().CarryOn(); END_IF;"
  },
  "integrations/src/AXOpen.Integrations.Blazor/wwwroot/css/open-iconic/README.html": {
    "href": "integrations/src/AXOpen.Integrations.Blazor/wwwroot/css/open-iconic/README.html",
    "title": "Open Iconic v1.1.1 | System.Dynamic.ExpandoObject",
    "keywords": "Open Iconic v1.1.1 Open Iconic is the open source sibling of Iconic. It is a hyper-legible collection of 223 icons with a tiny footprint—ready to use with Bootstrap and Foundation. View the collection What's in Open Iconic? 223 icons designed to be legible down to 8 pixels Super-light SVG files - 61.8 for the entire set SVG sprite—the modern replacement for icon fonts Webfont (EOT, OTF, SVG, TTF, WOFF), PNG and WebP formats Webfont stylesheets (including versions for Bootstrap and Foundation) in CSS, LESS, SCSS and Stylus formats PNG and WebP raster images in 8px, 16px, 24px, 32px, 48px and 64px. Getting Started For code samples and everything else you need to get started with Open Iconic, check out our Icons and Reference sections. General Usage Using Open Iconic's SVGs We like SVGs and we think they're the way to display icons on the web. Since Open Iconic are just basic SVGs, we suggest you display them like you would any other image (don't forget the alt attribute). <img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\"> Using Open Iconic's SVG Sprite Open Iconic also comes in a SVG sprite which allows you to display all the icons in the set with a single request. It's like an icon font, without being a hack. Adding an icon from an SVG sprite is a little different than what you're used to, but it's still a piece of cake. Tip: To make your icons easily style able, we suggest adding a general class to the <svg> tag and a unique class name for each different icon in the <use> tag. <svg class=\"icon\"> <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use> </svg> Sizing icons only needs basic CSS. All the icons are in a square format, so just set the <svg> tag with equal width and height dimensions. .icon { width: 16px; height: 16px; } Coloring icons is even easier. All you need to do is set the fill rule on the <use> tag. .icon-account-login { fill: #f00; } To learn more about SVG Sprites, read Chris Coyier's guide. Using Open Iconic's Icon Font... …with Bootstrap You can find our Bootstrap stylesheets in font/css/open-iconic-bootstrap.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\"> <span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …with Foundation You can find our Foundation stylesheets in font/css/open-iconic-foundation.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\"> <span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …on its own You can find our default stylesheets in font/css/open-iconic.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\"> <span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> License Icons All code (including SVG markup) is under the MIT License. Fonts All fonts are under the SIL Licensed."
  },
  "probers/app/ix-blazor/librarytemplate.blazor/wwwroot/css/open-iconic/README.html": {
    "href": "probers/app/ix-blazor/librarytemplate.blazor/wwwroot/css/open-iconic/README.html",
    "title": "Open Iconic v1.1.1 | System.Dynamic.ExpandoObject",
    "keywords": "Open Iconic v1.1.1 Open Iconic is the open source sibling of Iconic. It is a hyper-legible collection of 223 icons with a tiny footprint—ready to use with Bootstrap and Foundation. View the collection What's in Open Iconic? 223 icons designed to be legible down to 8 pixels Super-light SVG files - 61.8 for the entire set SVG sprite—the modern replacement for icon fonts Webfont (EOT, OTF, SVG, TTF, WOFF), PNG and WebP formats Webfont stylesheets (including versions for Bootstrap and Foundation) in CSS, LESS, SCSS and Stylus formats PNG and WebP raster images in 8px, 16px, 24px, 32px, 48px and 64px. Getting Started For code samples and everything else you need to get started with Open Iconic, check out our Icons and Reference sections. General Usage Using Open Iconic's SVGs We like SVGs and we think they're the way to display icons on the web. Since Open Iconic are just basic SVGs, we suggest you display them like you would any other image (don't forget the alt attribute). <img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\"> Using Open Iconic's SVG Sprite Open Iconic also comes in a SVG sprite which allows you to display all the icons in the set with a single request. It's like an icon font, without being a hack. Adding an icon from an SVG sprite is a little different than what you're used to, but it's still a piece of cake. Tip: To make your icons easily style able, we suggest adding a general class to the <svg> tag and a unique class name for each different icon in the <use> tag. <svg class=\"icon\"> <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use> </svg> Sizing icons only needs basic CSS. All the icons are in a square format, so just set the <svg> tag with equal width and height dimensions. .icon { width: 16px; height: 16px; } Coloring icons is even easier. All you need to do is set the fill rule on the <use> tag. .icon-account-login { fill: #f00; } To learn more about SVG Sprites, read Chris Coyier's guide. Using Open Iconic's Icon Font... …with Bootstrap You can find our Bootstrap stylesheets in font/css/open-iconic-bootstrap.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\"> <span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …with Foundation You can find our Foundation stylesheets in font/css/open-iconic-foundation.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\"> <span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …on its own You can find our default stylesheets in font/css/open-iconic.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\"> <span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> License Icons All code (including SVG markup) is under the MIT License. Fonts All fonts are under the SIL Licensed."
  },
  "security/README.html": {
    "href": "security/README.html",
    "title": "AXOpen.Security | System.Dynamic.ExpandoObject",
    "keywords": "AXOpen.Security AxOpen.Security is library which provides authentication and authorization in Blazor AX applications. It is based on a default solution for authentication in Blazor, which is extended by using implemented repositories within Ax.Open.Data. As a result, multiple storage providers for security can be used. Installation The security library is available in form of NuGet package. Detailed installation instructions of security into empty Blazor project is located in security installation article. Basic concepts Each user is limited to having just a single group. A group is formed by a collection of multiple roles. When a user is assigned to a group, they possess all the roles associated with that group. It is possible for a single role to be assigned to multiple groups. Security views SecurityManagementView component serves for managing users. It is available only if user is logged in with administrator rights. When user is logged in with administrator rights, it is possible to modify all available users and groups. Administrator can delete users or change group. User management The SecurityManagementView component includes a tab dedicated to user management. Within this tab, users can be updated or newly created. When a user is selected, a card is displayed showing the current data for that user, there is an option to update or delete user. Group Management The SecurityManagementView component includes a tab for group management. Within this tab, groups can be updated or newly created. When a group is selected, a card is displayed showing the assigned roles for that group. Users have the option assigned or unassign roles or delete group. Account Management In account management view is possible to change the your user data, like email address or password. User Create In user create view is possible to new user. AuthorizeView and AuthenticationContext There are two ways how to work with authentication and authorization. Use of the AuthorizeView component in Blazor component Use of the AuthenticationStateProvider within a C# class Use of AuthorizeView The AuthorizeView is used to create a secure views within a Blazor application. It contains two child components Authorized and NotAuthorized, which serves for visualizing view in a corresponded views. In addition, the parameter Roles can be used to specified roles, based on which the authorized view is shown. The AuthorizeView contain base class named context, which is used to access identity of currently logged in user. The example of usage of AuthorizeView within a Blazor component is shown below: <AuthorizeView Roles=\"Administrator\"> <Authorized> <h4>You have role Administrator.</h4> <h4>Your name is: @context.User.Identity.Name</h4> </Authorized> <NotAuthorized> <h4>You dont have role Administrator.</h4> </NotAuthorized> </AuthorizeView> If the user is authenticated and is also authorized with the Administrator role, the authorized view is shown. Otherwise, non-authorized view is displayed. Also, there is a possibility to call method from RoleGroupManager called GetRoles, which takes as parameter name of the group and returns corresponded roles. RoleGroupManager is accessible from IRepositoryService. @inject IRepositoryService rs <AuthorizeView Roles=\"@rs.RoleGroupManager.GetRoles(\"AdminGroup\")\"> Use of AuthenticationStateProvider The AuthenticationStateProvider serves for accessing current logged in user and his claims. This provider can be injected to any C# class (either from constructor injection (in ViewModel) or with Inject attribute in Blazor component), where user need to work with authentication context. The authentication context of current user can be accessed in following way: @page \"/mypage\" @inject AuthenticationStateProvider _asp @code { protected override async Task OnInitializedAsync() { var context = await _asp.GetAuthenticationStateAsync(); var isAuth = context.User.Identity.IsAuthenticated; if (isAuth) { Console.Writeline(\"I'm authenticated\"); } } }"
  },
  "security/docs/INSTALLATION.html": {
    "href": "security/docs/INSTALLATION.html",
    "title": "Installation | System.Dynamic.ExpandoObject",
    "keywords": "Installation All necessary logic for security is located in AxOpen.Security library. 1. Install AxOpen.Security NuGet package or add reference to this project 2. Add reference to AxOpen.Security assembly. Go to App.razor and add AdditionalAssemblies as parameter of Router component. The following line must be added to Router component: AdditionalAssemblies=\"new[] { typeof(BlazorSecurity).Assembly}\"> Also, make sure, that Router component is wrapped inside CascadingAuthenticationState component. At the end, the Router component should look like this: <CascadingAuthenticationState> <Router AppAssembly=\"@typeof(App).Assembly\" AdditionalAssemblies=\"new[] { typeof(BlazorSecurity).Assembly}\"> ... </Router> </CascadingAuthenticationState> 3. Configure Ax Blazor security services in dependency injection container of Blazor application located in Program.cs file. To correctly configure security services you must: configure repository create in-app roles configure AxBlazorSecurity in DI container Configuring repository The security requires 2 instances of repositories: for persistence of user data for persistence of groups of roles Within AXOpen 4 different types of repositories are available: InMemory Json MongoDB RavenDB For example, the Json repository can be configured as follows: static (IRepository<User>, IRepository<Group>) SetUpJSon(string path = \"..\\\\..\\\\..\\\\..\\\\..\\\\JSONREPOS\\\\\") { var executingAssemblyFile = new FileInfo(Assembly.GetExecutingAssembly().Location); var repositoryDirectory = Path.GetFullPath($\"{executingAssemblyFile.Directory}{path}\"); if (!Directory.Exists(repositoryDirectory)) { Directory.CreateDirectory(repositoryDirectory); } IRepository<User> userRepo = new JsonRepository<User>(new JsonRepositorySettings<User>(Path.Combine(repositoryDirectory, \"Users\"))); IRepository<Group> groupRepo = new JsonRepository<Group>(new JsonRepositorySettings<Group>(Path.Combine(repositoryDirectory, \"Groups\"))); return (userRepo, groupRepo); } Add SetUpJson method in Program.cs file. Creating in-app roles In your Blazor application create new static class Roles and specify the roles, that will be used in your application. You can add as many roles as you want. The Roles class can be defined like this: public static class Roles { public static List<Role> CreateRoles() { var roles = new List<Role> { new Role(process_settings_access), new Role(process_traceability_access), }; return roles; } public const string process_settings_access = nameof(process_settings_access); public const string process_traceability_access = nameof(process_traceability_access); } Configure AxBlazorSecurity services Finally, the AxBlazorSecurity security can be configured in DI container of Blazor application. Go to Program.cs file and add following line to builder: builder.Services.ConfigureAxBlazorSecurity(SetUpJSon(), Roles.CreateRoles()); The first parameter is set up repository and the second parameter are created roles. 4. Add security views to application Go to MainLayout.razor located in Shared folder and add LoginDisplay view inside top bar. <main> <div class=\"top-row px-4 auth\"> <AxOpen.Security.Views.LoginDisplay/> </div> <article class=\"content px-4\"> @Body </article> </main> Within Pages of the Blazor application, create new Security.razor page and add there SecurityManagementView. @page \"/Security\" <h3>Security</h3> <AxOpen.Security.Views.SecurityManagementView /> Add you security view inside the navigation menu in NavMenu.razor: <div class=\"nav-item px-3\"> <NavLink class=\"nav-link\" href=\"security\"> <span class=\"oi oi-list-rich\" aria-hidden=\"true\"></span> Security </NavLink> </div> Default login If everything done correctly, now security should be available in Blazor application. Now it should be possible to log-in with default user. The default user is created on application startup with following credentials: Username: admin Password: admin The user has default Administrator role and is in default AdminGroup."
  },
  "security/index.html": {
    "href": "security/index.html",
    "title": "AXOpen.Security | System.Dynamic.ExpandoObject",
    "keywords": "AXOpen.Security AxOpen.Security is library which provides authentication and authorization in Blazor AX applications. It is based on a default solution for authentication in Blazor, which is extended by using implemented repositories within Ax.Open.Data. As a result, multiple storage providers for security can be used. Installation The security library is available in form of NuGet package. Detailed installation instructions of security into empty Blazor project is located in security installation article. Basic concepts Each user is limited to having just a single group. A group is formed by a collection of multiple roles. When a user is assigned to a group, they possess all the roles associated with that group. It is possible for a single role to be assigned to multiple groups. Security views SecurityManagementView component serves for managing users. It is available only if user is logged in with administrator rights. When user is logged in with administrator rights, it is possible to modify all available users and groups. Administrator can delete users or change group. User management The SecurityManagementView component includes a tab dedicated to user management. Within this tab, users can be updated or newly created. When a user is selected, a card is displayed showing the current data for that user, there is an option to update or delete user. Group Management The SecurityManagementView component includes a tab for group management. Within this tab, groups can be updated or newly created. When a group is selected, a card is displayed showing the assigned roles for that group. Users have the option assigned or unassign roles or delete group. Account Management In account management view is possible to change the your user data, like email address or password. User Create In user create view is possible to new user. AuthorizeView and AuthenticationContext There are two ways how to work with authentication and authorization. Use of the AuthorizeView component in Blazor component Use of the AuthenticationStateProvider within a C# class Use of AuthorizeView The AuthorizeView is used to create a secure views within a Blazor application. It contains two child components Authorized and NotAuthorized, which serves for visualizing view in a corresponded views. In addition, the parameter Roles can be used to specified roles, based on which the authorized view is shown. The AuthorizeView contain base class named context, which is used to access identity of currently logged in user. The example of usage of AuthorizeView within a Blazor component is shown below: <AuthorizeView Roles=\"Administrator\"> <Authorized> <h4>You have role Administrator.</h4> <h4>Your name is: @context.User.Identity.Name</h4> </Authorized> <NotAuthorized> <h4>You dont have role Administrator.</h4> </NotAuthorized> </AuthorizeView> If the user is authenticated and is also authorized with the Administrator role, the authorized view is shown. Otherwise, non-authorized view is displayed. Also, there is a possibility to call method from RoleGroupManager called GetRoles, which takes as parameter name of the group and returns corresponded roles. RoleGroupManager is accessible from IRepositoryService. @inject IRepositoryService rs <AuthorizeView Roles=\"@rs.RoleGroupManager.GetRoles(\"AdminGroup\")\"> Use of AuthenticationStateProvider The AuthenticationStateProvider serves for accessing current logged in user and his claims. This provider can be injected to any C# class (either from constructor injection (in ViewModel) or with Inject attribute in Blazor component), where user need to work with authentication context. The authentication context of current user can be accessed in following way: @page \"/mypage\" @inject AuthenticationStateProvider _asp @code { protected override async Task OnInitializedAsync() { var context = await _asp.GetAuthenticationStateAsync(); var isAuth = context.User.Identity.IsAuthenticated; if (isAuth) { Console.Writeline(\"I'm authenticated\"); } } }"
  },
  "security/integrations/axopen_blazor_auth_app/wwwroot/css/open-iconic/README.html": {
    "href": "security/integrations/axopen_blazor_auth_app/wwwroot/css/open-iconic/README.html",
    "title": "Open Iconic v1.1.1 | System.Dynamic.ExpandoObject",
    "keywords": "Open Iconic v1.1.1 Open Iconic is the open source sibling of Iconic. It is a hyper-legible collection of 223 icons with a tiny footprint—ready to use with Bootstrap and Foundation. View the collection What's in Open Iconic? 223 icons designed to be legible down to 8 pixels Super-light SVG files - 61.8 for the entire set SVG sprite—the modern replacement for icon fonts Webfont (EOT, OTF, SVG, TTF, WOFF), PNG and WebP formats Webfont stylesheets (including versions for Bootstrap and Foundation) in CSS, LESS, SCSS and Stylus formats PNG and WebP raster images in 8px, 16px, 24px, 32px, 48px and 64px. Getting Started For code samples and everything else you need to get started with Open Iconic, check out our Icons and Reference sections. General Usage Using Open Iconic's SVGs We like SVGs and we think they're the way to display icons on the web. Since Open Iconic are just basic SVGs, we suggest you display them like you would any other image (don't forget the alt attribute). <img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\"> Using Open Iconic's SVG Sprite Open Iconic also comes in a SVG sprite which allows you to display all the icons in the set with a single request. It's like an icon font, without being a hack. Adding an icon from an SVG sprite is a little different than what you're used to, but it's still a piece of cake. Tip: To make your icons easily style able, we suggest adding a general class to the <svg> tag and a unique class name for each different icon in the <use> tag. <svg class=\"icon\"> <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use> </svg> Sizing icons only needs basic CSS. All the icons are in a square format, so just set the <svg> tag with equal width and height dimensions. .icon { width: 16px; height: 16px; } Coloring icons is even easier. All you need to do is set the fill rule on the <use> tag. .icon-account-login { fill: #f00; } To learn more about SVG Sprites, read Chris Coyier's guide. Using Open Iconic's Icon Font... …with Bootstrap You can find our Bootstrap stylesheets in font/css/open-iconic-bootstrap.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\"> <span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …with Foundation You can find our Foundation stylesheets in font/css/open-iconic-foundation.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\"> <span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …on its own You can find our default stylesheets in font/css/open-iconic.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\"> <span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> License Icons All code (including SVG markup) is under the MIT License. Fonts All fonts are under the SIL Licensed."
  },
  "simatic1500/ctrl/README.html": {
    "href": "simatic1500/ctrl/README.html",
    "title": "ix.core | System.Dynamic.ExpandoObject",
    "keywords": "ix.core ix.core provides basic blocks for building AXOpen applications. Basic concepts IxContext IxContext encapsulates entire application or application units. Any solution may contain one or more contexts, however the each should be considered to be an isolated island and any direct inter-context access to members must be avoided. IMPORTANT Each IxContext must belong to a single PLC task. Multiple IxContexts can be however running on the same task. classDiagram class Context{ #Main()* +Run() } In its basic implementation IxContext has relatively simple interface. The main method is the method where we place all calls of our sub-routines. In other words the Main is the root of the call tree of our program. Run method runs the IxContext. It must be called cyclically within a program unit that is attached to a cyclic task. Why do we need IxContext IxContext provides counters, object identification and other information about the execution of the program. These information is then used by the objects contained at different levels of the IxContext. How IxContext works When you call Run method on an instance of a IxContext, it will ensure opening IxContext, running Main method (root of all your program calls) and IxContext closing. flowchart LR classDef run fill:#80FF00,stroke:#0080FF,stroke-width:4px,color:#7F00FF,font-size:15px,font-weight:bold classDef main fill:#ff8000,stroke:#0080ff,stroke-width:4px,color:#7F00FF,font-size:15px,font-weight:bold id1(Open):::run-->id2(#Main*):::main-->id3(Close):::run-->id1 How to use IxContext Base class for the IxContext is ix.core.IxContext. The entry point of call execution of the IxContext is Main method. Notice that the IxContext class is abstract and cannot be instantiated if not extended. Main method must be overridden in derived class notice the use of override keyword and also that the method is protected which means the it is visible only from within the IxContext and derived classes. How to extend IxContext class USING ix.core CLASS PUBLIC MyContext EXTENDS IxContext METHOD PROTECTED OVERRIDE Main // Here goes all your logic for given IxContext. END_METHOD END_CLASS Cyclical call of the IxContext logic (Main method) is ensured when IxContext Execute method is called. Execute method is public therefore accessible and visible to any part of the program that whishes to call it. How to start IxContext's execution PROGRAM MyProgram VAR _myContext : MyContext; END_VAR _myContext.Run(); END_PROGRAM IxObject IxObject is the base class for any other classes of AXOpen. It provides access to the parent IxObject and the IxContext in which it was initialized. classDiagram class Object{ +Initialize(IIxContext context) +Initialize(IIxObject parent) } IxObject initialization within a IxContext CLASS PUBLIC MyContext EXTENDS ix.core.IxContext VAR _myObject : ix.core.IxObject; END_VAR METHOD PROTECTED OVERRIDE Main _myObject.Initialize(THIS); END_METHOD END_CLASS IxObject initialization within another IxObject CLASS PUBLIC MyParentObject EXTENDS ix.core.IxObject VAR _myChildObject : ix.core.IxObject; END_VAR METHOD PROTECTED OVERRIDE Main _myChildObject.Initialize(THIS); END_METHOD END_CLASS IxTask IxTask provides basic task execution. IxTask needs to be initialized to set the proper IxContext. IxTask initialization within a IxContext CLASS IxTaskExample EXTENDS IxContext VAR PUBLIC _myTask : IxTask; _myCounter : ULINT; END_VAR METHOD PUBLIC Initialize // Initialization of the context needs to be called first // It does not need to be called cyclically, just once _myTask.Initialize(THIS); END_METHOD END_CLASS There are two key methods for managing the IxTask: Invoke() fires the execution of the IxTask (can be called fire&forget or cyclically) Execute() method must be called cyclically. The method returns TRUE when the IxTask is required to run until enters Done state or terminates in error. For termination of the execution of the IxTask there are following methods: DoneWhen(Done_Condition) - terminates the execution of the IxTask and enters the Done state when the Done_Condition is TRUE. ThrowWhen(Error_Condition) - terminates the execution of the IxTask and enters the Error state when the Error_Condition is TRUE. Abort() - terminates the execution of the IxTask and enters the Ready state if the IxTask is in the Busy state, otherwise does nothing. To reset the IxTask from any state in any moment there is following method: Restore() acts as reset of the IxTask (sets the state into Ready state from any state of the IxTask). Moreover, there are seven more \"event-like\" methods that are called when a specific event occurs (see the chart below). flowchart TD classDef states fill:#80FF00,stroke:#0080FF,stroke-width:4px,color:#7F00FF,font-size:15px,font-weight:bold classDef actions fill:#ff8000,stroke:#0080ff,stroke-width:4px,color:#7F00FF,font-size:15px,font-weight:bold classDef events fill:#80FF00,stroke:#0080ff,stroke-width:4px,color:#7F00FF,font-size:15px,font-weight:bold s1((Ready)):::states s2((Kicking)):::states s3((Busy)):::states s4((Done)):::states s5((Error)):::states s6((Aborted)):::states a1(\"Invoke()#128258;\"):::actions a2(\"Execute()#128260;\"):::actions a3(\"DoneWhen(TRUE)#128258;\"):::actions a4(\"ThrowWhen(TRUE)#128258;\"):::actions a5(\"NOT Invoke() call for at<br>least two Context cycles#128260;\"):::actions a6(\"Restore()#128258;\"):::actions a7(\"Abort()#128258;\"):::actions a8(\"Resume()#128258;\"):::actions e1{{\"OnStart()#128258;\"}}:::events e2{{\"OnError()#128258;\"}}:::events e3{{\"WhileError()#128260;\"}}:::events e4{{\"OnDone()#128258;\"}}:::events e5{{\"OnAbort()#128258;\"}}:::events e6{{\"OnRestore()#128258;\"}}:::events subgraph legend[\" \"] direction LR s((State)):::states ac(\"Action #128260;:called<br>cyclically\"):::actions as(\"Action #128258;:single<br>or cyclical call \"):::actions ec{{\"Event #128260;:called<br>cyclically\"}}:::events es{{\"Event #128258;:triggered<br>once \"}}:::events end subgraph chart[\" \"] direction TB s1 s1-->a1 a1-->s2 s2-->a2 s3-->a3 s3-->a7 a7-->e5 a7-->s6 s6-->a8 a8-->s3 a3-->s4 s4---->a5 a5-->a1 a2--->s3 s3--->a4 a4-->s5 s5-->a6 a6-->e6 a2-->e1 a4-->e2 a4-->e3 a3-->e4 a6-->s1 end Example of using IxTask: CLASS IxTaskExample EXTENDS IxContext VAR PUBLIC _myTask : IxTask; _myCounter : ULINT; END_VAR METHOD PUBLIC Initialize // Initialization of the context needs to be called first // It does not need to be called cyclically, just once _myTask.Initialize(THIS); END_METHOD METHOD PROTECTED OVERRIDE Main // Cyclicall call of the Execute IF _myTask.Execute() THEN _myCounter := _myCounter + ULINT#1; _myTask.DoneWhen(_myCounter = ULINT#100); END_IF; END_METHOD END_CLASS The IxTask executes upon the Invoke method call. Invoke fires the execution of Execute logic upon the first call, and it does not need cyclical calling. _myTask.Invoke(); Invoke() method returns IIxTaskState with the following members: IsBusy indicates the execution started and is running. IsDone indicates the execution completed with success. HasError indicates the execution terminated with a failure. IsAborted indicates that the execution of the IxTask has been aborted. It should continue by calling the method Resume(). // Wait for IxTask to Complete IF _myTask.Invoke().IsDone() THEN ; //Do something END_IF; // ALTERNATIVELY _myTask.Invoke(); IF _myTask.IsDone() THEN ; //Do something ALTERNATIV END_IF; // Make sure that the IxTask is executing IF _myTask.Invoke().IsBusy() THEN ; //Do something END_IF; // Check for IxTask's error IF _myTask.Invoke().HasError() THEN ; //Do something END_IF; The IxTask can be started only from the Ready state by calling the Invoke() method in the same Context cycle as the Execute() method is called, regardless the order of the methods calls. After IxTask completion, the state of the IxTask will remain in Done, unless: 1.) IxTask's Restore method is called (IxTask changes it's state to Ready state). 2.) Invoke method is not called for two or more consecutive cycles of its context (that usually means the same as PLC cycle); successive call of Invoke will switch the task into the Ready state and immediately into the Kicking state. The IxTask may finish also in an Error state. In that case, the only possibility to get out of Error state is by calling the Restore() method. To implement any of the already mentioned \"event-like\" methods the new class that extends from the IxTask needs to be created. The required method with PROTECTED OVERRIDE access modifier needs to be created as well, and the custom logic needs to be placed in. These methods are: OnAbort() - executes once when the task is aborted. OnResume() - executes once when the task is resumed. OnDone() - executes once when the task reaches the Done state. OnError() - executes once when the task reaches the Error state. OnRestore() - executes once when the task is restored. OnStart() - executes once when the task starts (at the moment of transition from the Kicking state into the Busy state). WhileError() - executes repeatedly while the task is in Error state (and Execute() method is called). Example of implementing \"event-like\" methods: CLASS MyCommandTask Extends CommandTask VAR OnAbortCounter : ULINT; OnResumeCounter : ULINT; OnDoneCounter : ULINT; OnErrorCounter : ULINT; OnRestoreCounter : ULINT; OnStartCounter : ULINT; WhileErrorCounter : ULINT; END_VAR METHOD PROTECTED OVERRIDE OnAbort OnAbortCounter := OnAbortCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnResume OnResumeCounter := OnResumeCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnDone OnDoneCounter := OnDoneCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnError OnErrorCounter := OnErrorCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnRestore OnRestoreCounter := OnRestoreCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnStart OnStartCounter := OnStartCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE WhileError WhileErrorCounter := WhileErrorCounter + ULINT#1; END_METHOD END_CLASS Step IxStep is an extension class of the IxTask and provides the basics for the coordinated controlled execution of the task in the desired order based on the coordination mechanism used. IxStep contains the Execute() method so as its base class overloaded and extended by following parameters: coord (mandatory): instance of the coordination controlling the execution of the IxStep. Enable (optional): if this value is FALSE, IxStep body is not executed and the current order of the execution is incremented. Description (optional): IxStep description text describing the action the IxStep is providing. IxStep class contains following public members: Order: Order of the IxStep in the coordination. This value can be set by calling the method SetSteoOrder() and read by the method GetStepOrder(). StepDescription: IxStep description text describing the action the IxStep is providing. This value can be set by calling the Execute() method with Description parameter. IsActive: if TRUE, the IxStep is currently executing, or is in the order of the execution, otherwise FALSE. This value can be set by calling the method SetIsActive() and read by the method GetIsActive(). IsEnabled: if FALSE, IxStep body is not executed and the current order of the execution is incremented. This value can be set by calling the method SetIsEnabled() or calling the Execute() method with Enable parameter and read by the method GetIsEnabled(). IxSequencer IxSequencer is an IxCordinator class provides triggering the IxStep-s inside the sequence in the order they are written. IxSequencer extends from IxTask so it also has to be initialized by calling its Initialize() method and started using its Invoke() method. IxSequencer contains following methods: Open(): this method must be called cyclically before any logic. It provides some configuration mechanism that ensures that the steps are going to be executed in the order, they are written. During the very first call of the sequence, no step is executed as the IxSequencer is in the configuring state. From the second context cycle after the IxSequencer has been invoked the IxSequencer change its state to running and starts the execution from the first step upto the last one. When IxSequencer is in running state, order of the step cannot be changed. MoveNext(): Terminates the currently executed step and moves the IxSequencer's pointer to the next step in order of execution. RequestStep(): Terminates the currently executed step and set the IxSequencer's pointer to the order of the RequestedStep. When the order of the RequestedStep is higher than the order of the currently finished step (the requested step is \"after\" the current one) the requested step is started in the same context cycle. When the order of the RequestedStep is lower than the order of the currently finished step (the requested step is \"before\" the current one) the requested step is started in the next context cycle. CompleteSequence(): Terminates the currently executed step, completes (finishes) the execution of this IxSequencer and set the coordination state to Idle. If the SequenceMode of the IxSequencer is set to Cyclic, following Open() method call in the next context cycle switch it again into the configuring state, reasign the order of the individual steps (even if the orders have been changed) and subsequently set IxSequencer back into the running state. If the SequenceMode of the IxSequencer is set to RunOnce, terminates also execution of the IxSequencer itself. `GetCoordinatorState()': Returns the current state of the IxSequencer. Idle Configuring: assigning the orders to the steps, no step is executed. Running: orders to the steps are already assigned, step is executed. SetSteppingMode(): Sets the stepping mode of the IxSequencer. Following values are possible. None: StepByStep: if this mode is choosen, each step needs to be started by the invocation of the StepIn commmand. Continous: if this mode is choosen (default), each step is started automaticcaly after the previous one has been completed. GetSteppingMode(): Gets the current stepping mode of the IxSequencer. SetSequenceMode(): Sets the sequence mode of the IxSequencer. Following values are possible. None: RunOnce: if this mode is choosen, after calling the method CompleteSequence() the execution of the sequence is terminated. Cyclic: if this mode is choosen (default), after calling the method CompleteSequence() the execution of the sequence is \"reordered\" and started from beginning. GetSequenceMode(): Gets the current sequence mode of the IxSequencer. GetNumberOfConfiguredSteps(): Gets the number of the configured steps in the sequence. CLASS IxSequencerExample EXTENDS IxContext VAR PUBLIC _mySequencer : IxSequencer; _step_1 : IxStep; _step_2 : IxStep; _step_3 : IxStep; _myCounter : ULINT; END_VAR METHOD PUBLIC Initialize // Initialization of the context needs to be called first // It does not need to be called cyclically, just once _mySequencer.Initialize(THIS); _step_1.Initialize(THIS); _step_2.Initialize(THIS); _step_3.Initialize(THIS); END_METHOD METHOD PROTECTED OVERRIDE Main _mySequencer.Open(); // Example of the most simple use of Execute() method of step class, only with IxCoordinator defined. IF _step_1.Execute(_mySequencer) THEN // do something _myCounter := _myCounter + ULINT#1; IF (_myCounter MOD ULINT#5) = ULINT#0 THEN // continue to the next step of the sequence _mySequencer.MoveNext(); END_IF; END_IF; // Example of use of the Execute() method of step class with Enable condition. // This step is going to be executed just in the first run of the sequence, // as during the second run, the Enable parameter will have the value of FALSE. IF _step_2.Execute(coord := _mySequencer, Enable := _myCounter <= ULINT#20) THEN _myCounter := _myCounter + ULINT#1; IF _myCounter = ULINT#20 THEN // Jumping to step 1. As it is jumping backwards, the execution of step 1 // is going to be started in the next context cycle. _mySequencer.RequestStep(_step_1); END_IF; END_IF; // Example of use of the Execute() method of step class with all three parameters defined. IF _step_3.Execute(coord := _mySequencer, Enable := TRUE, Description := 'This is a description of the step 3' ) THEN _myCounter := _myCounter + ULINT#1; IF (_myCounter MOD ULINT#7) = ULINT#0 THEN // Finalize the sequence and initiate the execution from the first step. _mySequencer.CompleteSequence(); END_IF; END_IF; END_METHOD END_CLASS IxComponent IxComponent is an abstract class extending the IxObject, and it is the base building block for the \"hardware-related devices\" like a pneumatic piston, servo drive, robot, etc., so as for the, let's say, \"virtual devices\" like counter, database, etc. IxComponent is designed to group all possible methods, tasks, settings, and status information into one consistent class. As the IxComponent is an abstract class, it cannot be instantiated and must be extended. In the extended class, two methods are mandatory. Restore() - inside this method, the logic for resetting the IxComponent or restoring it from any state to its initial state should be placed. ManualControl() - inside this method, the logic for manual operations with the component should be placed. To be able to control the IxComponent instance manually, the method ActivateManualControl() of this instance needs to be called cyclically. The base class contains two additional method to deal with the manual control of the IxComponent. ActivateManualControl() - when this method is called cyclically, the IxComponent changes its behavior to manually controllable and ensure the call of the ManualControl() method in the derived class. IsManuallyControllable() -returns TRUE when the IxComponent is manually controllable. Layout attributes ComponentHeader and ComponentDetails The visual view of the extended IxComponent on the UI side could be done both ways. Manually with complete control over the design or by using the auto-rendering mechanism of the RenderableContentControl (TODO add a link to docu of the RenderableContentControl) element, which is, in most cases, more than perfect. To take full advantage of the auto-rendering mechanism, the base class has implemented the additional layout attributes ComponentHeader and ComponentDetails(TabName). The auto-rendered view is divided into two parts: the fixed one and the expandable one. All IxComponent members with the ComponentHeader layout attribute defined will be displayed in the fixed part. All members with the ComponentDetails(TabName) layout attribute defined will be displayed in the expandable part inside the TabControl with \"TabName\". All members are added in the order in which they are defined, taking into account their layout attributes like Container(Layout.Wrap) or Container(Layout.Stack). How to implement IxComponent Example of the implementation very simple IxComponent with members placed only inside the Header. using AXOpen.core; {#ix-attr:[Container(Layout.Stack)]} {#ix-set:AttributeName = \"Component with header only example\"} CLASS PUBLIC ComponentHeaderOnlyExample EXTENDS IxComponent METHOD PROTECTED OVERRIDE Restore: IIxTask // Some logic for Restore could be placed here. // For Example: valueReal := REAL#0.0; valueDint := DINT#0; END_METHOD METHOD PROTECTED OVERRIDE ManualControl // Some logic for manual control could be placed here. ; END_METHOD // Main method of the `IxComponent` that needs to be called inside the `IxContext` cyclically. METHOD PUBLIC Run // Declaration of the input and output variables. // In the case of \"hardware-related\" `IxComponent`, // these would be the variables linked to the hardware. VAR_INPUT inReal : REAL; inDint : DINT; END_VAR VAR_OUTPUT outReal : REAL; outDint : DINT; END_VAR // This must be called first. SUPER.Open(); // Place the custom logic here. valueReal := valueReal * inReal; valueDint := valueDint + inDint; outReal := valueReal; outDint := valueDint; END_METHOD VAR PUBLIC {#ix-attr:[Container(Layout.Wrap)]} {#ix-attr:[ComponentHeader()]} {#ix-set:AttributeName = \"Real product value\"} valueReal : REAL := REAL#1.0; {#ix-attr:[ComponentHeader()]} {#ix-set:AttributeName = \"Dint sum value\"} valueDint : DINT:= DINT#0; END_VAR END_CLASS How to use IxComponent The instance of the extended IxComponent must be defined inside the IxContext. .....................EXTENDS AXOpen.core.IxContext VAR PUBLIC {#ix-set:AttributeName = \"Very simple component example with header only defined\"} MyComponentWithHeaderOnly : ComponentHeaderOnlyExample; END_VAR Inside the Main() method of the related IxContext following rules must be applied. The Initialize() method of the extended instance of the IxComponent must be called first. The Run() method with the respective input and output variables must be called afterwards."
  },
  "template.axolibrary/CHANGES_CHECKLIST.html": {
    "href": "template.axolibrary/CHANGES_CHECKLIST.html",
    "title": "Code | System.Dynamic.ExpandoObject",
    "keywords": "Code [ ] Do the changes follow recomendations from conventions and component convetions? [ ] Does your change introduces breaking changes? [ ] Did you consult with the maintainers the nature of the breaking changes (version bump)? Testing [ ] Are all changes unit-tested? [ ] Did you change any existing test? Please describe? Changed tests [ ] How did you test the changes? Build [ ] Did you change directory structure that may affect the pipeline? Documentation [ ] Did you update the documentation where relevant? Changelog file updates [ ] Did you update the CHANGELOG? [ ] Did you update the CHANGELOG version according to value set in GitVersion.yml? [ ] Did you describe breaking changes CHANGELOG? [ ] Did you describe new features CHANGELOG? [ ] Did you describe bug fixies CHANGELOG?"
  },
  "template.axolibrary/CREATION_CHECKLIST.html": {
    "href": "template.axolibrary/CREATION_CHECKLIST.html",
    "title": "Code | System.Dynamic.ExpandoObject",
    "keywords": "Code [ ] Does code follow recomendations from conventions and component convetions? Testing [ ] Are all publicly exposed members unit-tested using axunit? [ ] Is the axunit-test coverage at min level of 60%? [ ] Are all extended twins tested and is the coverage at min level of 60% ? [ ] Are all extended twins tested and is the coverage at min level of 60% ? Build [ ] Did you add this library to build list? [ ] Did you add place the library in the list past its dependencies? [ ] Did you add this library src folder to build list? [ ] Did you remove all project from the src folder that should not be packed? [ ] Does the build with test level L2 passes locally? Documentation The documentation should be CONCISE delivering nessary information about the usage of the library. The documentation should not explain details about internals of the library limit yourself on explaing how to use, not how it is made. Should it be necessary to explain some aspects in detail write an article instead. Do not explain HOW the parts of the library operate but WHAT they do. Focus on creating usable examples Examples should not be hard-written into to documents, but referenced from the documentation project, the ComponentTemplate scaffolds the document with example references to documenation project General [ ] Does README.md contain general description of the library? [ ] Is the link to this documentation added to the toc.yaml? CTRL README.md [ ] Does README.md for controller contain information about apax package installation instructions? [ ] Does README.md for controller contain link to API documentation? [ ] Are there any additional requirement regarding usage of this package listed in this README.md? .NET TWIN README.md [ ] Does README.md for .NET TWIN contain information with installation instructions? [ ] Does README.md for .NET TWIN contain link to API documentation? [ ] Are there any additional requirement regarding usage of this nuget package listed in this README.md? BLAZOR README.md [ ] Does README.md contain information with installation instructions? [ ] Does README.md contain link to API documentation? [ ] Are there any additional requirement regarding usage of this nuget package listed in this README.md? Components [ ] Does toc.yml contain references to documenation to all components in this library? [ ] Does each component in this library has single md file with examples references from the code and structured according to ComponentTemplate.md?"
  },
  "template.axolibrary/app/ix-blazor/wwwroot/css/open-iconic/README.html": {
    "href": "template.axolibrary/app/ix-blazor/wwwroot/css/open-iconic/README.html",
    "title": "Open Iconic v1.1.1 | System.Dynamic.ExpandoObject",
    "keywords": "Open Iconic v1.1.1 Open Iconic is the open source sibling of Iconic. It is a hyper-legible collection of 223 icons with a tiny footprint—ready to use with Bootstrap and Foundation. View the collection What's in Open Iconic? 223 icons designed to be legible down to 8 pixels Super-light SVG files - 61.8 for the entire set SVG sprite—the modern replacement for icon fonts Webfont (EOT, OTF, SVG, TTF, WOFF), PNG and WebP formats Webfont stylesheets (including versions for Bootstrap and Foundation) in CSS, LESS, SCSS and Stylus formats PNG and WebP raster images in 8px, 16px, 24px, 32px, 48px and 64px. Getting Started For code samples and everything else you need to get started with Open Iconic, check out our Icons and Reference sections. General Usage Using Open Iconic's SVGs We like SVGs and we think they're the way to display icons on the web. Since Open Iconic are just basic SVGs, we suggest you display them like you would any other image (don't forget the alt attribute). <img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\"> Using Open Iconic's SVG Sprite Open Iconic also comes in a SVG sprite which allows you to display all the icons in the set with a single request. It's like an icon font, without being a hack. Adding an icon from an SVG sprite is a little different than what you're used to, but it's still a piece of cake. Tip: To make your icons easily style able, we suggest adding a general class to the <svg> tag and a unique class name for each different icon in the <use> tag. <svg class=\"icon\"> <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use> </svg> Sizing icons only needs basic CSS. All the icons are in a square format, so just set the <svg> tag with equal width and height dimensions. .icon { width: 16px; height: 16px; } Coloring icons is even easier. All you need to do is set the fill rule on the <use> tag. .icon-account-login { fill: #f00; } To learn more about SVG Sprites, read Chris Coyier's guide. Using Open Iconic's Icon Font... …with Bootstrap You can find our Bootstrap stylesheets in font/css/open-iconic-bootstrap.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\"> <span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …with Foundation You can find our Foundation stylesheets in font/css/open-iconic-foundation.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\"> <span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …on its own You can find our default stylesheets in font/css/open-iconic.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\"> <span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> License Icons All code (including SVG markup) is under the MIT License. Fonts All fonts are under the SIL Licensed."
  },
  "template.axolibrary/ctrl/README.html": {
    "href": "template.axolibrary/ctrl/README.html",
    "title": "| System.Dynamic.ExpandoObject",
    "keywords": "@ix-ax/axlibname Description APAX package registry Important APAX pacakges are now published experimentally This apax package's registry is hosted on github on how to authenticate to the registry see the documentation here and here. apax login --registry https://npm.pkg.github.com --username GH_USER_NAME --password PAT Add registry to your apax.yml file. registries: \"@ix-ax\": https://npm.pkg.github.com/ Note Please notice that all AXOpen packages are being released from a single repository and version numbers are aligned. You can use different versions that have major version number alligned should it be necessary, however we strongly recommend to use pacakge with the same version number, such packages are being built and tested together to enshure best experience. Adding package to your project apax add \"@ix-ax/axlibname\" Modifying your apax.yml dependencies: \"@ix-ax/axlibname\": '{axopen-version}'"
  },
  "template.axolibrary/docs/CHANGELOG.html": {
    "href": "template.axolibrary/docs/CHANGELOG.html",
    "title": "Changes | System.Dynamic.ExpandoObject",
    "keywords": "Changes"
  },
  "template.axolibrary/docs/ComponentTemplate.html": {
    "href": "template.axolibrary/docs/ComponentTemplate.html",
    "title": "Component_1 | System.Dynamic.ExpandoObject",
    "keywords": "Component_1 CONTROLLER .NET TWIN BLAZOR How to use component in controller Declare component VAR PUBLIC ExampleCylinder : AXOpen.Components.Example.ExampleCylinder; END_VAR Declare initialization variables Most of the initialization variable will come from the I/O system. This example is only for demostrational puproses. VAR PUBLIC _homeSensor : BOOL; _workSensor : BOOL; _moveHomeSignal : BOOL; _moveWorkSignal : BOOL; END_VAR Initialize & Run ExampleCylinder.Run(THIS, _homeSensor, _workSensor, _moveHomeSignal, _moveWorkSignal); Important This component requires cyclic data updates, which are typically sourced from the I/O system. Before using the component, make sure you invoke the Run method. Additionally, it's crucial to ensure that the Run method is positioned within a call tree that operates cyclically. Failing to initiate the Run method or not guaranteeing its cyclic execution can lead to malfunctions and unpredictable component behavior. In extreme circumstances, this could cause erratic controller behavior, potentially leading to equipment damage. Use VAR PUBLIC Sequencer : AxoSequencer; Steps : ARRAY[0..3] OF AXOpen.Core.AxoStep; END_VAR METHOD PRIVATE UseInSequencer Sequencer.Initialize(THIS); Sequencer.Open(); IF(Steps[0].Execute(Sequencer, 'Move to home position')) THEN IF(ExampleCylinder.MoveToHome.Invoke().IsDone()) THEN Sequencer.MoveNext(); END_IF; END_IF; IF(Steps[1].Execute(Sequencer, 'Move to work position')) THEN IF(ExampleCylinder.MoveToWork.Invoke().IsDone()) THEN Sequencer.MoveNext(); END_IF; END_IF; END_METHOD private async Task WriteTaskTimesToConsole() { await Entry.Plc.documentation.compnentOne.ExampleCylinder.WriteTaskDurationToConsole(); } Generic Read-Only view <AxoComponentStatusView Component=\"@Entry.Plc.documentation.compnentOne.ExampleCylinder\"/> Generic control view <AxoComponentCommandView Component=\"@Entry.Plc.documentation.compnentOne.ExampleCylinder\" /> Type agnostic using RenderableContentControl status (Read-Only) view <!-- This will render anything found on parameter assigned to Context --> <RenderableContentControl Context=\"@Entry.Plc.documentation.compnentOne\" Presentation=\"Status-Display\" /> Type agnostic using RenderableContentControl control view <!-- This will render anything found on parameter assigned to Context --> <RenderableContentControl Context=\"@Entry.Plc.documentation.compnentOne\" Presentation=\"Command-Control\" />"
  },
  "template.axolibrary/docs/Component_1.html": {
    "href": "template.axolibrary/docs/Component_1.html",
    "title": "Component_1 | System.Dynamic.ExpandoObject",
    "keywords": "Component_1 CONTROLLER .NET TWIN BLAZOR Declare component VAR PUBLIC ExampleCylinder : AXOpen.Components.Example.ExampleCylinder; END_VAR Declare initialization variables Most of the initialization variable will come from the I/O system. This example is only for demostrational puproses. VAR PUBLIC _homeSensor : BOOL; _workSensor : BOOL; _moveHomeSignal : BOOL; _moveWorkSignal : BOOL; END_VAR Initialize & Run ExampleCylinder.Run(THIS, _homeSensor, _workSensor, _moveHomeSignal, _moveWorkSignal); Important This component requires cyclic data updates, which are typically sourced from the I/O system. Before using the component, make sure you invoke the Run method. Additionally, it's crucial to ensure that the Run method is positioned within a call tree that operates cyclically. Failing to initiate the Run method or not guaranteeing its cyclic execution can lead to malfunctions and unpredictable component behavior. In extreme circumstances, this could cause erratic controller behavior, potentially leading to equipment damage. Use VAR PUBLIC Sequencer : AxoSequencer; Steps : ARRAY[0..3] OF AXOpen.Core.AxoStep; END_VAR METHOD PRIVATE UseInSequencer Sequencer.Initialize(THIS); Sequencer.Open(); IF(Steps[0].Execute(Sequencer, 'Move to home position')) THEN IF(ExampleCylinder.MoveToHome.Invoke().IsDone()) THEN Sequencer.MoveNext(); END_IF; END_IF; IF(Steps[1].Execute(Sequencer, 'Move to work position')) THEN IF(ExampleCylinder.MoveToWork.Invoke().IsDone()) THEN Sequencer.MoveNext(); END_IF; END_IF; END_METHOD private async Task WriteTaskTimesToConsole() { await Entry.Plc.documentation.compnentOne.ExampleCylinder.WriteTaskDurationToConsole(); } Generic Read-Only view <AxoComponentStatusView Component=\"@Entry.Plc.documentation.compnentOne.ExampleCylinder\"/> Generic control view <AxoComponentCommandView Component=\"@Entry.Plc.documentation.compnentOne.ExampleCylinder\" /> Type agnostic using RenderableContentControl status (Read-Only) view <!-- This will render anything found on parameter assigned to Context --> <RenderableContentControl Context=\"@Entry.Plc.documentation.compnentOne\" Presentation=\"Status-Display\" /> Type agnostic using RenderableContentControl control view <!-- This will render anything found on parameter assigned to Context --> <RenderableContentControl Context=\"@Entry.Plc.documentation.compnentOne\" Presentation=\"Command-Control\" />"
  },
  "template.axolibrary/docs/Component_2.html": {
    "href": "template.axolibrary/docs/Component_2.html",
    "title": "Component_2 | System.Dynamic.ExpandoObject",
    "keywords": "Component_2 CONTROLLER .NET TWIN BLAZOR Declare component VAR PUBLIC ExampleCylinder : AXOpen.Components.Example.ExampleCylinder; END_VAR Declare initialization variables Most of the initialization variable will come from the I/O system. This example is only for demostrational puproses. VAR PUBLIC _homeSensor : BOOL; _workSensor : BOOL; _moveHomeSignal : BOOL; _moveWorkSignal : BOOL; END_VAR Initialize & Run ExampleCylinder.Run(THIS, _homeSensor, _workSensor, _moveHomeSignal, _moveWorkSignal); Important This component requires cyclic data updates, which are typically sourced from the I/O system. Before using the component, make sure you invoke the Run method. Additionally, it's crucial to ensure that the Run method is positioned within a call tree that operates cyclically. Failing to initiate the Run method or not guaranteeing its cyclic execution can lead to malfunctions and unpredictable component behavior. In extreme circumstances, this could cause erratic controller behavior, potentially leading to equipment damage. Use VAR PUBLIC Sequencer : AxoSequencer; Steps : ARRAY[0..3] OF AXOpen.Core.AxoStep; END_VAR METHOD PRIVATE UseInSequencer Sequencer.Initialize(THIS); Sequencer.Open(); IF(Steps[0].Execute(Sequencer, 'Move to home position')) THEN IF(ExampleCylinder.MoveToHome.Invoke().IsDone()) THEN Sequencer.MoveNext(); END_IF; END_IF; IF(Steps[1].Execute(Sequencer, 'Move to work position')) THEN IF(ExampleCylinder.MoveToWork.Invoke().IsDone()) THEN Sequencer.MoveNext(); END_IF; END_IF; END_METHOD private async Task WriteTaskTimesToConsole() { await Entry.Plc.documentation.compnentOne.ExampleCylinder.WriteTaskDurationToConsole(); } Generic Read-Only view <AxoComponentStatusView Component=\"@Entry.Plc.documentation.compnentTwo.ExampleCylinder\" /> Generic control view <AxoComponentCommandView Component=\"@Entry.Plc.documentation.compnentTwo.ExampleCylinder\" /> Type agnostic using RenderableContentControl status (Read-Only) view <!-- This will render anything found on parameter assigned to Context --> <RenderableContentControl Context=\"@Entry.Plc.documentation.compnentTwo\" Presentation=\"Status-Display\" /> Type agnostic using RenderableContentControl control view <!-- This will render anything found on parameter assigned to Context --> <RenderableContentControl Context=\"@Entry.Plc.documentation.compnentTwo\" Presentation=\"Command-Control\" />"
  },
  "template.axolibrary/docs/README.html": {
    "href": "template.axolibrary/docs/README.html",
    "title": "Description | System.Dynamic.ExpandoObject",
    "keywords": "Description"
  },
  "template.axolibrary/docs/TROUBLES.html": {
    "href": "template.axolibrary/docs/TROUBLES.html",
    "title": "Troubleshooting | System.Dynamic.ExpandoObject",
    "keywords": "Troubleshooting Unfortunately, we don't have a direct solution to your problem at the moment. If you encounter any issues, please file a report on our GitHub. We appreciate your feedback and patience."
  },
  "template.axolibrary/docs/index.html": {
    "href": "template.axolibrary/docs/index.html",
    "title": "| System.Dynamic.ExpandoObject",
    "keywords": "This library is an integral component of AXOpen. AXOpen is an application framework built on the foundations of SIMATIC-AX and AX# technologies. Utilizing the components described in this document might necessitate a foundational understanding of the AXOpen framework's concepts and methodologies. Additionally, leveraging some advanced features could require a basic familiarity with AX# technology. Additional Resources: AX# Official Documentation UI Rendering Guide Note This document's content is synchronized with the source code of this library. Please note that the images and illustrative visuals included may not mirror the exact appearance in your application. Note Should you identify errors, misleading content, or gaps in this documentation, kindly report the issue here. Alternatively, you're welcome to suggest edits directly by initiating a pull request in this repository."
  },
  "template.axolibrary/src/projname.blazor/README.html": {
    "href": "template.axolibrary/src/projname.blazor/README.html",
    "title": "projname.Blazor | System.Dynamic.ExpandoObject",
    "keywords": "projname.Blazor Description NuGet package feed Important NuGet pacakges are now published experimentally This nuget package's feed is hosted on github on how to authenticate to the feed see the documentation here. dotnet nuget add source --username GITHUBUSERNAME --password PAT --store-password-in-clear-text --name gh-packages-ix-ax \"https://nuget.pkg.github.com/ix-ax/index.json\" Replace GITHUBUSERNAME with your github name Replace PAT with your Personal Access Token (how to create your PAT) Note Please notice that all AXOpen packages are being released from a single repository and version numbers are aligned. You can use different versions that have major version number alligned should it be necessary, however we strongly recommend to use pacakge with the same version number, such packages are being built and tested together to enshure best experience. .NET CLI dotnet add package projname.Blazor --version {axopen-version} Package reference <PackageReference Include=\"projname.Blazor\" Version=\"{axopen-version}\" />"
  },
  "template.axolibrary/src/projname/README.html": {
    "href": "template.axolibrary/src/projname/README.html",
    "title": "projname | System.Dynamic.ExpandoObject",
    "keywords": "projname Description NuGet package feed Important NuGet pacakges are now published experimentally This nuget package's feed is hosted on github on how to authenticate to the feed see the documentation here. dotnet nuget add source --username GITHUBUSERNAME --password PAT --store-password-in-clear-text --name gh-packages-ix-ax \"https://nuget.pkg.github.com/ix-ax/index.json\" Replace GITHUBUSERNAME with your github name Replace PAT with your Personal Access Token (how to create your PAT) Note Please notice that all AXOpen packages are being released from a single repository and version numbers are aligned. You can use different versions that have major version number alligned should it be necessary, however we strongly recommend to use pacakge with the same version number, such packages are being built and tested together to enshure best experience. .NET CLI dotnet add package projname --version {axopen-version} Package reference <PackageReference Include=\"projname\" Version=\"{axopen-version}\" />"
  },
  "templates.simple/README.html": {
    "href": "templates.simple/README.html",
    "title": "AXOpen simple Blazor application template | System.Dynamic.ExpandoObject",
    "keywords": "AXOpen simple Blazor application template IMPORTANT!!! When you create the project from Visual Studio, you will need to run install.ps1 manually to finish creating the project. Preparing your target PLC Using TIA portal If you use TIA portal for you hardware configuration you must enable WebAPI communication with your target PLC. How to set-up WebAPI in TIA portal Setting up the connection .NET Go to Entry.cs and setup the following parameters private static string TargetIp = Environment.GetEnvironmentVariable(\"AXTARGET\"); // <- replace by your IP private const string UserName = \"Everybody\"; //<- replace by user name you have set up in your WebAPI settings private const string Pass = \"\"; // <- Pass in the password that you have set up for the user. NOT AS PLAIN TEXT! Use user secrets instead. private const bool IgnoreSslErrors = true; // <- When you have your certificates in order set this to false. You will need to use TIA Portal to enable WebAPI interface see here and here is a very informative youtube video. AX Go to apax.yml file and adjust the parameters . . . scripts: download : # Here you will need to set the argumen -t to your plc IP and -i to platfrom you are dowloading to # --default-server-interface is a must if you are using WebAPI - apax sld --accept-security-disclaimer -t $AXTARGET -i $AXTARGETPLATFORMINPUT -r --default-server-interface . . . . Download the project to the PLC Navigate to your ax folder and run the script command: PS [your_root_folder]\\>apax download To quickly run the hmi PS [your_root_folder]\\>dotnet run --project ..\\axosimple.app\\axosimple.hmi.csproj info: Microsoft.Hosting.Lifetime[14] Now listening on: http://localhost:5262 info: Microsoft.Hosting.Lifetime[0] Application started. Press Ctrl+C to shut down. info: Microsoft.Hosting.Lifetime[0] Hosting environment: Development info: Microsoft.Hosting.Lifetime[0] . . To terminate the application press ctrl+c Navigate to the address indicated in \"Now listening on:\". NOTE! Your browser may redirect to https. In that case, temporarily disable the redirection. (Opening the page in incognito mode should not redirect.) Modifying your HMI project In Visual Studio (VS2022), open the solution file from the project folder axosimple.sln. You can then run the solution directly from Visual Studio. NOTE: Security is set to a minimal level for a speedy start. Make sure you set the security appropriately. Other usefull scripts Build both AX and AX# part of the project and DOWNLOADS the program to the target controller apax push Downloads current build into the controller. apax download Build the both AX and AX# part of the project. apax build Resources Documentation sources: [AXOpen]https://ix-ax.github.io/AXOpen/ [AX#]https://ix-ax.github.io/axsharp/"
  },
  "templates.simple/axosimple.app/wwwroot/css/open-iconic/README.html": {
    "href": "templates.simple/axosimple.app/wwwroot/css/open-iconic/README.html",
    "title": "Open Iconic v1.1.1 | System.Dynamic.ExpandoObject",
    "keywords": "Open Iconic v1.1.1 Open Iconic is the open source sibling of Iconic. It is a hyper-legible collection of 223 icons with a tiny footprint—ready to use with Bootstrap and Foundation. View the collection What's in Open Iconic? 223 icons designed to be legible down to 8 pixels Super-light SVG files - 61.8 for the entire set SVG sprite—the modern replacement for icon fonts Webfont (EOT, OTF, SVG, TTF, WOFF), PNG and WebP formats Webfont stylesheets (including versions for Bootstrap and Foundation) in CSS, LESS, SCSS and Stylus formats PNG and WebP raster images in 8px, 16px, 24px, 32px, 48px and 64px. Getting Started For code samples and everything else you need to get started with Open Iconic, check out our Icons and Reference sections. General Usage Using Open Iconic's SVGs We like SVGs and we think they're the way to display icons on the web. Since Open Iconic are just basic SVGs, we suggest you display them like you would any other image (don't forget the alt attribute). <img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\"> Using Open Iconic's SVG Sprite Open Iconic also comes in a SVG sprite which allows you to display all the icons in the set with a single request. It's like an icon font, without being a hack. Adding an icon from an SVG sprite is a little different than what you're used to, but it's still a piece of cake. Tip: To make your icons easily style able, we suggest adding a general class to the <svg> tag and a unique class name for each different icon in the <use> tag. <svg class=\"icon\"> <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use> </svg> Sizing icons only needs basic CSS. All the icons are in a square format, so just set the <svg> tag with equal width and height dimensions. .icon { width: 16px; height: 16px; } Coloring icons is even easier. All you need to do is set the fill rule on the <use> tag. .icon-account-login { fill: #f00; } To learn more about SVG Sprites, read Chris Coyier's guide. Using Open Iconic's Icon Font... …with Bootstrap You can find our Bootstrap stylesheets in font/css/open-iconic-bootstrap.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\"> <span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …with Foundation You can find our Foundation stylesheets in font/css/open-iconic-foundation.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\"> <span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …on its own You can find our default stylesheets in font/css/open-iconic.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\"> <span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> License Icons All code (including SVG markup) is under the MIT License. Fonts All fonts are under the SIL Licensed."
  },
  "timers/docs/OFFDELAYTIMER.html": {
    "href": "timers/docs/OFFDELAYTIMER.html",
    "title": "AxOpen.Timers.OffDelayTimer | System.Dynamic.ExpandoObject",
    "keywords": "AxOpen.Timers.OffDelayTimer OffDelayTimer class contains OffDelay method, where logic of OffDelayTimer is implemented. OffDelay method has following input: VAR_INPUT Parent : IAxoObject; // or IAxoContext, parent provides RTC implementation inSignal : BOOL; // starts timer with falling edge, resets timer with rising edge TimeDelay : LTIME; // time to pass, before output is set END_VAR The OffDelay method returns output, which is FALSE, TimeDelay seconds after falling edge of inSignal is detected. The OffDelayTimer have also public variables which can be used to access timer results: VAR PUBLIC output : BOOL; // is FALSE, TimeDelay seconds after falling edge of inSignal is detected elapsedTime : LTIME; // elapsed time END_VAR The LOGIC of OffDelayTimer is following: When inSignal is TRUE, output is TRUE and elapsedTime is 0. As soon as inSignal becomes FALSE, the time will begin to be counted in elapsedTime until its value is equal to that of TimeDelay. It will then remain constant. The output is FALSE when inSignal is FALSE and elapsedTime is equal to TimeDelay. Otherwise it is TRUE. Thus, output has a falling edge when the time indicated in TimeDelay has run out. Example usage of OffDelay timer: USING AXOpen.Timers; VAR _signal : BOOL; // input signal, which is set somewhere in application _testTimerOffDelay: AXOpen.Timers.OffDelayTimer; // timer instance _testTimeDelay: LTIME := LTIME#5s; // time delay END_VAR // call OffDelay method somewhere in application // THIS must type of IAxoObject _testTimerOffDelay.OffDelay(THIS, _signal, _testTimeDelay); // check for output IF(_testTimerOffDelay.output) THEN // handle result ENDIF;"
  },
  "timers/docs/ONDELAYTIMER.html": {
    "href": "timers/docs/ONDELAYTIMER.html",
    "title": "AxOpen.Timers.OnDelayTimer | System.Dynamic.ExpandoObject",
    "keywords": "AxOpen.Timers.OnDelayTimer OnDelayTimer class contains OnDelay method, where logic of OnDelayTimer is implemented. OnDelay method has following input: VAR_INPUT Parent : IAxoObject; // or IAxoContext, parent provides RTC implementation inSignal : BOOL; // starts timer with rising edge, resets timer with falling edge TimeDelay : LTIME; // time to pass, before output is set END_VAR The OnDelay method returns output, which is TRUE, TimeDelay seconds after rising edge of inSignal is detected. The OnDelayTimer have also public variables which can be used to access timer results: VAR PUBLIC output : BOOL; // is TRUE, TimeDelay seconds after rising edge of inSignal is detected. elapsedTime : LTIME; // elapsed time END_VAR The LOGIC of OnDelayTimer is following: If inSignal is FALSE, output is FALSE and elapsedTime is 0. As soon as input becomes TRUE, the time will begin to be counted in elapsedTime until its value is equal to TimeDelay. It will then remain constant. The output is TRUE when inSignal is TRUE and elapsedTime is equal to TimeDelay. Otherwise it is FALSE. Thus, output has a rising edge when the time indicated in TimeDelay has run out. Example usage of OnDelay timer: USING AXOpen.Timers; VAR _signal : BOOL; // input signal _testTimerOnDelay: AXOpen.Timers.OnDelayTimer; // timer instance _testTimeDelay: LTIME := LTIME#5s; // time delay END_VAR // call OnDelay method somewhere in application // THIS must type of IAxoObject _testTimerOnDelay.OnDelay(THIS, _signal, _testTimeDelay); // check for output IF(_testTimerOnDelay.output) THEN // handle result ENDIF;"
  },
  "timers/docs/PULSETIMER.html": {
    "href": "timers/docs/PULSETIMER.html",
    "title": "AxOpen.Timers.PulseTimer | System.Dynamic.ExpandoObject",
    "keywords": "AxOpen.Timers.PulseTimer PulseTimer class contains Pulse method, where logic of PulseTimer is implemented. Pulse method has following input: VAR_INPUT Parent : IAxoObject; // or IAxoContext, parent provides RTC implementation inSignal : BOOL; // Trigger for start of the pulse signal PulseLenght : LTIME; // the length of the pulse signal END_VAR The Pulse timer returns output, which is TRUE only during time counting. It creates pulses with a defined pulse duration. The PulseTimer have also public variables which can be used to access timer results: VAR PUBLIC output : BOOL; // the pulse elapsedTime : LTIME; // the current phase of the pulse END_VAR The LOGIC of PulseTimer is following: If inSignal is FALSE, the output is FALSE and elapsedTime is 0. As soon as inSignal becomes TRUE, output also becomes TRUE and remains TRUE for the pulse duration PulseLength. As long as output is TRUE, the time is incremented in elapsedTime, until the value reaches PT. The value then remains constant. The output remains TRUE until the pulse duration has elapsed, irrespective of the state of the input inSignal. The output therefore supplies a signal over the interval specified in PulseLength. Example usage of Pulse timer: USING AXOpen.Timers; VAR _signal : BOOL; // input signal, which is set somewhere in application _testTimerPulse: AXOpen.Timers.PulseTimer; // timer instance _testPulseLength: LTIME := LTIME#5s; // pulse length END_VAR // call Pulse method somewhere in application // THIS must type of IAxoObject _testTimerPulse.Pulse(THIS, _signal, _testPulseLength); // check for output IF(_testTimerPulse.output) THEN // handle result ENDIF;"
  },
  "timers/docs/README.html": {
    "href": "timers/docs/README.html",
    "title": "AXOpen.Timers | System.Dynamic.ExpandoObject",
    "keywords": "AXOpen.Timers AXOpen.Timers provide implementations of basic timers used in PLC programming. Timers are implemented in separated classes within corresponding methods. Functionality of Timers is based on Real Time Clock implementation provided from AXContext. Note Be aware, that resolution of the timer depends on cycle time of the PLC task, on which the timer is used. AxOpen.Timers.OnDelayTimer OnDelayTimer class contains OnDelay method, where logic of OnDelayTimer is implemented. OnDelay method has following input: VAR_INPUT Parent : IAxoObject; // or IAxoContext, parent provides RTC implementation inSignal : BOOL; // starts timer with rising edge, resets timer with falling edge TimeDelay : LTIME; // time to pass, before output is set END_VAR The OnDelay method returns output, which is TRUE, TimeDelay seconds after rising edge of inSignal is detected. The OnDelayTimer have also public variables which can be used to access timer results: VAR PUBLIC output : BOOL; // is TRUE, TimeDelay seconds after rising edge of inSignal is detected. elapsedTime : LTIME; // elapsed time END_VAR The LOGIC of OnDelayTimer is following: If inSignal is FALSE, output is FALSE and elapsedTime is 0. As soon as input becomes TRUE, the time will begin to be counted in elapsedTime until its value is equal to TimeDelay. It will then remain constant. The output is TRUE when inSignal is TRUE and elapsedTime is equal to TimeDelay. Otherwise it is FALSE. Thus, output has a rising edge when the time indicated in TimeDelay has run out. Example usage of OnDelay timer: USING AXOpen.Timers; VAR _signal : BOOL; // input signal _testTimerOnDelay: AXOpen.Timers.OnDelayTimer; // timer instance _testTimeDelay: LTIME := LTIME#5s; // time delay END_VAR // call OnDelay method somewhere in application // THIS must type of IAxoObject _testTimerOnDelay.OnDelay(THIS, _signal, _testTimeDelay); // check for output IF(_testTimerOnDelay.output) THEN // handle result ENDIF; AxOpen.Timers.OffDelayTimer OffDelayTimer class contains OffDelay method, where logic of OffDelayTimer is implemented. OffDelay method has following input: VAR_INPUT Parent : IAxoObject; // or IAxoContext, parent provides RTC implementation inSignal : BOOL; // starts timer with falling edge, resets timer with rising edge TimeDelay : LTIME; // time to pass, before output is set END_VAR The OffDelay method returns output, which is FALSE, TimeDelay seconds after falling edge of inSignal is detected. The OffDelayTimer have also public variables which can be used to access timer results: VAR PUBLIC output : BOOL; // is FALSE, TimeDelay seconds after falling edge of inSignal is detected elapsedTime : LTIME; // elapsed time END_VAR The LOGIC of OffDelayTimer is following: When inSignal is TRUE, output is TRUE and elapsedTime is 0. As soon as inSignal becomes FALSE, the time will begin to be counted in elapsedTime until its value is equal to that of TimeDelay. It will then remain constant. The output is FALSE when inSignal is FALSE and elapsedTime is equal to TimeDelay. Otherwise it is TRUE. Thus, output has a falling edge when the time indicated in TimeDelay has run out. Example usage of OffDelay timer: USING AXOpen.Timers; VAR _signal : BOOL; // input signal, which is set somewhere in application _testTimerOffDelay: AXOpen.Timers.OffDelayTimer; // timer instance _testTimeDelay: LTIME := LTIME#5s; // time delay END_VAR // call OffDelay method somewhere in application // THIS must type of IAxoObject _testTimerOffDelay.OffDelay(THIS, _signal, _testTimeDelay); // check for output IF(_testTimerOffDelay.output) THEN // handle result ENDIF; AxOpen.Timers.PulseTimer PulseTimer class contains Pulse method, where logic of PulseTimer is implemented. Pulse method has following input: VAR_INPUT Parent : IAxoObject; // or IAxoContext, parent provides RTC implementation inSignal : BOOL; // Trigger for start of the pulse signal PulseLenght : LTIME; // the length of the pulse signal END_VAR The Pulse timer returns output, which is TRUE only during time counting. It creates pulses with a defined pulse duration. The PulseTimer have also public variables which can be used to access timer results: VAR PUBLIC output : BOOL; // the pulse elapsedTime : LTIME; // the current phase of the pulse END_VAR The LOGIC of PulseTimer is following: If inSignal is FALSE, the output is FALSE and elapsedTime is 0. As soon as inSignal becomes TRUE, output also becomes TRUE and remains TRUE for the pulse duration PulseLength. As long as output is TRUE, the time is incremented in elapsedTime, until the value reaches PT. The value then remains constant. The output remains TRUE until the pulse duration has elapsed, irrespective of the state of the input inSignal. The output therefore supplies a signal over the interval specified in PulseLength. Example usage of Pulse timer: USING AXOpen.Timers; VAR _signal : BOOL; // input signal, which is set somewhere in application _testTimerPulse: AXOpen.Timers.PulseTimer; // timer instance _testPulseLength: LTIME := LTIME#5s; // pulse length END_VAR // call Pulse method somewhere in application // THIS must type of IAxoObject _testTimerPulse.Pulse(THIS, _signal, _testPulseLength); // check for output IF(_testTimerPulse.output) THEN // handle result ENDIF;"
  },
  "timers/docs/index.html": {
    "href": "timers/docs/index.html",
    "title": "AXOpen.Timers | System.Dynamic.ExpandoObject",
    "keywords": "AXOpen.Timers AXOpen.Timers provide implementations of basic timers used in PLC programming. Timers are implemented in separated classes within corresponding methods. Functionality of Timers is based on Real Time Clock implementation provided from AXContext. Note Be aware, that resolution of the timer depends on cycle time of the PLC task, on which the timer is used. AxOpen.Timers.OnDelayTimer OnDelayTimer class contains OnDelay method, where logic of OnDelayTimer is implemented. OnDelay method has following input: VAR_INPUT Parent : IAxoObject; // or IAxoContext, parent provides RTC implementation inSignal : BOOL; // starts timer with rising edge, resets timer with falling edge TimeDelay : LTIME; // time to pass, before output is set END_VAR The OnDelay method returns output, which is TRUE, TimeDelay seconds after rising edge of inSignal is detected. The OnDelayTimer have also public variables which can be used to access timer results: VAR PUBLIC output : BOOL; // is TRUE, TimeDelay seconds after rising edge of inSignal is detected. elapsedTime : LTIME; // elapsed time END_VAR The LOGIC of OnDelayTimer is following: If inSignal is FALSE, output is FALSE and elapsedTime is 0. As soon as input becomes TRUE, the time will begin to be counted in elapsedTime until its value is equal to TimeDelay. It will then remain constant. The output is TRUE when inSignal is TRUE and elapsedTime is equal to TimeDelay. Otherwise it is FALSE. Thus, output has a rising edge when the time indicated in TimeDelay has run out. Example usage of OnDelay timer: USING AXOpen.Timers; VAR _signal : BOOL; // input signal _testTimerOnDelay: AXOpen.Timers.OnDelayTimer; // timer instance _testTimeDelay: LTIME := LTIME#5s; // time delay END_VAR // call OnDelay method somewhere in application // THIS must type of IAxoObject _testTimerOnDelay.OnDelay(THIS, _signal, _testTimeDelay); // check for output IF(_testTimerOnDelay.output) THEN // handle result ENDIF; AxOpen.Timers.OffDelayTimer OffDelayTimer class contains OffDelay method, where logic of OffDelayTimer is implemented. OffDelay method has following input: VAR_INPUT Parent : IAxoObject; // or IAxoContext, parent provides RTC implementation inSignal : BOOL; // starts timer with falling edge, resets timer with rising edge TimeDelay : LTIME; // time to pass, before output is set END_VAR The OffDelay method returns output, which is FALSE, TimeDelay seconds after falling edge of inSignal is detected. The OffDelayTimer have also public variables which can be used to access timer results: VAR PUBLIC output : BOOL; // is FALSE, TimeDelay seconds after falling edge of inSignal is detected elapsedTime : LTIME; // elapsed time END_VAR The LOGIC of OffDelayTimer is following: When inSignal is TRUE, output is TRUE and elapsedTime is 0. As soon as inSignal becomes FALSE, the time will begin to be counted in elapsedTime until its value is equal to that of TimeDelay. It will then remain constant. The output is FALSE when inSignal is FALSE and elapsedTime is equal to TimeDelay. Otherwise it is TRUE. Thus, output has a falling edge when the time indicated in TimeDelay has run out. Example usage of OffDelay timer: USING AXOpen.Timers; VAR _signal : BOOL; // input signal, which is set somewhere in application _testTimerOffDelay: AXOpen.Timers.OffDelayTimer; // timer instance _testTimeDelay: LTIME := LTIME#5s; // time delay END_VAR // call OffDelay method somewhere in application // THIS must type of IAxoObject _testTimerOffDelay.OffDelay(THIS, _signal, _testTimeDelay); // check for output IF(_testTimerOffDelay.output) THEN // handle result ENDIF; AxOpen.Timers.PulseTimer PulseTimer class contains Pulse method, where logic of PulseTimer is implemented. Pulse method has following input: VAR_INPUT Parent : IAxoObject; // or IAxoContext, parent provides RTC implementation inSignal : BOOL; // Trigger for start of the pulse signal PulseLenght : LTIME; // the length of the pulse signal END_VAR The Pulse timer returns output, which is TRUE only during time counting. It creates pulses with a defined pulse duration. The PulseTimer have also public variables which can be used to access timer results: VAR PUBLIC output : BOOL; // the pulse elapsedTime : LTIME; // the current phase of the pulse END_VAR The LOGIC of PulseTimer is following: If inSignal is FALSE, the output is FALSE and elapsedTime is 0. As soon as inSignal becomes TRUE, output also becomes TRUE and remains TRUE for the pulse duration PulseLength. As long as output is TRUE, the time is incremented in elapsedTime, until the value reaches PT. The value then remains constant. The output remains TRUE until the pulse duration has elapsed, irrespective of the state of the input inSignal. The output therefore supplies a signal over the interval specified in PulseLength. Example usage of Pulse timer: USING AXOpen.Timers; VAR _signal : BOOL; // input signal, which is set somewhere in application _testTimerPulse: AXOpen.Timers.PulseTimer; // timer instance _testPulseLength: LTIME := LTIME#5s; // pulse length END_VAR // call Pulse method somewhere in application // THIS must type of IAxoObject _testTimerPulse.Pulse(THIS, _signal, _testPulseLength); // check for output IF(_testTimerPulse.output) THEN // handle result ENDIF;"
  }
}