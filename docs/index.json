{
  "api/AXOpen.Core._NULL_CONTEXT.html": {
    "href": "api/AXOpen.Core._NULL_CONTEXT.html",
    "title": "Class _NULL_CONTEXT | System.Dynamic.ExpandoObject",
    "keywords": "Class _NULL_CONTEXT Inheritance object _NULL_CONTEXT Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class _NULL_CONTEXT : ITwinObject, ITwinElement, IAxoContext Constructors | Improve this Doc View Source _NULL_CONTEXT(ITwinObject, string, string) Declaration public _NULL_CONTEXT(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description AXSharp.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source AttributeName Declaration public string AttributeName { get; set; } Property Value Type Description string | Improve this Doc View Source Connector Declaration protected Connector Connector { get; } Property Value Type Description AXSharp.Connector.Connector | Improve this Doc View Source HumanReadable Declaration public string HumanReadable { get; set; } Property Value Type Description string | Improve this Doc View Source Interpreter Declaration public Translator Interpreter { get; } Property Value Type Description AXSharp.Connector.Localizations.Translator | Improve this Doc View Source Parent Declaration protected ITwinObject Parent { get; set; } Property Value Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source Symbol Declaration public string Symbol { get; protected set; } Property Value Type Description string | Improve this Doc View Source SymbolTail Declaration protected string SymbolTail { get; set; } Property Value Type Description string Methods | Improve this Doc View Source AddChild(ITwinObject) Declaration public void AddChild(ITwinObject twinObject) Parameters Type Name Description AXSharp.Connector.ITwinObject twinObject | Improve this Doc View Source AddKid(ITwinElement) Declaration public void AddKid(ITwinElement kid) Parameters Type Name Description AXSharp.Connector.ITwinElement kid | Improve this Doc View Source AddValueTag(ITwinPrimitive) Declaration public void AddValueTag(ITwinPrimitive valueTag) Parameters Type Name Description AXSharp.Connector.ITwinPrimitive valueTag | Improve this Doc View Source CreateEmptyPoco() Declaration public _NULL_CONTEXT CreateEmptyPoco() Returns Type Description _NULL_CONTEXT | Improve this Doc View Source GetChildren() Declaration public IEnumerable<ITwinObject> GetChildren() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinObject> | Improve this Doc View Source GetConnector() Declaration public Connector GetConnector() Returns Type Description AXSharp.Connector.Connector | Improve this Doc View Source GetKids() Declaration public IEnumerable<ITwinElement> GetKids() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinElement> | Improve this Doc View Source GetParent() Declaration public ITwinObject GetParent() Returns Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source GetSymbolTail() Declaration public string GetSymbolTail() Returns Type Description string | Improve this Doc View Source GetValueTags() Declaration public IEnumerable<ITwinPrimitive> GetValueTags() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive> | Improve this Doc View Source OnlineToPlain<T>() Declaration public virtual Task<T> OnlineToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<_NULL_CONTEXT> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><_NULL_CONTEXT> | Improve this Doc View Source OnlineToPlainAsync(_NULL_CONTEXT) Declaration protected Task<_NULL_CONTEXT> OnlineToPlainAsync(_NULL_CONTEXT plain) Parameters Type Name Description _NULL_CONTEXT plain Returns Type Description System.Threading.Tasks.Task<TResult><_NULL_CONTEXT> | Improve this Doc View Source PlainToOnline<T>(T) Declaration public virtual Task PlainToOnline<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source PlainToOnlineAsync(_NULL_CONTEXT) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(_NULL_CONTEXT plain) Parameters Type Name Description _NULL_CONTEXT plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadow<T>(T) Declaration public virtual Task PlainToShadow<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source PlainToShadowAsync(_NULL_CONTEXT) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(_NULL_CONTEXT plain) Parameters Type Name Description _NULL_CONTEXT plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ShadowToPlain<T>() Declaration public virtual Task<T> ShadowToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<_NULL_CONTEXT> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><_NULL_CONTEXT> | Improve this Doc View Source ShadowToPlainAsync(_NULL_CONTEXT) Declaration protected Task<_NULL_CONTEXT> ShadowToPlainAsync(_NULL_CONTEXT plain) Parameters Type Name Description _NULL_CONTEXT plain Returns Type Description System.Threading.Tasks.Task<TResult><_NULL_CONTEXT> Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoContext"
  },
  "api/AXOpen.Core._NULL_OBJECT.html": {
    "href": "api/AXOpen.Core._NULL_OBJECT.html",
    "title": "Class _NULL_OBJECT | System.Dynamic.ExpandoObject",
    "keywords": "Class _NULL_OBJECT Inheritance object _NULL_OBJECT Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class _NULL_OBJECT : ITwinObject, ITwinElement, IAxoObject Constructors | Improve this Doc View Source _NULL_OBJECT(ITwinObject, string, string) Declaration public _NULL_OBJECT(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description AXSharp.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source AttributeName Declaration public string AttributeName { get; set; } Property Value Type Description string | Improve this Doc View Source Connector Declaration protected Connector Connector { get; } Property Value Type Description AXSharp.Connector.Connector | Improve this Doc View Source HumanReadable Declaration public string HumanReadable { get; set; } Property Value Type Description string | Improve this Doc View Source Interpreter Declaration public Translator Interpreter { get; } Property Value Type Description AXSharp.Connector.Localizations.Translator | Improve this Doc View Source Parent Declaration protected ITwinObject Parent { get; set; } Property Value Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source Symbol Declaration public string Symbol { get; protected set; } Property Value Type Description string | Improve this Doc View Source SymbolTail Declaration protected string SymbolTail { get; set; } Property Value Type Description string Methods | Improve this Doc View Source AddChild(ITwinObject) Declaration public void AddChild(ITwinObject twinObject) Parameters Type Name Description AXSharp.Connector.ITwinObject twinObject | Improve this Doc View Source AddKid(ITwinElement) Declaration public void AddKid(ITwinElement kid) Parameters Type Name Description AXSharp.Connector.ITwinElement kid | Improve this Doc View Source AddValueTag(ITwinPrimitive) Declaration public void AddValueTag(ITwinPrimitive valueTag) Parameters Type Name Description AXSharp.Connector.ITwinPrimitive valueTag | Improve this Doc View Source CreateEmptyPoco() Declaration public _NULL_OBJECT CreateEmptyPoco() Returns Type Description _NULL_OBJECT | Improve this Doc View Source GetChildren() Declaration public IEnumerable<ITwinObject> GetChildren() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinObject> | Improve this Doc View Source GetConnector() Declaration public Connector GetConnector() Returns Type Description AXSharp.Connector.Connector | Improve this Doc View Source GetKids() Declaration public IEnumerable<ITwinElement> GetKids() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinElement> | Improve this Doc View Source GetParent() Declaration public ITwinObject GetParent() Returns Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source GetSymbolTail() Declaration public string GetSymbolTail() Returns Type Description string | Improve this Doc View Source GetValueTags() Declaration public IEnumerable<ITwinPrimitive> GetValueTags() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive> | Improve this Doc View Source OnlineToPlain<T>() Declaration public virtual Task<T> OnlineToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<_NULL_OBJECT> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><_NULL_OBJECT> | Improve this Doc View Source OnlineToPlainAsync(_NULL_OBJECT) Declaration protected Task<_NULL_OBJECT> OnlineToPlainAsync(_NULL_OBJECT plain) Parameters Type Name Description _NULL_OBJECT plain Returns Type Description System.Threading.Tasks.Task<TResult><_NULL_OBJECT> | Improve this Doc View Source PlainToOnline<T>(T) Declaration public virtual Task PlainToOnline<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source PlainToOnlineAsync(_NULL_OBJECT) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(_NULL_OBJECT plain) Parameters Type Name Description _NULL_OBJECT plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadow<T>(T) Declaration public virtual Task PlainToShadow<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source PlainToShadowAsync(_NULL_OBJECT) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(_NULL_OBJECT plain) Parameters Type Name Description _NULL_OBJECT plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ShadowToPlain<T>() Declaration public virtual Task<T> ShadowToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<_NULL_OBJECT> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><_NULL_OBJECT> | Improve this Doc View Source ShadowToPlainAsync(_NULL_OBJECT) Declaration protected Task<_NULL_OBJECT> ShadowToPlainAsync(_NULL_OBJECT plain) Parameters Type Name Description _NULL_OBJECT plain Returns Type Description System.Threading.Tasks.Task<TResult><_NULL_OBJECT> Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject"
  },
  "api/AXOpen.Core._NULL_RTC.html": {
    "href": "api/AXOpen.Core._NULL_RTC.html",
    "title": "Class _NULL_RTC | System.Dynamic.ExpandoObject",
    "keywords": "Class _NULL_RTC Inheritance object _NULL_RTC Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement AXOpen.Rtc.IAxoRtc Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class _NULL_RTC : ITwinObject, ITwinElement, IAxoRtc Constructors | Improve this Doc View Source _NULL_RTC(ITwinObject, string, string) Declaration public _NULL_RTC(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description AXSharp.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source AttributeName Declaration public string AttributeName { get; set; } Property Value Type Description string | Improve this Doc View Source Connector Declaration protected Connector Connector { get; } Property Value Type Description AXSharp.Connector.Connector | Improve this Doc View Source HumanReadable Declaration public string HumanReadable { get; set; } Property Value Type Description string | Improve this Doc View Source Interpreter Declaration public Translator Interpreter { get; } Property Value Type Description AXSharp.Connector.Localizations.Translator | Improve this Doc View Source Parent Declaration protected ITwinObject Parent { get; set; } Property Value Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source Symbol Declaration public string Symbol { get; protected set; } Property Value Type Description string | Improve this Doc View Source SymbolTail Declaration protected string SymbolTail { get; set; } Property Value Type Description string Methods | Improve this Doc View Source AddChild(ITwinObject) Declaration public void AddChild(ITwinObject twinObject) Parameters Type Name Description AXSharp.Connector.ITwinObject twinObject | Improve this Doc View Source AddKid(ITwinElement) Declaration public void AddKid(ITwinElement kid) Parameters Type Name Description AXSharp.Connector.ITwinElement kid | Improve this Doc View Source AddValueTag(ITwinPrimitive) Declaration public void AddValueTag(ITwinPrimitive valueTag) Parameters Type Name Description AXSharp.Connector.ITwinPrimitive valueTag | Improve this Doc View Source CreateEmptyPoco() Declaration public _NULL_RTC CreateEmptyPoco() Returns Type Description _NULL_RTC | Improve this Doc View Source GetChildren() Declaration public IEnumerable<ITwinObject> GetChildren() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinObject> | Improve this Doc View Source GetConnector() Declaration public Connector GetConnector() Returns Type Description AXSharp.Connector.Connector | Improve this Doc View Source GetKids() Declaration public IEnumerable<ITwinElement> GetKids() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinElement> | Improve this Doc View Source GetParent() Declaration public ITwinObject GetParent() Returns Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source GetSymbolTail() Declaration public string GetSymbolTail() Returns Type Description string | Improve this Doc View Source GetValueTags() Declaration public IEnumerable<ITwinPrimitive> GetValueTags() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive> | Improve this Doc View Source OnlineToPlain<T>() Declaration public virtual Task<T> OnlineToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<_NULL_RTC> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><_NULL_RTC> | Improve this Doc View Source OnlineToPlainAsync(_NULL_RTC) Declaration protected Task<_NULL_RTC> OnlineToPlainAsync(_NULL_RTC plain) Parameters Type Name Description _NULL_RTC plain Returns Type Description System.Threading.Tasks.Task<TResult><_NULL_RTC> | Improve this Doc View Source PlainToOnline<T>(T) Declaration public virtual Task PlainToOnline<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source PlainToOnlineAsync(_NULL_RTC) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(_NULL_RTC plain) Parameters Type Name Description _NULL_RTC plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadow<T>(T) Declaration public virtual Task PlainToShadow<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source PlainToShadowAsync(_NULL_RTC) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(_NULL_RTC plain) Parameters Type Name Description _NULL_RTC plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ShadowToPlain<T>() Declaration public virtual Task<T> ShadowToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<_NULL_RTC> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><_NULL_RTC> | Improve this Doc View Source ShadowToPlainAsync(_NULL_RTC) Declaration protected Task<_NULL_RTC> ShadowToPlainAsync(_NULL_RTC plain) Parameters Type Name Description _NULL_RTC plain Returns Type Description System.Threading.Tasks.Task<TResult><_NULL_RTC> Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement AXOpen.Rtc.IAxoRtc"
  },
  "api/AXOpen.Core.AxoComponent.html": {
    "href": "api/AXOpen.Core.AxoComponent.html",
    "title": "Class AxoComponent | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoComponent Inheritance object AxoObject AxoComponent Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject IAxoComponent Inherited Members AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class AxoComponent : AxoObject, ITwinObject, ITwinElement, IAxoObject, IAxoComponent Constructors | Improve this Doc View Source AxoComponent(ITwinObject, string, string) Declaration public AxoComponent(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description AXSharp.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source _isManuallyControllable Declaration public OnlinerBool _isManuallyControllable { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerBool Methods | Improve this Doc View Source CreateEmptyPoco() Declaration public AxoComponent CreateEmptyPoco() Returns Type Description AxoComponent | Improve this Doc View Source OnlineToPlain<T>() Declaration public override Task<T> OnlineToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T Overrides AxoObject.OnlineToPlain<T>() | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<AxoComponent> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoComponent> | Improve this Doc View Source OnlineToPlainAsync(AxoComponent) Declaration protected Task<AxoComponent> OnlineToPlainAsync(AxoComponent plain) Parameters Type Name Description AxoComponent plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoComponent> | Improve this Doc View Source PlainToOnline<T>(T) Declaration public override Task PlainToOnline<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T Overrides AXOpen.Core.AxoObject.PlainToOnline<T>(T) | Improve this Doc View Source PlainToOnlineAsync(AxoComponent) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoComponent plain) Parameters Type Name Description AxoComponent plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadow<T>(T) Declaration public override Task PlainToShadow<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T Overrides AXOpen.Core.AxoObject.PlainToShadow<T>(T) | Improve this Doc View Source PlainToShadowAsync(AxoComponent) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoComponent plain) Parameters Type Name Description AxoComponent plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ShadowToPlain<T>() Declaration public override Task<T> ShadowToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T Overrides AxoObject.ShadowToPlain<T>() | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<AxoComponent> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoComponent> | Improve this Doc View Source ShadowToPlainAsync(AxoComponent) Declaration protected Task<AxoComponent> ShadowToPlainAsync(AxoComponent plain) Parameters Type Name Description AxoComponent plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoComponent> Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject IAxoComponent"
  },
  "api/AXOpen.Core.AxoComponentCommandView.html": {
    "href": "api/AXOpen.Core.AxoComponentCommandView.html",
    "title": "Class AxoComponentCommandView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoComponentCommandView Inheritance object Microsoft.AspNetCore.Components.ComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><AxoComponent> AxoComponentView AxoComponentCommandView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable Inherited Members AxoComponentView.IsControllable AxoComponentView.OnInitialized() AxoComponentView.Dispose() AxoComponentView.BuildRenderTree(RenderTreeBuilder) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<AXOpen.Core.AxoComponent>.Component AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinPrimitive) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, AXSharp.Connector.ValueTypes.ValueChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: axopen_core_blazor.dll Syntax public class AxoComponentCommandView : AxoComponentView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Constructors | Improve this Doc View Source AxoComponentCommandView() Declaration public AxoComponentCommandView() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable"
  },
  "api/AXOpen.Core.AxoComponentStatusView.html": {
    "href": "api/AXOpen.Core.AxoComponentStatusView.html",
    "title": "Class AxoComponentStatusView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoComponentStatusView Inheritance object Microsoft.AspNetCore.Components.ComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><AxoComponent> AxoComponentView AxoComponentStatusView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable Inherited Members AxoComponentView.IsControllable AxoComponentView.OnInitialized() AxoComponentView.Dispose() AxoComponentView.BuildRenderTree(RenderTreeBuilder) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<AXOpen.Core.AxoComponent>.Component AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinPrimitive) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, AXSharp.Connector.ValueTypes.ValueChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: axopen_core_blazor.dll Syntax public class AxoComponentStatusView : AxoComponentView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Constructors | Improve this Doc View Source AxoComponentStatusView() Declaration public AxoComponentStatusView() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable"
  },
  "api/AXOpen.Core.AxoComponentView.html": {
    "href": "api/AXOpen.Core.AxoComponentView.html",
    "title": "Class AxoComponentView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoComponentView Inheritance object Microsoft.AspNetCore.Components.ComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><AxoComponent> AxoComponentView AxoComponentCommandView AxoComponentStatusView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable Inherited Members AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<AXOpen.Core.AxoComponent>.Component AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinPrimitive) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, AXSharp.Connector.ValueTypes.ValueChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: axopen_core_blazor.dll Syntax public class AxoComponentView : RenderableComplexComponentBase<AxoComponent>, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Properties | Improve this Doc View Source IsControllable Declaration [Parameter] public bool IsControllable { get; set; } Property Value Type Description bool Methods | Improve this Doc View Source BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters Type Name Description Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder Overrides Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source OnInitialized() Declaration protected override void OnInitialized() Overrides Microsoft.AspNetCore.Components.ComponentBase.OnInitialized() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable"
  },
  "api/AXOpen.Core.AxoContext.html": {
    "href": "api/AXOpen.Core.AxoContext.html",
    "title": "Class AxoContext | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoContext Inheritance object AxoContext Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class AxoContext : ITwinObject, ITwinElement, IAxoContext Constructors | Improve this Doc View Source AxoContext(ITwinObject, string, string) Declaration public AxoContext(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description AXSharp.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source AttributeName Declaration public string AttributeName { get; set; } Property Value Type Description string | Improve this Doc View Source Connector Declaration protected Connector Connector { get; } Property Value Type Description AXSharp.Connector.Connector | Improve this Doc View Source HumanReadable Declaration public string HumanReadable { get; set; } Property Value Type Description string | Improve this Doc View Source Interpreter Declaration public Translator Interpreter { get; } Property Value Type Description AXSharp.Connector.Localizations.Translator | Improve this Doc View Source Parent Declaration protected ITwinObject Parent { get; set; } Property Value Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source Symbol Declaration public string Symbol { get; protected set; } Property Value Type Description string | Improve this Doc View Source SymbolTail Declaration protected string SymbolTail { get; set; } Property Value Type Description string Methods | Improve this Doc View Source AddChild(ITwinObject) Declaration public void AddChild(ITwinObject twinObject) Parameters Type Name Description AXSharp.Connector.ITwinObject twinObject | Improve this Doc View Source AddKid(ITwinElement) Declaration public void AddKid(ITwinElement kid) Parameters Type Name Description AXSharp.Connector.ITwinElement kid | Improve this Doc View Source AddValueTag(ITwinPrimitive) Declaration public void AddValueTag(ITwinPrimitive valueTag) Parameters Type Name Description AXSharp.Connector.ITwinPrimitive valueTag | Improve this Doc View Source CreateEmptyPoco() Declaration public AxoContext CreateEmptyPoco() Returns Type Description AxoContext | Improve this Doc View Source GetChildren() Declaration public IEnumerable<ITwinObject> GetChildren() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinObject> | Improve this Doc View Source GetConnector() Declaration public Connector GetConnector() Returns Type Description AXSharp.Connector.Connector | Improve this Doc View Source GetKids() Declaration public IEnumerable<ITwinElement> GetKids() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinElement> | Improve this Doc View Source GetParent() Declaration public ITwinObject GetParent() Returns Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source GetSymbolTail() Declaration public string GetSymbolTail() Returns Type Description string | Improve this Doc View Source GetValueTags() Declaration public IEnumerable<ITwinPrimitive> GetValueTags() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive> | Improve this Doc View Source OnlineToPlain<T>() Declaration public virtual Task<T> OnlineToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<AxoContext> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoContext> | Improve this Doc View Source OnlineToPlainAsync(AxoContext) Declaration protected Task<AxoContext> OnlineToPlainAsync(AxoContext plain) Parameters Type Name Description AxoContext plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoContext> | Improve this Doc View Source PlainToOnline<T>(T) Declaration public virtual Task PlainToOnline<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source PlainToOnlineAsync(AxoContext) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoContext plain) Parameters Type Name Description AxoContext plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadow<T>(T) Declaration public virtual Task PlainToShadow<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source PlainToShadowAsync(AxoContext) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoContext plain) Parameters Type Name Description AxoContext plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ShadowToPlain<T>() Declaration public virtual Task<T> ShadowToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<AxoContext> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoContext> | Improve this Doc View Source ShadowToPlainAsync(AxoContext) Declaration protected Task<AxoContext> ShadowToPlainAsync(AxoContext plain) Parameters Type Name Description AxoContext plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoContext> Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoContext"
  },
  "api/AXOpen.Core.AxoContextEnvironment.html": {
    "href": "api/AXOpen.Core.AxoContextEnvironment.html",
    "title": "Class AxoContextEnvironment | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoContextEnvironment Inheritance object AxoContextEnvironment Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoContextEnvironment Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class AxoContextEnvironment : ITwinObject, ITwinElement, IAxoContextEnvironment Constructors | Improve this Doc View Source AxoContextEnvironment(ITwinObject, string, string) Declaration public AxoContextEnvironment(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description AXSharp.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source AttributeName Declaration public string AttributeName { get; set; } Property Value Type Description string | Improve this Doc View Source Connector Declaration protected Connector Connector { get; } Property Value Type Description AXSharp.Connector.Connector | Improve this Doc View Source HumanReadable Declaration public string HumanReadable { get; set; } Property Value Type Description string | Improve this Doc View Source Interpreter Declaration public Translator Interpreter { get; } Property Value Type Description AXSharp.Connector.Localizations.Translator | Improve this Doc View Source Parent Declaration protected ITwinObject Parent { get; set; } Property Value Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source Symbol Declaration public string Symbol { get; protected set; } Property Value Type Description string | Improve this Doc View Source SymbolTail Declaration protected string SymbolTail { get; set; } Property Value Type Description string Methods | Improve this Doc View Source AddChild(ITwinObject) Declaration public void AddChild(ITwinObject twinObject) Parameters Type Name Description AXSharp.Connector.ITwinObject twinObject | Improve this Doc View Source AddKid(ITwinElement) Declaration public void AddKid(ITwinElement kid) Parameters Type Name Description AXSharp.Connector.ITwinElement kid | Improve this Doc View Source AddValueTag(ITwinPrimitive) Declaration public void AddValueTag(ITwinPrimitive valueTag) Parameters Type Name Description AXSharp.Connector.ITwinPrimitive valueTag | Improve this Doc View Source CreateEmptyPoco() Declaration public AxoContextEnvironment CreateEmptyPoco() Returns Type Description AxoContextEnvironment | Improve this Doc View Source GetChildren() Declaration public IEnumerable<ITwinObject> GetChildren() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinObject> | Improve this Doc View Source GetConnector() Declaration public Connector GetConnector() Returns Type Description AXSharp.Connector.Connector | Improve this Doc View Source GetKids() Declaration public IEnumerable<ITwinElement> GetKids() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinElement> | Improve this Doc View Source GetParent() Declaration public ITwinObject GetParent() Returns Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source GetSymbolTail() Declaration public string GetSymbolTail() Returns Type Description string | Improve this Doc View Source GetValueTags() Declaration public IEnumerable<ITwinPrimitive> GetValueTags() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive> | Improve this Doc View Source OnlineToPlain<T>() Declaration public virtual Task<T> OnlineToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<AxoContextEnvironment> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoContextEnvironment> | Improve this Doc View Source OnlineToPlainAsync(AxoContextEnvironment) Declaration protected Task<AxoContextEnvironment> OnlineToPlainAsync(AxoContextEnvironment plain) Parameters Type Name Description AxoContextEnvironment plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoContextEnvironment> | Improve this Doc View Source PlainToOnline<T>(T) Declaration public virtual Task PlainToOnline<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source PlainToOnlineAsync(AxoContextEnvironment) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoContextEnvironment plain) Parameters Type Name Description AxoContextEnvironment plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadow<T>(T) Declaration public virtual Task PlainToShadow<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source PlainToShadowAsync(AxoContextEnvironment) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoContextEnvironment plain) Parameters Type Name Description AxoContextEnvironment plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ShadowToPlain<T>() Declaration public virtual Task<T> ShadowToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<AxoContextEnvironment> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoContextEnvironment> | Improve this Doc View Source ShadowToPlainAsync(AxoContextEnvironment) Declaration protected Task<AxoContextEnvironment> ShadowToPlainAsync(AxoContextEnvironment plain) Parameters Type Name Description AxoContextEnvironment plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoContextEnvironment> Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoContextEnvironment"
  },
  "api/AXOpen.Core.AxoCoordinatorStates.html": {
    "href": "api/AXOpen.Core.AxoCoordinatorStates.html",
    "title": "Enum AxoCoordinatorStates | System.Dynamic.ExpandoObject",
    "keywords": "Enum AxoCoordinatorStates Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public enum AxoCoordinatorStates : short Fields Name Description Configuring Idle Running"
  },
  "api/AXOpen.Core.AxoMomentaryTask.html": {
    "href": "api/AXOpen.Core.AxoMomentaryTask.html",
    "title": "Class AxoMomentaryTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoMomentaryTask Inheritance object AxoObject AxoMomentaryTask Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject IAxoMomentaryTask Inherited Members AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class AxoMomentaryTask : AxoObject, ITwinObject, ITwinElement, IAxoObject, IAxoMomentaryTask Constructors | Improve this Doc View Source AxoMomentaryTask(ITwinObject, string, string) Declaration public AxoMomentaryTask(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description AXSharp.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source AttributeStateOffDesc Declaration public string AttributeStateOffDesc { get; set; } Property Value Type Description string | Improve this Doc View Source AttributeStateOnDesc Declaration public string AttributeStateOnDesc { get; set; } Property Value Type Description string | Improve this Doc View Source IsDisabled Declaration [ReadOnly] public OnlinerBool IsDisabled { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerBool | Improve this Doc View Source RemoteSwitchOn Declaration public OnlinerBool RemoteSwitchOn { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerBool | Improve this Doc View Source State Declaration [ReadOnly] public OnlinerBool State { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerBool Methods | Improve this Doc View Source CreateEmptyPoco() Declaration public AxoMomentaryTask CreateEmptyPoco() Returns Type Description AxoMomentaryTask | Improve this Doc View Source OnlineToPlain<T>() Declaration public override Task<T> OnlineToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T Overrides AxoObject.OnlineToPlain<T>() | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<AxoMomentaryTask> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoMomentaryTask> | Improve this Doc View Source OnlineToPlainAsync(AxoMomentaryTask) Declaration protected Task<AxoMomentaryTask> OnlineToPlainAsync(AxoMomentaryTask plain) Parameters Type Name Description AxoMomentaryTask plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoMomentaryTask> | Improve this Doc View Source PlainToOnline<T>(T) Declaration public override Task PlainToOnline<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T Overrides AXOpen.Core.AxoObject.PlainToOnline<T>(T) | Improve this Doc View Source PlainToOnlineAsync(AxoMomentaryTask) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoMomentaryTask plain) Parameters Type Name Description AxoMomentaryTask plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadow<T>(T) Declaration public override Task PlainToShadow<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T Overrides AXOpen.Core.AxoObject.PlainToShadow<T>(T) | Improve this Doc View Source PlainToShadowAsync(AxoMomentaryTask) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoMomentaryTask plain) Parameters Type Name Description AxoMomentaryTask plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ShadowToPlain<T>() Declaration public override Task<T> ShadowToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T Overrides AxoObject.ShadowToPlain<T>() | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<AxoMomentaryTask> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoMomentaryTask> | Improve this Doc View Source ShadowToPlainAsync(AxoMomentaryTask) Declaration protected Task<AxoMomentaryTask> ShadowToPlainAsync(AxoMomentaryTask plain) Parameters Type Name Description AxoMomentaryTask plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoMomentaryTask> Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject IAxoMomentaryTask"
  },
  "api/AXOpen.Core.AxoMomentaryTaskCommandView.html": {
    "href": "api/AXOpen.Core.AxoMomentaryTaskCommandView.html",
    "title": "Class AxoMomentaryTaskCommandView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoMomentaryTaskCommandView Inheritance object Microsoft.AspNetCore.Components.ComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><AxoMomentaryTask> AxoMomentaryTaskView AxoMomentaryTaskCommandView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable Inherited Members AxoMomentaryTaskView.OnInitialized() AxoMomentaryTaskView.Dispose() AxoMomentaryTaskView.Disable AxoMomentaryTaskView.IsDisabled AxoMomentaryTaskView.Description AxoMomentaryTaskView.BuildRenderTree(RenderTreeBuilder) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<AXOpen.Core.AxoMomentaryTask>.Component AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinPrimitive) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, AXSharp.Connector.ValueTypes.ValueChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: axopen_core_blazor.dll Syntax public class AxoMomentaryTaskCommandView : AxoMomentaryTaskView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Constructors | Improve this Doc View Source AxoMomentaryTaskCommandView() Declaration public AxoMomentaryTaskCommandView() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable"
  },
  "api/AXOpen.Core.AxoMomentaryTaskStatusView.html": {
    "href": "api/AXOpen.Core.AxoMomentaryTaskStatusView.html",
    "title": "Class AxoMomentaryTaskStatusView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoMomentaryTaskStatusView Inheritance object Microsoft.AspNetCore.Components.ComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><AxoMomentaryTask> AxoMomentaryTaskView AxoMomentaryTaskStatusView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable Inherited Members AxoMomentaryTaskView.OnInitialized() AxoMomentaryTaskView.Dispose() AxoMomentaryTaskView.Disable AxoMomentaryTaskView.IsDisabled AxoMomentaryTaskView.Description AxoMomentaryTaskView.BuildRenderTree(RenderTreeBuilder) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<AXOpen.Core.AxoMomentaryTask>.Component AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinPrimitive) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, AXSharp.Connector.ValueTypes.ValueChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: axopen_core_blazor.dll Syntax public class AxoMomentaryTaskStatusView : AxoMomentaryTaskView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Constructors | Improve this Doc View Source AxoMomentaryTaskStatusView() Declaration public AxoMomentaryTaskStatusView() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable"
  },
  "api/AXOpen.Core.AxoMomentaryTaskView.html": {
    "href": "api/AXOpen.Core.AxoMomentaryTaskView.html",
    "title": "Class AxoMomentaryTaskView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoMomentaryTaskView Inheritance object Microsoft.AspNetCore.Components.ComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><AxoMomentaryTask> AxoMomentaryTaskView AxoMomentaryTaskCommandView AxoMomentaryTaskStatusView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable Inherited Members AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<AXOpen.Core.AxoMomentaryTask>.Component AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinPrimitive) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, AXSharp.Connector.ValueTypes.ValueChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: axopen_core_blazor.dll Syntax public class AxoMomentaryTaskView : RenderableComplexComponentBase<AxoMomentaryTask>, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Properties | Improve this Doc View Source Description Declaration public string Description { get; } Property Value Type Description string | Improve this Doc View Source Disable Declaration [Parameter] public bool Disable { get; set; } Property Value Type Description bool | Improve this Doc View Source IsDisabled Declaration public bool IsDisabled { get; } Property Value Type Description bool Methods | Improve this Doc View Source BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters Type Name Description Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder Overrides Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source OnInitialized() Declaration protected override void OnInitialized() Overrides Microsoft.AspNetCore.Components.ComponentBase.OnInitialized() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable"
  },
  "api/AXOpen.Core.AxoObject.html": {
    "href": "api/AXOpen.Core.AxoObject.html",
    "title": "Class AxoObject | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoObject Inheritance object AxoObject AxoComponent AxoMomentaryTask AxoTask AxoToggleTask Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class AxoObject : ITwinObject, ITwinElement, IAxoObject Constructors | Improve this Doc View Source AxoObject(ITwinObject, string, string) Declaration public AxoObject(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description AXSharp.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source AttributeName Declaration public string AttributeName { get; set; } Property Value Type Description string | Improve this Doc View Source Connector Declaration protected Connector Connector { get; } Property Value Type Description AXSharp.Connector.Connector | Improve this Doc View Source HumanReadable Declaration public string HumanReadable { get; set; } Property Value Type Description string | Improve this Doc View Source Identity Declaration [CompilerOmits(new string[] { \"POCO\" })] [ReadOnly] [RenderIgnore] public OnlinerULInt Identity { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerULInt | Improve this Doc View Source Interpreter Declaration public Translator Interpreter { get; } Property Value Type Description AXSharp.Connector.Localizations.Translator | Improve this Doc View Source Parent Declaration protected ITwinObject Parent { get; set; } Property Value Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source Symbol Declaration public string Symbol { get; protected set; } Property Value Type Description string | Improve this Doc View Source SymbolTail Declaration protected string SymbolTail { get; set; } Property Value Type Description string Methods | Improve this Doc View Source AddChild(ITwinObject) Declaration public void AddChild(ITwinObject twinObject) Parameters Type Name Description AXSharp.Connector.ITwinObject twinObject | Improve this Doc View Source AddKid(ITwinElement) Declaration public void AddKid(ITwinElement kid) Parameters Type Name Description AXSharp.Connector.ITwinElement kid | Improve this Doc View Source AddValueTag(ITwinPrimitive) Declaration public void AddValueTag(ITwinPrimitive valueTag) Parameters Type Name Description AXSharp.Connector.ITwinPrimitive valueTag | Improve this Doc View Source CreateEmptyPoco() Declaration public AxoObject CreateEmptyPoco() Returns Type Description AxoObject | Improve this Doc View Source GetChildren() Declaration public IEnumerable<ITwinObject> GetChildren() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinObject> | Improve this Doc View Source GetConnector() Declaration public Connector GetConnector() Returns Type Description AXSharp.Connector.Connector | Improve this Doc View Source GetKids() Declaration public IEnumerable<ITwinElement> GetKids() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinElement> | Improve this Doc View Source GetParent() Declaration public ITwinObject GetParent() Returns Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source GetSymbolTail() Declaration public string GetSymbolTail() Returns Type Description string | Improve this Doc View Source GetValueTags() Declaration public IEnumerable<ITwinPrimitive> GetValueTags() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive> | Improve this Doc View Source OnlineToPlain<T>() Declaration public virtual Task<T> OnlineToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<AxoObject> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoObject> | Improve this Doc View Source OnlineToPlainAsync(AxoObject) Declaration protected Task<AxoObject> OnlineToPlainAsync(AxoObject plain) Parameters Type Name Description AxoObject plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoObject> | Improve this Doc View Source PlainToOnline<T>(T) Declaration public virtual Task PlainToOnline<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source PlainToOnlineAsync(AxoObject) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoObject plain) Parameters Type Name Description AxoObject plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadow<T>(T) Declaration public virtual Task PlainToShadow<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source PlainToShadowAsync(AxoObject) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoObject plain) Parameters Type Name Description AxoObject plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ShadowToPlain<T>() Declaration public virtual Task<T> ShadowToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<AxoObject> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoObject> | Improve this Doc View Source ShadowToPlainAsync(AxoObject) Declaration protected Task<AxoObject> ShadowToPlainAsync(AxoObject plain) Parameters Type Name Description AxoObject plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoObject> Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject"
  },
  "api/AXOpen.Core.AxoRemoteTask.html": {
    "href": "api/AXOpen.Core.AxoRemoteTask.html",
    "title": "Class AxoRemoteTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoRemoteTask Inheritance object AxoObject AxoTask AxoRemoteTask Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject System.Windows.Input.ICommand IAxoTask IAxoTaskState Inherited Members AxoTask.Restore() AxoTask.CanExecute(object) AxoTask.Execute(object) AxoTask.CanExecuteChanged AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.ErrorDetails AxoTask.OnlineToPlainAsync(AxoTask) AxoTask.PlainToOnlineAsync(AxoTask) AxoTask.ShadowToPlainAsync(AxoTask) AxoTask.PlainToShadowAsync(AxoTask) AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class AxoRemoteTask : AxoTask, ITwinObject, ITwinElement, IAxoObject, ICommand, IAxoTask, IAxoTaskState Constructors | Improve this Doc View Source AxoRemoteTask(ITwinObject, string, string) Declaration public AxoRemoteTask(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description AXSharp.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source DoneSignature Declaration public OnlinerULInt DoneSignature { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerULInt | Improve this Doc View Source HasRemoteException Declaration public OnlinerBool HasRemoteException { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerBool | Improve this Doc View Source IsBeingCalledCounter Declaration public OnlinerInt IsBeingCalledCounter { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerInt | Improve this Doc View Source IsInitialized Declaration public OnlinerBool IsInitialized { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerBool | Improve this Doc View Source RemoteExceptionDetails Gets string representation of the current exception on this remote task. Declaration public string RemoteExceptionDetails { get; } Property Value Type Description string | Improve this Doc View Source RemoteExecutionException Gets the exception that occurred during the last execution. Declaration public Exception RemoteExecutionException { get; } Property Value Type Description System.Exception Methods | Improve this Doc View Source CreateEmptyPoco() Declaration public AxoRemoteTask CreateEmptyPoco() Returns Type Description AxoRemoteTask | Improve this Doc View Source DeInitialize() Removes currently bound AXOpen.Core.AxoRemoteTask.DeferredAction from the execution of this AxoRemoteTask Declaration public void DeInitialize() | Improve this Doc View Source Initialize(Action) Initializes this AxoRemoteTask. Declaration public void Initialize(Action deferredAction) Parameters Type Name Description System.Action deferredAction Action to be executed on this AxoRemoteTask call. | Improve this Doc View Source Initialize(Func<bool>) Initializes this AxoRemoteTask. Declaration public void Initialize(Func<bool> deferredAction) Parameters Type Name Description System.Func<TResult><bool> deferredAction Action to be executed on this AxoRemoteTask call. | Improve this Doc View Source InitializeExclusively(Action) Initializes this AxoRemoteTask exclusively for this AXOpen.Core.AxoRemoteTask.DeferredAction. Any following attempt to initialize this AxoRemoteTask will throw an exception. Declaration public void InitializeExclusively(Action deferredAction) Parameters Type Name Description System.Action deferredAction Action to be executed on this AxoRemoteTask call. | Improve this Doc View Source InitializeExclusively(Func<bool>) Initializes this AxoRemoteTask exclusively for this AXOpen.Core.AxoRemoteTask.DeferredAction. Any following attempt to initialize this AxoRemoteTask will throw an exception. Declaration public void InitializeExclusively(Func<bool> deferredAction) Parameters Type Name Description System.Func<TResult><bool> deferredAction Action to be executed on this AxoRemoteTask call. | Improve this Doc View Source OnlineToPlain<T>() Declaration public override Task<T> OnlineToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T Overrides AxoTask.OnlineToPlain<T>() | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<AxoRemoteTask> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoRemoteTask> | Improve this Doc View Source OnlineToPlainAsync(AxoRemoteTask) Declaration protected Task<AxoRemoteTask> OnlineToPlainAsync(AxoRemoteTask plain) Parameters Type Name Description AxoRemoteTask plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoRemoteTask> | Improve this Doc View Source PlainToOnline<T>(T) Declaration public override Task PlainToOnline<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T Overrides AXOpen.Core.AxoTask.PlainToOnline<T>(T) | Improve this Doc View Source PlainToOnlineAsync(AxoRemoteTask) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoRemoteTask plain) Parameters Type Name Description AxoRemoteTask plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadow<T>(T) Declaration public override Task PlainToShadow<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T Overrides AXOpen.Core.AxoTask.PlainToShadow<T>(T) | Improve this Doc View Source PlainToShadowAsync(AxoRemoteTask) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoRemoteTask plain) Parameters Type Name Description AxoRemoteTask plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ResetExecution() Resets the resets this instance of AxoRemoteTask. Declaration public Task ResetExecution() Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source ShadowToPlain<T>() Declaration public override Task<T> ShadowToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T Overrides AxoTask.ShadowToPlain<T>() | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<AxoRemoteTask> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoRemoteTask> | Improve this Doc View Source ShadowToPlainAsync(AxoRemoteTask) Declaration protected Task<AxoRemoteTask> ShadowToPlainAsync(AxoRemoteTask plain) Parameters Type Name Description AxoRemoteTask plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoRemoteTask> Events | Improve this Doc View Source PropertyChanged Declaration public event PropertyChangedEventHandler PropertyChanged Event Type Type Description System.ComponentModel.PropertyChangedEventHandler Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject System.Windows.Input.ICommand IAxoTask IAxoTaskState"
  },
  "api/AXOpen.Core.AxoSequencer.html": {
    "href": "api/AXOpen.Core.AxoSequencer.html",
    "title": "Class AxoSequencer | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoSequencer Inheritance object AxoObject AxoTask AxoSequencer Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject System.Windows.Input.ICommand IAxoTask IAxoTaskState Inherited Members AxoTask.Restore() AxoTask.CanExecute(object) AxoTask.Execute(object) AxoTask.CanExecuteChanged AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.ErrorDetails AxoTask.OnlineToPlainAsync(AxoTask) AxoTask.PlainToOnlineAsync(AxoTask) AxoTask.ShadowToPlainAsync(AxoTask) AxoTask.PlainToShadowAsync(AxoTask) AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class AxoSequencer : AxoTask, ITwinObject, ITwinElement, IAxoObject, ICommand, IAxoTask, IAxoTaskState Constructors | Improve this Doc View Source AxoSequencer(ITwinObject, string, string) Declaration public AxoSequencer(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description AXSharp.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source CurrentOrder Declaration public OnlinerULInt CurrentOrder { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerULInt | Improve this Doc View Source SequenceMode Declaration [EnumeratorDiscriminator(typeof(eAxoSequenceMode))] public OnlinerInt SequenceMode { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerInt | Improve this Doc View Source StepBackwardCommand Declaration public AxoTask StepBackwardCommand { get; } Property Value Type Description AxoTask | Improve this Doc View Source StepForwardCommand Declaration public AxoTask StepForwardCommand { get; } Property Value Type Description AxoTask | Improve this Doc View Source StepIn Declaration public AxoTask StepIn { get; } Property Value Type Description AxoTask | Improve this Doc View Source SteppingMode Declaration [EnumeratorDiscriminator(typeof(eAxoSteppingMode))] public OnlinerInt SteppingMode { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerInt Methods | Improve this Doc View Source CreateEmptyPoco() Declaration public AxoSequencer CreateEmptyPoco() Returns Type Description AxoSequencer | Improve this Doc View Source OnlineToPlain<T>() Declaration public override Task<T> OnlineToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T Overrides AxoTask.OnlineToPlain<T>() | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<AxoSequencer> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoSequencer> | Improve this Doc View Source OnlineToPlainAsync(AxoSequencer) Declaration protected Task<AxoSequencer> OnlineToPlainAsync(AxoSequencer plain) Parameters Type Name Description AxoSequencer plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoSequencer> | Improve this Doc View Source PlainToOnline<T>(T) Declaration public override Task PlainToOnline<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T Overrides AXOpen.Core.AxoTask.PlainToOnline<T>(T) | Improve this Doc View Source PlainToOnlineAsync(AxoSequencer) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoSequencer plain) Parameters Type Name Description AxoSequencer plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadow<T>(T) Declaration public override Task PlainToShadow<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T Overrides AXOpen.Core.AxoTask.PlainToShadow<T>(T) | Improve this Doc View Source PlainToShadowAsync(AxoSequencer) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoSequencer plain) Parameters Type Name Description AxoSequencer plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ShadowToPlain<T>() Declaration public override Task<T> ShadowToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T Overrides AxoTask.ShadowToPlain<T>() | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<AxoSequencer> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoSequencer> | Improve this Doc View Source ShadowToPlainAsync(AxoSequencer) Declaration protected Task<AxoSequencer> ShadowToPlainAsync(AxoSequencer plain) Parameters Type Name Description AxoSequencer plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoSequencer> Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject System.Windows.Input.ICommand IAxoTask IAxoTaskState"
  },
  "api/AXOpen.Core.AxoSequencerCommandView.html": {
    "href": "api/AXOpen.Core.AxoSequencerCommandView.html",
    "title": "Class AxoSequencerCommandView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoSequencerCommandView Inheritance object Microsoft.AspNetCore.Components.ComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><AxoSequencer> AxoSequencerView AxoSequencerCommandView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase Inherited Members AxoSequencerView.Steps AxoSequencerView.IsControllable AxoSequencerView.HasTaskControlButton AxoSequencerView.HasSettings AxoSequencerView.HasStepControls AxoSequencerView.HasStepDetails AxoSequencerView.OnInitialized() AxoSequencerView.BuildRenderTree(RenderTreeBuilder) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<AXOpen.Core.AxoSequencer>.Component AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinPrimitive) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, AXSharp.Connector.ValueTypes.ValueChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: axopen_core_blazor.dll Syntax public class AxoSequencerCommandView : AxoSequencerView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase Constructors | Improve this Doc View Source AxoSequencerCommandView() Declaration public AxoSequencerCommandView() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase"
  },
  "api/AXOpen.Core.AxoSequencerStatusView.html": {
    "href": "api/AXOpen.Core.AxoSequencerStatusView.html",
    "title": "Class AxoSequencerStatusView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoSequencerStatusView Inheritance object Microsoft.AspNetCore.Components.ComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><AxoSequencer> AxoSequencerView AxoSequencerStatusView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase Inherited Members AxoSequencerView.Steps AxoSequencerView.IsControllable AxoSequencerView.HasTaskControlButton AxoSequencerView.HasSettings AxoSequencerView.HasStepControls AxoSequencerView.HasStepDetails AxoSequencerView.OnInitialized() AxoSequencerView.BuildRenderTree(RenderTreeBuilder) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<AXOpen.Core.AxoSequencer>.Component AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinPrimitive) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, AXSharp.Connector.ValueTypes.ValueChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: axopen_core_blazor.dll Syntax public class AxoSequencerStatusView : AxoSequencerView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase Constructors | Improve this Doc View Source AxoSequencerStatusView() Declaration public AxoSequencerStatusView() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase"
  },
  "api/AXOpen.Core.AxoSequencerView.html": {
    "href": "api/AXOpen.Core.AxoSequencerView.html",
    "title": "Class AxoSequencerView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoSequencerView Inheritance object Microsoft.AspNetCore.Components.ComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><AxoSequencer> AxoSequencerView AxoSequencerCommandView AxoSequencerStatusView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase Inherited Members AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<AXOpen.Core.AxoSequencer>.Component AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinPrimitive) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, AXSharp.Connector.ValueTypes.ValueChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: axopen_core_blazor.dll Syntax public class AxoSequencerView : RenderableComplexComponentBase<AxoSequencer>, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase Properties | Improve this Doc View Source HasSettings Declaration [Parameter] public bool HasSettings { get; set; } Property Value Type Description bool | Improve this Doc View Source HasStepControls Declaration [Parameter] public bool HasStepControls { get; set; } Property Value Type Description bool | Improve this Doc View Source HasStepDetails Declaration [Parameter] public bool HasStepDetails { get; set; } Property Value Type Description bool | Improve this Doc View Source HasTaskControlButton Declaration [Parameter] public bool HasTaskControlButton { get; set; } Property Value Type Description bool | Improve this Doc View Source IsControllable Declaration [Parameter] public bool IsControllable { get; set; } Property Value Type Description bool | Improve this Doc View Source Steps Declaration public IEnumerable<AxoStep?> Steps { get; } Property Value Type Description System.Collections.Generic.IEnumerable<T><AxoStep> Methods | Improve this Doc View Source BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters Type Name Description Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder Overrides Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) | Improve this Doc View Source OnInitialized() Declaration protected override void OnInitialized() Overrides Microsoft.AspNetCore.Components.ComponentBase.OnInitialized() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase"
  },
  "api/AXOpen.Core.AxoStep.html": {
    "href": "api/AXOpen.Core.AxoStep.html",
    "title": "Class AxoStep | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoStep Inheritance object AxoObject AxoTask AxoStep Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject System.Windows.Input.ICommand IAxoTask IAxoTaskState IAxoStep Inherited Members AxoTask.Restore() AxoTask.CanExecute(object) AxoTask.Execute(object) AxoTask.CanExecuteChanged AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.ErrorDetails AxoTask.OnlineToPlainAsync(AxoTask) AxoTask.PlainToOnlineAsync(AxoTask) AxoTask.ShadowToPlainAsync(AxoTask) AxoTask.PlainToShadowAsync(AxoTask) AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class AxoStep : AxoTask, ITwinObject, ITwinElement, IAxoObject, ICommand, IAxoTask, IAxoTaskState, IAxoStep Constructors | Improve this Doc View Source AxoStep(ITwinObject, string, string) Declaration public AxoStep(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description AXSharp.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source Description Declaration public string Description { get; set; } Property Value Type Description string | Improve this Doc View Source IsActive Declaration public OnlinerBool IsActive { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerBool | Improve this Doc View Source IsEnabled Declaration public OnlinerBool IsEnabled { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerBool | Improve this Doc View Source Order Declaration [ReadOnly] public OnlinerULInt Order { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerULInt | Improve this Doc View Source StepDescription Declaration [ReadOnce] public OnlinerString StepDescription { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerString Methods | Improve this Doc View Source CreateEmptyPoco() Declaration public AxoStep CreateEmptyPoco() Returns Type Description AxoStep | Improve this Doc View Source OnlineToPlain<T>() Declaration public override Task<T> OnlineToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T Overrides AxoTask.OnlineToPlain<T>() | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<AxoStep> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoStep> | Improve this Doc View Source OnlineToPlainAsync(AxoStep) Declaration protected Task<AxoStep> OnlineToPlainAsync(AxoStep plain) Parameters Type Name Description AxoStep plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoStep> | Improve this Doc View Source PlainToOnline<T>(T) Declaration public override Task PlainToOnline<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T Overrides AXOpen.Core.AxoTask.PlainToOnline<T>(T) | Improve this Doc View Source PlainToOnlineAsync(AxoStep) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoStep plain) Parameters Type Name Description AxoStep plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadow<T>(T) Declaration public override Task PlainToShadow<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T Overrides AXOpen.Core.AxoTask.PlainToShadow<T>(T) | Improve this Doc View Source PlainToShadowAsync(AxoStep) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoStep plain) Parameters Type Name Description AxoStep plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ShadowToPlain<T>() Declaration public override Task<T> ShadowToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T Overrides AxoTask.ShadowToPlain<T>() | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<AxoStep> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoStep> | Improve this Doc View Source ShadowToPlainAsync(AxoStep) Declaration protected Task<AxoStep> ShadowToPlainAsync(AxoStep plain) Parameters Type Name Description AxoStep plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoStep> Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject System.Windows.Input.ICommand IAxoTask IAxoTaskState IAxoStep"
  },
  "api/AXOpen.Core.AxoStepCommandView.html": {
    "href": "api/AXOpen.Core.AxoStepCommandView.html",
    "title": "Class AxoStepCommandView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoStepCommandView Inheritance object Microsoft.AspNetCore.Components.ComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><AxoStep> AxoStepView AxoStepCommandView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase Inherited Members AxoStepView.OnInitialized() AxoStepView.IsControllable AxoStepView.BuildRenderTree(RenderTreeBuilder) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<AXOpen.Core.AxoStep>.Component AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinPrimitive) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, AXSharp.Connector.ValueTypes.ValueChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: axopen_core_blazor.dll Syntax public class AxoStepCommandView : AxoStepView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase Constructors | Improve this Doc View Source AxoStepCommandView() Declaration public AxoStepCommandView() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase"
  },
  "api/AXOpen.Core.AxoStepStatusView.html": {
    "href": "api/AXOpen.Core.AxoStepStatusView.html",
    "title": "Class AxoStepStatusView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoStepStatusView Inheritance object Microsoft.AspNetCore.Components.ComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><AxoStep> AxoStepView AxoStepStatusView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase Inherited Members AxoStepView.OnInitialized() AxoStepView.IsControllable AxoStepView.BuildRenderTree(RenderTreeBuilder) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<AXOpen.Core.AxoStep>.Component AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinPrimitive) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, AXSharp.Connector.ValueTypes.ValueChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: axopen_core_blazor.dll Syntax public class AxoStepStatusView : AxoStepView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase Constructors | Improve this Doc View Source AxoStepStatusView() Declaration public AxoStepStatusView() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase"
  },
  "api/AXOpen.Core.AxoStepView.html": {
    "href": "api/AXOpen.Core.AxoStepView.html",
    "title": "Class AxoStepView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoStepView Inheritance object Microsoft.AspNetCore.Components.ComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><AxoStep> AxoStepView AxoStepCommandView AxoStepStatusView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase Inherited Members AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<AXOpen.Core.AxoStep>.Component AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinPrimitive) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, AXSharp.Connector.ValueTypes.ValueChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: axopen_core_blazor.dll Syntax public class AxoStepView : RenderableComplexComponentBase<AxoStep>, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase Properties | Improve this Doc View Source IsControllable Declaration [Parameter] public bool IsControllable { get; set; } Property Value Type Description bool Methods | Improve this Doc View Source BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters Type Name Description Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder Overrides Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) | Improve this Doc View Source OnInitialized() Declaration protected override void OnInitialized() Overrides Microsoft.AspNetCore.Components.ComponentBase.OnInitialized() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase"
  },
  "api/AXOpen.Core.AxoTask.html": {
    "href": "api/AXOpen.Core.AxoTask.html",
    "title": "Class AxoTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoTask Inheritance object AxoObject AxoTask AxoRemoteTask AxoSequencer AxoStep Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject System.Windows.Input.ICommand IAxoTask IAxoTaskState Inherited Members AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class AxoTask : AxoObject, ITwinObject, ITwinElement, IAxoObject, ICommand, IAxoTask, IAxoTaskState Constructors | Improve this Doc View Source AxoTask(ITwinObject, string, string) Declaration public AxoTask(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description AXSharp.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source ErrorDetails Declaration public OnlinerString ErrorDetails { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerString | Improve this Doc View Source IsDisabled Declaration public OnlinerBool IsDisabled { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerBool | Improve this Doc View Source RemoteAbort Declaration public OnlinerBool RemoteAbort { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerBool | Improve this Doc View Source RemoteInvoke Declaration public OnlinerBool RemoteInvoke { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerBool | Improve this Doc View Source RemoteRestore Declaration public OnlinerBool RemoteRestore { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerBool | Improve this Doc View Source RemoteResume Declaration public OnlinerBool RemoteResume { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerBool | Improve this Doc View Source StartSignature Declaration public OnlinerULInt StartSignature { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerULInt | Improve this Doc View Source Status Declaration [ReadOnly] [EnumeratorDiscriminator(typeof(eAxoTaskState))] public OnlinerInt Status { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerInt Methods | Improve this Doc View Source CanExecute(object) Declaration public bool CanExecute(object parameter = null) Parameters Type Name Description object parameter Returns Type Description bool | Improve this Doc View Source CreateEmptyPoco() Declaration public AxoTask CreateEmptyPoco() Returns Type Description AxoTask | Improve this Doc View Source Execute(object) Executes this task. Declaration public void Execute(object parameter = null) Parameters Type Name Description object parameter | Improve this Doc View Source OnlineToPlain<T>() Declaration public override Task<T> OnlineToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T Overrides AxoObject.OnlineToPlain<T>() | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<AxoTask> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoTask> | Improve this Doc View Source OnlineToPlainAsync(AxoTask) Declaration protected Task<AxoTask> OnlineToPlainAsync(AxoTask plain) Parameters Type Name Description AxoTask plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoTask> | Improve this Doc View Source PlainToOnline<T>(T) Declaration public override Task PlainToOnline<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T Overrides AXOpen.Core.AxoObject.PlainToOnline<T>(T) | Improve this Doc View Source PlainToOnlineAsync(AxoTask) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoTask plain) Parameters Type Name Description AxoTask plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadow<T>(T) Declaration public override Task PlainToShadow<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T Overrides AXOpen.Core.AxoObject.PlainToShadow<T>(T) | Improve this Doc View Source PlainToShadowAsync(AxoTask) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoTask plain) Parameters Type Name Description AxoTask plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source Restore() Restore this task to ready state. Declaration public Task<bool> Restore() Returns Type Description System.Threading.Tasks.Task<TResult><bool> Returns true when the task is restored. | Improve this Doc View Source ShadowToPlain<T>() Declaration public override Task<T> ShadowToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T Overrides AxoObject.ShadowToPlain<T>() | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<AxoTask> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoTask> | Improve this Doc View Source ShadowToPlainAsync(AxoTask) Declaration protected Task<AxoTask> ShadowToPlainAsync(AxoTask plain) Parameters Type Name Description AxoTask plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoTask> Events | Improve this Doc View Source CanExecuteChanged Declaration public event EventHandler CanExecuteChanged Event Type Type Description System.EventHandler Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject System.Windows.Input.ICommand IAxoTask IAxoTaskState"
  },
  "api/AXOpen.Core.AxoTaskCommandView.html": {
    "href": "api/AXOpen.Core.AxoTaskCommandView.html",
    "title": "Class AxoTaskCommandView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoTaskCommandView Inheritance object Microsoft.AspNetCore.Components.ComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><AxoTask> AxoTaskView AxoTaskCommandView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable Inherited Members AxoTaskView.OnInitialized() AxoTaskView.Dispose() AxoTaskView.Disable AxoTaskView.HideRestoreButton AxoTaskView.IsDisabled AxoTaskView.Description AxoTaskView.BuildRenderTree(RenderTreeBuilder) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<AXOpen.Core.AxoTask>.Component AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinPrimitive) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, AXSharp.Connector.ValueTypes.ValueChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: axopen_core_blazor.dll Syntax public class AxoTaskCommandView : AxoTaskView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Constructors | Improve this Doc View Source AxoTaskCommandView() Declaration public AxoTaskCommandView() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable"
  },
  "api/AXOpen.Core.AxoTaskStatusView.html": {
    "href": "api/AXOpen.Core.AxoTaskStatusView.html",
    "title": "Class AxoTaskStatusView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoTaskStatusView Inheritance object Microsoft.AspNetCore.Components.ComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><AxoTask> AxoTaskView AxoTaskStatusView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable Inherited Members AxoTaskView.OnInitialized() AxoTaskView.Dispose() AxoTaskView.Disable AxoTaskView.HideRestoreButton AxoTaskView.IsDisabled AxoTaskView.Description AxoTaskView.BuildRenderTree(RenderTreeBuilder) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<AXOpen.Core.AxoTask>.Component AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinPrimitive) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, AXSharp.Connector.ValueTypes.ValueChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: axopen_core_blazor.dll Syntax public class AxoTaskStatusView : AxoTaskView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Constructors | Improve this Doc View Source AxoTaskStatusView() Declaration public AxoTaskStatusView() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable"
  },
  "api/AXOpen.Core.AxoTaskView.html": {
    "href": "api/AXOpen.Core.AxoTaskView.html",
    "title": "Class AxoTaskView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoTaskView Inheritance object Microsoft.AspNetCore.Components.ComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><AxoTask> AxoTaskView AxoTaskCommandView AxoTaskStatusView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable Inherited Members AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<AXOpen.Core.AxoTask>.Component AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinPrimitive) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, AXSharp.Connector.ValueTypes.ValueChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: axopen_core_blazor.dll Syntax public class AxoTaskView : RenderableComplexComponentBase<AxoTask>, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Properties | Improve this Doc View Source Description Declaration public string Description { get; } Property Value Type Description string | Improve this Doc View Source Disable Declaration [Parameter] public bool Disable { get; set; } Property Value Type Description bool | Improve this Doc View Source HideRestoreButton Declaration [Parameter] public bool HideRestoreButton { get; set; } Property Value Type Description bool | Improve this Doc View Source IsDisabled Declaration public bool IsDisabled { get; } Property Value Type Description bool Methods | Improve this Doc View Source BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters Type Name Description Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder Overrides Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source OnInitialized() Declaration protected override void OnInitialized() Overrides Microsoft.AspNetCore.Components.ComponentBase.OnInitialized() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable"
  },
  "api/AXOpen.Core.AxoToggleTask.html": {
    "href": "api/AXOpen.Core.AxoToggleTask.html",
    "title": "Class AxoToggleTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoToggleTask Inheritance object AxoObject AxoToggleTask Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject IAxoToggleTask Inherited Members AxoObject.Identity AxoObject.OnlineToPlainAsync(AxoObject) AxoObject.PlainToOnlineAsync(AxoObject) AxoObject.ShadowToPlainAsync(AxoObject) AxoObject.PlainToShadowAsync(AxoObject) AxoObject.GetChildren() AxoObject.GetKids() AxoObject.GetValueTags() AxoObject.AddValueTag(ITwinPrimitive) AxoObject.AddKid(ITwinElement) AxoObject.AddChild(ITwinObject) AxoObject.Connector AxoObject.GetConnector() AxoObject.GetSymbolTail() AxoObject.GetParent() AxoObject.Symbol AxoObject.AttributeName AxoObject.HumanReadable AxoObject.SymbolTail AxoObject.Parent AxoObject.Interpreter object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class AxoToggleTask : AxoObject, ITwinObject, ITwinElement, IAxoObject, IAxoToggleTask Constructors | Improve this Doc View Source AxoToggleTask(ITwinObject, string, string) Declaration public AxoToggleTask(ITwinObject parent, string readableTail, string symbolTail) Parameters Type Name Description AXSharp.Connector.ITwinObject parent string readableTail string symbolTail Properties | Improve this Doc View Source AttributeStateOffDesc Declaration public string AttributeStateOffDesc { get; set; } Property Value Type Description string | Improve this Doc View Source AttributeStateOnDesc Declaration public string AttributeStateOnDesc { get; set; } Property Value Type Description string | Improve this Doc View Source IsDisabled Declaration [ReadOnly] public OnlinerBool IsDisabled { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerBool | Improve this Doc View Source RemoteToggle Declaration public OnlinerBool RemoteToggle { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerBool | Improve this Doc View Source State Declaration [ReadOnly] public OnlinerBool State { get; } Property Value Type Description AXSharp.Connector.ValueTypes.OnlinerBool Methods | Improve this Doc View Source CreateEmptyPoco() Declaration public AxoToggleTask CreateEmptyPoco() Returns Type Description AxoToggleTask | Improve this Doc View Source OnlineToPlain<T>() Declaration public override Task<T> OnlineToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T Overrides AxoObject.OnlineToPlain<T>() | Improve this Doc View Source OnlineToPlainAsync() Declaration public Task<AxoToggleTask> OnlineToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoToggleTask> | Improve this Doc View Source OnlineToPlainAsync(AxoToggleTask) Declaration protected Task<AxoToggleTask> OnlineToPlainAsync(AxoToggleTask plain) Parameters Type Name Description AxoToggleTask plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoToggleTask> | Improve this Doc View Source PlainToOnline<T>(T) Declaration public override Task PlainToOnline<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T Overrides AXOpen.Core.AxoObject.PlainToOnline<T>(T) | Improve this Doc View Source PlainToOnlineAsync(AxoToggleTask) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToOnlineAsync(AxoToggleTask plain) Parameters Type Name Description AxoToggleTask plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source PlainToShadow<T>(T) Declaration public override Task PlainToShadow<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T Overrides AXOpen.Core.AxoObject.PlainToShadow<T>(T) | Improve this Doc View Source PlainToShadowAsync(AxoToggleTask) Declaration public Task<IEnumerable<ITwinPrimitive>> PlainToShadowAsync(AxoToggleTask plain) Parameters Type Name Description AxoToggleTask plain Returns Type Description System.Threading.Tasks.Task<TResult><System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive>> | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ShadowToPlain<T>() Declaration public override Task<T> ShadowToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T Overrides AxoObject.ShadowToPlain<T>() | Improve this Doc View Source ShadowToPlainAsync() Declaration public Task<AxoToggleTask> ShadowToPlainAsync() Returns Type Description System.Threading.Tasks.Task<TResult><AxoToggleTask> | Improve this Doc View Source ShadowToPlainAsync(AxoToggleTask) Declaration protected Task<AxoToggleTask> ShadowToPlainAsync(AxoToggleTask plain) Parameters Type Name Description AxoToggleTask plain Returns Type Description System.Threading.Tasks.Task<TResult><AxoToggleTask> Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement IAxoObject IAxoToggleTask"
  },
  "api/AXOpen.Core.AxoToggleTaskCommandView.html": {
    "href": "api/AXOpen.Core.AxoToggleTaskCommandView.html",
    "title": "Class AxoToggleTaskCommandView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoToggleTaskCommandView Inheritance object Microsoft.AspNetCore.Components.ComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><AxoToggleTask> AxoToggleTaskView AxoToggleTaskCommandView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable Inherited Members AxoToggleTaskView.OnInitialized() AxoToggleTaskView.Dispose() AxoToggleTaskView.Disable AxoToggleTaskView.IsDisabled AxoToggleTaskView.Description AxoToggleTaskView.BuildRenderTree(RenderTreeBuilder) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<AXOpen.Core.AxoToggleTask>.Component AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinPrimitive) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, AXSharp.Connector.ValueTypes.ValueChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: axopen_core_blazor.dll Syntax public class AxoToggleTaskCommandView : AxoToggleTaskView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Constructors | Improve this Doc View Source AxoToggleTaskCommandView() Declaration public AxoToggleTaskCommandView() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable"
  },
  "api/AXOpen.Core.AxoToggleTaskStatusView.html": {
    "href": "api/AXOpen.Core.AxoToggleTaskStatusView.html",
    "title": "Class AxoToggleTaskStatusView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoToggleTaskStatusView Inheritance object Microsoft.AspNetCore.Components.ComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><AxoToggleTask> AxoToggleTaskView AxoToggleTaskStatusView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable Inherited Members AxoToggleTaskView.OnInitialized() AxoToggleTaskView.Dispose() AxoToggleTaskView.Disable AxoToggleTaskView.IsDisabled AxoToggleTaskView.Description AxoToggleTaskView.BuildRenderTree(RenderTreeBuilder) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<AXOpen.Core.AxoToggleTask>.Component AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinPrimitive) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, AXSharp.Connector.ValueTypes.ValueChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: axopen_core_blazor.dll Syntax public class AxoToggleTaskStatusView : AxoToggleTaskView, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Constructors | Improve this Doc View Source AxoToggleTaskStatusView() Declaration public AxoToggleTaskStatusView() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable"
  },
  "api/AXOpen.Core.AxoToggleTaskView.html": {
    "href": "api/AXOpen.Core.AxoToggleTaskView.html",
    "title": "Class AxoToggleTaskView | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoToggleTaskView Inheritance object Microsoft.AspNetCore.Components.ComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<T><AxoToggleTask> AxoToggleTaskView AxoToggleTaskCommandView AxoToggleTaskStatusView Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable Inherited Members AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComplexComponentBase<AXOpen.Core.AxoToggleTask>.Component AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChange(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinObject) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateShadowValuesOnChange(AXSharp.Connector.ITwinPrimitive) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.UpdateValuesOnChangeOutFocus(AXSharp.Connector.ValueTypes.OnlinerBase) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChanged(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandleShadowPropertyChanged(object, AXSharp.Connector.ValueTypes.ValueChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HandlePropertyChangedOnOutFocus(object, System.ComponentModel.PropertyChangedEventArgs) AXSharp.Presentation.Blazor.Controls.RenderableContent.RenderableComponentBase.HasFocus Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: axopen_core_blazor.dll Syntax public class AxoToggleTaskView : RenderableComplexComponentBase<AxoToggleTask>, IComponent, IHandleEvent, IHandleAfterRender, IRenderableComponent, IRenderableComplexComponentBase, IDisposable Properties | Improve this Doc View Source Description Declaration public string Description { get; } Property Value Type Description string | Improve this Doc View Source Disable Declaration [Parameter] public bool Disable { get; set; } Property Value Type Description bool | Improve this Doc View Source IsDisabled Declaration public bool IsDisabled { get; } Property Value Type Description bool Methods | Improve this Doc View Source BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters Type Name Description Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder Overrides Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source OnInitialized() Declaration protected override void OnInitialized() Overrides Microsoft.AspNetCore.Components.ComponentBase.OnInitialized() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender AXSharp.Presentation.Blazor.Interfaces.IRenderableComponent AXSharp.Presentation.Blazor.Interfaces.IRenderableComplexComponentBase System.IDisposable"
  },
  "api/AXOpen.Core.Blazor._Imports.html": {
    "href": "api/AXOpen.Core.Blazor._Imports.html",
    "title": "Class _Imports | System.Dynamic.ExpandoObject",
    "keywords": "Class _Imports Inheritance object Microsoft.AspNetCore.Components.ComponentBase _Imports Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender Inherited Members Microsoft.AspNetCore.Components.ComponentBase.OnInitialized() Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core.Blazor Assembly: axopen_core_blazor.dll Syntax public class _Imports : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender Methods | Improve this Doc View Source BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters Type Name Description Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder Overrides Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender"
  },
  "api/AXOpen.Core.Blazor.html": {
    "href": "api/AXOpen.Core.Blazor.html",
    "title": "Namespace AXOpen.Core.Blazor | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen.Core.Blazor Classes _Imports"
  },
  "api/AXOpen.Core.blazor.Toaster.html": {
    "href": "api/AXOpen.Core.blazor.Toaster.html",
    "title": "Namespace AXOpen.Core.blazor.Toaster | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen.Core.blazor.Toaster Classes Toast Toaster ToastService"
  },
  "api/AXOpen.Core.blazor.Toaster.Toast.html": {
    "href": "api/AXOpen.Core.blazor.Toaster.Toast.html",
    "title": "Class Toast | System.Dynamic.ExpandoObject",
    "keywords": "Class Toast Inheritance object Toast Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core.blazor.Toaster Assembly: axopen_core_blazor.dll Syntax public class Toast Constructors | Improve this Doc View Source Toast(string, string, string, int) Declaration public Toast(string type, string title, string message, int time) Parameters Type Name Description string type string title string message int time Fields | Improve this Doc View Source Id Declaration public Guid Id Field Value Type Description System.Guid | Improve this Doc View Source Posted Declaration public DateTimeOffset Posted Field Value Type Description System.DateTimeOffset Properties | Improve this Doc View Source Message Declaration public string Message { get; set; } Property Value Type Description string | Improve this Doc View Source TimeToBurn Declaration public DateTimeOffset TimeToBurn { get; set; } Property Value Type Description System.DateTimeOffset | Improve this Doc View Source Title Declaration public string Title { get; set; } Property Value Type Description string | Improve this Doc View Source Type Declaration public string Type { get; set; } Property Value Type Description string"
  },
  "api/AXOpen.Core.blazor.Toaster.Toaster.html": {
    "href": "api/AXOpen.Core.blazor.Toaster.Toaster.html",
    "title": "Class Toaster | System.Dynamic.ExpandoObject",
    "keywords": "Class Toaster Inheritance object Microsoft.AspNetCore.Components.ComponentBase Toaster Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender System.IDisposable Inherited Members Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(bool) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(bool) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core.blazor.Toaster Assembly: axopen_core_blazor.dll Syntax public class Toaster : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender, IDisposable Methods | Improve this Doc View Source BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters Type Name Description Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder Overrides Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source OnInitialized() Declaration protected override void OnInitialized() Overrides Microsoft.AspNetCore.Components.ComponentBase.OnInitialized() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender System.IDisposable"
  },
  "api/AXOpen.Core.blazor.Toaster.ToastService.html": {
    "href": "api/AXOpen.Core.blazor.Toaster.ToastService.html",
    "title": "Class ToastService | System.Dynamic.ExpandoObject",
    "keywords": "Class ToastService Inheritance object ToastService Implements System.IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core.blazor.Toaster Assembly: axopen_core_blazor.dll Syntax public class ToastService : IDisposable Constructors | Improve this Doc View Source ToastService() Declaration public ToastService() Methods | Improve this Doc View Source AddToast(Toast) Declaration public void AddToast(Toast toast) Parameters Type Name Description Toast toast | Improve this Doc View Source AddToast(string, string, string, int) Declaration public void AddToast(string type, string title, string message, int time) Parameters Type Name Description string type string title string message int time | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source GetToasts() Declaration public List<Toast> GetToasts() Returns Type Description System.Collections.Generic.List<T><Toast> | Improve this Doc View Source RemoveAllToast() Declaration public void RemoveAllToast() | Improve this Doc View Source RemoveToast(Toast) Declaration public void RemoveToast(Toast toast) Parameters Type Name Description Toast toast Events | Improve this Doc View Source ToasterChanged Declaration public event EventHandler? ToasterChanged Event Type Type Description System.EventHandler Implements System.IDisposable"
  },
  "api/AXOpen.Core.ComponentDetailsAttribute.html": {
    "href": "api/AXOpen.Core.ComponentDetailsAttribute.html",
    "title": "Class ComponentDetailsAttribute | System.Dynamic.ExpandoObject",
    "keywords": "Class ComponentDetailsAttribute Inheritance object System.Attribute ComponentDetailsAttribute Inherited Members System.Attribute.Equals(object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, bool) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, bool) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, bool) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, bool) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, bool) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, bool) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, bool) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, bool) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, bool) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, bool) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, bool) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, bool) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, bool) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, bool) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, bool) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, bool) System.Attribute.Match(object) System.Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class ComponentDetailsAttribute : Attribute Constructors | Improve this Doc View Source ComponentDetailsAttribute() Declaration public ComponentDetailsAttribute() | Improve this Doc View Source ComponentDetailsAttribute(string) Declaration public ComponentDetailsAttribute(string tabName) Parameters Type Name Description string tabName Properties | Improve this Doc View Source TabName Declaration public string TabName { get; } Property Value Type Description string"
  },
  "api/AXOpen.Core.ComponentGroupContext.html": {
    "href": "api/AXOpen.Core.ComponentGroupContext.html",
    "title": "Class ComponentGroupContext | System.Dynamic.ExpandoObject",
    "keywords": "Class ComponentGroupContext Inheritance object ComponentGroupContext Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: axopen_core_blazor.dll Syntax public class ComponentGroupContext : ITwinObject, ITwinElement Constructors | Improve this Doc View Source ComponentGroupContext(ITwinObject, IList<ITwinElement>, string) Declaration public ComponentGroupContext(ITwinObject parent, IList<ITwinElement> kids, string tabName) Parameters Type Name Description AXSharp.Connector.ITwinObject parent System.Collections.Generic.IList<T><AXSharp.Connector.ITwinElement> kids string tabName | Improve this Doc View Source ComponentGroupContext(ITwinObject, IList<ITwinElement>) Declaration public ComponentGroupContext(ITwinObject parent, IList<ITwinElement> kids) Parameters Type Name Description AXSharp.Connector.ITwinObject parent System.Collections.Generic.IList<T><AXSharp.Connector.ITwinElement> kids Properties | Improve this Doc View Source AttributeName Declaration public string AttributeName { get; } Property Value Type Description string | Improve this Doc View Source HumanReadable Declaration public string HumanReadable { get; set; } Property Value Type Description string | Improve this Doc View Source Interpreter Declaration public Translator Interpreter { get; } Property Value Type Description AXSharp.Connector.Localizations.Translator | Improve this Doc View Source Symbol Declaration public string Symbol { get; } Property Value Type Description string | Improve this Doc View Source TabName Declaration public string TabName { get; set; } Property Value Type Description string Methods | Improve this Doc View Source AddChild(ITwinObject) Declaration public void AddChild(ITwinObject twinObject) Parameters Type Name Description AXSharp.Connector.ITwinObject twinObject | Improve this Doc View Source AddKid(ITwinElement) Declaration public void AddKid(ITwinElement kid) Parameters Type Name Description AXSharp.Connector.ITwinElement kid | Improve this Doc View Source AddValueTag(ITwinPrimitive) Declaration public void AddValueTag(ITwinPrimitive twinPrimitive) Parameters Type Name Description AXSharp.Connector.ITwinPrimitive twinPrimitive | Improve this Doc View Source GetChildren() Declaration public IEnumerable<ITwinObject> GetChildren() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinObject> | Improve this Doc View Source GetConnector() Declaration public Connector GetConnector() Returns Type Description AXSharp.Connector.Connector | Improve this Doc View Source GetKids() Declaration public IEnumerable<ITwinElement> GetKids() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinElement> | Improve this Doc View Source GetParent() Declaration public ITwinObject GetParent() Returns Type Description AXSharp.Connector.ITwinObject | Improve this Doc View Source GetSymbolTail() Declaration public string GetSymbolTail() Returns Type Description string | Improve this Doc View Source GetValueTags() Declaration public IEnumerable<ITwinPrimitive?> GetValueTags() Returns Type Description System.Collections.Generic.IEnumerable<T><AXSharp.Connector.ITwinPrimitive> | Improve this Doc View Source OnlineToPlain<T>() Declaration public Task<T> OnlineToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T | Improve this Doc View Source PlainToOnline<T>(T) Declaration public Task PlainToOnline<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source PlainToShadow<T>(T) Declaration public Task PlainToShadow<T>(T plain) Parameters Type Name Description T plain Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source Poll() Declaration public void Poll() | Improve this Doc View Source ShadowToPlain<T>() Declaration public Task<T> ShadowToPlain<T>() Returns Type Description System.Threading.Tasks.Task<TResult><T> Type Parameters Name Description T Implements AXSharp.Connector.ITwinObject AXSharp.Connector.ITwinElement"
  },
  "api/AXOpen.Core.ComponentHeaderAttribute.html": {
    "href": "api/AXOpen.Core.ComponentHeaderAttribute.html",
    "title": "Class ComponentHeaderAttribute | System.Dynamic.ExpandoObject",
    "keywords": "Class ComponentHeaderAttribute Inheritance object System.Attribute ComponentHeaderAttribute Inherited Members System.Attribute.Equals(object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, bool) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, bool) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, bool) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, bool) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, bool) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, bool) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, bool) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, bool) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, bool) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, bool) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, bool) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, bool) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, bool) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, bool) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, bool) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, bool) System.Attribute.Match(object) System.Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class ComponentHeaderAttribute : Attribute Constructors | Improve this Doc View Source ComponentHeaderAttribute() Declaration public ComponentHeaderAttribute() | Improve this Doc View Source ComponentHeaderAttribute(string) Declaration public ComponentHeaderAttribute(string tabName) Parameters Type Name Description string tabName Properties | Improve this Doc View Source TabName Declaration public string TabName { get; } Property Value Type Description string"
  },
  "api/AXOpen.Core.eAxoSequenceMode.html": {
    "href": "api/AXOpen.Core.eAxoSequenceMode.html",
    "title": "Enum eAxoSequenceMode | System.Dynamic.ExpandoObject",
    "keywords": "Enum eAxoSequenceMode Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public enum eAxoSequenceMode : short Fields Name Description Cyclic None RunOnce"
  },
  "api/AXOpen.Core.eAxoSteppingMode.html": {
    "href": "api/AXOpen.Core.eAxoSteppingMode.html",
    "title": "Enum eAxoSteppingMode | System.Dynamic.ExpandoObject",
    "keywords": "Enum eAxoSteppingMode Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public enum eAxoSteppingMode : short Fields Name Description Continous None StepByStep"
  },
  "api/AXOpen.Core.eAxoTaskState.html": {
    "href": "api/AXOpen.Core.eAxoTaskState.html",
    "title": "Enum eAxoTaskState | System.Dynamic.ExpandoObject",
    "keywords": "Enum eAxoTaskState Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public enum eAxoTaskState : short Fields Name Description Aborted Busy Disabled Done Error Kicking Ready"
  },
  "api/AXOpen.Core.html": {
    "href": "api/AXOpen.Core.html",
    "title": "Namespace AXOpen.Core | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen.Core Classes _NULL_CONTEXT _NULL_OBJECT _NULL_RTC AxoComponent AxoComponentCommandView AxoComponentStatusView AxoComponentView AxoContext AxoContextEnvironment AxoMomentaryTask AxoMomentaryTaskCommandView AxoMomentaryTaskStatusView AxoMomentaryTaskView AxoObject AxoRemoteTask AxoSequencer AxoSequencerCommandView AxoSequencerStatusView AxoSequencerView AxoStep AxoStepCommandView AxoStepStatusView AxoStepView AxoTask AxoTaskCommandView AxoTaskStatusView AxoTaskView AxoToggleTask AxoToggleTaskCommandView AxoToggleTaskStatusView AxoToggleTaskView ComponentDetailsAttribute ComponentGroupContext ComponentHeaderAttribute MultipleRemoteCallInitializationException ToastMessage Interfaces IAxoComponent IAxoContext IAxoContextEnvironment IAxoCoordinator IAxoManuallyControllable IAxoMomentaryTask IAxoObject IAxoStep IAxoTask IAxoTaskState IAxoToggleTask Enums AxoCoordinatorStates eAxoSequenceMode eAxoSteppingMode eAxoTaskState"
  },
  "api/AXOpen.Core.IAxoComponent.html": {
    "href": "api/AXOpen.Core.IAxoComponent.html",
    "title": "Interface IAxoComponent | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoComponent Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoComponent"
  },
  "api/AXOpen.Core.IAxoContext.html": {
    "href": "api/AXOpen.Core.IAxoContext.html",
    "title": "Interface IAxoContext | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoContext Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoContext"
  },
  "api/AXOpen.Core.IAxoContextEnvironment.html": {
    "href": "api/AXOpen.Core.IAxoContextEnvironment.html",
    "title": "Interface IAxoContextEnvironment | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoContextEnvironment Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoContextEnvironment"
  },
  "api/AXOpen.Core.IAxoCoordinator.html": {
    "href": "api/AXOpen.Core.IAxoCoordinator.html",
    "title": "Interface IAxoCoordinator | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoCoordinator Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoCoordinator"
  },
  "api/AXOpen.Core.IAxoManuallyControllable.html": {
    "href": "api/AXOpen.Core.IAxoManuallyControllable.html",
    "title": "Interface IAxoManuallyControllable | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoManuallyControllable Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoManuallyControllable"
  },
  "api/AXOpen.Core.IAxoMomentaryTask.html": {
    "href": "api/AXOpen.Core.IAxoMomentaryTask.html",
    "title": "Interface IAxoMomentaryTask | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoMomentaryTask Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoMomentaryTask"
  },
  "api/AXOpen.Core.IAxoObject.html": {
    "href": "api/AXOpen.Core.IAxoObject.html",
    "title": "Interface IAxoObject | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoObject Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoObject"
  },
  "api/AXOpen.Core.IAxoStep.html": {
    "href": "api/AXOpen.Core.IAxoStep.html",
    "title": "Interface IAxoStep | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoStep Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoStep"
  },
  "api/AXOpen.Core.IAxoTask.html": {
    "href": "api/AXOpen.Core.IAxoTask.html",
    "title": "Interface IAxoTask | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoTask Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoTask"
  },
  "api/AXOpen.Core.IAxoTaskState.html": {
    "href": "api/AXOpen.Core.IAxoTaskState.html",
    "title": "Interface IAxoTaskState | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoTaskState Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoTaskState"
  },
  "api/AXOpen.Core.IAxoToggleTask.html": {
    "href": "api/AXOpen.Core.IAxoToggleTask.html",
    "title": "Interface IAxoToggleTask | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoToggleTask Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoToggleTask"
  },
  "api/AXOpen.Core.MultipleRemoteCallInitializationException.html": {
    "href": "api/AXOpen.Core.MultipleRemoteCallInitializationException.html",
    "title": "Class MultipleRemoteCallInitializationException | System.Dynamic.ExpandoObject",
    "keywords": "Class MultipleRemoteCallInitializationException Inheritance object System.Exception MultipleRemoteCallInitializationException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class MultipleRemoteCallInitializationException : Exception, ISerializable Constructors | Improve this Doc View Source MultipleRemoteCallInitializationException() Declaration public MultipleRemoteCallInitializationException() | Improve this Doc View Source MultipleRemoteCallInitializationException(SerializationInfo, StreamingContext) Initializes a new instance of the MultipleRemoteCallInitializationException class with serialized data. Declaration protected MultipleRemoteCallInitializationException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. Exceptions Type Condition System.ArgumentNullException The info parameter is null. System.Runtime.Serialization.SerializationException The class name is null or System.Exception.HResult is zero (0). | Improve this Doc View Source MultipleRemoteCallInitializationException(string, Exception) Initializes a new instance of the MultipleRemoteCallInitializationException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public MultipleRemoteCallInitializationException(string message, Exception innerException) Parameters Type Name Description string message The error message that explains the reason for the exception. System.Exception innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. | Improve this Doc View Source MultipleRemoteCallInitializationException(string) Initializes a new instance of the MultipleRemoteCallInitializationException class with a specified error message. Declaration public MultipleRemoteCallInitializationException(string message) Parameters Type Name Description string message The message that describes the error. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/AXOpen.Core.Resources.html": {
    "href": "api/AXOpen.Core.Resources.html",
    "title": "Namespace AXOpen.Core.Resources | System.Dynamic.ExpandoObject",
    "keywords": "Namespace AXOpen.Core.Resources Classes PlcStringResources A strongly-typed resource class, for looking up localized strings, etc."
  },
  "api/AXOpen.Core.Resources.PlcStringResources.html": {
    "href": "api/AXOpen.Core.Resources.PlcStringResources.html",
    "title": "Class PlcStringResources | System.Dynamic.ExpandoObject",
    "keywords": "Class PlcStringResources A strongly-typed resource class, for looking up localized strings, etc. Inheritance object PlcStringResources Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core.Resources Assembly: ix_ax_axopen_core.dll Syntax public class PlcStringResources Properties | Improve this Doc View Source Command_state Looks up a localized string similar to Command state. Declaration public static string Command_state { get; } Property Value Type Description string | Improve this Doc View Source Culture Overrides the current thread's CurrentUICulture property for all resource lookups using this strongly typed resource class. Declaration public static CultureInfo Culture { get; set; } Property Value Type Description System.Globalization.CultureInfo | Improve this Doc View Source ResourceManager Returns the cached ResourceManager instance used by this class. Declaration public static ResourceManager ResourceManager { get; } Property Value Type Description System.Resources.ResourceManager | Improve this Doc View Source Run_step Looks up a localized string similar to Run step. Declaration public static string Run_step { get; } Property Value Type Description string | Improve this Doc View Source Sequence_mode Looks up a localized string similar to Sequence mode. Declaration public static string Sequence_mode { get; } Property Value Type Description string | Improve this Doc View Source Stepping_mode Looks up a localized string similar to Stepping mode. Declaration public static string Stepping_mode { get; } Property Value Type Description string"
  },
  "api/AXOpen.Core.ToastMessage.html": {
    "href": "api/AXOpen.Core.ToastMessage.html",
    "title": "Class ToastMessage | System.Dynamic.ExpandoObject",
    "keywords": "Class ToastMessage Inheritance object CommunityToolkit.Mvvm.Messaging.Messages.ValueChangedMessage<T><Toast> ToastMessage Inherited Members CommunityToolkit.Mvvm.Messaging.Messages.ValueChangedMessage<AXOpen.Core.blazor.Toaster.Toast>.Value object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AXOpen.Core Assembly: axopen_core_blazor.dll Syntax public class ToastMessage : ValueChangedMessage<Toast> Constructors | Improve this Doc View Source ToastMessage(Toast) Declaration public ToastMessage(Toast toast) Parameters Type Name Description Toast toast"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "IX API Documentation | System.Dynamic.ExpandoObject",
    "keywords": "IX API Documentation"
  },
  "api/ix_ax_axopen_core.html": {
    "href": "api/ix_ax_axopen_core.html",
    "title": "Namespace ix_ax_axopen_core | System.Dynamic.ExpandoObject",
    "keywords": "Namespace ix_ax_axopen_core Classes PlcTranslator"
  },
  "api/ix_ax_axopen_core.PlcTranslator.html": {
    "href": "api/ix_ax_axopen_core.PlcTranslator.html",
    "title": "Class PlcTranslator | System.Dynamic.ExpandoObject",
    "keywords": "Class PlcTranslator Inheritance object AXSharp.Connector.Localizations.Translator PlcTranslator Inherited Members AXSharp.Connector.Localizations.Translator.Translate(string, AXSharp.Connector.ITwinElement) AXSharp.Connector.Localizations.Translator.SetLocalizationResource(System.Type) AXSharp.Connector.Localizations.Translator.Localize(string, AXSharp.Connector.ITwinElement) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: ix_ax_axopen_core Assembly: ix_ax_axopen_core.dll Syntax public sealed class PlcTranslator : Translator Properties | Improve this Doc View Source Instance Declaration public static PlcTranslator Instance { get; } Property Value Type Description PlcTranslator"
  },
  "api/Pocos.AXOpen.Core._NULL_CONTEXT.html": {
    "href": "api/Pocos.AXOpen.Core._NULL_CONTEXT.html",
    "title": "Class _NULL_CONTEXT | System.Dynamic.ExpandoObject",
    "keywords": "Class _NULL_CONTEXT Inheritance object _NULL_CONTEXT Implements AXSharp.Connector.IPlain IAxoContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class _NULL_CONTEXT : IPlain, IAxoContext Implements AXSharp.Connector.IPlain IAxoContext"
  },
  "api/Pocos.AXOpen.Core._NULL_OBJECT.html": {
    "href": "api/Pocos.AXOpen.Core._NULL_OBJECT.html",
    "title": "Class _NULL_OBJECT | System.Dynamic.ExpandoObject",
    "keywords": "Class _NULL_OBJECT Inheritance object _NULL_OBJECT Implements AXSharp.Connector.IPlain IAxoObject Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class _NULL_OBJECT : IPlain, IAxoObject Implements AXSharp.Connector.IPlain IAxoObject"
  },
  "api/Pocos.AXOpen.Core._NULL_RTC.html": {
    "href": "api/Pocos.AXOpen.Core._NULL_RTC.html",
    "title": "Class _NULL_RTC | System.Dynamic.ExpandoObject",
    "keywords": "Class _NULL_RTC Inheritance object _NULL_RTC Implements AXSharp.Connector.IPlain Pocos.AXOpen.Rtc.IAxoRtc Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class _NULL_RTC : IPlain, IAxoRtc Implements AXSharp.Connector.IPlain Pocos.AXOpen.Rtc.IAxoRtc"
  },
  "api/Pocos.AXOpen.Core.AxoComponent.html": {
    "href": "api/Pocos.AXOpen.Core.AxoComponent.html",
    "title": "Class AxoComponent | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoComponent Inheritance object AxoObject AxoComponent Implements IAxoObject AXSharp.Connector.IPlain IAxoComponent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class AxoComponent : AxoObject, IAxoObject, IPlain, IAxoComponent Properties | Improve this Doc View Source _isManuallyControllable Declaration public bool _isManuallyControllable { get; set; } Property Value Type Description bool Implements IAxoObject AXSharp.Connector.IPlain IAxoComponent"
  },
  "api/Pocos.AXOpen.Core.AxoContext.html": {
    "href": "api/Pocos.AXOpen.Core.AxoContext.html",
    "title": "Class AxoContext | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoContext Inheritance object AxoContext Implements AXSharp.Connector.IPlain IAxoContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class AxoContext : IPlain, IAxoContext Implements AXSharp.Connector.IPlain IAxoContext"
  },
  "api/Pocos.AXOpen.Core.AxoContextEnvironment.html": {
    "href": "api/Pocos.AXOpen.Core.AxoContextEnvironment.html",
    "title": "Class AxoContextEnvironment | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoContextEnvironment Inheritance object AxoContextEnvironment Implements AXSharp.Connector.IPlain IAxoContextEnvironment Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class AxoContextEnvironment : IPlain, IAxoContextEnvironment Implements AXSharp.Connector.IPlain IAxoContextEnvironment"
  },
  "api/Pocos.AXOpen.Core.AxoMomentaryTask.html": {
    "href": "api/Pocos.AXOpen.Core.AxoMomentaryTask.html",
    "title": "Class AxoMomentaryTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoMomentaryTask Inheritance object AxoObject AxoMomentaryTask Implements IAxoObject AXSharp.Connector.IPlain IAxoMomentaryTask Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class AxoMomentaryTask : AxoObject, IAxoObject, IPlain, IAxoMomentaryTask Properties | Improve this Doc View Source IsDisabled Declaration public bool IsDisabled { get; set; } Property Value Type Description bool | Improve this Doc View Source RemoteSwitchOn Declaration public bool RemoteSwitchOn { get; set; } Property Value Type Description bool | Improve this Doc View Source State Declaration public bool State { get; set; } Property Value Type Description bool Implements IAxoObject AXSharp.Connector.IPlain IAxoMomentaryTask"
  },
  "api/Pocos.AXOpen.Core.AxoObject.html": {
    "href": "api/Pocos.AXOpen.Core.AxoObject.html",
    "title": "Class AxoObject | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoObject Inheritance object AxoObject AxoComponent AxoMomentaryTask AxoTask AxoToggleTask Implements AXSharp.Connector.IPlain IAxoObject Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class AxoObject : IPlain, IAxoObject Implements AXSharp.Connector.IPlain IAxoObject"
  },
  "api/Pocos.AXOpen.Core.AxoRemoteTask.html": {
    "href": "api/Pocos.AXOpen.Core.AxoRemoteTask.html",
    "title": "Class AxoRemoteTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoRemoteTask Inheritance object AxoObject AxoTask AxoRemoteTask Implements IAxoObject IAxoTask IAxoTaskState AXSharp.Connector.IPlain Inherited Members AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.ErrorDetails object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class AxoRemoteTask : AxoTask, IAxoObject, IAxoTask, IAxoTaskState, IPlain Properties | Improve this Doc View Source DoneSignature Declaration public ulong DoneSignature { get; set; } Property Value Type Description ulong | Improve this Doc View Source HasRemoteException Declaration public bool HasRemoteException { get; set; } Property Value Type Description bool | Improve this Doc View Source IsBeingCalledCounter Declaration public short IsBeingCalledCounter { get; set; } Property Value Type Description short | Improve this Doc View Source IsInitialized Declaration public bool IsInitialized { get; set; } Property Value Type Description bool Implements IAxoObject IAxoTask IAxoTaskState AXSharp.Connector.IPlain"
  },
  "api/Pocos.AXOpen.Core.AxoSequencer.html": {
    "href": "api/Pocos.AXOpen.Core.AxoSequencer.html",
    "title": "Class AxoSequencer | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoSequencer Inheritance object AxoObject AxoTask AxoSequencer Implements IAxoObject IAxoTask IAxoTaskState AXSharp.Connector.IPlain Inherited Members AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.ErrorDetails object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class AxoSequencer : AxoTask, IAxoObject, IAxoTask, IAxoTaskState, IPlain Properties | Improve this Doc View Source CurrentOrder Declaration public ulong CurrentOrder { get; set; } Property Value Type Description ulong | Improve this Doc View Source SequenceMode Declaration public short SequenceMode { get; set; } Property Value Type Description short | Improve this Doc View Source StepBackwardCommand Declaration public AxoTask StepBackwardCommand { get; set; } Property Value Type Description AxoTask | Improve this Doc View Source StepForwardCommand Declaration public AxoTask StepForwardCommand { get; set; } Property Value Type Description AxoTask | Improve this Doc View Source StepIn Declaration public AxoTask StepIn { get; set; } Property Value Type Description AxoTask | Improve this Doc View Source SteppingMode Declaration public short SteppingMode { get; set; } Property Value Type Description short Implements IAxoObject IAxoTask IAxoTaskState AXSharp.Connector.IPlain"
  },
  "api/Pocos.AXOpen.Core.AxoStep.html": {
    "href": "api/Pocos.AXOpen.Core.AxoStep.html",
    "title": "Class AxoStep | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoStep Inheritance object AxoObject AxoTask AxoStep Implements IAxoObject IAxoTask IAxoTaskState AXSharp.Connector.IPlain IAxoStep Inherited Members AxoTask.Status AxoTask.IsDisabled AxoTask.RemoteInvoke AxoTask.RemoteRestore AxoTask.RemoteAbort AxoTask.RemoteResume AxoTask.StartSignature AxoTask.ErrorDetails object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class AxoStep : AxoTask, IAxoObject, IAxoTask, IAxoTaskState, IPlain, IAxoStep Properties | Improve this Doc View Source IsActive Declaration public bool IsActive { get; set; } Property Value Type Description bool | Improve this Doc View Source IsEnabled Declaration public bool IsEnabled { get; set; } Property Value Type Description bool | Improve this Doc View Source Order Declaration public ulong Order { get; set; } Property Value Type Description ulong | Improve this Doc View Source StepDescription Declaration public string StepDescription { get; set; } Property Value Type Description string Implements IAxoObject IAxoTask IAxoTaskState AXSharp.Connector.IPlain IAxoStep"
  },
  "api/Pocos.AXOpen.Core.AxoTask.html": {
    "href": "api/Pocos.AXOpen.Core.AxoTask.html",
    "title": "Class AxoTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoTask Inheritance object AxoObject AxoTask AxoRemoteTask AxoSequencer AxoStep Implements IAxoObject AXSharp.Connector.IPlain IAxoTask IAxoTaskState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class AxoTask : AxoObject, IAxoObject, IPlain, IAxoTask, IAxoTaskState Properties | Improve this Doc View Source ErrorDetails Declaration public string ErrorDetails { get; set; } Property Value Type Description string | Improve this Doc View Source IsDisabled Declaration public bool IsDisabled { get; set; } Property Value Type Description bool | Improve this Doc View Source RemoteAbort Declaration public bool RemoteAbort { get; set; } Property Value Type Description bool | Improve this Doc View Source RemoteInvoke Declaration public bool RemoteInvoke { get; set; } Property Value Type Description bool | Improve this Doc View Source RemoteRestore Declaration public bool RemoteRestore { get; set; } Property Value Type Description bool | Improve this Doc View Source RemoteResume Declaration public bool RemoteResume { get; set; } Property Value Type Description bool | Improve this Doc View Source StartSignature Declaration public ulong StartSignature { get; set; } Property Value Type Description ulong | Improve this Doc View Source Status Declaration public short Status { get; set; } Property Value Type Description short Implements IAxoObject AXSharp.Connector.IPlain IAxoTask IAxoTaskState"
  },
  "api/Pocos.AXOpen.Core.AxoToggleTask.html": {
    "href": "api/Pocos.AXOpen.Core.AxoToggleTask.html",
    "title": "Class AxoToggleTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoToggleTask Inheritance object AxoObject AxoToggleTask Implements IAxoObject AXSharp.Connector.IPlain IAxoToggleTask Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public class AxoToggleTask : AxoObject, IAxoObject, IPlain, IAxoToggleTask Properties | Improve this Doc View Source IsDisabled Declaration public bool IsDisabled { get; set; } Property Value Type Description bool | Improve this Doc View Source RemoteToggle Declaration public bool RemoteToggle { get; set; } Property Value Type Description bool | Improve this Doc View Source State Declaration public bool State { get; set; } Property Value Type Description bool Implements IAxoObject AXSharp.Connector.IPlain IAxoToggleTask"
  },
  "api/Pocos.AXOpen.Core.html": {
    "href": "api/Pocos.AXOpen.Core.html",
    "title": "Namespace Pocos.AXOpen.Core | System.Dynamic.ExpandoObject",
    "keywords": "Namespace Pocos.AXOpen.Core Classes _NULL_CONTEXT _NULL_OBJECT _NULL_RTC AxoComponent AxoContext AxoContextEnvironment AxoMomentaryTask AxoObject AxoRemoteTask AxoSequencer AxoStep AxoTask AxoToggleTask Interfaces IAxoComponent IAxoContext IAxoContextEnvironment IAxoCoordinator IAxoManuallyControllable IAxoMomentaryTask IAxoObject IAxoStep IAxoTask IAxoTaskState IAxoToggleTask"
  },
  "api/Pocos.AXOpen.Core.IAxoComponent.html": {
    "href": "api/Pocos.AXOpen.Core.IAxoComponent.html",
    "title": "Interface IAxoComponent | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoComponent Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoComponent"
  },
  "api/Pocos.AXOpen.Core.IAxoContext.html": {
    "href": "api/Pocos.AXOpen.Core.IAxoContext.html",
    "title": "Interface IAxoContext | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoContext Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoContext"
  },
  "api/Pocos.AXOpen.Core.IAxoContextEnvironment.html": {
    "href": "api/Pocos.AXOpen.Core.IAxoContextEnvironment.html",
    "title": "Interface IAxoContextEnvironment | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoContextEnvironment Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoContextEnvironment"
  },
  "api/Pocos.AXOpen.Core.IAxoCoordinator.html": {
    "href": "api/Pocos.AXOpen.Core.IAxoCoordinator.html",
    "title": "Interface IAxoCoordinator | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoCoordinator Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoCoordinator"
  },
  "api/Pocos.AXOpen.Core.IAxoManuallyControllable.html": {
    "href": "api/Pocos.AXOpen.Core.IAxoManuallyControllable.html",
    "title": "Interface IAxoManuallyControllable | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoManuallyControllable Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoManuallyControllable"
  },
  "api/Pocos.AXOpen.Core.IAxoMomentaryTask.html": {
    "href": "api/Pocos.AXOpen.Core.IAxoMomentaryTask.html",
    "title": "Interface IAxoMomentaryTask | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoMomentaryTask Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoMomentaryTask"
  },
  "api/Pocos.AXOpen.Core.IAxoObject.html": {
    "href": "api/Pocos.AXOpen.Core.IAxoObject.html",
    "title": "Interface IAxoObject | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoObject Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoObject"
  },
  "api/Pocos.AXOpen.Core.IAxoStep.html": {
    "href": "api/Pocos.AXOpen.Core.IAxoStep.html",
    "title": "Interface IAxoStep | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoStep Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoStep"
  },
  "api/Pocos.AXOpen.Core.IAxoTask.html": {
    "href": "api/Pocos.AXOpen.Core.IAxoTask.html",
    "title": "Interface IAxoTask | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoTask Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoTask"
  },
  "api/Pocos.AXOpen.Core.IAxoTaskState.html": {
    "href": "api/Pocos.AXOpen.Core.IAxoTaskState.html",
    "title": "Interface IAxoTaskState | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoTaskState Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoTaskState"
  },
  "api/Pocos.AXOpen.Core.IAxoToggleTask.html": {
    "href": "api/Pocos.AXOpen.Core.IAxoToggleTask.html",
    "title": "Interface IAxoToggleTask | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoToggleTask Namespace: Pocos.AXOpen.Core Assembly: ix_ax_axopen_core.dll Syntax public interface IAxoToggleTask"
  },
  "apictrl/index.html": {
    "href": "apictrl/index.html",
    "title": "IX API Documentation | System.Dynamic.ExpandoObject",
    "keywords": "IX API Documentation"
  },
  "apictrl/plc.AXOpen.Core._NULL_CONTEXT.html": {
    "href": "apictrl/plc.AXOpen.Core._NULL_CONTEXT.html",
    "title": "Class _NULL_CONTEXT | System.Dynamic.ExpandoObject",
    "keywords": "Class _NULL_CONTEXT Provides an empty context for uninitialized objects. Inheritance _NULL_CONTEXT Implements IAxoContext Namespace: plc.AXOpen.Core Assembly: @ix-ax/axopen.core.dll Syntax CLASS _NULL_CONTEXT Properties NULL_RTC Declaration NULL_RTC : AXOpen.Core._NULL_RTC Property Value Type Description Methods CreateIdentity Declaration Public ULINT CreateIdentity() Returns Type Description ULINT OpenCycleCount Declaration Public ULINT OpenCycleCount() Returns Type Description ULINT GetRtc Declaration Public UNDEFINED GetRtc() Returns Type Description UNDEFINED InjectRtc Declaration Public VOID InjectRtc(in plc.UNDEFINED Rtc) Parameters Type Name Description UNDEFINED Rtc Returns Type Description Environment Declaration Public AXOpen.Core.IAxoContextEnvironment Environment() Returns Type Description IAxoContextEnvironment Implements IAxoContext"
  },
  "apictrl/plc.AXOpen.Core._NULL_OBJECT.html": {
    "href": "apictrl/plc.AXOpen.Core._NULL_OBJECT.html",
    "title": "Class _NULL_OBJECT | System.Dynamic.ExpandoObject",
    "keywords": "Class _NULL_OBJECT Provides an empty object for uninitialized objects. Inheritance _NULL_OBJECT Implements IAxoObject Namespace: plc.AXOpen.Core Assembly: @ix-ax/axopen.core.dll Syntax CLASS _NULL_OBJECT Properties NULL_CONTEXT Declaration NULL_CONTEXT : AXOpen.Core._NULL_CONTEXT Property Value Type Description Methods GetIdentity Declaration Public ULINT GetIdentity() Returns Type Description ULINT GetContext Declaration Public AXOpen.Core.IAxoContext GetContext() Returns Type Description IAxoContext Implements IAxoObject"
  },
  "apictrl/plc.AXOpen.Core._NULL_RTC.html": {
    "href": "apictrl/plc.AXOpen.Core._NULL_RTC.html",
    "title": "Class _NULL_RTC | System.Dynamic.ExpandoObject",
    "keywords": "Class _NULL_RTC Provides an empty RTC object for uninitialized RTC. Inheritance _NULL_RTC Namespace: plc.AXOpen.Core Assembly: @ix-ax/axopen.core.dll Syntax CLASS _NULL_RTC Properties _null_time Declaration _null_time : LDATE_AND_TIME Property Value Type Description Methods NowUTC Declaration Public LDATE_AND_TIME NowUTC() Returns Type Description LDATE_AND_TIME"
  },
  "apictrl/plc.AXOpen.Core.AxoComponent.html": {
    "href": "apictrl/plc.AXOpen.Core.AxoComponent.html",
    "title": "Class AxoComponent | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoComponent Inheritance AxoObject AxoComponent Implements IAxoComponent Inherited Members Identity GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Environment() Namespace: plc.AXOpen.Core Assembly: @ix-ax/axopen.core.dll Syntax CLASS AxoComponent Properties _manualControlContextCycle Declaration _manualControlContextCycle : ULINT Property Value Type Description _isManuallyControllable Declaration _isManuallyControllable : BOOL Property Value Type Description Methods ActivateManualControl Executes the logic for manual-maintenance control. Declaration Public VOID ActivateManualControl() Returns Type Description IsManuallyControllable Gets whether the AxoComponent is manually controllable.To make the AxoComponent manually controllable, it is necessary to call the ActivateManualMode() method cyclically. Declaration Public BOOL IsManuallyControllable() Returns Type Description BOOL CheckIfManualControlIsActivated Declaration Private VOID CheckIfManualControlIsActivated() Returns Type Description Open Declaration Protected VOID Open() Returns Type Description Run Declaration Public VOID Run() Returns Type Description Close Declaration Protected VOID Close() Returns Type Description Restore Restores this instance. This method must be implemented in derived class. Declaration Protected AXOpen.Core.IAxoTask Restore() Returns Type Description IAxoTask ManualControl Custom logic for manual control of the AxoComponent.This method must be implemented in derived class. Declaration Protected VOID ManualControl() Returns Type Description Implements IAxoComponent"
  },
  "apictrl/plc.AXOpen.Core.AxoContext.html": {
    "href": "apictrl/plc.AXOpen.Core.AxoContext.html",
    "title": "Class AxoContext | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoContext Provides base for contextualized entry of AXOpen application.This class is abstract and must be inherited. Inheritance AxoContext Implements IAxoContext Namespace: plc.AXOpen.Core Assembly: @ix-ax/axopen.core.dll Syntax CLASS AxoContext Properties _openCounter Declaration _openCounter : ULINT Property Value Type Description _closeCounter Declaration _closeCounter : ULINT Property Value Type Description _identityCounter Declaration _identityCounter : ULINT Property Value Type Description _messagingLevel Declaration _messagingLevel : UNDEFINED Property Value Type Description _environment Declaration _environment : AXOpen.Core.IAxoContextEnvironment Property Value Type Description NULL_RTC Declaration NULL_RTC : AXOpen.Core._NULL_RTC Property Value Type Description _rtc Declaration _rtc : UNDEFINED Property Value Type Description Methods Open Declaration Private ULINT Open() Returns Type Description ULINT Close Declaration Private ULINT Close() Returns Type Description ULINT Run Runs the cycle of this context. This method must be called cyclically in a PLC task. Declaration Public VOID Run() Returns Type Description OpenCycleCount Gets the value of current context cycle counter. Declaration Public ULINT OpenCycleCount() Returns Type Description ULINT ClosedCycleCount Declaration Public ULINT ClosedCycleCount() Returns Type Description ULINT CreateIdentity Declaration Public ULINT CreateIdentity() Returns Type Description ULINT PeekIdentity Declaration Public ULINT PeekIdentity() Returns Type Description ULINT GetRtc Declaration Public UNDEFINED GetRtc() Returns Type Description UNDEFINED InjectRtc Declaration Public VOID InjectRtc(in plc.UNDEFINED Rtc) Parameters Type Name Description UNDEFINED Rtc Returns Type Description Environment Declaration Public AXOpen.Core.IAxoContextEnvironment Environment() Returns Type Description IAxoContextEnvironment Main The entry point for the context. The call tree of the context start here and all the logic of given contextmust be placed here.This method must be overridden in derived class. Declaration Protected VOID Main() Returns Type Description Implements IAxoContext"
  },
  "apictrl/plc.AXOpen.Core.AxoContextEnvironment.html": {
    "href": "apictrl/plc.AXOpen.Core.AxoContextEnvironment.html",
    "title": "Class AxoContextEnvironment | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoContextEnvironment Inheritance AxoContextEnvironment Implements IAxoContextEnvironment Namespace: plc.AXOpen.Core Assembly: @ix-ax/axopen.core.dll Syntax CLASS AxoContextEnvironment Properties _messenger Declaration _messenger : UNDEFINED Property Value Type Description Methods Messaging Declaration Public UNDEFINED Messaging() Returns Type Description UNDEFINED Implements IAxoContextEnvironment"
  },
  "apictrl/plc.AXOpen.Core.AxoCoordinatorStates.html": {
    "href": "apictrl/plc.AXOpen.Core.AxoCoordinatorStates.html",
    "title": "Enum AxoCoordinatorStates | System.Dynamic.ExpandoObject",
    "keywords": "Enum AxoCoordinatorStates Namespace: plc.AXOpen.Core Assembly: @ix-ax/axopen.core.dll Syntax AxoCoordinatorStates : AXOpen.Core.AxoCoordinatorStates"
  },
  "apictrl/plc.AXOpen.Core.AxoMomentaryTask.html": {
    "href": "apictrl/plc.AXOpen.Core.AxoMomentaryTask.html",
    "title": "Class AxoMomentaryTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoMomentaryTask Provides basic momentary on function.To get the actual state of the toggle task, '''IsSwitchedOn()''', '''IsSwitchedOff()''' AND '''GetState()''' methods are available. Inheritance AxoObject AxoMomentaryTask Implements IAxoMomentaryTask Inherited Members Identity GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Environment() Namespace: plc.AXOpen.Core Assembly: @ix-ax/axopen.core.dll Syntax CLASS AxoMomentaryTask Properties State Declaration State : BOOL Property Value Type Description RemoteSwitchOn Remote request to set the state of this task to '''TRUE'''. Declaration RemoteSwitchOn : BOOL Property Value Type Description IsDisabled Gets or sets whether this task is disabled for any manipulations. Declaration IsDisabled : BOOL Property Value Type Description _openCycleCount Declaration _openCycleCount : ULINT Property Value Type Description Methods GetState Gets the actual state of this task. Declaration Public BOOL GetState() Returns Type Description BOOL IsRunCalledInThisPlcCycle Declaration Private BOOL IsRunCalledInThisPlcCycle() Returns Type Description BOOL WasRunCalledInPreviousPlcCycle Declaration Private BOOL WasRunCalledInPreviousPlcCycle() Returns Type Description BOOL Run This method needs to be called cyclically. Declaration Public BOOL Run() Returns Type Description BOOL SetIsDisabled Sets the value of the IsDisabled variable Declaration Public VOID SetIsDisabled(in plc.BOOL Disabled) Parameters Type Name Description BOOL Disabled Returns Type Description GetIsDisabled Returns the value of the IsDisabled variable Declaration Public BOOL GetIsDisabled() Returns Type Description BOOL IsSwitchedOn Returns TRUE if task is switched on Declaration Public BOOL IsSwitchedOn() Returns Type Description BOOL IsSwitchedOff Returns TRUE if task is switched off Declaration Public BOOL IsSwitchedOff() Returns Type Description BOOL SwitchOff Declaration Private VOID SwitchOff() Returns Type Description SwitchOn Declaration Private VOID SwitchOn() Returns Type Description OnSwitchedOn Executes ones when momentary task changes its state from '''FALSE''' to '''TRUE'''. Declaration Protected VOID OnSwitchedOn() Returns Type Description OnSwitchedOff Executes ones when momentary task changes its state from '''TRUE''' to '''FALSE'''. Declaration Protected VOID OnSwitchedOff() Returns Type Description OnStateChanged Executes ones when momentary task changes its state. Declaration Protected VOID OnStateChanged() Returns Type Description SwitchedOn Executes while the task is in On state. Declaration Protected VOID SwitchedOn() Returns Type Description SwitchedOff Executes while the task is in Off state. Declaration Protected VOID SwitchedOff() Returns Type Description Implements IAxoMomentaryTask"
  },
  "apictrl/plc.AXOpen.Core.AxoObject.html": {
    "href": "apictrl/plc.AXOpen.Core.AxoObject.html",
    "title": "Class AxoObject | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoObject Provides base class for all classes of AXOpen. Inheritance AxoObject Implements IAxoObject Namespace: plc.AXOpen.Core Assembly: @ix-ax/axopen.core.dll Syntax CLASS AxoObject Properties Identity Declaration Identity : ULINT Property Value Type Description _parent Declaration _parent : AXOpen.Core.IAxoObject Property Value Type Description _context Declaration _context : AXOpen.Core.IAxoContext Property Value Type Description NULL_CONTEXT Declaration NULL_CONTEXT : AXOpen.Core._NULL_CONTEXT Property Value Type Description NULL_OBJECT Declaration NULL_OBJECT : AXOpen.Core._NULL_OBJECT Property Value Type Description Methods GetIdentity Gets unique identity of this object in given context. Declaration Public ULINT GetIdentity() Returns Type Description ULINT GetContext Gets context in which this object was initialized. Declaration Public AXOpen.Core.IAxoContext GetContext() Returns Type Description IAxoContext GetParent Gets parent in which this object was initialized. Declaration Public AXOpen.Core.IAxoObject GetParent() Returns Type Description IAxoObject Initialize Initializes this object associating it given parent.This method should be called only once upon the program start.Any subsequent call are ignored. Declaration Public VOID Initialize(in plc.AXOpen.Core.IAxoObject parent) Parameters Type Name Description IAxoObject parent Returns Type Description Initialize Initializes this object associating it given context.This method should be called only once upon the program start.Any subsequent call are ignored. Declaration Public VOID Initialize(in plc.AXOpen.Core.IAxoContext context) Parameters Type Name Description IAxoContext context Returns Type Description Environment Declaration Public AXOpen.Core.IAxoContextEnvironment Environment() Returns Type Description IAxoContextEnvironment Implements IAxoObject"
  },
  "apictrl/plc.AXOpen.Core.AxoRemoteTask.html": {
    "href": "apictrl/plc.AXOpen.Core.AxoRemoteTask.html",
    "title": "Class AxoRemoteTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoRemoteTask Provides a mechanism to exectute a logic from the PLC in an .NET environment. > [!IMPORTANT]> The deferred execution in .NET envornment is not hard-real time nor deterministic. Inheritance AxoTask AxoObject AxoRemoteTask Implements IAxoTask IAxoTaskState Inherited Members Status IsDisabled RemoteInvoke RemoteRestore RemoteAbort RemoteResume StartSignature ErrorDetails Identity GetState() GetErrorDetails() IsReady() IsDone() IsBusy() IsAborted() HasError() IsNewInvokeCall() IsInvokeCalledInThisPlcCycle() WasInvokeCalledInPreviousPlcCycle() IsNewExecuteCall() IsExecuteCalledInThisPlcCycle() WasExecuteCalledInPreviousPlcCycle() UpdateState() Invoke() Restore() DoneWhen(BOOL) Execute() ThrowWhen(BOOL) ThrowWhen(BOOL,STRING[254]) SetIsDisabled(BOOL) GetIsDisabled() Abort() Resume() OnAbort() OnResume() OnDone() OnError() OnRestore() OnStart() WhileError() GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Environment() Namespace: plc.AXOpen.Core Assembly: @ix-ax/axopen.core.dll Syntax CLASS AxoRemoteTask Properties DoneSignature Remote system's done signature.When StartSignature and DoneSignature equal the task is considered executed on the remote system. Declaration DoneSignature : ULINT Property Value Type Description IsInitialized Indicates whether this instance's remote procedure is initialized. Declaration IsInitialized : BOOL Property Value Type Description Remarks When the remote task is not initialized, but the execution is invoked, task enters error state. HasRemoteException Declaration HasRemoteException : BOOL Property Value Type Description IsBeingCalledCounter Declaration IsBeingCalledCounter : INT Property Value Type Description Methods Execute Declaration Public BOOL Execute() Returns Type Description BOOL GetStartSignature Declaration Internal ULINT GetStartSignature() Returns Type Description ULINT SetDoneSignature Declaration Internal VOID SetDoneSignature() Returns Type Description Implements IAxoTask IAxoTaskState"
  },
  "apictrl/plc.AXOpen.Core.AxoSequencer.html": {
    "href": "apictrl/plc.AXOpen.Core.AxoSequencer.html",
    "title": "Class AxoSequencer | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoSequencer Inheritance AxoTask AxoObject AxoSequencer Implements IAxoSequencer IAxoTask IAxoTaskState Inherited Members Status IsDisabled RemoteInvoke RemoteRestore RemoteAbort RemoteResume StartSignature ErrorDetails Identity GetState() GetErrorDetails() IsReady() IsDone() IsBusy() IsAborted() HasError() IsNewInvokeCall() IsInvokeCalledInThisPlcCycle() WasInvokeCalledInPreviousPlcCycle() IsNewExecuteCall() IsExecuteCalledInThisPlcCycle() WasExecuteCalledInPreviousPlcCycle() UpdateState() Invoke() Restore() DoneWhen(BOOL) Execute() ThrowWhen(BOOL) ThrowWhen(BOOL,STRING[254]) SetIsDisabled(BOOL) GetIsDisabled() Abort() Resume() OnAbort() OnResume() OnDone() OnError() OnRestore() OnStart() WhileError() GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Environment() Namespace: plc.AXOpen.Core Assembly: @ix-ax/axopen.core.dll Syntax CLASS AxoSequencer Properties SteppingMode Declaration SteppingMode : AXOpen.Core.eAxoSteppingMode Property Value Type Description SequenceMode Declaration SequenceMode : AXOpen.Core.eAxoSequenceMode Property Value Type Description CurrentOrder Declaration CurrentOrder : ULINT Property Value Type Description StepForwardCommand Declaration StepForwardCommand : AXOpen.Core.AxoTask Property Value Type Description StepIn Declaration StepIn : AXOpen.Core.AxoTask Property Value Type Description StepBackwardCommand Declaration StepBackwardCommand : AXOpen.Core.AxoTask Property Value Type Description _configurationFlowOrder Declaration _configurationFlowOrder : ULINT Property Value Type Description _numberOfConfiguredSteps Declaration _numberOfConfiguredSteps : ULINT Property Value Type Description _coordinatorState Declaration _coordinatorState : AXOpen.Core.AxoCoordinatorStates Property Value Type Description _step Declaration _step : AXOpen.Core.IAxoStep Property Value Type Description _openCycleCounter Declaration _openCycleCounter : ULINT Property Value Type Description _closeCycleCounter Declaration _closeCycleCounter : ULINT Property Value Type Description Methods Open Opens sequencers operations.This method must be called prior to any other calls of this instance ofsequencer. Declaration Public VOID Open() Returns Type Description Execute Declaration Internal BOOL Execute(in plc.AXOpen.Core.IAxoStep step,in plc.BOOL Enable) Parameters Type Name Description IAxoStep step BOOL Enable Returns Type Description BOOL MoveNext Moves the execution to the next step. Declaration Public VOID MoveNext() Returns Type Description RequestStep Terminates the currently executed step and initiates the RequestedStep to be executed Declaration Public VOID RequestStep(in plc.AXOpen.Core.IAxoStep RequestedStep) Parameters Type Name Description IAxoStep RequestedStep Returns Type Description CompleteSequence Completes (finishes) the execution of this sequencer and set the coordination state to Idle.If the SequenceMode of the sequencer is set to RunOnce, terminates also execution of the sequencer itself. Declaration Public VOID CompleteSequence() Returns Type Description OnBeforeSequenceStart Executes once when the sequence starts. Declaration Protected VOID OnBeforeSequenceStart() Returns Type Description OnCompleteSequence Executes once when the sequence is completed. Declaration Protected VOID OnCompleteSequence() Returns Type Description GetCoordinatorState Gets the state of the coordinator Declaration Public AXOpen.Core.AxoCoordinatorStates GetCoordinatorState() Returns Type Description AxoCoordinatorStates DetermineOrder Declaration Protected ULINT DetermineOrder(in plc.AXOpen.Core.IAxoStep step) Parameters Type Name Description IAxoStep step Returns Type Description ULINT GetNumberOfConfiguredSteps Gets the number of the configured steps in the sequence. Declaration Public ULINT GetNumberOfConfiguredSteps() Returns Type Description ULINT InvalidContext Declaration Protected BOOL InvalidContext() Returns Type Description BOOL InvalidContext Declaration Protected BOOL InvalidContext(in plc.AXOpen.Core.IAxoStep step) Parameters Type Name Description IAxoStep step Returns Type Description BOOL DisableAllSteppingComands Declaration Protected VOID DisableAllSteppingComands() Returns Type Description AbortCurrentStep Declaration Protected VOID AbortCurrentStep() Returns Type Description OnRestore Declaration Protected VOID OnRestore() Returns Type Description AndThen Declaration Public VOID AndThen(in plc.AXOpen.Core.IAxoTask tsk) Parameters Type Name Description IAxoTask tsk Returns Type Description Close Declaration Protected VOID Close() Returns Type Description Implements IAxoSequencer IAxoTask IAxoTaskState"
  },
  "apictrl/plc.AXOpen.Core.AxoStep.html": {
    "href": "apictrl/plc.AXOpen.Core.AxoStep.html",
    "title": "Class AxoStep | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoStep Inheritance AxoTask AxoObject AxoStep Implements IAxoStep IAxoTaskState Inherited Members Status IsDisabled RemoteInvoke RemoteRestore RemoteAbort RemoteResume StartSignature ErrorDetails Identity GetState() GetErrorDetails() IsReady() IsDone() IsBusy() IsAborted() HasError() IsNewInvokeCall() IsInvokeCalledInThisPlcCycle() WasInvokeCalledInPreviousPlcCycle() IsNewExecuteCall() IsExecuteCalledInThisPlcCycle() WasExecuteCalledInPreviousPlcCycle() UpdateState() Invoke() Restore() DoneWhen(BOOL) Execute() ThrowWhen(BOOL) ThrowWhen(BOOL,STRING[254]) SetIsDisabled(BOOL) GetIsDisabled() Abort() Resume() OnAbort() OnResume() OnDone() OnError() OnRestore() OnStart() WhileError() GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Environment() Namespace: plc.AXOpen.Core Assembly: @ix-ax/axopen.core.dll Syntax CLASS AxoStep Properties Order Declaration Order : ULINT Property Value Type Description StepDescription Declaration StepDescription : STRING[120] Property Value Type Description IsActive Declaration IsActive : BOOL Property Value Type Description IsEnabled Declaration IsEnabled : BOOL Property Value Type Description _openCycleCount Declaration _openCycleCount : ULINT Property Value Type Description _isCalledJustOnceInThisPlcCycle Declaration _isCalledJustOnceInThisPlcCycle : BOOL Property Value Type Description _multipleStepCallInThisPlcCycle Declaration _multipleStepCallInThisPlcCycle : BOOL Property Value Type Description _noStepCallInPreviousPlcCycle Declaration _noStepCallInPreviousPlcCycle : BOOL Property Value Type Description Methods GetStepOrder Returns the order of the execution. Declaration Public ULINT GetStepOrder() Returns Type Description ULINT SetStepOrder Sets the order of the execution, if conditions are met. Declaration Public VOID SetStepOrder(in plc.AXOpen.Core.IAxoCoordinator coord,in plc.ULINT StepOrder) Parameters Type Name Description IAxoCoordinator coord ULINT StepOrder Returns Type Description IsCalledJustOnceInThisPlcCycle Returns TRUE if the execution of the step is called only once in this PLC cycle. Declaration Public BOOL IsCalledJustOnceInThisPlcCycle() Returns Type Description BOOL Execute Returns TRUE if instance of THIS step is curently executing Declaration Public BOOL Execute(in plc.AXOpen.Core.IAxoCoordinator coord) Parameters Type Name Description IAxoCoordinator coord Returns Type Description BOOL Execute Returns TRUE if instance of THIS step is curently executing and the step is enabled Declaration Public BOOL Execute(in plc.AXOpen.Core.IAxoCoordinator coord,in plc.BOOL Enable) Parameters Type Name Description IAxoCoordinator coord BOOL Enable Returns Type Description BOOL Execute Returns TRUE if instance of THIS step is curently executing and the step is enabledand sets the description of the step Declaration Public BOOL Execute(in plc.AXOpen.Core.IAxoCoordinator coord,in plc.BOOL Enable,in plc.STRING[120] Description) Parameters Type Name Description IAxoCoordinator coord BOOL Enable STRING[120] Description Returns Type Description BOOL Execute Returns TRUE if instance of THIS step is curently executingand sets the description of the step Declaration Public BOOL Execute(in plc.AXOpen.Core.IAxoCoordinator coord,in plc.STRING[120] Description) Parameters Type Name Description IAxoCoordinator coord STRING[120] Description Returns Type Description BOOL CountCallsOfTheExecuteMethod Declaration Protected VOID CountCallsOfTheExecuteMethod() Returns Type Description ExecuteInternal Declaration Protected BOOL ExecuteInternal(in plc.AXOpen.Core.IAxoCoordinator coord,in plc.BOOL Enable) Parameters Type Name Description IAxoCoordinator coord BOOL Enable Returns Type Description BOOL SetIsActive Sets the value of the IsActive variable Declaration Public VOID SetIsActive(in plc.BOOL Active) Parameters Type Name Description BOOL Active Returns Type Description GetIsActive Returns the value of the IsActive variable Declaration Public BOOL GetIsActive() Returns Type Description BOOL SetIsEnabled Sets the value of the IsEnabled variable Declaration Public VOID SetIsEnabled(in plc.BOOL Enabled) Parameters Type Name Description BOOL Enabled Returns Type Description GetIsEnabled Returns the value of the IsEnabled variable Declaration Public BOOL GetIsEnabled() Returns Type Description BOOL Implements IAxoStep IAxoTaskState"
  },
  "apictrl/plc.AXOpen.Core.AxoTask.html": {
    "href": "apictrl/plc.AXOpen.Core.AxoTask.html",
    "title": "Class AxoTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoTask Inheritance AxoObject AxoTask Implements IAxoTask IAxoTaskState Inherited Members Identity GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Environment() Namespace: plc.AXOpen.Core Assembly: @ix-ax/axopen.core.dll Syntax CLASS AxoTask Properties Status Gets the state of this task. Declaration Status : AXOpen.Core.eAxoTaskState Property Value Type Description IsDisabled Gets or sets whether this task is disabled for execution. Declaration IsDisabled : BOOL Property Value Type Description RemoteInvoke Remote requests for invoke of this task.When 'TRUE' this task will be invoked. Declaration RemoteInvoke : BOOL Property Value Type Description RemoteRestore Remote requests for restore of this task.When 'TRUE' this task will be restored. Declaration RemoteRestore : BOOL Property Value Type Description RemoteAbort Remote requests for abort of this task.When 'TRUE' this task will be aborted. Declaration RemoteAbort : BOOL Property Value Type Description RemoteResume Remote requests for resume of this task.When 'TRUE' this task will be resumed. Declaration RemoteResume : BOOL Property Value Type Description StartSignature Contains contex cycle number when this task started. Declaration StartSignature : ULINT Property Value Type Description ErrorDetails Contains details about the error. Declaration ErrorDetails : STRING[254] Property Value Type Description _openCycleCountInvoke Declaration _openCycleCountInvoke : ULINT Property Value Type Description _openCycleCountExecute Declaration _openCycleCountExecute : ULINT Property Value Type Description Methods GetState Gets the actual state of this task. Declaration Public AXOpen.Core.eAxoTaskState GetState() Returns Type Description eAxoTaskState GetErrorDetails Declaration Public STRING[254] GetErrorDetails() Returns Type Description STRING[254] IsReady Gets true when the task is ready. Declaration Public BOOL IsReady() Returns Type Description BOOL IsDone Gets true when the task is done. Declaration Public BOOL IsDone() Returns Type Description BOOL IsBusy Gets true when the task is busy/executing. Declaration Public BOOL IsBusy() Returns Type Description BOOL IsAborted Gets true when the task is aborted. Declaration Public BOOL IsAborted() Returns Type Description BOOL HasError Gets true when the task has error. Declaration Public BOOL HasError() Returns Type Description BOOL IsNewInvokeCall Declaration Private BOOL IsNewInvokeCall() Returns Type Description BOOL IsInvokeCalledInThisPlcCycle Declaration Private BOOL IsInvokeCalledInThisPlcCycle() Returns Type Description BOOL WasInvokeCalledInPreviousPlcCycle Declaration Private BOOL WasInvokeCalledInPreviousPlcCycle() Returns Type Description BOOL IsNewExecuteCall Declaration Private BOOL IsNewExecuteCall() Returns Type Description BOOL IsExecuteCalledInThisPlcCycle Declaration Private BOOL IsExecuteCalledInThisPlcCycle() Returns Type Description BOOL WasExecuteCalledInPreviousPlcCycle Declaration Private BOOL WasExecuteCalledInPreviousPlcCycle() Returns Type Description BOOL UpdateState Declaration Private VOID UpdateState() Returns Type Description Invoke Invokes this task. Declaration Public AXOpen.Core.IAxoTaskState Invoke() Returns Type Description IAxoTaskState Restore Restores this task. Declaration Public AXOpen.Core.IAxoTaskState Restore() Returns Type Description IAxoTaskState DoneWhen Makes this task to transition in Done statewhen Condition argument is TRUE. Declaration Public VOID DoneWhen(in plc.BOOL Condition) Parameters Type Name Description BOOL Condition Returns Type Description Execute Returns TRUE if the task is Busy, otherwise false.This method needs to be called cyclically. Declaration Public BOOL Execute() Returns Type Description BOOL ThrowWhen Makes this task enter into Error state, when HasErrorState argument is TRUEtask in error state stops its execution. Declaration Public VOID ThrowWhen(in plc.BOOL HasErrorState) Parameters Type Name Description BOOL HasErrorState Returns Type Description ThrowWhen Makes this task enter into Error state, when HasErrorState argument is TRUEtask in error state stops its execution. Declaration Public VOID ThrowWhen(in plc.BOOL HasErrorState,in plc.STRING[254] ErrorDescription) Parameters Type Name Description BOOL HasErrorState STRING[254] ErrorDescription Returns Type Description SetIsDisabled Sets the value of the IsDisabled variable Declaration Public VOID SetIsDisabled(in plc.BOOL Disabled) Parameters Type Name Description BOOL Disabled Returns Type Description GetIsDisabled Returns the value of the IsDisabled variable Declaration Public BOOL GetIsDisabled() Returns Type Description BOOL Abort Aborts the execution of the task if running and sets its state to aborted. Declaration Public VOID Abort() Returns Type Description Resume Resume the execution of the task if aborted and sets its state to busy. Declaration Public VOID Resume() Returns Type Description OnAbort Executes once when the task is aborted. Declaration Protected VOID OnAbort() Returns Type Description OnResume Executes once when the task is resumed. Declaration Protected VOID OnResume() Returns Type Description OnDone Executes once when the task reaches the Done state. Declaration Protected VOID OnDone() Returns Type Description OnError Executes once when the task reaches the Error state. Declaration Protected VOID OnError() Returns Type Description OnRestore Executes once when the task is restored. Declaration Protected VOID OnRestore() Returns Type Description OnStart Executes once when the task starts (at the moment of transition from the Kicking state into the Busy state). Declaration Protected VOID OnStart() Returns Type Description WhileError Executes repeatedly while the task is in Error state (and Execute() method is called). Declaration Protected VOID WhileError() Returns Type Description Implements IAxoTask IAxoTaskState"
  },
  "apictrl/plc.AXOpen.Core.AxoToggleTask.html": {
    "href": "apictrl/plc.AXOpen.Core.AxoToggleTask.html",
    "title": "Class AxoToggleTask | System.Dynamic.ExpandoObject",
    "keywords": "Class AxoToggleTask Provides basic toggling between two states. The states are triggered by calling the '''Toggle()''' method.To get the actual state of the toggle task, '''IsSwitchedOn()''', '''IsSwitchedOff()''' AND '''GetState()''' methods are available. Inheritance AxoObject AxoToggleTask Implements IAxoToggleTask Inherited Members Identity GetIdentity() GetContext() GetParent() Initialize(IAxoObject) Initialize(IAxoContext) Environment() Namespace: plc.AXOpen.Core Assembly: @ix-ax/axopen.core.dll Syntax CLASS AxoToggleTask Properties State Declaration State : BOOL Property Value Type Description RemoteToggle Remote request to toggle the state of this task. Declaration RemoteToggle : BOOL Property Value Type Description IsDisabled Gets or sets whether this task is disabled for any manipulations. Declaration IsDisabled : BOOL Property Value Type Description _openCycleCount Declaration _openCycleCount : ULINT Property Value Type Description Methods GetState Gets the actual state of this task. Declaration Public BOOL GetState() Returns Type Description BOOL IsRunCalledInThisPlcCycle Declaration Private BOOL IsRunCalledInThisPlcCycle() Returns Type Description BOOL WasRunCalledInPreviousPlcCycle Declaration Private BOOL WasRunCalledInPreviousPlcCycle() Returns Type Description BOOL Run This method needs to be called cyclically. Declaration Public BOOL Run() Returns Type Description BOOL SetIsDisabled Sets the value of the IsDisabled variable Declaration Public VOID SetIsDisabled(in plc.BOOL Disabled) Parameters Type Name Description BOOL Disabled Returns Type Description GetIsDisabled Returns the value of the IsDisabled variable Declaration Public BOOL GetIsDisabled() Returns Type Description BOOL IsSwitchedOn Returns TRUE if task is switched on Declaration Public BOOL IsSwitchedOn() Returns Type Description BOOL IsSwitchedOff Returns TRUE if task is switched off Declaration Public BOOL IsSwitchedOff() Returns Type Description BOOL Toggle Use to toggle the state of the '''AxoToggleTask'''. Declaration Public BOOL Toggle() Returns Type Description BOOL SwitchOff Use to set the state of the '''AxoToggleTask''' to the value '''FALSE'''. Declaration Public BOOL SwitchOff() Returns Type Description BOOL SwitchOn Declaration Public BOOL SwitchOn() Returns Type Description BOOL OnSwitchedOn Executes ones when toggle task changes its state from '''FALSE''' to '''TRUE'''. Declaration Protected VOID OnSwitchedOn() Returns Type Description OnSwitchedOff Executes ones when toggle task changes its state from '''TRUE''' to '''FALSE'''. Declaration Protected VOID OnSwitchedOff() Returns Type Description OnStateChanged Executes ones when toggle task changes its state. Declaration Protected VOID OnStateChanged() Returns Type Description SwitchedOn Executes while the task is in On state. Declaration Protected VOID SwitchedOn() Returns Type Description SwitchedOff Executes while the task is in Off state. Declaration Protected VOID SwitchedOff() Returns Type Description Implements IAxoToggleTask"
  },
  "apictrl/plc.AXOpen.Core.eAxoSequenceMode.html": {
    "href": "apictrl/plc.AXOpen.Core.eAxoSequenceMode.html",
    "title": "Enum eAxoSequenceMode | System.Dynamic.ExpandoObject",
    "keywords": "Enum eAxoSequenceMode Namespace: plc.AXOpen.Core Assembly: @ix-ax/axopen.core.dll Syntax eAxoSequenceMode : AXOpen.Core.eAxoSequenceMode"
  },
  "apictrl/plc.AXOpen.Core.eAxoSteppingMode.html": {
    "href": "apictrl/plc.AXOpen.Core.eAxoSteppingMode.html",
    "title": "Enum eAxoSteppingMode | System.Dynamic.ExpandoObject",
    "keywords": "Enum eAxoSteppingMode Namespace: plc.AXOpen.Core Assembly: @ix-ax/axopen.core.dll Syntax eAxoSteppingMode : AXOpen.Core.eAxoSteppingMode"
  },
  "apictrl/plc.AXOpen.Core.eAxoTaskState.html": {
    "href": "apictrl/plc.AXOpen.Core.eAxoTaskState.html",
    "title": "Enum eAxoTaskState | System.Dynamic.ExpandoObject",
    "keywords": "Enum eAxoTaskState Namespace: plc.AXOpen.Core Assembly: @ix-ax/axopen.core.dll Syntax eAxoTaskState : AXOpen.Core.eAxoTaskState"
  },
  "apictrl/plc.AXOpen.Core.html": {
    "href": "apictrl/plc.AXOpen.Core.html",
    "title": "Namespace plc.AXOpen.Core | System.Dynamic.ExpandoObject",
    "keywords": "Namespace plc.AXOpen.Core Classes AxoComponent AxoContext Provides base for contextualized entry of AXOpen application.This class is abstract and must be inherited. _NULL_RTC Provides an empty RTC object for uninitialized RTC. AxoContextEnvironment AxoMomentaryTask Provides basic momentary on function.To get the actual state of the toggle task, '''IsSwitchedOn()''', '''IsSwitchedOff()''' AND '''GetState()''' methods are available. _NULL_CONTEXT Provides an empty context for uninitialized objects. _NULL_OBJECT Provides an empty object for uninitialized objects. AxoObject Provides base class for all classes of AXOpen. AxoRemoteTask Provides a mechanism to exectute a logic from the PLC in an .NET environment. > [!IMPORTANT]> The deferred execution in .NET envornment is not hard-real time nor deterministic. AxoTask AxoToggleTask Provides basic toggling between two states. The states are triggered by calling the '''Toggle()''' method.To get the actual state of the toggle task, '''IsSwitchedOn()''', '''IsSwitchedOff()''' AND '''GetState()''' methods are available. AxoSequencer AxoStep Interfaces IAxoComponent IAxoManuallyControllable IAxoContext IAxoContextEnvironment IAxoCoordinator IAxoMomentaryTask IAxoObject IAxoTask IAxoTaskInt IAxoTaskState IAxoToggleTask IAxoSequencer IAxoStep Delegates IsNullContext"
  },
  "apictrl/plc.AXOpen.Core.IAxoComponent.html": {
    "href": "apictrl/plc.AXOpen.Core.IAxoComponent.html",
    "title": "Interface IAxoComponent | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoComponent Namespace: plc.AXOpen.Core Assembly: @ix-ax/axopen.core.dll Syntax INTERFACE IAxoComponent"
  },
  "apictrl/plc.AXOpen.Core.IAxoContext.html": {
    "href": "apictrl/plc.AXOpen.Core.IAxoContext.html",
    "title": "Interface IAxoContext | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoContext Namespace: plc.AXOpen.Core Assembly: @ix-ax/axopen.core.dll Syntax INTERFACE IAxoContext Methods CreateIdentity Declaration Public ULINT CreateIdentity() Returns Type Description ULINT OpenCycleCount Declaration Public ULINT OpenCycleCount() Returns Type Description ULINT GetRtc Declaration Public UNDEFINED GetRtc() Returns Type Description UNDEFINED InjectRtc Declaration Public VOID InjectRtc(in plc.UNDEFINED Rtc) Parameters Type Name Description UNDEFINED Rtc Returns Type Description Environment Declaration Public AXOpen.Core.IAxoContextEnvironment Environment() Returns Type Description IAxoContextEnvironment"
  },
  "apictrl/plc.AXOpen.Core.IAxoContextEnvironment.html": {
    "href": "apictrl/plc.AXOpen.Core.IAxoContextEnvironment.html",
    "title": "Interface IAxoContextEnvironment | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoContextEnvironment Namespace: plc.AXOpen.Core Assembly: @ix-ax/axopen.core.dll Syntax INTERFACE IAxoContextEnvironment Methods Messaging Declaration Public UNDEFINED Messaging() Returns Type Description UNDEFINED"
  },
  "apictrl/plc.AXOpen.Core.IAxoCoordinator.html": {
    "href": "apictrl/plc.AXOpen.Core.IAxoCoordinator.html",
    "title": "Interface IAxoCoordinator | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoCoordinator Namespace: plc.AXOpen.Core Assembly: @ix-ax/axopen.core.dll Syntax INTERFACE IAxoCoordinator Methods GetCoordinatorState Declaration Public AXOpen.Core.AxoCoordinatorStates GetCoordinatorState() Returns Type Description AxoCoordinatorStates"
  },
  "apictrl/plc.AXOpen.Core.IAxoManuallyControllable.html": {
    "href": "apictrl/plc.AXOpen.Core.IAxoManuallyControllable.html",
    "title": "Interface IAxoManuallyControllable | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoManuallyControllable Namespace: plc.AXOpen.Core Assembly: @ix-ax/axopen.core.dll Syntax INTERFACE IAxoManuallyControllable Methods ActivateManualControl Declaration Public VOID ActivateManualControl() Returns Type Description IsManuallyControllable Declaration Public BOOL IsManuallyControllable() Returns Type Description BOOL"
  },
  "apictrl/plc.AXOpen.Core.IAxoMomentaryTask.html": {
    "href": "apictrl/plc.AXOpen.Core.IAxoMomentaryTask.html",
    "title": "Interface IAxoMomentaryTask | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoMomentaryTask Namespace: plc.AXOpen.Core Assembly: @ix-ax/axopen.core.dll Syntax INTERFACE IAxoMomentaryTask Methods IsSwitchedOn Returns TRUE if task is switched on Declaration Public BOOL IsSwitchedOn() Returns Type Description BOOL IsSwitchedOff Returns TRUE if task is switched off Declaration Public BOOL IsSwitchedOff() Returns Type Description BOOL"
  },
  "apictrl/plc.AXOpen.Core.IAxoObject.html": {
    "href": "apictrl/plc.AXOpen.Core.IAxoObject.html",
    "title": "Interface IAxoObject | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoObject Namespace: plc.AXOpen.Core Assembly: @ix-ax/axopen.core.dll Syntax INTERFACE IAxoObject Methods GetIdentity Declaration Public ULINT GetIdentity() Returns Type Description ULINT GetContext Declaration Public AXOpen.Core.IAxoContext GetContext() Returns Type Description IAxoContext"
  },
  "apictrl/plc.AXOpen.Core.IAxoSequencer.html": {
    "href": "apictrl/plc.AXOpen.Core.IAxoSequencer.html",
    "title": "Interface IAxoSequencer | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoSequencer Namespace: plc.AXOpen.Core Assembly: @ix-ax/axopen.core.dll Syntax INTERFACE IAxoSequencer"
  },
  "apictrl/plc.AXOpen.Core.IAxoStep.html": {
    "href": "apictrl/plc.AXOpen.Core.IAxoStep.html",
    "title": "Interface IAxoStep | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoStep Namespace: plc.AXOpen.Core Assembly: @ix-ax/axopen.core.dll Syntax INTERFACE IAxoStep Methods GetStepOrder Declaration Public ULINT GetStepOrder() Returns Type Description ULINT SetStepOrder Declaration Public VOID SetStepOrder(in plc.AXOpen.Core.IAxoCoordinator coord,in plc.ULINT StepOrder) Parameters Type Name Description IAxoCoordinator coord ULINT StepOrder Returns Type Description IsCalledJustOnceInThisPlcCycle Declaration Public BOOL IsCalledJustOnceInThisPlcCycle() Returns Type Description BOOL SetIsActive Declaration Public VOID SetIsActive(in plc.BOOL Active) Parameters Type Name Description BOOL Active Returns Type Description GetIsActive Declaration Public BOOL GetIsActive() Returns Type Description BOOL SetIsEnabled Declaration Public VOID SetIsEnabled(in plc.BOOL Enabled) Parameters Type Name Description BOOL Enabled Returns Type Description GetIsEnabled Declaration Public BOOL GetIsEnabled() Returns Type Description BOOL"
  },
  "apictrl/plc.AXOpen.Core.IAxoTask.html": {
    "href": "apictrl/plc.AXOpen.Core.IAxoTask.html",
    "title": "Interface IAxoTask | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoTask Namespace: plc.AXOpen.Core Assembly: @ix-ax/axopen.core.dll Syntax INTERFACE IAxoTask Methods Execute Declaration Public BOOL Execute() Returns Type Description BOOL Invoke Declaration Public AXOpen.Core.IAxoTaskState Invoke() Returns Type Description IAxoTaskState Restore Declaration Public AXOpen.Core.IAxoTaskState Restore() Returns Type Description IAxoTaskState Abort Declaration Public VOID Abort() Returns Type Description Resume Declaration Public VOID Resume() Returns Type Description DoneWhen Declaration Public VOID DoneWhen(in plc.BOOL Condition) Parameters Type Name Description BOOL Condition Returns Type Description ThrowWhen Declaration Public VOID ThrowWhen(in plc.BOOL HasErrorState) Parameters Type Name Description BOOL HasErrorState Returns Type Description IsReady Declaration Public BOOL IsReady() Returns Type Description BOOL IsDone Declaration Public BOOL IsDone() Returns Type Description BOOL IsBusy Declaration Public BOOL IsBusy() Returns Type Description BOOL HasError Declaration Public BOOL HasError() Returns Type Description BOOL"
  },
  "apictrl/plc.AXOpen.Core.IAxoTaskInt.html": {
    "href": "apictrl/plc.AXOpen.Core.IAxoTaskInt.html",
    "title": "Interface IAxoTaskInt | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoTaskInt Namespace: plc.AXOpen.Core Assembly: @ix-ax/axopen.core.dll Syntax INTERFACE IAxoTaskInt Methods SetIsDisabled Declaration Public VOID SetIsDisabled(in plc.BOOL Disabled) Parameters Type Name Description BOOL Disabled Returns Type Description GetIsDisabled Declaration Public BOOL GetIsDisabled() Returns Type Description BOOL"
  },
  "apictrl/plc.AXOpen.Core.IAxoTaskState.html": {
    "href": "apictrl/plc.AXOpen.Core.IAxoTaskState.html",
    "title": "Interface IAxoTaskState | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoTaskState Namespace: plc.AXOpen.Core Assembly: @ix-ax/axopen.core.dll Syntax INTERFACE IAxoTaskState Methods IsDone Declaration Public BOOL IsDone() Returns Type Description BOOL IsBusy Declaration Public BOOL IsBusy() Returns Type Description BOOL IsAborted Declaration Public BOOL IsAborted() Returns Type Description BOOL HasError Declaration Public BOOL HasError() Returns Type Description BOOL GetErrorDetails Declaration Public STRING[254] GetErrorDetails() Returns Type Description STRING[254]"
  },
  "apictrl/plc.AXOpen.Core.IAxoToggleTask.html": {
    "href": "apictrl/plc.AXOpen.Core.IAxoToggleTask.html",
    "title": "Interface IAxoToggleTask | System.Dynamic.ExpandoObject",
    "keywords": "Interface IAxoToggleTask Namespace: plc.AXOpen.Core Assembly: @ix-ax/axopen.core.dll Syntax INTERFACE IAxoToggleTask Methods Toggle Use to toggle the state of the '''AxoToggleTask'''. Declaration Public BOOL Toggle() Returns Type Description BOOL SwitchOff Use to set the state of the '''AxoToggleTask''' to the value '''FALSE'''. Declaration Public BOOL SwitchOff() Returns Type Description BOOL SwitchOn Use to set the state of the '''AxoToggleTask''' to the value '''TRUE'''. Declaration Public BOOL SwitchOn() Returns Type Description BOOL IsSwitchedOn Returns TRUE if task is switched on Declaration Public BOOL IsSwitchedOn() Returns Type Description BOOL IsSwitchedOff Returns TRUE if task is switched off Declaration Public BOOL IsSwitchedOff() Returns Type Description BOOL"
  },
  "apictrl/plc.AXOpen.Core.IsNullContext(IAxoContext).html": {
    "href": "apictrl/plc.AXOpen.Core.IsNullContext(IAxoContext).html",
    "title": "Delegate IsNullContext | System.Dynamic.ExpandoObject",
    "keywords": "Delegate IsNullContext Namespace: plc.AXOpen.Core Assembly: @ix-ax/axopen.core.dll Syntax Public BOOL IsNullContext(in plc.AXOpen.Core.IAxoContext Context) Parameters Type Name Description IAxoContext Context Returns Type Description BOOL"
  },
  "articles/core/AXOCOMPONENT.html": {
    "href": "articles/core/AXOCOMPONENT.html",
    "title": "AxoComponent | System.Dynamic.ExpandoObject",
    "keywords": "AxoComponent AxoComponent is an abstract class extending the AxoObject, and it is the base building block for the \"hardware-related devices\" like a pneumatic piston, servo drive, robot, etc., so as for the, let's say, \"virtual devices\" like counter, database, etc. AxoComponent is designed to group all possible methods, tasks, settings, and status information into one consistent class. As the AxoComponent is an abstract class, it cannot be instantiated and must be extended. In the extended class, two methods are mandatory. Restore() - inside this method, the logic for resetting the AxoComponent or restoring it from any state to its initial state should be placed. ManualControl() - inside this method, the logic for manual operations with the component should be placed. To be able to control the AxoComponent instance manually, the method ActivateManualControl() of this instance needs to be called cyclically. The base class contains two additional method to deal with the manual control of the AxoComponent. ActivateManualControl() - when this method is called cyclically, the AxoComponent changes its behavior to manually controllable and ensure the call of the ManualControl() method in the derived class. IsManuallyControllable() -returns TRUE when the AxoComponent is manually controllable. Layout attributes ComponentHeader and ComponentDetails The visual view of the extended AxoComponent on the UI side could be done both ways. Manually with complete control over the design or by using the auto-rendering mechanism of the RenderableContentControl (TODO add a link to docu of the RenderableContentControl) element, which is, in most cases, more than perfect. To take full advantage of the auto-rendering mechanism, the base class has implemented the additional layout attributes ComponentHeader and ComponentDetails(TabName). The auto-rendered view is divided into two parts: the fAxoed one and the expandable one. All AxoComponent members with the ComponentHeader layout attribute defined will be displayed in the fixed part. All members with the ComponentDetails(TabName) layout attribute defined will be displayed in the expandable part inside the TabControl with \"TabName\". All members are added in the order in which they are defined, taking into account their layout attributes like Container(Layout.Wrap) or Container(Layout.Stack). How to implement AxoComponent Example of the implementation very simple AxoComponent with members placed only inside the Header. {#ix-attr:[Container(Layout.Stack)]} {#ix-set:AttributeName = \"AxoComponent with header only example\"} CLASS PUBLIC AxoComponentHeaderOnlyExample EXTENDS AXOpen.Core.AxoComponent METHOD PROTECTED OVERRIDE Restore: IAxoTask // Some logic for Restore could be placed here. For Example: valueReal := REAL#1.0; valueDint := DINT#0; END_METHOD METHOD PROTECTED OVERRIDE ManualControl // Some logic for manual control could be placed here. ; END_METHOD // Main method of the `AxoComponent` that must be // called inside the `AxoContext` cyclically. METHOD PUBLIC Run // Declaration of the input and output variables. // In the case of \"hardware-related\" `AxoComponent`, // these would be the variables linked to the hardware. VAR_INPUT inReal : REAL; inDint : DINT; END_VAR VAR_OUTPUT outReal : REAL; outDint : DINT; END_VAR // This must be called first. SUPER.Open(); // Place the custom logic here. valueReal := valueReal * inReal; valueDint := valueDint + inDint; outReal := valueReal; outDint := valueDint; END_METHOD VAR PUBLIC {#ix-attr:[Container(Layout.Wrap)]} {#ix-attr:[ComponentHeader()]} {#ix-set:AttributeName = \"Real product value\"} valueReal : REAL := REAL#1.0; {#ix-attr:[ComponentHeader()]} {#ix-set:AttributeName = \"Dint sum value\"} valueDint : DINT:= DINT#0; END_VAR END_CLASS How to use AxoComponent The instance of the extended AxoComponent must be defined inside the AxoContext. CLASS ComponentHeaderOnlyExampleContext EXTENDS AxoContext VAR PUBLIC {#ix-set:AttributeName = \"Very simple component example with header only defined\"} MyComponentWithHeaderOnly : AxoComponentHeaderOnlyExample; {#ix-set:AttributeName = \"<#Activate manual control#>\"} ActivateManualControl : BOOL; inHwReal : REAL := REAL#1.0001; inHwDint : DINT := DINT#1; outHwReal : REAL; outHwDint : DINT; END_VAR METHOD PROTECTED OVERRIDE Main // The `Initialize()` method must be called before any other method. MyComponentWithHeaderOnly.Initialize(THIS); // Example of the activation of the manual control. IF ActivateManualControl THEN MyComponentWithHeaderOnly.ActivateManualControl(); END_IF; // Calling the main method `Run` with respective input and output variables. MyComponentWithHeaderOnly.Run(inReal := inHwReal, inDint := inHwDint, outReal => outHwReal, outDint => outHwDint); END_METHOD END_CLASS Inside the Main() method of the related AxoContext following rules must be applied. The Initialize() method of the extended instance of the AxoComponent must be called first. The Run() method with the respective input and output variables must be called afterwards. How to visualize AxoComponent On the UI side use the RenderableContentControl and set its Context according the placement of the instance of the AxoComponent. <RenderableContentControl Context=\"@Entry.Plc.myComponentHeaderOnlyExample.MyComponentWithHeaderOnly\" Presentation=\"Command\" /> The rendered result should then looks as follows: In case of more complex AxoComponent the most important members should be placed in the fixed part (Header) and the rest of the members should be placed inside the expandable part (Details). The members inside the expandable part should be organize inside the tabs. More complex AxoComponent Example of the implementation more complex AxoComponent with members placed also in several tabs inside the expandable part (Details). {#ix-attr:[Container(Layout.Stack)]} {#ix-set:AttributeName = \"AxoComponent example name\"} CLASS PUBLIC AxoComponentExample EXTENDS AXOpen.Core.AxoComponent METHOD PROTECTED OVERRIDE Restore: IAxoTask ; END_METHOD METHOD PROTECTED OVERRIDE ManualControl ; END_METHOD METHOD PUBLIC Run VAR_INPUT inReal : REAL; inDint : DINT; END_VAR VAR_OUTPUT outReal : REAL; outDint : DINT; END_VAR // This must be called first. SUPER.Open(); // Place the custom logic here. Status.SomeStatusValue1 := Status.SomeStatusValue1 * inReal; Status.SomeStatusValue2 := Status.SomeStatusValue2 + inDint; outReal := Status.SomeStatusValue1; outDint := Status.SomeStatusValue2; END_METHOD VAR PUBLIC // Complete structure as a part of the component header. // All structure members are going to be displayed in the component header. {#ix-attr:[Container(Layout.Wrap)]} {#ix-attr:[ComponentHeader()]} Header : Header_ComponentExample; // Two separate tasks as a part of the component header. // These tasks are going to be added to the previous members of the component header. {#ix-attr:[ComponentHeader()]} {#ix-set:AttributeName = \"Header task 1\"} HeaderTask1 : AxoTask; // Complete structure as a part of the component details tab `Tasks`. // All structure members are going to be added to the previous members of the component details tab `Tasks`. {#ix-set:AttributeName = \"Tasks\"} {#ix-attr:[Container(Layout.Stack)]} Tasks : Tasks_ComponentExample; // Single task as a part of the component details tab `Tasks`. // This task is going to be displayed in the component details tab `Tasks` {#ix-attr:[ComponentDetails(\"Tasks\")]} {#ix-attr:[Container(Layout.Stack)]} {#ix-set:AttributeName = \"Detail task in Tasks tab\"} DetailTaskInTasksTab : AxoTask; // Additional separate task as a part of the component header. // This task is going to be added to the previous members of the component header. {#ix-attr:[ComponentHeader()]} {#ix-set:AttributeName = \"Header task 2\"} HeaderTask2 : AxoTask; // Complete structure as a part of the component details tab `Status` as the attribute [ComponentDetails(\"Status\")] // is defined on the class Status_ComponentExample. // All structure members are going to be added to the previous members of the component details tab `Status`. {#ix-set:AttributeName = \"Status class\"} Status :Status_ComponentExample; // Single variable as a part of the component details tab `Status`. // This variable is going to be added to the previous members of the component details tab `Status`. {#ix-attr:[ComponentDetails(\"Status\")]} {#ix-attr:[Container(Layout.Stack)]} {#ix-set:AttributeName = \"Status string\"} Status2 : string; // Additional separate task as a part of the component header. // This task is going to be added to the previous members of the component header. {#ix-attr:[ComponentHeader()]} {#ix-set:AttributeName = \"Header task 3\"} HeaderTask3 : AxoTask; // Complete structure as a part of the component details tab `Settings` as the attribute [ComponentDetails(\"Settings\")] // is defined on the class Settings_ComponentExample. // All structure members are going to be added to the previous members of the component details tab `Settings`. {#ix-set:AttributeName = \"Settings\"} Settings : Settings_ComponentExample; // Complete structure as a part of the component details tab `Diagnostics` as the attribute [ComponentDetails(\"Diagnostics\")] // is defined on the class Diagnostics_ComponentExample. git // All structure members are going to be added to the previous members of the component details tab `Diagnostics`. {#ix-set:AttributeName = \"Diagnostics\"} Diagnostics : Diagnostics_ComponentExample; // Complete structure as a part of the component details tab `Help` as the attribute [ComponentDetails(\"Help\")] // is defined on the class Help_ComponentExample. // All structure members are going to be added to the previous members of the component details tab `Help`. {#ix-set:AttributeName = \"Help\"} Help : Help_ComponentExample; END_VAR END_CLASS For the complex types of the AxoComponent it is also recomended to organize partial groups of the members into the classes as it is in this example. CLASS PUBLIC Header_ComponentExample VAR PUBLIC {#ix-set:AttributeName = \"Start\"} Start : AxoTask; {#ix-set:AttributeName = \"Stop\"} Stop : AxoTask; {#ix-set:AttributeName = \"Status\"} Status : STRING:='Some status description'; END_VAR END_CLASS {#ix-attr:[Container(Layout.Stack)]} {#ix-attr:[ComponentDetails(\"Tasks\")]} CLASS PUBLIC Tasks_ComponentExample VAR PUBLIC {#ix-set:AttributeName = \"Some status value 1\"} SomeStatusValue1 : REAL := REAL#45.3; {#ix-set:AttributeName = \"Some advanced component task 1\"} SomeAdvancedComponentTask1 : AxoTask; {#ix-set:AttributeName = \"Some advanced component task 2\"} SomeAdvancedComponentTask2 : AxoTask; {#ix-set:AttributeName = \"Some advanced component task 3\"} SomeAdvancedComponentTask3 : AxoTask; {#ix-set:AttributeName = \"Some advanced component task 4\"} SomeAdvancedComponentTask4 : AxoTask; {#ix-set:AttributeName = \"Some advanced component task 5\"} SomeAdvancedComponentTask5 : AxoTask; END_VAR END_CLASS {#ix-attr:[Container(Layout.Stack)]} {#ix-attr:[ComponentDetails(\"Status\")]} CLASS PUBLIC Status_ComponentExample VAR PUBLIC {#ix-set:AttributeName = \"Some status value 1\"} SomeStatusValue1 : REAL := REAL#45.3; {#ix-set:AttributeName = \"Some status value 2\"} SomeStatusValue2 : DINT := DINT#46587; {#ix-set:AttributeName = \"Some status value 3\"} SomeStatusValue3 : STRING := 'some description'; END_VAR END_CLASS {#ix-attr:[ComponentDetails(\"Settings\")]} {#ix-attr:[Container(Layout.Stack)]} CLASS PUBLIC Settings_ComponentExample VAR PUBLIC {#ix-set:AttributeName = \"Some setting value 1\"} SomeSettingValue1 : REAL := REAL#45.3; {#ix-set:AttributeName = \"Some setting value 2\"} SomeSettingValue2 : DINT := DINT#46587; {#ix-set:AttributeName = \"Some setting value 3\"} SomeSettingValue3 : STRING := 'some setting'; END_VAR END_CLASS {#ix-attr:[ComponentDetails(\"Diagnostics\")]} {#ix-attr:[Container(Layout.Stack)]} CLASS PUBLIC Diagnostics_ComponentExample VAR PUBLIC {#ix-set:AttributeName = \"Some diagnostic message\"} SomeDiagnosticMessage : STRING := 'TODO: Some diagnostic message needs to be placed here'; END_VAR END_CLASS {#ix-attr:[ComponentDetails(\"Help\")]} {#ix-attr:[Container(Layout.Stack)]} CLASS PUBLIC Help_ComponentExample VAR PUBLIC {#ix-set:AttributeName = \"Some help\"} SomeHelp : STRING := 'TODO: Provide some help'; END_VAR END_CLASS Instantiate and call the AxoComponent instance. CLASS ComponentExampleContext EXTENDS AxoContext VAR PUBLIC {#ix-set:AttributeName = \"Component example name\"} MyComponent : AxoComponentExample; {#ix-set:AttributeName = \"<#Activate manual control#>\"} ActivateManualControl : BOOL; inHwReal : REAL := REAL#1.0001; inHwDint : DINT := DINT#1; outHwReal : REAL; outHwDint : DINT; END_VAR METHOD PROTECTED OVERRIDE Main // The `Initialize()` method must be called before any other method. MyComponent.Initialize(THIS); // Example of the activation of the manual control. IF ActivateManualControl THEN MyComponent.ActivateManualControl(); END_IF; // Calling the main method `Run` with respective input and output variables. MyComponent.Run(inReal := inHwReal, inDint := inHwDint, outReal => outHwReal, outDint => outHwDint); END_METHOD END_CLASS UI side of the AxoComponent. <RenderableContentControl Context=\"@Entry.Plc.myComponentExample.MyComponent\" Presentation=\"Command\" /> and the rendered result:"
  },
  "articles/core/AXOCONTEXT.html": {
    "href": "articles/core/AXOCONTEXT.html",
    "title": "AxoContext | System.Dynamic.ExpandoObject",
    "keywords": "AxoContext AxoContext encapsulates entire application or application units. Any solution may contain one or more contexts, however the each should be considered to be an isolated island and any direct inter-context access to members must be avoided. Note Each AxoContext must belong to a single PLC task.Multiple AxoContexts can be however running on the same task. classDiagram class Context{ +Main()* +Run() } In its basic implementation AxoContext has relatively simple interface. Main is the method where we place all calls of our sub-routines. In other words the Run is the root of the call tree of our program. Run method runs the AxoContext. It must be called cyclically within a program unit that is attached to a cyclic task. Why do we need AxoContext AxoContext provides counters, object identification and other information about the execution of the program. These information is then used by the objects contained at different levels of the AxoContext. How AxoContext works When you call Run method on an instance of a AxoContext, it will ensure opening AxoContext, running Main method (root of all your program calls) and AxoContext closing. flowchart LR classDef run fill:#80FF00,stroke:#0080FF,stroke-width:4px,color:#7F00FF,font-size:15px,font-weight:bold classDef main fill:#ff8000,stroke:#0080ff,stroke-width:4px,color:#7F00FF,font-size:15px,font-weight:bold id1(Open):::run-->id2(#Main*):::main-->id3(Close):::run-->id1 How to use AxoContext Base class for the AxoContext is AXOpen.Core.AxoContext. The entry point of call execution of the AxoContext is Main method. Notice that the AxoContext class is abstract and cannot be instantiated if not extended. Main method must be overridden in derived class notice the use of override keyword and also that the method is protected which means the it is visible only from within the AxoContext and derived classes. How to extend AxoContext class CLASS PUBLIC AxoContextExample EXTENDS AXOpen.Core.AxoContext METHOD PROTECTED OVERRIDE Main // Here goes all your logic for given AxoContext. ; END_METHOD END_CLASS Cyclical call of the AxoContext logic (Main method) is ensured when AxoContext Run method is called. Run method is public therefore accessible and visible to any part of the program that whishes to call it. How to start AxoContext's execution PROGRAM ProgramExample VAR MyContext : AxoContextExample; END_VAR MyContext.Run(); END_PROGRAM"
  },
  "articles/core/AXOOBJECT.html": {
    "href": "articles/core/AXOOBJECT.html",
    "title": "AxoObject | System.Dynamic.ExpandoObject",
    "keywords": "AxoObject AxoObject is the base class for any other classes of AXOpen.Core. It provides access to the parent AxoObject and the AxoContext in which it was initialized. classDiagram class Object{ +Initialize(IAxoContext context) +Initialize(IAxoObject parent) } AxoObject initialization within a AxoContext CLASS PUBLIC MyContext EXTENDS AXOpen.Core.AxoContext VAR _myObject : AxoObject; END_VAR METHOD PROTECTED OVERRIDE Main _myObject.Initialize(THIS); END_METHOD END_CLASS AxoObject initialization within another AxoObject CLASS PUBLIC MyParentObject EXTENDS AxoContext VAR _myChildObject : AxoObject; END_VAR METHOD PROTECTED OVERRIDE Main _myChildObject.Initialize(THIS); END_METHOD END_CLASS"
  },
  "articles/core/AXOREMOTETASK.html": {
    "href": "articles/core/AXOREMOTETASK.html",
    "title": "AxoRemoteTask | System.Dynamic.ExpandoObject",
    "keywords": "AxoRemoteTask AxoRemoteTask provides task execution, where the execution of the task is deferred to .NET environment. AxoRemoteTask derives from AxoTask. AxoRemoteTask needs to be initialized to set the proper AxoContext. Important The deferred execution in .NET environment is not hard-real time nor deterministic. You would typically use the AxoRemoteTask when it would be hard to achieve a goal in the PLC, but you can delegate the access to the non-hard-real and nondeterministic environment. Examples of such use would be database access, complex calculations, and email sending. AxoTask initialization within a AxoContext _remoteTask.Initialize(THIS); // THIS = IAxoContext There are two key methods for managing the AxoRemoteTask: Invoke() fires the execution of the AxoRemoteTask (can be called fire&forget or cyclically) Execute() method must be called cyclically. In contrast to AxoTask the method does not execute any logic. You will need to call the Execute method cyclically which will deffer the logic execution in .NET environment. There are the following differences in behavior of DoneWhen and ThrowWhen methods: DoneWhen(Done_Condition) - Unlike AxoTask Done condition is handled internally. It does not have an effect. ThrowWhen(Error_Condition) - Unlike AxoTask Exception emission is handled internally. It does not have an effect. For termination of the execution of the AxoRemoteTask there are the following methods: Abort() - terminates the execution of the AxoRemoteTask and enters the Ready state if the AxoRemoteTask is in the Busy state; otherwise does nothing. To reset the AxoRemoteTask from any state at any moment, there is the following method: Restore() acts as a reset of the AxoRemoteTask (sets the state into Ready from any state of the AxoRemoteTask). The AxoRemoteTask executes upon the Invoke method call. Invoke fires the execution of Execute logic upon the first call, and Invoke does not need cyclical calling. _remoteTask.Invoke('hello'); Invoke() method returns IAxoTaskState with the following members: IsBusy indicates the execution started and is running. IsDone indicates the execution completed with success. HasError indicates the execution terminated with a failure. IsAborted indicates that the execution of the AxoRemoteTask has been aborted. It should continue by calling the method Resume(). Task initialization in .NET Entry.Plc.AxoRemoteTasks._remoteTask.Initialize(() => Console.WriteLine($\"Remote task executed PLC sent this string: '{Entry.Plc.AxoRemoteTasks._remoteTask.Message.GetAsync().Result}'\")); In this example, when the PLC invokes this task it will write a message into console. You can use arbitrary code in place of the labmda expression. Executing from PLC Invoking the AxoRemoteTask and waiting for its completion at the same place. IF(_remoteTask.Invoke('hello').IsDone()) THEN _doneCounter := _doneCounter + 1; END_IF; Invoking the AxoRemoteTask and waiting for its completion at the different places. // Fire & Forget _remoteTask.Invoke('hello'); // Wait for done somwhere else IF(_remoteTask.IsDone()) THEN _doneCounter := _doneCounter + 1; END_IF; Checking if the AxoRemoteTask is executing. IF(_remoteTask.IsBusy()) THEN ;// Do something after task started END_IF; Check for the AxoRemoteTask's error state. IF(_remoteTask.HasError()) THEN ;// Do something when an exception occurs on remote task. END_IF;"
  },
  "articles/core/AXOSEQUENCER.html": {
    "href": "articles/core/AXOSEQUENCER.html",
    "title": "AxoSequencer | System.Dynamic.ExpandoObject",
    "keywords": "AxoSequencer AxoSequencer is an AxoCordinator class provides triggering the AxoStep-s inside the sequence in the order they are written. AxoSequencer extends from AxoTask so it also has to be initialized by calling its Initialize() method and started using its Invoke() method. AxoSequencer contains following methods: Open(): this method must be called cyclically before any logic. It provides some configuration mechanism that ensures that the steps are going to be executed in the order, they are written. During the very first call of the sequence, no step is executed as the AxoSequencer is in the configuring state. From the second context cycle after the AxoSequencer has been invoked the AxoSequencer change its state to running and starts the execution from the first step upto the last one. When AxoSequencer is in running state, order of the step cannot be changed. MoveNext(): Terminates the currently executed step and moves the AxoSequencer's pointer to the next step in order of execution. RequestStep(): Terminates the currently executed step and set the AxoSequencer's pointer to the order of the RequestedStep. When the order of the RequestedStep is higher than the order of the currently finished step (the requested step is \"after\" the current one) the requested step is started in the same context cycle. When the order of the RequestedStep is lower than the order of the currently finished step (the requested step is \"before\" the current one) the requested step is started in the next context cycle. CompleteSequence(): Terminates the currently executed step, completes (finishes) the execution of this AxoSequencer and set the coordination state to Idle. If the SequenceMode of the AxoSequencer is set to Cyclic, following Open() method call in the next context cycle switch it again into the configuring state, reasign the order of the individual steps (even if the orders have been changed) and subsequently set AxoSequencer back into the running state. If the SequenceMode of the AxoSequencer is set to RunOnce, terminates also execution of the AxoSequencer itself. `GetCoordinatorState()': Returns the current state of the AxoSequencer. Idle Configuring: assigning the orders to the steps, no step is executed. Running: orders to the steps are already assigned, step is executed. SetSteppingMode(): Sets the stepping mode of the AxoSequencer. Following values are possible. None: StepByStep: if this mode is choosen, each step needs to be started by the invocation of the StepIn commmand. Continous: if this mode is choosen (default), each step is started automaticcaly after the previous one has been completed. GetSteppingMode(): Gets the current stepping mode of the AxoSequencer. SetSequenceMode(): Sets the sequence mode of the AxoSequencer. Following values are possible. None: RunOnce: if this mode is choosen, after calling the method CompleteSequence() the execution of the sequence is terminated. Cyclic: if this mode is choosen (default), after calling the method CompleteSequence() the execution of the sequence is \"reordered\" and started from beginning. GetSequenceMode(): Gets the current sequence mode of the AxoSequencer. GetNumberOfConfiguredSteps(): Gets the number of the configured steps in the sequence. Example of using AxoSequencer Example of the declaration of the AxoSequencer and AxoStep CLASS AxoSequencerDocuExample EXTENDS AXOpen.Core.AxoContext VAR PUBLIC _mySequencer : AXOpen.Core.AxoSequencer; _step_1 : AxoStep; _step_2 : AxoStep; _step_3 : AxoStep; _myCounter : ULINT; END_VAR END_CLASS Initialization Initialization of the context needs to be called first. It does not need to be called cyclically, just once. METHOD PUBLIC Initialize _mySequencer.Initialize(THIS); _step_1.Initialize(THIS); _step_2.Initialize(THIS); _step_3.Initialize(THIS); END_METHOD Open The Open() method must be called cyclically before any logic. _mySequencer.Open(); Step Example of the most simple use of the Execute() method of the AxoStep class, only with the AxoCoordinator defined. IF _step_1.Execute(_mySequencer) THEN // do something _myCounter := _myCounter + ULINT#1; IF (_myCounter MOD ULINT#5) = ULINT#0 THEN // continue to the next step of the sequence _mySequencer.MoveNext(); END_IF; END_IF; Example of use of the Execute() method of the AxoStep class with the Enable condition. This step is going to be executed just in the first run of the sequence, as during the second one, the Enable parameter will have the value of FALSE. IF _step_2.Execute(coord := _mySequencer, Enable := _myCounter <= ULINT#20) THEN _myCounter := _myCounter + ULINT#1; IF _myCounter = ULINT#20 THEN // Jumping to step 1. As it is jumping backwards, the execution of step 1 // is going to be started in the next context cycle. _mySequencer.RequestStep(_step_1); END_IF; END_IF; Example of use of the Execute() method of the AxoStep class with all three parameters defined. IF _step_3.Execute(coord := _mySequencer, Enable := TRUE, Description := 'This is a description of the step 3' ) THEN _myCounter := _myCounter + ULINT#1; IF (_myCounter MOD ULINT#7) = ULINT#0 THEN // Finalize the sequence and initiate the execution from the first step. _mySequencer.CompleteSequence(); END_IF; END_IF;"
  },
  "articles/core/AXOSTEP.html": {
    "href": "articles/core/AXOSTEP.html",
    "title": "AxoStep | System.Dynamic.ExpandoObject",
    "keywords": "AxoStep AxoStep is an extension class of the AxoTask and provides the basics for the coordinated controlled execution of the task in the desired order based on the coordination mechanism used. AxoStep contains the Execute() method so as its base class overloaded and extended by following parameters: coord (mandatory): instance of the coordination controlling the execution of the AxoStep. Enable (optional): if this value is FALSE, AxoStep body is not executed and the current order of the execution is incremented. Description (optional): AxoStep description text describing the action the AxoStep is providing. AxoStep class contains following public members: Order: Order of the AxoStep in the coordination. This value can be set by calling the method SetStepOrder() and read by the method GetStepOrder(). StepDescription: AxoStep description text describing the action the AxoStep is providing. This value can be set by calling the Execute() method with Description parameter. IsActive: if TRUE, the AxoStep is currently executing, or is in the order of the execution, otherwise FALSE. This value can be set by calling the method SetIsActive() and read by the method GetIsActive(). IsEnabled: if FALSE, AxoStep body is not executed and the current order of the execution is incremented. This value can be set by calling the method SetIsEnabled() or calling the Execute() method with Enable parameter and read by the method GetIsEnabled()."
  },
  "articles/core/AXOTASK.html": {
    "href": "articles/core/AXOTASK.html",
    "title": "AxoTask | System.Dynamic.ExpandoObject",
    "keywords": "AxoTask AxoTask provides basic task execution. AxoTask needs to be initialized to set the proper AxoContext. AxoTask initialization within a AxoContext CLASS AxoTaskDocuExample EXTENDS AXOpen.Core.AxoContext VAR PUBLIC {#ix-set:AttributeName = \"Task name\"} _myTask : AxoTask; _myCounter : ULINT; END_VAR METHOD PUBLIC Initialize // Initialization of the context needs to be called first // It does not need to be called cyclically, just once _myTask.Initialize(THIS); END_METHOD END_CLASS There are two key methods for managing the AxoTask: Invoke() fires the execution of the AxoTask (can be called fire&forget or cyclically) Execute() method must be called cyclically. The method returns TRUE when the AxoTask is required to run until enters Done state or terminates in error. For termination of the execution of the AxoTask there are following methods: DoneWhen(Done_Condition) - terminates the execution of the AxoTask and enters the Done state when the Done_Condition is TRUE. ThrowWhen(Error_Condition) - terminates the execution of the AxoTask and enters the Error state when the Error_Condition is TRUE. Abort() - terminates the execution of the AxoTask and enters the Ready state if the AxoTask is in the Busy state, otherwise does nothing. To reset the AxoTask from any state in any moment there is following method: Restore() acts as reset of the AxoTask (sets the state into Ready state from any state of the AxoTask). Moreover, there are seven more \"event-like\" methods that are called when a specific event occurs (see the chart below). flowchart TD classDef states fill:#80FF00,stroke:#0080FF,stroke-width:4px,color:#7F00FF,font-size:15px,font-weight:bold classDef actions fill:#ff8000,stroke:#0080ff,stroke-width:4px,color:#7F00FF,font-size:15px,font-weight:bold classDef events fill:#80FF00,stroke:#0080ff,stroke-width:4px,color:#7F00FF,font-size:15px,font-weight:bold s1((Ready)):::states s2((Kicking)):::states s3((Busy)):::states s4((Done)):::states s5((Error)):::states s6((Aborted)):::states a1(\"Invoke()#128258;\"):::actions a2(\"Execute()#128260;\"):::actions a3(\"DoneWhen(TRUE)#128258;\"):::actions a4(\"ThrowWhen(TRUE)#128258;\"):::actions a5(\"NOT Invoke() call for at<br>least two Context cycles#128260;\"):::actions a6(\"Restore()#128258;\"):::actions a7(\"Abort()#128258;\"):::actions a8(\"Resume()#128258;\"):::actions e1{{\"OnStart()#128258;\"}}:::events e2{{\"OnError()#128258;\"}}:::events e3{{\"WhileError()#128260;\"}}:::events e4{{\"OnDone()#128258;\"}}:::events e5{{\"OnAbort()#128258;\"}}:::events e6{{\"OnRestore()#128258;\"}}:::events subgraph legend[\" \"] direction LR s((State)):::states ac(\"Action #128260;:called<br>cyclically\"):::actions as(\"Action #128258;:single<br>or cyclical call \"):::actions ec{{\"Event #128260;:called<br>cyclically\"}}:::events es{{\"Event #128258;:triggered<br>once \"}}:::events end subgraph chart[\" \"] direction TB s1 s1-->a1 a1-->s2 s2-->a2 s3-->a3 s3-->a7 a7-->e5 a7-->s6 s6-->a8 a8-->s3 a3-->s4 s4---->a5 a5-->a1 a2--->s3 s3--->a4 a4-->s5 s5-->a6 a6-->e6 a2-->e1 a4-->e2 a4-->e3 a3-->e4 a6-->s1 end Example of using AxoTask: CLASS AxoTaskDocuExample EXTENDS AXOpen.Core.AxoContext VAR PUBLIC {#ix-set:AttributeName = \"Task name\"} _myTask : AxoTask; _myCounter : ULINT; END_VAR METHOD PUBLIC Initialize // Initialization of the context needs to be called first // It does not need to be called cyclically, just once _myTask.Initialize(THIS); END_METHOD METHOD PROTECTED OVERRIDE Main _myTask.Initialize(THIS); // Cyclicall call of the Execute IF _myTask.Execute() THEN _myCounter := _myCounter + ULINT#1; _myTask.DoneWhen(_myCounter = ULINT#100); END_IF; IF _myTask.IsDone() THEN _myCounter := ULINT#0; END_IF; END_METHOD END_CLASS The AxoTask executes upon the Invoke method call. Invoke fires the execution of Execute logic upon the first call, and it does not need cyclical calling. _myTask.Invoke(); Invoke() method returns IAxoTaskState with the following members: IsBusy indicates the execution started and is running. IsDone indicates the execution completed with success. HasError indicates the execution terminated with a failure. IsAborted indicates that the execution of the AxoTask has been aborted. It should continue by calling the method Resume(). Examples of using: Invoking the AxoTask and waiting for its completion at the same place. IF _myTask.Invoke().IsDone() THEN ; //Do something END_IF; Invoking the AxoTask and waiting for its completion at the different places. _myTask.Invoke(); IF _myTask.IsDone() THEN ; //Do something END_IF; Checking if the AxoTask is executing. IF _myTask.Invoke().IsBusy() THEN ; //Do something END_IF; Check for the AxoTask's error state. IF _myTask.Invoke().HasError() THEN ; //Do something END_IF; The AxoTask can be started only from the Ready state by calling the Invoke() method in the same Context cycle as the Execute() method is called, regardless the order of the methods calls. After AxoTask completion, the state of the AxoTask will remain in Done, unless: 1.) AxoTask's Restore method is called (AxoTask changes it's state to Ready state). 2.) Invoke method is not called for two or more consecutive cycles of its context (that usually means the same as PLC cycle); successive call of Invoke will switch the task into the Ready state and immediately into the Kicking state. The AxoTask may finish also in an Error state. In that case, the only possibility to get out of Error state is by calling the Restore() method. To implement any of the already mentioned \"event-like\" methods the new class that extends from the AxoTask needs to be created. The required method with PROTECTED OVERRIDE access modifier needs to be created as well, and the custom logic needs to be placed in. These methods are: OnAbort() - executes once when the task is aborted. OnResume() - executes once when the task is resumed. OnDone() - executes once when the task reaches the Done state. OnError() - executes once when the task reaches the Error state. OnRestore() - executes once when the task is restored. OnStart() - executes once when the task starts (at the moment of transition from the Kicking state into the Busy state). WhileError() - executes repeatedly while the task is in Error state (and Execute() method is called). Example of implementing \"event-like\" methods: CLASS MyTaskExample EXTENDS AXOpen.Core.AxoTask VAR OnAbortCounter : ULINT; OnResumeCounter : ULINT; OnDoneCounter : ULINT; OnErrorCounter : ULINT; OnRestoreCounter : ULINT; OnStartCounter : ULINT; WhileErrorCounter : ULINT; END_VAR METHOD PROTECTED OVERRIDE OnAbort OnAbortCounter := OnAbortCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnResume OnResumeCounter := OnResumeCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnDone OnDoneCounter := OnDoneCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnError OnErrorCounter := OnErrorCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnRestore OnRestoreCounter := OnRestoreCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnStart OnStartCounter := OnStartCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE WhileError WhileErrorCounter := WhileErrorCounter + ULINT#1; END_METHOD END_CLASS How to visualize AxoTask On the UI side there are several possibilities how to visualize the AxoTask. You use the AxoTaskView and set its Component according the placement of the instance of the AxoTask. Based on the value of Disable the control element clod be controllable: <AxoTaskView Component=\"@Entry.Plc.AxoTaskDocu._myTask\" Disable=\"false\" /> or display only: <AxoTaskView Component=\"@Entry.Plc.AxoTaskDocu._myTask\" Disable=\"true\" /> The next posssibility is to use the RenderableContentControl and set its Context according the placement of the instance of the AxoTask. Again as before the element could be controlable when the value of the Presentation is Command: <RenderableContentControl Context=\"@Entry.Plc.AxoTaskDocu._myTask\" Presentation=\"Command\" Class=\"ps-2\" /> or display only when the value of the Presentation is Status <RenderableContentControl Context=\"@Entry.Plc.AxoTaskDocu._myTask\" Presentation=\"Status\" Class=\"ps-2\" />"
  },
  "articles/core/AXOTOGGLETASK.html": {
    "href": "articles/core/AXOTOGGLETASK.html",
    "title": "AxoToggleTask | System.Dynamic.ExpandoObject",
    "keywords": "AxoToggleTask AxoToggleTask provides basic switching on and of functions. AxoToggleTask needs to be initialized to set the proper AxoContext. AxoToggleTask initialization within a AxoContext CLASS AxoToggleTaskDocuExample EXTENDS AXOpen.Core.AxoContext VAR PUBLIC {#ix-set:AttributeName = \"Toggle task example\"} {#ix-set:AttributeStateOnDesc = \"SwitchedOn\"} {#ix-set:AttributeStateOffDesc = \"SwitchedOff\"} _myToggleTask : AxoToggleTask; _myCounter : ULINT; END_VAR METHOD PUBLIC Initialize // Initialization of the context needs to be called first END_IF; There are three key methods for managing the AxoToggleTask: SwitchOn() -ones is called and the AxoToggleTask is not Disabled, changes the state of the AxoToggleTask to TRUE if its previous state was FALSE. (can be called fire&forget or cyclically). The method returns TRUE if the change of the state was performed, otherwise FALSE. SwitchOff() -ones is called and the AxoToggleTask is not Disabled, changes the state of the AxoToggleTask to FALSE if its previous state was TRUE. (can be called fire&forget or cyclically). The method returns TRUE if the change of the state was performed, otherwise FALSE. Toggle() -ones is called and the AxoToggleTask is not Disabled, changes the state of the AxoToggleTask to TRUE if its previous state was FALSE and vice-versa . (can be called fire&forget or cyclically). The method returns TRUE if the change of the state was performed, otherwise FALSE. The methods SwitchOn() and SwitchOff() are designed to be used inside automatic logic, where change to exact value has to be performed, while Toggle() is designed to be used mostly in connection with manual control. Example of using SwitchOn() method with its return value. IF _myToggleTask.SwitchOn() THEN ; // do something on rising edge END_IF; Example of using SwitchOff() method with its return value. IF _myToggleTask.SwitchOff()THEN ; // do something on falling edge END_IF; Example of using Toggle() method with its return value. IF _myToggleTask.Toggle()THEN ; // do something on state change END_IF; To check the state of the task there are two methods: IsSwitchOn() - returns TRUE if the state of the task is TRUE. IsSwitchOff() - returns TRUE if the state of the task is FALSE. Example of using IsSwitchOn() method: IF _myToggleTask.IsSwitchedOn() THEN ; // do something END_IF; Example of using IsSwitchOff() method: IF _myToggleTask.IsSwitchedOff() THEN ; // do something END_IF; Moreover, there are five more \"event-like\" methods that are called when a specific event occurs (see the chart below). To implement any of the already mentioned \"event-like\" methods the new class that extends from the AxoToggleTask needs to be created. The required method with PROTECTED OVERRIDE access modifier needs to be created as well, and the custom logic needs to be placed in. These methods are: OnSwitchedOn() - executes once when the task changes its state from FALSE to TRUE. OnSwitchedOff() - executes once when the task changes its state from TRUE to FALSE. OnStateChanged() - executes once when the task changes its state. SwitchedOn() - executes repeatedly while the task is in TRUE state. SwitchedOff() - executes repeatedly while the task is in FALSE state. Example of implementing \"event-like\" methods: CLASS MyToogleTaskExample Extends AxoToggleTask VAR OnSwitchedOnCounter : ULINT; OnSwitchedOffCounter : ULINT; OnStateChangedCounter : ULINT; SwitchOnExecutionCounter : ULINT; SwitchOffExecutionCounter : ULINT; END_VAR METHOD PROTECTED OVERRIDE OnSwitchedOn OnSwitchedOnCounter := OnSwitchedOnCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnSwitchedOff OnSwitchedOffCounter := OnSwitchedOffCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnStateChanged OnStateChangedCounter := OnStateChangedCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE SwitchedOn SwitchOnExecutionCounter := SwitchOnExecutionCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE SwitchedOff SwitchOffExecutionCounter := SwitchOffExecutionCounter + ULINT#1; END_METHOD END_CLASS"
  },
  "articles/core/README.html": {
    "href": "articles/core/README.html",
    "title": "AXOpen.Core | System.Dynamic.ExpandoObject",
    "keywords": "AXOpen.Core AXOpen.Core provides basic blocks for building AXOpen applications. Basic concepts AxoContext AxoContext encapsulates entire application or application units. Any solution may contain one or more contexts, however the each should be considered to be an isolated island and any direct inter-context access to members must be avoided. Note Each AxoContext must belong to a single PLC task.Multiple AxoContexts can be however running on the same task. classDiagram class Context{ +Main()* +Run() } In its basic implementation AxoContext has relatively simple interface. Main is the method where we place all calls of our sub-routines. In other words the Run is the root of the call tree of our program. Run method runs the AxoContext. It must be called cyclically within a program unit that is attached to a cyclic task. Why do we need AxoContext AxoContext provides counters, object identification and other information about the execution of the program. These information is then used by the objects contained at different levels of the AxoContext. How AxoContext works When you call Run method on an instance of a AxoContext, it will ensure opening AxoContext, running Main method (root of all your program calls) and AxoContext closing. flowchart LR classDef run fill:#80FF00,stroke:#0080FF,stroke-width:4px,color:#7F00FF,font-size:15px,font-weight:bold classDef main fill:#ff8000,stroke:#0080ff,stroke-width:4px,color:#7F00FF,font-size:15px,font-weight:bold id1(Open):::run-->id2(#Main*):::main-->id3(Close):::run-->id1 How to use AxoContext Base class for the AxoContext is AXOpen.Core.AxoContext. The entry point of call execution of the AxoContext is Main method. Notice that the AxoContext class is abstract and cannot be instantiated if not extended. Main method must be overridden in derived class notice the use of override keyword and also that the method is protected which means the it is visible only from within the AxoContext and derived classes. How to extend AxoContext class CLASS PUBLIC AxoContextExample EXTENDS AXOpen.Core.AxoContext METHOD PROTECTED OVERRIDE Main // Here goes all your logic for given AxoContext. ; END_METHOD END_CLASS Cyclical call of the AxoContext logic (Main method) is ensured when AxoContext Run method is called. Run method is public therefore accessible and visible to any part of the program that whishes to call it. How to start AxoContext's execution PROGRAM ProgramExample VAR MyContext : AxoContextExample; END_VAR MyContext.Run(); END_PROGRAM AxoObject AxoObject is the base class for any other classes of AXOpen.Core. It provides access to the parent AxoObject and the AxoContext in which it was initialized. classDiagram class Object{ +Initialize(IAxoContext context) +Initialize(IAxoObject parent) } AxoObject initialization within a AxoContext CLASS PUBLIC MyContext EXTENDS AXOpen.Core.AxoContext VAR _myObject : AxoObject; END_VAR METHOD PROTECTED OVERRIDE Main _myObject.Initialize(THIS); END_METHOD END_CLASS AxoObject initialization within another AxoObject CLASS PUBLIC MyParentObject EXTENDS AxoContext VAR _myChildObject : AxoObject; END_VAR METHOD PROTECTED OVERRIDE Main _myChildObject.Initialize(THIS); END_METHOD END_CLASS AxoTask AxoTask provides basic task execution. AxoTask needs to be initialized to set the proper AxoContext. AxoTask initialization within a AxoContext CLASS AxoTaskDocuExample EXTENDS AXOpen.Core.AxoContext VAR PUBLIC {#ix-set:AttributeName = \"Task name\"} _myTask : AxoTask; _myCounter : ULINT; END_VAR METHOD PUBLIC Initialize // Initialization of the context needs to be called first // It does not need to be called cyclically, just once _myTask.Initialize(THIS); END_METHOD END_CLASS There are two key methods for managing the AxoTask: Invoke() fires the execution of the AxoTask (can be called fire&forget or cyclically) Execute() method must be called cyclically. The method returns TRUE when the AxoTask is required to run until enters Done state or terminates in error. For termination of the execution of the AxoTask there are following methods: DoneWhen(Done_Condition) - terminates the execution of the AxoTask and enters the Done state when the Done_Condition is TRUE. ThrowWhen(Error_Condition) - terminates the execution of the AxoTask and enters the Error state when the Error_Condition is TRUE. Abort() - terminates the execution of the AxoTask and enters the Ready state if the AxoTask is in the Busy state, otherwise does nothing. To reset the AxoTask from any state in any moment there is following method: Restore() acts as reset of the AxoTask (sets the state into Ready state from any state of the AxoTask). Moreover, there are seven more \"event-like\" methods that are called when a specific event occurs (see the chart below). flowchart TD classDef states fill:#80FF00,stroke:#0080FF,stroke-width:4px,color:#7F00FF,font-size:15px,font-weight:bold classDef actions fill:#ff8000,stroke:#0080ff,stroke-width:4px,color:#7F00FF,font-size:15px,font-weight:bold classDef events fill:#80FF00,stroke:#0080ff,stroke-width:4px,color:#7F00FF,font-size:15px,font-weight:bold s1((Ready)):::states s2((Kicking)):::states s3((Busy)):::states s4((Done)):::states s5((Error)):::states s6((Aborted)):::states a1(\"Invoke()#128258;\"):::actions a2(\"Execute()#128260;\"):::actions a3(\"DoneWhen(TRUE)#128258;\"):::actions a4(\"ThrowWhen(TRUE)#128258;\"):::actions a5(\"NOT Invoke() call for at<br>least two Context cycles#128260;\"):::actions a6(\"Restore()#128258;\"):::actions a7(\"Abort()#128258;\"):::actions a8(\"Resume()#128258;\"):::actions e1{{\"OnStart()#128258;\"}}:::events e2{{\"OnError()#128258;\"}}:::events e3{{\"WhileError()#128260;\"}}:::events e4{{\"OnDone()#128258;\"}}:::events e5{{\"OnAbort()#128258;\"}}:::events e6{{\"OnRestore()#128258;\"}}:::events subgraph legend[\" \"] direction LR s((State)):::states ac(\"Action #128260;:called<br>cyclically\"):::actions as(\"Action #128258;:single<br>or cyclical call \"):::actions ec{{\"Event #128260;:called<br>cyclically\"}}:::events es{{\"Event #128258;:triggered<br>once \"}}:::events end subgraph chart[\" \"] direction TB s1 s1-->a1 a1-->s2 s2-->a2 s3-->a3 s3-->a7 a7-->e5 a7-->s6 s6-->a8 a8-->s3 a3-->s4 s4---->a5 a5-->a1 a2--->s3 s3--->a4 a4-->s5 s5-->a6 a6-->e6 a2-->e1 a4-->e2 a4-->e3 a3-->e4 a6-->s1 end Example of using AxoTask: CLASS AxoTaskDocuExample EXTENDS AXOpen.Core.AxoContext VAR PUBLIC {#ix-set:AttributeName = \"Task name\"} _myTask : AxoTask; _myCounter : ULINT; END_VAR METHOD PUBLIC Initialize // Initialization of the context needs to be called first // It does not need to be called cyclically, just once _myTask.Initialize(THIS); END_METHOD METHOD PROTECTED OVERRIDE Main _myTask.Initialize(THIS); // Cyclicall call of the Execute IF _myTask.Execute() THEN _myCounter := _myCounter + ULINT#1; _myTask.DoneWhen(_myCounter = ULINT#100); END_IF; IF _myTask.IsDone() THEN _myCounter := ULINT#0; END_IF; END_METHOD END_CLASS The AxoTask executes upon the Invoke method call. Invoke fires the execution of Execute logic upon the first call, and it does not need cyclical calling. _myTask.Invoke(); Invoke() method returns IAxoTaskState with the following members: IsBusy indicates the execution started and is running. IsDone indicates the execution completed with success. HasError indicates the execution terminated with a failure. IsAborted indicates that the execution of the AxoTask has been aborted. It should continue by calling the method Resume(). Examples of using: Invoking the AxoTask and waiting for its completion at the same place. IF _myTask.Invoke().IsDone() THEN ; //Do something END_IF; Invoking the AxoTask and waiting for its completion at the different places. _myTask.Invoke(); IF _myTask.IsDone() THEN ; //Do something END_IF; Checking if the AxoTask is executing. IF _myTask.Invoke().IsBusy() THEN ; //Do something END_IF; Check for the AxoTask's error state. IF _myTask.Invoke().HasError() THEN ; //Do something END_IF; The AxoTask can be started only from the Ready state by calling the Invoke() method in the same Context cycle as the Execute() method is called, regardless the order of the methods calls. After AxoTask completion, the state of the AxoTask will remain in Done, unless: 1.) AxoTask's Restore method is called (AxoTask changes it's state to Ready state). 2.) Invoke method is not called for two or more consecutive cycles of its context (that usually means the same as PLC cycle); successive call of Invoke will switch the task into the Ready state and immediately into the Kicking state. The AxoTask may finish also in an Error state. In that case, the only possibility to get out of Error state is by calling the Restore() method. To implement any of the already mentioned \"event-like\" methods the new class that extends from the AxoTask needs to be created. The required method with PROTECTED OVERRIDE access modifier needs to be created as well, and the custom logic needs to be placed in. These methods are: OnAbort() - executes once when the task is aborted. OnResume() - executes once when the task is resumed. OnDone() - executes once when the task reaches the Done state. OnError() - executes once when the task reaches the Error state. OnRestore() - executes once when the task is restored. OnStart() - executes once when the task starts (at the moment of transition from the Kicking state into the Busy state). WhileError() - executes repeatedly while the task is in Error state (and Execute() method is called). Example of implementing \"event-like\" methods: CLASS MyTaskExample EXTENDS AXOpen.Core.AxoTask VAR OnAbortCounter : ULINT; OnResumeCounter : ULINT; OnDoneCounter : ULINT; OnErrorCounter : ULINT; OnRestoreCounter : ULINT; OnStartCounter : ULINT; WhileErrorCounter : ULINT; END_VAR METHOD PROTECTED OVERRIDE OnAbort OnAbortCounter := OnAbortCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnResume OnResumeCounter := OnResumeCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnDone OnDoneCounter := OnDoneCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnError OnErrorCounter := OnErrorCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnRestore OnRestoreCounter := OnRestoreCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnStart OnStartCounter := OnStartCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE WhileError WhileErrorCounter := WhileErrorCounter + ULINT#1; END_METHOD END_CLASS How to visualize AxoTask On the UI side there are several possibilities how to visualize the AxoTask. You use the AxoTaskView and set its Component according the placement of the instance of the AxoTask. Based on the value of Disable the control element clod be controllable: <AxoTaskView Component=\"@Entry.Plc.AxoTaskDocu._myTask\" Disable=\"false\" /> or display only: <AxoTaskView Component=\"@Entry.Plc.AxoTaskDocu._myTask\" Disable=\"true\" /> The next posssibility is to use the RenderableContentControl and set its Context according the placement of the instance of the AxoTask. Again as before the element could be controlable when the value of the Presentation is Command: <RenderableContentControl Context=\"@Entry.Plc.AxoTaskDocu._myTask\" Presentation=\"Command\" Class=\"ps-2\" /> or display only when the value of the Presentation is Status <RenderableContentControl Context=\"@Entry.Plc.AxoTaskDocu._myTask\" Presentation=\"Status\" Class=\"ps-2\" /> AxoToggleTask AxoToggleTask provides basic switching on and of functions. AxoToggleTask needs to be initialized to set the proper AxoContext. AxoToggleTask initialization within a AxoContext CLASS AxoToggleTaskDocuExample EXTENDS AXOpen.Core.AxoContext VAR PUBLIC {#ix-set:AttributeName = \"Toggle task example\"} {#ix-set:AttributeStateOnDesc = \"SwitchedOn\"} {#ix-set:AttributeStateOffDesc = \"SwitchedOff\"} _myToggleTask : AxoToggleTask; _myCounter : ULINT; END_VAR METHOD PUBLIC Initialize // Initialization of the context needs to be called first END_IF; There are three key methods for managing the AxoToggleTask: SwitchOn() -ones is called and the AxoToggleTask is not Disabled, changes the state of the AxoToggleTask to TRUE if its previous state was FALSE. (can be called fire&forget or cyclically). The method returns TRUE if the change of the state was performed, otherwise FALSE. SwitchOff() -ones is called and the AxoToggleTask is not Disabled, changes the state of the AxoToggleTask to FALSE if its previous state was TRUE. (can be called fire&forget or cyclically). The method returns TRUE if the change of the state was performed, otherwise FALSE. Toggle() -ones is called and the AxoToggleTask is not Disabled, changes the state of the AxoToggleTask to TRUE if its previous state was FALSE and vice-versa . (can be called fire&forget or cyclically). The method returns TRUE if the change of the state was performed, otherwise FALSE. The methods SwitchOn() and SwitchOff() are designed to be used inside automatic logic, where change to exact value has to be performed, while Toggle() is designed to be used mostly in connection with manual control. Example of using SwitchOn() method with its return value. IF _myToggleTask.SwitchOn() THEN ; // do something on rising edge END_IF; Example of using SwitchOff() method with its return value. IF _myToggleTask.SwitchOff()THEN ; // do something on falling edge END_IF; Example of using Toggle() method with its return value. IF _myToggleTask.Toggle()THEN ; // do something on state change END_IF; To check the state of the task there are two methods: IsSwitchOn() - returns TRUE if the state of the task is TRUE. IsSwitchOff() - returns TRUE if the state of the task is FALSE. Example of using IsSwitchOn() method: IF _myToggleTask.IsSwitchedOn() THEN ; // do something END_IF; Example of using IsSwitchOff() method: IF _myToggleTask.IsSwitchedOff() THEN ; // do something END_IF; Moreover, there are five more \"event-like\" methods that are called when a specific event occurs (see the chart below). To implement any of the already mentioned \"event-like\" methods the new class that extends from the AxoToggleTask needs to be created. The required method with PROTECTED OVERRIDE access modifier needs to be created as well, and the custom logic needs to be placed in. These methods are: OnSwitchedOn() - executes once when the task changes its state from FALSE to TRUE. OnSwitchedOff() - executes once when the task changes its state from TRUE to FALSE. OnStateChanged() - executes once when the task changes its state. SwitchedOn() - executes repeatedly while the task is in TRUE state. SwitchedOff() - executes repeatedly while the task is in FALSE state. Example of implementing \"event-like\" methods: CLASS MyToogleTaskExample Extends AxoToggleTask VAR OnSwitchedOnCounter : ULINT; OnSwitchedOffCounter : ULINT; OnStateChangedCounter : ULINT; SwitchOnExecutionCounter : ULINT; SwitchOffExecutionCounter : ULINT; END_VAR METHOD PROTECTED OVERRIDE OnSwitchedOn OnSwitchedOnCounter := OnSwitchedOnCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnSwitchedOff OnSwitchedOffCounter := OnSwitchedOffCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE OnStateChanged OnStateChangedCounter := OnStateChangedCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE SwitchedOn SwitchOnExecutionCounter := SwitchOnExecutionCounter + ULINT#1; END_METHOD METHOD PROTECTED OVERRIDE SwitchedOff SwitchOffExecutionCounter := SwitchOffExecutionCounter + ULINT#1; END_METHOD END_CLASS [!include[AxoMomentaryTask](AXOMOMENTARYTASK.md)] AxoRemoteTask AxoRemoteTask provides task execution, where the execution of the task is deferred to .NET environment. AxoRemoteTask derives from AxoTask. AxoRemoteTask needs to be initialized to set the proper AxoContext. Important The deferred execution in .NET environment is not hard-real time nor deterministic. You would typically use the AxoRemoteTask when it would be hard to achieve a goal in the PLC, but you can delegate the access to the non-hard-real and nondeterministic environment. Examples of such use would be database access, complex calculations, and email sending. AxoTask initialization within a AxoContext _remoteTask.Initialize(THIS); // THIS = IAxoContext There are two key methods for managing the AxoRemoteTask: Invoke() fires the execution of the AxoRemoteTask (can be called fire&forget or cyclically) Execute() method must be called cyclically. In contrast to AxoTask the method does not execute any logic. You will need to call the Execute method cyclically which will deffer the logic execution in .NET environment. There are the following differences in behavior of DoneWhen and ThrowWhen methods: DoneWhen(Done_Condition) - Unlike AxoTask Done condition is handled internally. It does not have an effect. ThrowWhen(Error_Condition) - Unlike AxoTask Exception emission is handled internally. It does not have an effect. For termination of the execution of the AxoRemoteTask there are the following methods: Abort() - terminates the execution of the AxoRemoteTask and enters the Ready state if the AxoRemoteTask is in the Busy state; otherwise does nothing. To reset the AxoRemoteTask from any state at any moment, there is the following method: Restore() acts as a reset of the AxoRemoteTask (sets the state into Ready from any state of the AxoRemoteTask). The AxoRemoteTask executes upon the Invoke method call. Invoke fires the execution of Execute logic upon the first call, and Invoke does not need cyclical calling. _remoteTask.Invoke('hello'); Invoke() method returns IAxoTaskState with the following members: IsBusy indicates the execution started and is running. IsDone indicates the execution completed with success. HasError indicates the execution terminated with a failure. IsAborted indicates that the execution of the AxoRemoteTask has been aborted. It should continue by calling the method Resume(). Task initialization in .NET Entry.Plc.AxoRemoteTasks._remoteTask.Initialize(() => Console.WriteLine($\"Remote task executed PLC sent this string: '{Entry.Plc.AxoRemoteTasks._remoteTask.Message.GetAsync().Result}'\")); In this example, when the PLC invokes this task it will write a message into console. You can use arbitrary code in place of the labmda expression. Executing from PLC Invoking the AxoRemoteTask and waiting for its completion at the same place. IF(_remoteTask.Invoke('hello').IsDone()) THEN _doneCounter := _doneCounter + 1; END_IF; Invoking the AxoRemoteTask and waiting for its completion at the different places. // Fire & Forget _remoteTask.Invoke('hello'); // Wait for done somwhere else IF(_remoteTask.IsDone()) THEN _doneCounter := _doneCounter + 1; END_IF; Checking if the AxoRemoteTask is executing. IF(_remoteTask.IsBusy()) THEN ;// Do something after task started END_IF; Check for the AxoRemoteTask's error state. IF(_remoteTask.HasError()) THEN ;// Do something when an exception occurs on remote task. END_IF; AxoStep AxoStep is an extension class of the AxoTask and provides the basics for the coordinated controlled execution of the task in the desired order based on the coordination mechanism used. AxoStep contains the Execute() method so as its base class overloaded and extended by following parameters: coord (mandatory): instance of the coordination controlling the execution of the AxoStep. Enable (optional): if this value is FALSE, AxoStep body is not executed and the current order of the execution is incremented. Description (optional): AxoStep description text describing the action the AxoStep is providing. AxoStep class contains following public members: Order: Order of the AxoStep in the coordination. This value can be set by calling the method SetStepOrder() and read by the method GetStepOrder(). StepDescription: AxoStep description text describing the action the AxoStep is providing. This value can be set by calling the Execute() method with Description parameter. IsActive: if TRUE, the AxoStep is currently executing, or is in the order of the execution, otherwise FALSE. This value can be set by calling the method SetIsActive() and read by the method GetIsActive(). IsEnabled: if FALSE, AxoStep body is not executed and the current order of the execution is incremented. This value can be set by calling the method SetIsEnabled() or calling the Execute() method with Enable parameter and read by the method GetIsEnabled(). AxoSequencer AxoSequencer is an AxoCordinator class provides triggering the AxoStep-s inside the sequence in the order they are written. AxoSequencer extends from AxoTask so it also has to be initialized by calling its Initialize() method and started using its Invoke() method. AxoSequencer contains following methods: Open(): this method must be called cyclically before any logic. It provides some configuration mechanism that ensures that the steps are going to be executed in the order, they are written. During the very first call of the sequence, no step is executed as the AxoSequencer is in the configuring state. From the second context cycle after the AxoSequencer has been invoked the AxoSequencer change its state to running and starts the execution from the first step upto the last one. When AxoSequencer is in running state, order of the step cannot be changed. MoveNext(): Terminates the currently executed step and moves the AxoSequencer's pointer to the next step in order of execution. RequestStep(): Terminates the currently executed step and set the AxoSequencer's pointer to the order of the RequestedStep. When the order of the RequestedStep is higher than the order of the currently finished step (the requested step is \"after\" the current one) the requested step is started in the same context cycle. When the order of the RequestedStep is lower than the order of the currently finished step (the requested step is \"before\" the current one) the requested step is started in the next context cycle. CompleteSequence(): Terminates the currently executed step, completes (finishes) the execution of this AxoSequencer and set the coordination state to Idle. If the SequenceMode of the AxoSequencer is set to Cyclic, following Open() method call in the next context cycle switch it again into the configuring state, reasign the order of the individual steps (even if the orders have been changed) and subsequently set AxoSequencer back into the running state. If the SequenceMode of the AxoSequencer is set to RunOnce, terminates also execution of the AxoSequencer itself. `GetCoordinatorState()': Returns the current state of the AxoSequencer. Idle Configuring: assigning the orders to the steps, no step is executed. Running: orders to the steps are already assigned, step is executed. SetSteppingMode(): Sets the stepping mode of the AxoSequencer. Following values are possible. None: StepByStep: if this mode is choosen, each step needs to be started by the invocation of the StepIn commmand. Continous: if this mode is choosen (default), each step is started automaticcaly after the previous one has been completed. GetSteppingMode(): Gets the current stepping mode of the AxoSequencer. SetSequenceMode(): Sets the sequence mode of the AxoSequencer. Following values are possible. None: RunOnce: if this mode is choosen, after calling the method CompleteSequence() the execution of the sequence is terminated. Cyclic: if this mode is choosen (default), after calling the method CompleteSequence() the execution of the sequence is \"reordered\" and started from beginning. GetSequenceMode(): Gets the current sequence mode of the AxoSequencer. GetNumberOfConfiguredSteps(): Gets the number of the configured steps in the sequence. Example of using AxoSequencer Example of the declaration of the AxoSequencer and AxoStep CLASS AxoSequencerDocuExample EXTENDS AXOpen.Core.AxoContext VAR PUBLIC _mySequencer : AXOpen.Core.AxoSequencer; _step_1 : AxoStep; _step_2 : AxoStep; _step_3 : AxoStep; _myCounter : ULINT; END_VAR END_CLASS Initialization Initialization of the context needs to be called first. It does not need to be called cyclically, just once. METHOD PUBLIC Initialize _mySequencer.Initialize(THIS); _step_1.Initialize(THIS); _step_2.Initialize(THIS); _step_3.Initialize(THIS); END_METHOD Open The Open() method must be called cyclically before any logic. _mySequencer.Open(); Step Example of the most simple use of the Execute() method of the AxoStep class, only with the AxoCoordinator defined. IF _step_1.Execute(_mySequencer) THEN // do something _myCounter := _myCounter + ULINT#1; IF (_myCounter MOD ULINT#5) = ULINT#0 THEN // continue to the next step of the sequence _mySequencer.MoveNext(); END_IF; END_IF; Example of use of the Execute() method of the AxoStep class with the Enable condition. This step is going to be executed just in the first run of the sequence, as during the second one, the Enable parameter will have the value of FALSE. IF _step_2.Execute(coord := _mySequencer, Enable := _myCounter <= ULINT#20) THEN _myCounter := _myCounter + ULINT#1; IF _myCounter = ULINT#20 THEN // Jumping to step 1. As it is jumping backwards, the execution of step 1 // is going to be started in the next context cycle. _mySequencer.RequestStep(_step_1); END_IF; END_IF; Example of use of the Execute() method of the AxoStep class with all three parameters defined. IF _step_3.Execute(coord := _mySequencer, Enable := TRUE, Description := 'This is a description of the step 3' ) THEN _myCounter := _myCounter + ULINT#1; IF (_myCounter MOD ULINT#7) = ULINT#0 THEN // Finalize the sequence and initiate the execution from the first step. _mySequencer.CompleteSequence(); END_IF; END_IF; AxoComponent AxoComponent is an abstract class extending the AxoObject, and it is the base building block for the \"hardware-related devices\" like a pneumatic piston, servo drive, robot, etc., so as for the, let's say, \"virtual devices\" like counter, database, etc. AxoComponent is designed to group all possible methods, tasks, settings, and status information into one consistent class. As the AxoComponent is an abstract class, it cannot be instantiated and must be extended. In the extended class, two methods are mandatory. Restore() - inside this method, the logic for resetting the AxoComponent or restoring it from any state to its initial state should be placed. ManualControl() - inside this method, the logic for manual operations with the component should be placed. To be able to control the AxoComponent instance manually, the method ActivateManualControl() of this instance needs to be called cyclically. The base class contains two additional method to deal with the manual control of the AxoComponent. ActivateManualControl() - when this method is called cyclically, the AxoComponent changes its behavior to manually controllable and ensure the call of the ManualControl() method in the derived class. IsManuallyControllable() -returns TRUE when the AxoComponent is manually controllable. Layout attributes ComponentHeader and ComponentDetails The visual view of the extended AxoComponent on the UI side could be done both ways. Manually with complete control over the design or by using the auto-rendering mechanism of the RenderableContentControl (TODO add a link to docu of the RenderableContentControl) element, which is, in most cases, more than perfect. To take full advantage of the auto-rendering mechanism, the base class has implemented the additional layout attributes ComponentHeader and ComponentDetails(TabName). The auto-rendered view is divided into two parts: the fAxoed one and the expandable one. All AxoComponent members with the ComponentHeader layout attribute defined will be displayed in the fixed part. All members with the ComponentDetails(TabName) layout attribute defined will be displayed in the expandable part inside the TabControl with \"TabName\". All members are added in the order in which they are defined, taking into account their layout attributes like Container(Layout.Wrap) or Container(Layout.Stack). How to implement AxoComponent Example of the implementation very simple AxoComponent with members placed only inside the Header. {#ix-attr:[Container(Layout.Stack)]} {#ix-set:AttributeName = \"AxoComponent with header only example\"} CLASS PUBLIC AxoComponentHeaderOnlyExample EXTENDS AXOpen.Core.AxoComponent METHOD PROTECTED OVERRIDE Restore: IAxoTask // Some logic for Restore could be placed here. For Example: valueReal := REAL#1.0; valueDint := DINT#0; END_METHOD METHOD PROTECTED OVERRIDE ManualControl // Some logic for manual control could be placed here. ; END_METHOD // Main method of the `AxoComponent` that must be // called inside the `AxoContext` cyclically. METHOD PUBLIC Run // Declaration of the input and output variables. // In the case of \"hardware-related\" `AxoComponent`, // these would be the variables linked to the hardware. VAR_INPUT inReal : REAL; inDint : DINT; END_VAR VAR_OUTPUT outReal : REAL; outDint : DINT; END_VAR // This must be called first. SUPER.Open(); // Place the custom logic here. valueReal := valueReal * inReal; valueDint := valueDint + inDint; outReal := valueReal; outDint := valueDint; END_METHOD VAR PUBLIC {#ix-attr:[Container(Layout.Wrap)]} {#ix-attr:[ComponentHeader()]} {#ix-set:AttributeName = \"Real product value\"} valueReal : REAL := REAL#1.0; {#ix-attr:[ComponentHeader()]} {#ix-set:AttributeName = \"Dint sum value\"} valueDint : DINT:= DINT#0; END_VAR END_CLASS How to use AxoComponent The instance of the extended AxoComponent must be defined inside the AxoContext. CLASS ComponentHeaderOnlyExampleContext EXTENDS AxoContext VAR PUBLIC {#ix-set:AttributeName = \"Very simple component example with header only defined\"} MyComponentWithHeaderOnly : AxoComponentHeaderOnlyExample; {#ix-set:AttributeName = \"<#Activate manual control#>\"} ActivateManualControl : BOOL; inHwReal : REAL := REAL#1.0001; inHwDint : DINT := DINT#1; outHwReal : REAL; outHwDint : DINT; END_VAR METHOD PROTECTED OVERRIDE Main // The `Initialize()` method must be called before any other method. MyComponentWithHeaderOnly.Initialize(THIS); // Example of the activation of the manual control. IF ActivateManualControl THEN MyComponentWithHeaderOnly.ActivateManualControl(); END_IF; // Calling the main method `Run` with respective input and output variables. MyComponentWithHeaderOnly.Run(inReal := inHwReal, inDint := inHwDint, outReal => outHwReal, outDint => outHwDint); END_METHOD END_CLASS Inside the Main() method of the related AxoContext following rules must be applied. The Initialize() method of the extended instance of the AxoComponent must be called first. The Run() method with the respective input and output variables must be called afterwards. How to visualize AxoComponent On the UI side use the RenderableContentControl and set its Context according the placement of the instance of the AxoComponent. <RenderableContentControl Context=\"@Entry.Plc.myComponentHeaderOnlyExample.MyComponentWithHeaderOnly\" Presentation=\"Command\" /> The rendered result should then looks as follows: In case of more complex AxoComponent the most important members should be placed in the fixed part (Header) and the rest of the members should be placed inside the expandable part (Details). The members inside the expandable part should be organize inside the tabs. More complex AxoComponent Example of the implementation more complex AxoComponent with members placed also in several tabs inside the expandable part (Details). {#ix-attr:[Container(Layout.Stack)]} {#ix-set:AttributeName = \"AxoComponent example name\"} CLASS PUBLIC AxoComponentExample EXTENDS AXOpen.Core.AxoComponent METHOD PROTECTED OVERRIDE Restore: IAxoTask ; END_METHOD METHOD PROTECTED OVERRIDE ManualControl ; END_METHOD METHOD PUBLIC Run VAR_INPUT inReal : REAL; inDint : DINT; END_VAR VAR_OUTPUT outReal : REAL; outDint : DINT; END_VAR // This must be called first. SUPER.Open(); // Place the custom logic here. Status.SomeStatusValue1 := Status.SomeStatusValue1 * inReal; Status.SomeStatusValue2 := Status.SomeStatusValue2 + inDint; outReal := Status.SomeStatusValue1; outDint := Status.SomeStatusValue2; END_METHOD VAR PUBLIC // Complete structure as a part of the component header. // All structure members are going to be displayed in the component header. {#ix-attr:[Container(Layout.Wrap)]} {#ix-attr:[ComponentHeader()]} Header : Header_ComponentExample; // Two separate tasks as a part of the component header. // These tasks are going to be added to the previous members of the component header. {#ix-attr:[ComponentHeader()]} {#ix-set:AttributeName = \"Header task 1\"} HeaderTask1 : AxoTask; // Complete structure as a part of the component details tab `Tasks`. // All structure members are going to be added to the previous members of the component details tab `Tasks`. {#ix-set:AttributeName = \"Tasks\"} {#ix-attr:[Container(Layout.Stack)]} Tasks : Tasks_ComponentExample; // Single task as a part of the component details tab `Tasks`. // This task is going to be displayed in the component details tab `Tasks` {#ix-attr:[ComponentDetails(\"Tasks\")]} {#ix-attr:[Container(Layout.Stack)]} {#ix-set:AttributeName = \"Detail task in Tasks tab\"} DetailTaskInTasksTab : AxoTask; // Additional separate task as a part of the component header. // This task is going to be added to the previous members of the component header. {#ix-attr:[ComponentHeader()]} {#ix-set:AttributeName = \"Header task 2\"} HeaderTask2 : AxoTask; // Complete structure as a part of the component details tab `Status` as the attribute [ComponentDetails(\"Status\")] // is defined on the class Status_ComponentExample. // All structure members are going to be added to the previous members of the component details tab `Status`. {#ix-set:AttributeName = \"Status class\"} Status :Status_ComponentExample; // Single variable as a part of the component details tab `Status`. // This variable is going to be added to the previous members of the component details tab `Status`. {#ix-attr:[ComponentDetails(\"Status\")]} {#ix-attr:[Container(Layout.Stack)]} {#ix-set:AttributeName = \"Status string\"} Status2 : string; // Additional separate task as a part of the component header. // This task is going to be added to the previous members of the component header. {#ix-attr:[ComponentHeader()]} {#ix-set:AttributeName = \"Header task 3\"} HeaderTask3 : AxoTask; // Complete structure as a part of the component details tab `Settings` as the attribute [ComponentDetails(\"Settings\")] // is defined on the class Settings_ComponentExample. // All structure members are going to be added to the previous members of the component details tab `Settings`. {#ix-set:AttributeName = \"Settings\"} Settings : Settings_ComponentExample; // Complete structure as a part of the component details tab `Diagnostics` as the attribute [ComponentDetails(\"Diagnostics\")] // is defined on the class Diagnostics_ComponentExample. git // All structure members are going to be added to the previous members of the component details tab `Diagnostics`. {#ix-set:AttributeName = \"Diagnostics\"} Diagnostics : Diagnostics_ComponentExample; // Complete structure as a part of the component details tab `Help` as the attribute [ComponentDetails(\"Help\")] // is defined on the class Help_ComponentExample. // All structure members are going to be added to the previous members of the component details tab `Help`. {#ix-set:AttributeName = \"Help\"} Help : Help_ComponentExample; END_VAR END_CLASS For the complex types of the AxoComponent it is also recomended to organize partial groups of the members into the classes as it is in this example. CLASS PUBLIC Header_ComponentExample VAR PUBLIC {#ix-set:AttributeName = \"Start\"} Start : AxoTask; {#ix-set:AttributeName = \"Stop\"} Stop : AxoTask; {#ix-set:AttributeName = \"Status\"} Status : STRING:='Some status description'; END_VAR END_CLASS {#ix-attr:[Container(Layout.Stack)]} {#ix-attr:[ComponentDetails(\"Tasks\")]} CLASS PUBLIC Tasks_ComponentExample VAR PUBLIC {#ix-set:AttributeName = \"Some status value 1\"} SomeStatusValue1 : REAL := REAL#45.3; {#ix-set:AttributeName = \"Some advanced component task 1\"} SomeAdvancedComponentTask1 : AxoTask; {#ix-set:AttributeName = \"Some advanced component task 2\"} SomeAdvancedComponentTask2 : AxoTask; {#ix-set:AttributeName = \"Some advanced component task 3\"} SomeAdvancedComponentTask3 : AxoTask; {#ix-set:AttributeName = \"Some advanced component task 4\"} SomeAdvancedComponentTask4 : AxoTask; {#ix-set:AttributeName = \"Some advanced component task 5\"} SomeAdvancedComponentTask5 : AxoTask; END_VAR END_CLASS {#ix-attr:[Container(Layout.Stack)]} {#ix-attr:[ComponentDetails(\"Status\")]} CLASS PUBLIC Status_ComponentExample VAR PUBLIC {#ix-set:AttributeName = \"Some status value 1\"} SomeStatusValue1 : REAL := REAL#45.3; {#ix-set:AttributeName = \"Some status value 2\"} SomeStatusValue2 : DINT := DINT#46587; {#ix-set:AttributeName = \"Some status value 3\"} SomeStatusValue3 : STRING := 'some description'; END_VAR END_CLASS {#ix-attr:[ComponentDetails(\"Settings\")]} {#ix-attr:[Container(Layout.Stack)]} CLASS PUBLIC Settings_ComponentExample VAR PUBLIC {#ix-set:AttributeName = \"Some setting value 1\"} SomeSettingValue1 : REAL := REAL#45.3; {#ix-set:AttributeName = \"Some setting value 2\"} SomeSettingValue2 : DINT := DINT#46587; {#ix-set:AttributeName = \"Some setting value 3\"} SomeSettingValue3 : STRING := 'some setting'; END_VAR END_CLASS {#ix-attr:[ComponentDetails(\"Diagnostics\")]} {#ix-attr:[Container(Layout.Stack)]} CLASS PUBLIC Diagnostics_ComponentExample VAR PUBLIC {#ix-set:AttributeName = \"Some diagnostic message\"} SomeDiagnosticMessage : STRING := 'TODO: Some diagnostic message needs to be placed here'; END_VAR END_CLASS {#ix-attr:[ComponentDetails(\"Help\")]} {#ix-attr:[Container(Layout.Stack)]} CLASS PUBLIC Help_ComponentExample VAR PUBLIC {#ix-set:AttributeName = \"Some help\"} SomeHelp : STRING := 'TODO: Provide some help'; END_VAR END_CLASS Instantiate and call the AxoComponent instance. CLASS ComponentExampleContext EXTENDS AxoContext VAR PUBLIC {#ix-set:AttributeName = \"Component example name\"} MyComponent : AxoComponentExample; {#ix-set:AttributeName = \"<#Activate manual control#>\"} ActivateManualControl : BOOL; inHwReal : REAL := REAL#1.0001; inHwDint : DINT := DINT#1; outHwReal : REAL; outHwDint : DINT; END_VAR METHOD PROTECTED OVERRIDE Main // The `Initialize()` method must be called before any other method. MyComponent.Initialize(THIS); // Example of the activation of the manual control. IF ActivateManualControl THEN MyComponent.ActivateManualControl(); END_IF; // Calling the main method `Run` with respective input and output variables. MyComponent.Run(inReal := inHwReal, inDint := inHwDint, outReal => outHwReal, outDint => outHwDint); END_METHOD END_CLASS UI side of the AxoComponent. <RenderableContentControl Context=\"@Entry.Plc.myComponentExample.MyComponent\" Presentation=\"Command\" /> and the rendered result:"
  },
  "articles/data/README.html": {
    "href": "articles/data/README.html",
    "title": "AxoData | System.Dynamic.ExpandoObject",
    "keywords": "AxoData AxoData provide a simple yet powerful data exchange between PLC and an arbitrary data repository. IxData implements a series of repository operations known as CRUD. Benefits The main benefit of this solution is data scalability; once the repository is set up, any modification of the data structure(s) will result in an automatic update of mapping objects. And therefore, there is no need for additional coding and configuration. How it works The basic PLC block is AxoDataExchange, which has its .NET counterpart (or .NET twin) that handles complex repository operations using a modified AxoRemoteTask, which is a form of RPC (Remote Procedure Call), that allows you to execute the code from the PLC in a remote .NET application. Implemented repositories The AxoDataEntity uses a predefined interface IRepository that allows for the unlimited implementation of different kinds of repositories. At this point, AXOpen supports these repositories directly: InMemory Json MongoDB Getting started For the data exchange to work, we will need to create our class extending the AxoDataExchange class. We can call it MyDataExchanger. Don't forget to add using: using AXOpen.Data; CLASS MyDataExchanger EXTENDS AXOpen.Data.AxoDataExchange We will also need to add our data entity variable, which contains the data that we want to exchange between PLC and the repository. This variable must be annotated with AxoDataEntityAttribute. This attribute should be unique within AxoDataExchanger object and is used to locate data object within framework. When AxoDataEntityAttribute is missing, exception is thrown. CLASS MyDataExchanger EXTENDS AXOpen.Data.AxoDataExchange VAR PUBLIC {#ix-attr:[AxoDataEntityAttribute]} _data : MyData; END_VAR END_CLASS The data entity variable must be of a class that extends AxoDataEntity. So let's just create class that will have some variables. CLASS MyData EXTENDS AXOpen.Data.AxoDataEntity VAR PUBLIC sampleData : REAL; someInteger : INT; someString : STRING; END_VAR END_CLASS As mentioned earlier, we use remote calls to execute the CRUD operations. These calls are a variant of IxTask which can operate asynchronously, and we will need to call it cyclically. We will now need to create an instance of MyDataExchanger in some MyConfiguration, and call _myDataExchanger in the Main method of the context. Just to remind ourselves all logic in Ix framework must be placed in the call tree of a Main method of a context. CONFIGURATION MyConfiguration VAR_GLOBAL _myDataExchanger : MyDataExchanger; END_VAR END_CONFIGURATION CLASS MyContext EXTENDS AXOpen.Core.AxoContext VAR PUBLIC _myDataExchanger: MyDataExchanger; END_VAR END_CLASS And we will also need to instantiate the context in a PROGRAM and call the Run method. PROGRAM MAIN VAR_EXTERNAL _myContext : MyContext; END_VAR //------------------------------------------------- //------------------------------------------------- _myContext.Run(); At this point, we have everything ready in the PLC. We will now need to tell the _myDataExchanger what repository we will use. First, we will work with data is stored in files in Json format. Let's create a configuration for the repository: var storageDir = Path.Combine(Environment.CurrentDirectory, \"MyDataExchangeData\"); var repository = Ix.Repository.Json.Repository.Factory(new JsonRepositorySettings<MyData>(storageDir)); Note: MyData should be type from Pocos. Then we will need to associate the repository with the PLC object and initialize the data exchange operations. Entry.Plc.MainContext.MyDataExchanger.InitializeRemoteDataExchange(repository); Now we can freely shuffle the data between PLC and the local folder. IF(_create) THEN IF(_myDataExchanger.Create(_id).Done) THEN _create := FALSE; END_IF; END_IF; IF(_read) THEN IF(_myDataExchanger.Read(_id).Done) THEN _read := FALSE; END_IF; END_IF; IF(_update) THEN IF(_myDataExchanger.Update(_id).Done) THEN _update := FALSE; END_IF; END_IF; IF(_delete) THEN IF(_myDataExchanger.Delete(_id).Done) THEN _delete := FALSE; END_IF; END_IF; Data visualization With presentation Command there are available options for adding, editing and deleting records. !Command If you use Status presentation type, data will be only displayed cannot be manipulated. !Status Custom columns There is a possibility to add custom columns if it is needed. You must add AXOpen.Core.AxoDataExchange.ColumnData view as a child in AxoDataView. The BindingValue must be set in ColumnData and contains string representing attribute name of custom columns. If you want to add custom header name, you can simply set the name in HeaderName attribute. Also, there is an attribute to make column not clickable, which is clickable by default. The example using all attributes: <AxoDataView Vm=\"@ViewModel.DataViewModel\" Presentation=\"Command\" ModalDataView=\"false\" CanExport=\"true\"> <AXOpen.Data.Blazor.AxoDataExchange.ColumnData HeaderName=\"Recipe name\" BindingValue=\"RecipeName\" Clickable=\"false\" /> <AXOpen.Data.Blazor.AxoDataExchange.ColumnData BindingValue=\"String1\" /> </AxoDataView> !Custom columns Export If you want to be able to export data, you must add CanExport attribute with true value. Like this: <AxoDataView Vm=\"@ViewModel.DataViewModel\" Presentation=\"Command\" CanExport=\"true\" /> With this option, buttons for export and import data will appear. After clicking on export button, the csv file will be created, which contains all existing records. If you want import data, you must upload csv file with equal data structure like we get in export file. !Export Modal detail view The Detail View is default shown like modal view. That means if you clicked on some record, the modal window with detail view will be shown. If necessary, this option can be changed with ModalDetailView attribute. This change will show detail view under the record table. Example with ModalDetailView attribute: <AxoDataView Vm=\"@ViewModel.DataViewModel\" Presentation=\"Command\" ModalDetailView=\"false\" /> !Not Modal detail view"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Source repositories | System.Dynamic.ExpandoObject",
    "keywords": "IX FRAMEWORK is an open-source application framework project developed by a group of automation engineers. It is based on SIMATIC AX platfrom and IX technology Source repositories IX IX FRAMEWORK Note This project is under development. We periodically release versions that can be used for testing and in non-production environments. Disclaimer Important It is necessary to have a valid license for SIMATIC AX in order to use IX! SIMATIC AX is currently in a limited sales release in selected European countries only. You will need to request access from the AX team which will check if your use case is suitable for the current state of the product. The first step to getting the approval is contacting your local SIEMENS sales representative or writing an email to simatic-ax@siemens.com."
  },
  "articles/rendering/intro.html": {
    "href": "articles/rendering/intro.html",
    "title": "Automatic rendering in IXF | System.Dynamic.ExpandoObject",
    "keywords": "Automatic rendering in IXF IFX uses IX rendering for many advanced features. This document describes basic information about presentation used in IXF. Renderable content control Presentation type Description Command Provides access to UI control with ability to control/modfiy the component. Status Provides access to UI control with no ability to modify and control the component."
  },
  "index.html": {
    "href": "index.html",
    "title": "Source repositories | System.Dynamic.ExpandoObject",
    "keywords": "IX FRAMEWORK is an open-source application framework project developed by a group of automation engineers. It is based on SIMATIC AX platfrom and IX technology Source repositories IX IX FRAMEWORK Note This project is under development. We periodically release versions that can be used for testing and in non-production environments. Disclaimer Important It is necessary to have a valid license for SIMATIC AX in order to use IX! SIMATIC AX is currently in a limited sales release in selected European countries only. You will need to request access from the AX team which will check if your use case is suitable for the current state of the product. The first step to getting the approval is contacting your local SIEMENS sales representative or writing an email to simatic-ax@siemens.com."
  }
}