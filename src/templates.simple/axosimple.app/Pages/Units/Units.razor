@page "/Units/"
@using AXSharp.Connector
@using axosimple.hmi.Components;
@using AXOpen.Core;
@using AXOpen.Core.Blazor.AxoAlertDialog;
@using AXOpen.Base.Dialogs
@inject IAlertDialogService _alerts

<div class="container">
    <div class="row">
            @foreach (var unit in ControlledUnits)
        {
            <div class="col">
                <UnitSpotView Component="unit.unit.Component" Link="@unit.link" ImageLink="@unit.imageLink" />
            </div>
        }
    </div>
</div>



<div class="text-center p-2 fixed-bottom" style="z-index: 0;">
    <button type="button" class="btn btn-primary" @onclick="Automat">@Localizer["AUTOMAT"]</button>
    <button type="button" class="btn btn-primary" @onclick="Ground">@Localizer["GROUND"]</button>
    <button type="button" class="btn btn-primary" @onclick="Service">@Localizer["SERVICE"]</button>
</div>

<AxoAlertToast/>

@code
{
    private async Task Automat()
    {
        _alerts.AddAlertDialog(eAlertDialogType.Info, Localizer["Mode change"], $"{Localizer[$"Requesting automatic mode of selected units"]}.", 1);

        var notGroundedStations = ControlledUnits.Where(p => p.unit.GroundStatus != eAxoTaskState.Done);
        var ungroundedStationsList = string.Join(",", notGroundedStations.Select(p => p.unit.Component.AttributeName));

        if (notGroundedStations.Count() > 0)
        {
            _alerts.AddAlertDialog(eAlertDialogType.Warning, Localizer["Mode change"], 
                $"{Localizer[$"Cannot start automatic mode on unit(s)"]} `{ungroundedStationsList}`. Ground must be executed successfully first.", 5);
            return;
        }

        foreach (var a in ControlledUnits)
        {
            await a.unit.Automat.ExecuteAsync();
        }

        _alerts.AddAlertDialog(eAlertDialogType.Success, Localizer["Mode change"], $"{Localizer[$"Automatic mode of selected units"]} has been started.", 3);
    }

    private async Task Ground()
    {
        _alerts.AddAlertDialog(eAlertDialogType.Info, Localizer["Mode change"], $"{Localizer[$"Requesting ground mode of selected units"]}.", 1);
        int expectedTimeToExecute = 20000;
        ControlledUnits.ToList().ForEach(async a => await a.unit.Ground.ExecuteAsync());

        var sw = new System.Diagnostics.Stopwatch();
        sw.Start();
        await Task.Run(async () =>
        {
            foreach (var a in ControlledUnits)
            {
                while (a.unit.GroundStatus != eAxoTaskState.Done 
                       && sw.ElapsedMilliseconds <= expectedTimeToExecute)
                {
                    await Task.Delay(25);
                }
            }
            
        });

        if (sw.ElapsedMilliseconds > expectedTimeToExecute)
        {
            var pp = string.Join(",\n", ControlledUnits
                .Where(p => p.unit.GroundStatus != eAxoTaskState.Done)
                .Select(p => p.unit.Component.AttributeName));

            _alerts.AddAlertDialog(eAlertDialogType.Danger,
                Localizer["Mode change"],
                $"{Localizer[$"Ground mode did not succeed on unit"]} " +
                $"{pp}", 5);

            return;
        }

        _alerts.AddAlertDialog(eAlertDialogType.Success, 
            Localizer["Mode change"], 
            $"{Localizer[$"Ground mode of selected unit(s)"]} was successfully executed.", 3);

        this.StateHasChanged();
    }

    private void Service()
    {
        ControlledUnits.ToList().ForEach(async a => await a.unit.Service.ExecuteAsync());
        this.StateHasChanged();
    }

    private IEnumerable<(StandardUnit unit, string link, string imageLink)> ControlledUnits 
    {
        get 
        {
            return new (StandardUnit, string, string)[]
            { 
                (new StandardUnit(Entry.Plc.Context.StarterUnitTemplate),"/Units/ManipulatorExample", "logo-header.svg"),
                (new StandardUnit(Entry.Plc.Context.UnitTemplate),"/Units/ManipulatorExample2", "logo-axopen-no-background.svg"),
            };
        }
    }

}
