@using AXOpen.Messaging.Static
@using AXSharp.Connector
@inherits RenderableComplexComponentBase<AXSharp.Connector.ITwinObject>

@foreach (var message in Messengers)
{
    if (message.IsActive.LastValue)
    {
        <RenderableContentControl Context="message" Presentation="Base"></RenderableContentControl>
    }
}

@code {

    private int MessagesCount { get; set; }

    public override void AddToPolling(ITwinElement element, int pollingInterval = 250)
    {
        Messengers?.Select(p => p.IsActive).ToList().ForEach(messenger =>
        {
            messenger.StartPolling(1500, this);
            PolledElements.Add(messenger);
        });

        Messengers?.Select(p => p.WaitingForAcknowledge).ToList().ForEach(messenger =>
        {
            messenger.StartPolling(1500, this);
            PolledElements.Add(messenger);
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await UpdateMessages();
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task UpdateMessages()
    {
        var a = Messengers?.SelectMany(p => new ITwinPrimitive[] { p.Category, p.IsActive, p.WaitingForAcknowledge });
        var connector = Messengers?.FirstOrDefault()?.GetConnector();
        await connector?.ReadBatchAsync(a)!;
        if (Messengers != null) MessagesCount = Messengers.Count(p => p.IsActive.Cyclic);
    }

    private IEnumerable<AxoMessenger> Messengers => this.Component.GetChildren().Flatten(p => p.GetChildren()).OfType<AxoMessenger>();

    protected override async Task OnInitializedAsync()
    {
        await UpdateMessages();
        await base.OnInitializedAsync();
    }

}
