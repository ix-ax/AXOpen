@using AXOpen.Messaging.Static
@using AXSharp.Connector
@inherits RenderableComplexComponentBase<AXSharp.Connector.ITwinObject>

@foreach (var message in Messengers)
{
    if (message.IsActive.LastValue || message.WaitingForAcknowledge.LastValue)
    {
        <RenderableContentControl Context="message" Presentation="Base"></RenderableContentControl>
    }
}

@code {

    private int MessagesCount { get; set; }

    public override void AddToPolling(ITwinElement element, int pollingInterval = 250)
    {
        //Messengers?.Select(p => p.IsActive).ToList().ForEach(messenger =>
        //{
        //    messenger.StartPolling(2500, this);
        //    PolledElements.Add(messenger);
        //});

        //Messengers?.Select(p => p.WaitingForAcknowledge).ToList().ForEach(messenger =>
        //{
        //    messenger.StartPolling(2500, this);
        //    PolledElements.Add(messenger);
        //});
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await UpdateMessages();
        await base.OnAfterRenderAsync(firstRender);
        this.StateHasChanged();
    }

    private async Task UpdateMessages()
    {
        if (Messengers != null) MessagesCount = Messengers.Count(p => p.IsActive.LastValue || p.WaitingForAcknowledge.LastValue);
    }

    private AxoMessenger[] Messengers => this.Component.GetChildren().Flatten(p => p.GetChildren()).OfType<AxoMessenger>().ToArray();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

}
