@using AXOpen.Messaging.Static
@using AXSharp.Connector
@using AXOpen.Core
@inherits RenderableComplexComponentBase<AXSharp.Connector.ITwinObject>

@foreach (var message in Messengers)
{
    if (message.IsActive.LastValue || message.WaitingForAcknowledge.LastValue)
    {
        <RenderableContentControl Context="message" Presentation="Base"></RenderableContentControl>
    }
}

@code {

    private int MessagesCount { get; set; }

    public override void AddToPolling(ITwinElement element, int pollingInterval = 250)
    {
        foreach (var axoMessenger in this.Messengers.SelectMany(p => new ITwinElement[] { p.IsActive }))
        {
            axoMessenger.StartPolling(2500, this);
            PolledElements.Add(axoMessenger);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await UpdateMessages();
        await base.OnAfterRenderAsync(firstRender);
        this.StateHasChanged();
    }

    private async Task UpdateMessages()
    {
        if (Messengers != null) MessagesCount = Messengers.Count(p => p.IsActive.LastValue);
    }

    private AxoMessenger[] Messengers => this.Component.GetChildren().Flatten(p => p.GetChildren()).OfType<AxoMessenger>().ToArray();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        foreach (var axoMessenger in this.Messengers.SelectMany(p => new ITwinElement[] { p.IsActive }))
        {
            this.UpdateValuesOnChange(axoMessenger);
        }
    }

}
