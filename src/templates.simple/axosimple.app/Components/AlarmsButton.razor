@using AXOpen.Messaging.Static
@using AXSharp.Connector
@inherits RenderableComplexComponentBase<AXSharp.Connector.ITwinObject>

@if(MessagesCount > 0)
{
    <button type="button" class="btn btn-danger position-relative" data-bs-toggle="modal" data-bs-target="#alarmsviewmodal">
        Alarms
        <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                @MessagesCount
                <span class="visually-hidden">unread messages</span>
        </span>
    </button>
}
else
{
    <button type="button" class="btn btn-primary position-relative" data-bs-toggle="modal" data-bs-target="#alarmsviewmodal" disabled>
        Alarms
    </button>
}
        

@code {

    public int MessagesCount { get; set; }

    private string Disabled => MessagesCount > 0 ? "false" : "true";

    public override void AddToPolling(ITwinElement element, int pollingInterval = 250)
    {
        Messengers?.Select(p => p.IsActive).ToList().ForEach(messenger =>
        {
            messenger.StartPolling(2500, this);
            PolledElements.Add(messenger);
        });

        Messengers?.Select(p => p.WaitingForAcknowledge).ToList().ForEach(messenger =>
        {
            messenger.StartPolling(2500, this);
            PolledElements.Add(messenger);
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await UpdateMessages();
        await base.OnAfterRenderAsync(firstRender);
        this.StateHasChanged();
    }

    private async Task UpdateMessages()
    {
        if (Messengers != null) MessagesCount = Messengers.Count(p => p.IsActive.Cyclic || p.WaitingForAcknowledge.Cyclic);
    }

    private IEnumerable<AxoMessenger> Messengers => this.Component.GetChildren().Flatten(p => p.GetChildren()).OfType<AxoMessenger>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }
}
