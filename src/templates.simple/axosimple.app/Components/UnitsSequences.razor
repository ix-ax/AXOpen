@using AXOpen.Core;
@inherits RenderableComplexComponentBase<AXSharp.Connector.ITwinObject>

<div class="container">
    <div class="row">
        <h1>@Component.AttributeName</h1>
    </div>
    <!-- TOP LEVEL TASKS -->
    <div class="d-flex justify-content-end">
        @foreach (var task in this.Component.GetChildren().OfType<AxoTask>())
        {
            <div>
                <AuthorizeView Roles="can_run_automat_mode">
                    <Authorized>
                        <AxoTaskCommandView Component="@task" />
                    </Authorized>
                    <NotAuthorized>
                        <AxoTaskStatusView Component="@task" />
                    </NotAuthorized>
                </AuthorizeView>
            </div>
        }
    </div>

    <!-- TASK DETAILS -->
    <div class="row">
        @foreach (AxoSequencer axoSequencer in Component.GetChildren().OfType<AxoSequencer>())
        {
            @if (axoSequencer.Status.Cyclic == (ushort)eAxoTaskState.Busy)
            {
                <div class="d-flex">
                    <div class="container rounded-3 @AxoStepHelper.StepRowColor(axoSequencer.CurrentStep)">
                        <div class="col fs-3">
                            @AxoStepHelper.Description(axoSequencer.CurrentStep)
                        </div>
                    </div>

                    <a class="btn btn-primary ms-1 d-flex align-items-center" role="button" @onclick="Collapse">
                        <span class="bi-chevron-down d-inline-block collapsible @(_isCollapsed ? null : "open")" />
                    </a>
                </div>

                <div class="@(_isCollapsed ? "collapse" : null)">
                    <AxoSequencerView Component="@axoSequencer" HasTaskControlButton="false"></AxoSequencerView>
                </div>
            }
        }
    </div>
</div>

@code
{
    private bool _isCollapsed = true;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Component.GetChildren().OfType<AxoSequencer>().ToList().ForEach(p => UpdateValuesOnChange(p.CurrentStep));

        Component.GetChildren().OfType<AxoSequencer>().ToList().ForEach(p => UpdateValuesOnChange(p.Status));

    }

    private void Collapse()
    {
        _isCollapsed = !_isCollapsed;
    }
}