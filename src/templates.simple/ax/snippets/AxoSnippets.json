
{
    "unitDeclaration":
    {
        "prefix": ["unitDeclaration"],
        "scope": "st",
        "body":[
        "${1:name} : axosimple.${1:name}.Unit;",
        "${1:name}ProcessData : axosimple.${1:name}.ProcessDataManager;",
        "${1:name}TechnologyData : axosimple.${1:name}.TechnologyDataManager;",
        "$0"
        ],
    "description": "Adds declaration of controlled unit"
    },

    "unitEntryCall":
    {
        "prefix": ["unitRootCall"],
        "scope": "st",
        "body":[
        "${1:name}.ProcessData := REF(${1:name}ProcessData);",
        "${1:name}.TechnologyData := REF(${1:name}TechnologyData);",
        "${1:name}.Run(THIS, Inputs^, Outputs^);",
        "$0"
        ],
    "description": "Adds root call of controlled unit"
    },

    "unitEntryCallStarterUnit":
    {
        "prefix": ["unitRootCallStarterUnit"],
        "scope": "st",
        "body":[
        "${1:name}.EntireProcessSettings    := REF(ProcessSettings);",
        "${1:name}.EntireProcessData        := REF(ProcessData);",
        "${1:name}.ProcessData              := REF(${1:name}ProcessData);",
        "${1:name}.TechnologyData           := REF(${1:name}TechnologyData);",
        "${1:name}.Run(THIS, Inputs^, Outputs^);",
        "$0"
        ],
    "description": "Adds root call of starter controlled unit"
    },

    "unitAddProcessData":
    {
        "prefix": ["unitAddProcessData"],
        "scope": "st",
        "body":[
        "{#ix-attr:[AXOpen.Data.AxoDataFragmentAttribute]}",    
        "${1:name} : axosimple.${1:name}.FragmentProcessDataManger;",        
        "$0"
        ],
    "description": "Adds process data declaration"
    },
    "unitAddTechnologyData":
    {
        "prefix": ["unitAddTechnologyData"],
        "scope": "st",
        "body":[
        "{#ix-attr:[AXOpen.Data.AxoDataFragmentAttribute]}",    
        "${1:name} : axosimple.${1:name}.FragmentTechnologyDataManger;",        
        "$0"
        ],
    "description": "Adds technology data declaration"
    },

    "attritubePropertyName":
    {
        "prefix": ["attName"],
        "scope": "st",
        "body":[
        "{#ix-set:AttributeName = \"<#${1:name}#>\"} ",
        "$0"
        ],
    "description": "Add Name attribute"
    },
  
    "attritubeLayoutTabs":
    {
        "prefix": ["attTabs","tabs"],
        "scope": "st",
        "body":[
        "{#ix-attr:[Container(Layout.Tabs)]}",
        "$0"
        ],
    "description": "Add layout Tab attribute"
    },
   
    "attributeLayoutWrap":
    {
        "prefix": ["attWrap","wrap"],
        "scope": "st",
        "body":[
        "{#ix-attr:[Container(Layout.Wrap)]}",
        "$0"
        ],
    "description": "Add layout Wrap attribute"
    },

    "attributeLayoutStack":
    {
        "prefix": ["attStack","stack"],
        "scope": "st",
        "body":[
        "{#ix-attr:[Container(Layout.Stack)]}",
        "$0"
        ],
    "description": "Add layout Stack attribute"
    },

    "attributeLayoutUniformGrid":
    {
        "prefix": ["attuniformGrid","uniformGrid","grid"],
        "scope": "st",
        "body":[
        "{#ix-attr:[Container(Layout.UniformGrid)]}",
        "$0"
        ],
    "description": "Add layout UniformGrid attribute"
    },

    "attributeContainerGroupBox":
    {
        "prefix": ["attgroupbox","groupBox"],
        "scope": "st",
        "body":[
        "{#ix-attr:[Container(Layout.Stack)]}",
        "{#ix-attr:[Group(GroupLayout.GroupBox)]}",
        "$0"
        ],
    "description": "Add group and GroupBox attribute"
    },

    "attributeContainerBorder":
    {
        "prefix": ["attborder","borderaAttr"],
        "scope": "st",
        "body":[
        "{#ix-attr:[Container(Layout.Stack)]}",
        "{#ix-attr:[Group(GroupLayout.Border)]}",
        "$0"
        ],
    "description": "Add group Border attribute"
    },

    "attritubeRenderIgnoreDisplay":
    {
        "prefix": ["attIgnoreDisplay","ignoreDisplay"],
        "scope": "st",
        "body":[
        "{#ix-attr:[RenderIgnore(\"Display\",\"ShadowDisplay\")]}",
        "$0"
        ],
    "description": "RenderIgnore attribute when rendering Display"
    },

    "attritubeRenderIgnoreControl":
    {
        "prefix": ["attIgnoreControl","ignoreControl"],
        "scope": "st",
        "body":[
        "{#ix-attr:[RenderIgnore(\"Control\",\"ShadowControl\")]}",
        "$0"
        ],
    "description": "RenderIgnore attribute when rendering Control"
    },

    "attritubeRenderIgnore":
    {
        "prefix": ["attIgnore","ignore"],
        "scope": "st",
        "body":[
        "{#ix-attr:[RenderIgnore()]}",
        "$0"
        ],
    "description": "RenderIgnore attribute when rendering"
    },

    "attritubeCompilerOmit":
    {
        "prefix": ["attCompilerOmits","compilerOmit"],
        "scope": "st",
        "body":[
        "{#ix-attr:[CompilerOmits(\"POCO\", \"Onliner\")]} //-\"No params\" Will skip the emission for all output types",
        "$0"
        ],
    "description": "CompilerOmits attribute instructs the compiler to skip the compilation of a member for specific output"
    }, 

    "attritubeReadOnce":
    {
        "prefix": ["attReadOnce","readOnce"],
        "scope": "st",
        "body":[
        "{#ix-attr:[ReadOnce()]}",
        "$0"
        ],
    "description": "ReadOnce attribute instructs the communication layer to read a member (variable) only once during the application's lifetime."
    },
    
    "attritubeReadOnly":
    {
        "prefix": ["attReadOnly","readOnly"],
        "scope": "st",
        "body":[
        "{#ix-attr:[ReadOnly()]}",
        "$0"
        ],
    "description": "structure or member will be read only"
    }
}
