
NAMESPACE axosimple.StarterUnitTemplate
    USING axosimple;
    USING AXOpen.Data;
    USING AXOpen.Core;
    USING System.Strings;
    
    ///<summary>
    /// Provides automatic mode sequence.
    ///</summary>
    {#ix-set:AttributeName = "<#AUTOMAT#>"}
    {S7.extern=ReadWrite}
    CLASS PUBLIC AutomatSequence
        EXTENDS AXOpen.Core.AxoSequencerContainer IMPLEMENTS IModeContainer
        VAR PUBLIC
            Steps : ARRAY[0..100] OF AxoStep;    
        END_VAR
        VAR PRIVATE
            Objs : REF_TO axosimple.StarterUnitTemplate.UnitObjects;
            Components : REF_TO axosimple.StarterUnitTemplate.Components;
            ProcessData : REF_TO axosimple.StarterUnitTemplate.ProcessDataManager;
            ProcessSettings : REF_TO axosimple.StarterUnitTemplate.FragmentProcessDataManger;
            TechnologySettings : REF_TO axosimple.StarterUnitTemplate.TechnologyDataManager;
            _currentId : STRING;

            _dialogAnswer : eDialogAnswer;
            _externalCloseOkSignal : BOOL;
        END_VAR

        METHOD INTERNAL Run
            VAR_INPUT
                _parent : AXOpen.Core.IAxoObject;
                _unitObjects : REF_TO UnitObjects;
            END_VAR     

            IF Objs = NULL THEN 
                Objs := _unitObjects;
                
                Components := Objs^.Components;
                ProcessData := Objs^.ProcessData;
                ProcessSettings := Objs^.ProcessSettings;
                TechnologySettings := Objs^.TechnologySettings;
            END_IF;

            SUPER.Run(_parent);
        END_METHOD
        ///<summary>
        /// Contains logic of the steps of this sequence
        ///</summary>

        METHOD OVERRIDE Main
            VAR
                forIterator : INT := 0;       
            END_VAR

            IF (Components = NULL OR ProcessData = NULL) THEN
                RETURN;
            END_IF;
            // This sequecner executes the steps in cycles from top to bottom
            // in the same order they are written in the program
            // Each step in the sequence must can be used only once.
            // This sets the sequence to run in cycles (top-botton-top and again).
            THIS.SequenceMode := eAxoSequenceMode#Cyclic;

            
            IF (Steps[0].Execute(THIS, TRUE, '<#GET ID#>')) THEN
                //-------------------------------------------------------
                _currentId := 'newProducedPart';
                THIS.MoveNext(); 
                //-------------------------------------------------------
            END_IF;

            IF (Steps[1].Execute(THIS, TRUE, '<#GET DATA#>')) THEN
                //-------------------------------------------------------
                IF (ProcessData^.CreateOrUpdate(_currentId).IsDone()) THEN 
                    THIS.MoveNext(); 
                END_IF;
                //-------------------------------------------------------
            END_IF;
            
           
            
            IF (Steps[2].Execute(THIS, TRUE, '<#Dialog notify#>')) THEN
                //-------------------------------------------------------
                _externalCloseOkSignal := CurrentStep.Duration > TIME#2s;
                
                _dialogAnswer := Objs^._dialog.ShowWithExternalClose(THIS, _externalCloseOkSignal)
                .WithOK()
                .WithType(eDialogType#Info)
                .WithCaption('Info caption!')
                .WithText('Info - dialog will be closed by external timeout 2s!').Answer();
                    
                IF( _dialogAnswer = eDialogAnswer#Ok) THEN
                    THIS.MoveNext();
                END_IF;
                //-------------------------------------------------------
            END_IF;

                         
            IF (Steps[3].Execute(THIS, TRUE, '<#Dialog success#>')) THEN
                //-------------------------------------------------------
                _externalCloseOkSignal := CurrentStep.Duration > TIME#2s;

                    _dialogAnswer := Objs^._dialog.ShowWithExternalClose(THIS, _externalCloseOkSignal)
                    .WithOK()
                    .WithType(eDialogType#Success)
                    .WithCaption('Success caption!')
                    .WithText('Success - dialog will be closed by external timeout 2s!').Answer();
                    
                    IF( _dialogAnswer = eDialogAnswer#Ok) THEN
                        THIS.MoveNext();
                    END_IF;
                //-------------------------------------------------------
            END_IF;

            IF (Steps[4].Execute(THIS, TRUE, '<#Dialog Warning#>')) THEN
                //-------------------------------------------------------
                _externalCloseOkSignal := CurrentStep.Duration > TIME#2s;

                    _dialogAnswer := Objs^._dialog.ShowWithExternalClose(THIS, _externalCloseOkSignal)
                    .WithYesNo()
                    .WithType(eDialogType#Warning)
                    .WithCaption('Warning caption!')
                    .WithText('Warning - dialog will be closed by external timeout 2s!').Answer();
                    
                    IF( _dialogAnswer = eDialogAnswer#Ok) THEN
                        THIS.MoveNext();
                    END_IF;
                //-------------------------------------------------------
            END_IF;

            IF (Steps[5].Execute(THIS, TRUE, '<#Dialog danger#>')) THEN
                //-------------------------------------------------------
                _externalCloseOkSignal := CurrentStep.Duration > TIME#2s;

                    _dialogAnswer := Objs^._dialog.ShowWithExternalClose(THIS, _externalCloseOkSignal)
                    .WithYesNoCancel()
                    .WithType(eDialogType#Warning)
                    .WithCaption('Danger caption!')
                    .WithText('Danger - dialog will be closed by external timeout 2s!').Answer();
                    
                    IF( _dialogAnswer = eDialogAnswer#Ok) THEN
                        THIS.MoveNext();
                    END_IF;
                //-------------------------------------------------------
            END_IF;

            
            FOR forIterator := 10 TO 20 BY 1 DO
                IF (Steps[forIterator].Execute(THIS, TRUE,Concat('DO SOMETHING -A-',ToString(forIterator)) )) THEN
                    //-------------------------------------------------------                
                    IF CurrentStep.Duration > TIME#25ms THEN                         
                        THIS.MoveNext();
                    END_IF;                
                    //-------------------------------------------------------
                END_IF;
            END_FOR;




            IF (Steps[99].Execute(THIS, TRUE,'<#UPDATE DATA#>')) THEN
                //-------------------------------------------------------
                IF (ProcessData^.Update(_currentId).IsDone()) THEN 
                    THIS.MoveNext(); 
                END_IF;
                //-------------------------------------------------------
            END_IF;  
         
                      
            // This will close the sequence and will return to the first step.
            THIS.Close(Steps[100]);
        END_METHOD
    END_CLASS

END_NAMESPACE
    
