@namespace axosimple.BaseUnit
@using AXSharp.Connector
@using AXOpen.Core
@using AXOpen.Core.Blazor.Culture
@using AXOpen.Messaging.Static
@using AXOpen.ToolBox.Extensions
@inherits RenderableComplexComponentBase<AXSharp.Connector.ITwinObject>


<div class="card" style="width: 18rem;">
    <img src="@ImageLink" class="card-img-top p-3" alt="...">
    <div class="card-body">
        <h5 class="card-title">@Component.GetAttributeName(CultureInfo.CurrentUICulture)</h5>
        <p class="card-text">
            <span class="badge rounded-pill @Mode">@ModeDescription</span>
        </p>
        <a href="@Link" class="btn btn-primary position-relative">
            @Localizer["OPEN"]
            @if (MessagesCount > 0)
            {
                <span class="position-absolute top-0 start-100 translate-middle p-2 bg-danger border border-light rounded-circle">
                    <span class="visually-hidden">New alerts</span>
                </span>
            }
        </a>
    </div>
</div> 

@code {

    [Parameter]
    public string Link { get; set; }

    [Parameter]
    public string ImageLink { get; set; }

    public string Mode
    {
        get
        {
            if (Unit.GroundStatus == eAxoTaskState.Done 
                && Unit.AutomatStatus != eAxoTaskState.Busy 
                && Unit.ServiceStatus != eAxoTaskState.Busy)
            {
                return "text-bg-secondary";
            }

            if (Unit.GroundStatus == eAxoTaskState.Busy)
            {
                return "text-bg-warning";
            }

            if (Unit.AutomatStatus == eAxoTaskState.Busy)
            {
                return "text-bg-primary";
            }

            if (Unit.ServiceStatus == eAxoTaskState.Busy)
            {
                return "text-bg-warning";
            }

            return "text-bg-dark";
        }
    }

    public string ModeDescription
    {
        get
        {
            if (Unit.GroundStatus == eAxoTaskState.Done 
                && Unit.AutomatStatus != eAxoTaskState.Busy 
                && Unit.ServiceStatus != eAxoTaskState.Busy)
            {
                return Localizer["READY TO START"];
            }

            if (Unit.GroundStatus == eAxoTaskState.Busy)
            {
                return Localizer["GROUNDING"];
            }

            if (Unit.AutomatStatus == eAxoTaskState.Busy)
            {
                return Localizer["RUNNING"];
            }

            if (Unit.ServiceStatus == eAxoTaskState.Busy)
            {
                return Localizer["IN SERVICE"];
            }

            return Localizer["IDLE"];
        }
    }

    public override void AddToPolling(ITwinElement element, int pollingInterval = 250)
    {
        if (Unit != null)
        {
            Unit.Ground.Status.StartPolling(2500, this);
            Unit.Automat.Status.StartPolling(2500, this);
            Unit.Service.Status.StartPolling(2500, this);

            PolledElements.Add(Unit.Ground.Status);
            PolledElements.Add(Unit.Automat.Status);
            PolledElements.Add(Unit.Service.Status);
        }

        foreach (var axoMessenger in this.Messengers.SelectMany(p => new ITwinElement[] { p.MessengerState }))
        {
            axoMessenger.StartPolling(2500, this);
            PolledElements.Add(axoMessenger);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await UpdateMessages();
        await base.OnAfterRenderAsync(firstRender);
        this.StateHasChanged();
    }

    private StandardUnit Unit
    {
        get
        {
            if (this._unit == null && this.Component != null)
            {
                this._unit = new StandardUnit(this.Component);
            }

            return this._unit;
        }
    }

    private async Task UpdateMessages()
    {
        if (Messengers != null) MessagesCount = Messengers.Count(p => p.State > eAxoMessengerState.Idle);
    }

    public int MessagesCount { get; set; }

    private AxoMessenger[] Messengers
    {
        get
        {
            var twinObject = this.Component;
            if (twinObject != null) return twinObject.GetChildren().Flatten(p => p.GetChildren()).OfType<AxoMessenger>().ToArray();
            return new AxoMessenger[] {};
        }
    }


    


    protected override void OnInitialized()
    {
        //base.OnInitialized();
        
        this.UpdateValuesOnChange(Unit.Ground.Status);
        this.UpdateValuesOnChange(Unit.Automat.Status);
        this.UpdateValuesOnChange(Unit.Service.Status);
        

        foreach (var axoMessenger in this.Messengers.SelectMany(p => new ITwinElement[] { p.MessengerState }))
        {
            this.UpdateValuesOnChange(axoMessenger);
        }
    }

    private StandardUnit _unit;
}
