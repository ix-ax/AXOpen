@page "/Identity/Account/Register"
@namespace AxOpen.Security.Views
@using AxOpen.Security.Entities;
@using AxOpen.Security.Models;
@using AxOpen.Security.Services;
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Components.Forms;
@inject IRepositoryService _repositoryService
@inject UserManager<User> _userManager
@inject IAlertDialogService _alertDialogService
@inject NavigationManager _navigationManager

<AuthorizeView Roles="Administrator">
    <Authorized Context="Auth">
        <div class="card">
            <h4 class="card-header">@Localizer["Create new user"]</h4>
            <div class="card-body">
                <EditForm Model="@_model" OnValidSubmit="OnValidSubmit">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label>@Localizer["Username"]</label>
                        <InputText @bind-Value="_model.Username" class="form-control" />
                        <ValidationMessage For="@(() => _model.Username)" />
                    </div>
                    <div class="form-group">
                        <label>@Localizer["Password"]</label>
                        <InputText @bind-Value="_model.Password" type="password" class="form-control" />
                        <ValidationMessage For="@(() => _model.Password)" />
                    </div>
                    <div class="form-group">
                        <label>@Localizer["Confirm password"]</label>
                        <InputText @bind-Value="_model.ConfirmPassword" type="password" class="form-control" />
                        <ValidationMessage For="@(() => _model.ConfirmPassword)" />
                    </div>
                    <div class="form-group">
                        <label>Email</label>
                        <InputText @bind-Value="_model.Email" type="email" class="form-control" />
                        <ValidationMessage For="@(() => _model.Email)" />
                    </div>
                    <div class="form-check form-switch mt-2 mb-2">
                        <label class="form-check-label" for="checkBoxCanUserChangePassword">@Localizer["Can change password"]</label>
                        <InputCheckbox @bind-Value="_model.CanUserChangePassword" class="form-check-input" id="checkBoxCanUserChangePassword" />
                        
                        <ValidationMessage For="@(() => _model.CanUserChangePassword)" />
                    </div>
                    <div class="form-group">
                        <label>@Localizer["Group"]</label>
                        <select class="form-select" aria-label="Default select example" @bind="@_model.Group" >
                            <option selected disabled>@Localizer["Choose group"]</option>
                            @foreach (var group in _repositoryService.RoleGroupManager.GetAllGroup())
                            {
                                <option value="@group.Name">@group.Name</option>
                            }
                        </select>
                        <ValidationMessage For="@(() => _model.Group)" />
                    </div>
                    <button type="submit" class="btn btn-primary" id="test">@Localizer["Create"]</button>
                </EditForm>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <p>@Localizer["Sorry, you are not authorized to create new users. Please log in as administrator."]</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private CreateUserModel _model { get; set; }
    private User _user { get; set; }

    private async void OnValidSubmit()
    {
        _user = new User(_model.Username, _model.Email, _model.Group, _model.CanUserChangePassword);

        _user.SecurityStamp = Guid.NewGuid().ToString();

        var result = await _userManager.CreateAsync(_user, _model.Password);

        if (result.Succeeded)
        {
            _navigationManager.NavigateTo("");
            _alertDialogService.AddAlertDialog(eAlertDialogType.Success, Localizer["Created!"], Localizer["User successfully created."], 10);
        }
        else
        {
            _alertDialogService.AddAlertDialog(eAlertDialogType.Warning, Localizer["Not created!"], Localizer["User was not created."], 10);
        }
    }

    protected override void OnInitialized()
    {
        _model = new CreateUserModel();
    }
}