@using AXSharp.Connector;
@using Microsoft.AspNetCore.Components.Forms;

<div class="container">
    <div class="row">
        <AuthorizeView Roles="Administrator">

            <Authorized>
                <a class="text-decoration-none text-black" style="cursor: pointer;" @onclick="ToggleInDesignMode"><span class="bi bi-tools fs-5" aria-hidden="true" title="Design mode" /></a>
                @if (InDesignMode)
                {
                    <div class="d-flex justify-content-end my-2">
                        <div style="z-index: 100;">
                            <select class="form-select w-auto" @onchange="(ChangeEventArgs args) => Load(args.Value.ToString())">
                                @foreach (var item in GetAllFiles())
                                {
                                    <option value="@item" selected="@(CurrentView is null || CurrentView == "" ? item == DefaultView ? "selected" : null : item == CurrentView ? "selected" : null)">@item</option>
                                }
                            </select>
                        </div>

                        <div class="dropdown ms-4" style="z-index: 100;">
                            <a class="dropdown-toggle text-decoration-none text-black" style="cursor: pointer;" data-bs-toggle="dropdown" aria-expanded="false">
                                <span class="bi bi-pencil-square fs-4" aria-hidden="true" />
                            </a>
                            <ul class="dropdown-menu dropdown-menu-end">
                                <li><a class="dropdown-item" data-bs-toggle="modal" data-bs-target="#controllerObjectsModal-@Id.ModalIdHelper()">Controller objects</a></li>
                                <li><a class="dropdown-item" data-bs-toggle="modal" data-bs-target="#usedObjectModal-@Id.ModalIdHelper()">Used objects</a></li>
                                <li><a class="dropdown-item" data-bs-toggle="modal" data-bs-target="#createNewModal-@Id.ModalIdHelper()">Create new</a></li>
                                <li><a class="dropdown-item" data-bs-toggle="modal" data-bs-target="#createCopyModal-@Id.ModalIdHelper()">Create copy</a></li>
                                <li><a class="dropdown-item" data-bs-toggle="modal" data-bs-target="#viewsModal-@Id.ModalIdHelper()">Views</a></li>
                                <li><a class="dropdown-item" data-bs-toggle="modal" data-bs-target="#backgroundModal-@Id.ModalIdHelper()">Background</a></li>
                                <li><a class="dropdown-item" @onclick="() => ChangeTheme()">Change theme</a></li>
                            </ul>
                        </div>
                    </div>
                }
                else
                {
                    <div name="TabControl" class="w-100">
                        <ul class="nav nav-tabs mb-3">
                            @foreach (var item in BaseViews)
                            {
                                <li class="nav-item">
                                    <button type="button" class="nav-link @(CurrentView is null || CurrentView == "" ? item == DefaultView ? "active" : "" : item == CurrentView ? "active" : "")" @onclick="() => Load(item)"><b>@item</b></button>
                                </li>
                            }
                        </ul>
                    </div>
                }
                <ZoomableContainer Parent="this" Disable="!AllowZoomingAndPanning">
                    <div onmousedown="event.preventDefault();">
                        @if (EmptyBackground)
                        {
                            <div id="@_backgroundId" style="width: @(BackgroundWidth)%; height: @(BackgroundHeight)vh; background-color: @(BackgroundColor);"></div>
                        }
                        else
                        {
                            @if (ImgSrc != null)
                            {
                                <img id="@_backgroundId" src="@ImgSrc" style="width: 100%; height: 100%; object-fit: cover;" />
                            }
                        }

                        <CascadingValue Value="@this" Name="Parent" IsFixed="true">
                            <CascadingValue Value="@_backgroundId" Name="BackgroundId" IsFixed="true">
                                @foreach (VisualComposerItemData child in _children)
                                {
                                    <VisualComposerItem InDesign="@InDesignMode" Origin="@child" />
                                }
                            </CascadingValue>
                        </CascadingValue>
                    </div>
                </ZoomableContainer>

                <CascadingValue Value="@this" Name="Parent" IsFixed="true">
                    @foreach (VisualComposerItemData child in _children)
                    {
                        <VisualComposerItemModal Origin="@child" />
                    }
                </CascadingValue>
                @* <button class="btn btn-outline-primary m-2" @onclick="ToggleInDesignMode">Toggle design mode</button>  *@
                @if (InDesignMode)
                {
                    <div class="modal fade" id="controllerObjectsModal-@Id.ModalIdHelper()" tabindex="-1" aria-hidden="true">
                        <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h1 class="modal-title fs-5" id="alarmsviewTitle">Controller objects</h1>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body justify-content-center">
                                    <div class="row mb-2">
                                        <div class="col-sm-10">
                                            <input type="text" class="form-control" placeholder="Search" @bind="SearchValue">
                                        </div>
                                        <button type="button" class="btn btn-primary col-sm me-3" @onclick="() => Search()">Search</button>
                                    </div>

                                    @if (SearchValue is null || SearchResult is null)
                                    {
                                        <div class="accordion" id="accordionExample">
                                            @foreach (var item in Objects)
                                            {
                                                <AccordionComponent SourceTwinElement="@item" Parent="@this" />
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <ul class="list-group">
                                            @foreach (var item in SearchResult)
                                            {
                                                <li class="list-group-item d-flex">
                                                    @switch (item)
                                                    {
                                                        case ITwinObject obj:
                                                            <span class="bi bi-boxes me-2" aria-hidden="true" />
                                                            break;
                                                        case ITwinPrimitive prim:
                                                            <span class="bi bi-card-text me-2" aria-hidden="true" />
                                                            break;
                                                    }

                                                    <p class="mb-0 text-truncate">@item.Symbol</p>
                                                    <a class="ms-auto text-decoration-none text-black" style="cursor: pointer;" @onclick="() => AddChildren(item)"><span class="bi bi-plus-lg" aria-hidden="true" /></a>
                                                </li>
                                            }
                                        </ul>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>

                    @* <div class="modal fade" id="showAllPrimitivesModal-@Id.ModalIdHelper()" tabindex="-1" aria-hidden="true"> *@
                    @*     <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable"> *@
                    @*         <div class="modal-content"> *@
                    @*             <div class="modal-header"> *@
                    @*                 <h1 class="modal-title fs-5" id="alarmsviewTitle">All primitives</h1> *@
                    @*                 <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button> *@
                    @*             </div> *@
                    @*             <div class="modal-body justify-content-center"> *@
                    @*                 <div class="row mb-2"> *@
                    @*                     <div class="col-sm-10"> *@
                    @*                         <input type="text" class="form-control" placeholder="Search" @bind="SearchValuePrimitive"> *@
                    @*                     </div> *@
                    @*                     <button type="button" class="btn btn-primary col-sm me-3" @onclick="() => SearchPrimitive()">Search</button> *@
                    @*                 </div> *@
                    @* *@
                    @*                 @if (SearchValuePrimitive is null || SearchResultPrimitive is null) *@
                    @*                 { *@
                    @*                     <ul class="list-group"> *@
                    @*                         @foreach (var item in Objects.SelectMany(p => p.RetrievePrimitives())) *@
                    @*                         { *@
                    @*                             <li class="list-group-item d-flex"> *@
                    @*                                 <p class="mb-0">@item.Symbol</p> *@
                    @*                                 <a class="ms-auto text-decoration-none text-black" style="cursor: pointer;" @onclick="() => AddChildren(item)"><span class="bi bi-plus-lg" aria-hidden="true"/></a> *@
                    @*                             </li> *@
                    @*                         } *@
                    @*                     </ul> *@
                    @*                 } *@
                    @*                 else *@
                    @*                 { *@
                    @*                     <ul class="list-group"> *@
                    @*                         @foreach (var item in SearchResultPrimitive) *@
                    @*                         { *@
                    @*                             <li class="list-group-item d-flex"> *@
                    @*                                 <p class="mb-0">@item.Symbol</p> *@
                    @*                                 <a class="ms-auto text-decoration-none text-black" style="cursor: pointer;" @onclick="() => AddChildren(item)"><span class="bi bi-plus-lg" aria-hidden="true"/></a> *@
                    @*                             </li> *@
                    @*                         } *@
                    @*                     </ul> *@
                    @*                 } *@
                    @*             </div> *@
                    @*         </div> *@
                    @*     </div> *@
                    @* </div> *@

                    <div class="modal fade" id="usedObjectModal-@Id.ModalIdHelper()" tabindex="-1" aria-hidden="true">
                        <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h1 class="modal-title fs-5" id="alarmsviewTitle">Used components</h1>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body justify-content-center">
                                    <ul class="list-group">
                                        @foreach (VisualComposerItemData child in _children)
                                        {
                                            <li class="list-group-item d-flex">
                                                <p class="mb-0">@child.IdPlain</p>
                                                <a class="text-decoration-none text-black ms-auto" style="cursor: pointer;" @onclick="() => RemoveChildren(child)"><span class="bi bi-trash fs-5" aria-hidden="true" /></a>
                                                <a class="text-decoration-none text-black mx-2" style="cursor: pointer;" data-bs-toggle="modal" data-bs-target="#settings-@child.Id.Replace('.', '_')-@child.UniqueGuid"><span class="bi bi-pencil-square fs-5" aria-hidden="true" /></a>
                                            </li>
                                        }
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="modal fade" id="createNewModal-@Id.ModalIdHelper()" tabindex="-1" aria-hidden="true">
                        <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h1 class="modal-title fs-5" id="alarmsviewTitle">Create new</h1>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body justify-content-center">
                                    <div class="row">
                                        <label class="col-sm-2 col-form-label">Name</label>
                                        <div class="col-sm-10">
                                            <input type="text" class="form-control" placeholder="File name" @bind="FileName">
                                        </div>
                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="() => CreateNew(FileName)">Create</button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="modal fade" id="createCopyModal-@Id.ModalIdHelper()" tabindex="-1" aria-hidden="true">
                        <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h1 class="modal-title fs-5" id="alarmsviewTitle">Create copy</h1>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body justify-content-center">
                                    <div class="row">
                                        <label class="col-sm-2 col-form-label">Name</label>
                                        <div class="col-sm-10">
                                            <input type="text" class="form-control" placeholder="File name" @bind="FileName">
                                        </div>
                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="() => CreateCopy(FileName)">Create</button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="modal fade" id="viewsModal-@Id.ModalIdHelper()" tabindex="-1" aria-hidden="true">
                        <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h1 class="modal-title fs-5" id="alarmsviewTitle">Views</h1>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body justify-content-center">
                                    <ul class="list-group">
                                        @foreach (var item in GetAllVisualComposerContainer())
                                        {
                                            <li class="list-group-item d-flex">
                                                <p class="mb-0">@item.file</p>
                                                <a class="ms-auto text-decoration-none text-black" style="cursor: pointer;" @onclick="() => ClearScaleAndTranslate(item.file)"><span class="bi bi-arrow-clockwise fs-5" aria-hidden="true" title="Clear" /></a>
                                                <a class="ms-2 text-decoration-none text-black" style="cursor: pointer;" @onclick="() => Remove(item.file)"><span class="bi bi-trash fs-5" aria-hidden="true" title="Remove" /></a>
                                                <a class="ms-2 text-decoration-none text-black" style="cursor: pointer;" @onclick="() => ChangeBaseViews(item.file)"><span class="bi @(BaseViews.Contains(item.file) ? "bi-dash" : "bi-plus") fs-5" aria-hidden="true" title="@(BaseViews.Contains(item.file) ? "Remove from base views" : "Add to base views")" /></a>
                                                <div class="form-check form-switch ms-2 d-flex align-items-center">
                                                    <input class="form-check-input" type="checkbox" role="switch" checked="@(item.allowZoomingAndPanning ? "checked" : null)" @onclick="() => ChangeAllowZoomingAndPanning(item.file)" title="Zooming and panning">
                                                </div>
                                                <div class="form-check ms-2 d-flex align-items-center">
                                                    <input class="form-check-input" type="radio" checked="@(item.file == DefaultView ? "checked" : null)" @onclick="() => ChangeDefaultView(item.file)" title="Default view">
                                                </div>
                                            </li>
                                        }
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="modal fade" id="backgroundModal-@Id.ModalIdHelper()" tabindex="-1" aria-hidden="true">
                        <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h1 class="modal-title fs-5" id="alarmsviewTitle">Background</h1>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body justify-content-center">
                                    <div class="accordion" id="backgroundAccordion">
                                        <div class="accordion-item">
                                            <h2 class="accordion-header" id="uploadImage">
                                                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#uploadImageCollapse" aria-expanded="true" aria-controls="uploadImageCollapse">
                                                    Upload image
                                                </button>
                                            </h2>
                                            <div id="uploadImageCollapse" class="accordion-collapse collapse show" aria-labelledby="uploadImage" data-bs-parent="#backgroundAccordion">
                                                <div class="accordion-body">
                                                    <InputFile class="form-control col-10 mb-1" id="inputFile" accept=".png, .jpg, .jpeg, .svg" OnChange="@UploadFile" />

                                                    @if (!isFileImported && isFileImporting)
                                                    {
                                                        <div class="spinner-border" role="status">
                                                            <span class="visually-hidden">Loading...</span>
                                                        </div>
                                                    }
                                                    <div class="d-flex justify-content-end">
                                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="accordion-item">
                                            <h2 class="accordion-header" id="setEmptyBackground">
                                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#setEmptyBackgroundcollapse" aria-expanded="false" aria-controls="setEmptyBackgroundcollapse">
                                                    Set empty background
                                                </button>
                                            </h2>
                                            <div id="setEmptyBackgroundcollapse" class="accordion-collapse collapse" aria-labelledby="setEmptyBackground" data-bs-parent="#backgroundAccordion">
                                                <div class="accordion-body">
                                                    <div class="mb-1 row">
                                                        <label class="col-sm-2 col-form-label">Width</label>
                                                        <div class="col-sm-10">
                                                            <input type="number" class="form-control" placeholder="Width" @bind="BackgroundWidth" step="1">
                                                        </div>
                                                    </div>
                                                    <div class="mb-1 row">
                                                        <label class="col-sm-2 col-form-label">Height</label>
                                                        <div class="col-sm-10">
                                                            <input type="number" class="form-control" placeholder="Height" @bind="BackgroundHeight" step="1">
                                                        </div>
                                                    </div>
                                                    <div class="mb-1 row">
                                                        <label class="col-sm-2 col-form-label">Color</label>
                                                        <div class="col-sm-10">
                                                            <input type="color" class="form-control form-control-color" @bind="BackgroundColor" title="Choose color">
                                                        </div>
                                                    </div>
                                                    <div class="d-flex justify-content-end">
                                                        <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="SetEmptyBackground">Save</button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </Authorized>
            <NotAuthorized>
                <div name="TabControl" class="w-100">
                    <ul class="nav nav-tabs mb-3">
                        @foreach (var item in BaseViews)
                        {
                            <li class="nav-item">
                                <button type="button" class="nav-link @(CurrentView is null || CurrentView == "" ? item == DefaultView ? "active" : "" : item == CurrentView ? "active" : "")" @onclick="() => Load(item)"><b>@item</b></button>
                            </li>
                        }
                    </ul>
                </div>
                <ZoomableContainer Parent="this" Disable="!AllowZoomingAndPanning">
                    <div style="position: relative; width: 100%; height: 100%;">
                        @if (EmptyBackground)
                        {
                            <div id="@_backgroundId" style="width: @(BackgroundWidth)%; height: @(BackgroundHeight)vh; background-color: @(BackgroundColor);"></div>
                        }
                        else
                        {
                            @if (ImgSrc != null)
                            {
                                <img id="@_backgroundId" src="@ImgSrc" style="width: 100%; height: 100%; object-fit: cover;" />
                            }
                        }

                        <CascadingValue Value="@this" Name="Parent" IsFixed="true">
                            <CascadingValue Value="@_backgroundId" Name="BackgroundId" IsFixed="true">
                                @foreach (VisualComposerItemData child in _children)
                                {
                                    <VisualComposerItem Origin="@child" />
                                }
                            </CascadingValue>
                        </CascadingValue>
                    </div>
                </ZoomableContainer>
            </NotAuthorized>
        </AuthorizeView>

    </div>
    <span class="@DetailsVisibility m-4">
        <div class="card overflow-auto" style="height: 500px;">
            <div class="card-header">
                <div class="container-fluid m-0 p-0">
                    <div class="row">
                        <div class="col-auto">
                            <button class="btn btn-close" @onclick="ToggleDetailsVisibility"></button>
                        </div>
                        <div class="col">
                            <AuthorizeView Roles="Administrator">
                                <Authorized>
                                    <div class="input-group mb-3">
                                        <button type="button" class="btn btn-outline-secondary">View</button>
                                        <button type="button" class="btn btn-outline-secondary dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false">
                                            <span class="visually-hidden">Toggle Dropdown</span>
                                        </button>
                                        <ul class="dropdown-menu">
                                            <li><a class="dropdown-item" @onmouseleave="@SetCommandPresentationType">Command</a></li>
                                            <li><a class="dropdown-item" @onmouseleave="@SetStatusPresentationType">Status</a></li>
                                            <li><a class="dropdown-item" @onmouseleave="@SetControlPresentationType">Control</a></li>
                                            <li><a class="dropdown-item" @onmouseleave="@SetDisplayPresentationType">Display</a></li>
                                        </ul>
                                        <input type="text" class="form-control" @bind="@DetailsPresentationType" aria-label="Text input with segmented dropdown button">
                                    </div>
                                </Authorized>
                                <NotAuthorized>

                                </NotAuthorized>
                            </AuthorizeView>
                        </div>

                    </div>
                </div>
                @* <div class="m-3"> *@
                @*     <button class="btn btn-close" @onclick="ToggleDetailsVisibility"></button> *@
                @*     <button class="btn btn-primary" @onclick="SetCommandPresentationType">Command</button> *@
                @*     <button class="btn btn-primary" @onclick="SetControlPresentationType">Control</button> *@
                @*     <button class="btn btn-primary" @onclick="SetStatusPresentationType">Status</button> *@
                @*     <button class="btn btn-primary" @onclick="SetDisplayPresentationType">Display</button> *@
                @*     <input type="text" class="form-control" placeholder="Presentation" @bind="DetailsPresentationType"> *@
                @* </div> *@
            </div>
            <div class="card-body" style="height: 250px;">
                <p class="card-deck overflow-auto">
                    <RenderableContentControl @ref="detailsRcc" Context="@DetailsObject" Presentation="Command-Control"></RenderableContentControl>
                </p>
            </div>
        </div>
    </span>
</div>
@code
{
    private string detailsPresentationType;

    private void SetCommandPresentationType()
    {
        DetailsPresentationType = "Command";
    }

    private void SetControlPresentationType()
    {
        DetailsPresentationType = "Control";
    }

    private void SetStatusPresentationType()
    {
        DetailsPresentationType = "Status";
    }

    private void SetDisplayPresentationType()
    {
        DetailsPresentationType = "Display";
    }

    private RenderableContentControl detailsRcc { get; set; }

    private const string VISUALLY_HIDDEN = "visually-hidden";
    private string DetailsVisibility { get; set; } = VISUALLY_HIDDEN;

    public string DetailsPresentationType
    {
        get => detailsPresentationType;
        set
        {
            detailsPresentationType = value;
            detailsRcc.Presentation = value;
            this.StateHasChanged();
        }
    }

    private void ToggleDetailsVisibility()
    {
        this.DetailsVisibility = this.DetailsVisibility == VISUALLY_HIDDEN ? string.Empty : VISUALLY_HIDDEN;
        if (DetailsVisibility == string.Empty)
        {
            detailsRcc.Presentation = "empty";
            detailsRcc.ForceRender();
            System.GC.Collect();
        }
        this.StateHasChanged();
    }

    public void UpdateDetails(ITwinElement element)
    {
        if (detailsRcc != null)
        {
            DetailsVisibility = string.Empty;
            this.StateHasChanged();
            detailsRcc.Context = element;
            detailsRcc?.ForceRender();
        }
    }

    private void ToggleInDesignMode()
    {
        InDesignMode = !InDesignMode;
        ReDragElement();
    }

    private bool InDesignMode { get; set; }
}
