@namespace AXOpen.Core.Blazor.Dialogs
@using AXOpen.Base.Abstractions.Dialogs;
@using AXOpen.Base.Dialogs;
@using AXOpen.Core.Blazor.AxoAlertDialog;
@using AXOpen.Core.Blazor.AxoDialogs.Hubs;
@using AXOpen.Core.Blazor.AxoDialogs;
@using AXOpen.Dialogs;
@using AXSharp.Connector;
@inject AxoAlertDialogProxyService _dialogProxyService
@inject IAlertDialogService _scopedAlerts
@implements IDisposable

<AxoAlertToast _dialogServiceParameter="_dialogProxyService.DialogService" UseScopedAlerts="@UseScopedAlerts"></AxoAlertToast>

@code {
    [Parameter]
    public IEnumerable<ITwinObject> ObservedObjects { get; set; }
    [Parameter]
    public bool UseScopedAlerts { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (ObservedObjects != null)
                _dialogProxyService.SetObservedObjects(ObservedObjects);

            _dialogProxyService.AlertDialogInvoked += OnDialogInvoked;
        }

    }

    public async void OnDialogInvoked(object sender, AxoDialogEventArgs e)
    {
        if (_dialogProxyService.DialogInstance is AXOpen.Core.AxoAlertDialog)
        {
            AXOpen.Core.AxoAlertDialog a = (AXOpen.Core.AxoAlertDialog)_dialogProxyService.DialogInstance;
            if (UseScopedAlerts)
            {
                _scopedAlerts.AddAlertDialog((eAlertDialogType)a._dialogType.Cyclic, a._title.Cyclic, a._message.Cyclic, a._timeToBurn.Cyclic);
            }
            else
            {
                _dialogProxyService.DialogService.AddAlertDialog((eAlertDialogType)a._dialogType.Cyclic, a._title.Cyclic, a._message.Cyclic, a._timeToBurn.Cyclic);
            }
            _dialogProxyService.DialogInstance = null;
            await InvokeAsync(StateHasChanged);
        }
       
    }
    
    public void Dispose()
    {
        _dialogProxyService.AlertDialogInvoked -= OnDialogInvoked;
    }
}
