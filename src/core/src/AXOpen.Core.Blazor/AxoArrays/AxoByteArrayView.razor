@namespace AXOpen.Core
@using AXSharp.Connector.ValueTypes
@using AXSharp.Connector;
@using AXSharp.Presentation.Blazor.Controls.Layouts.TabControlComponents;
@inherits RenderableComplexComponentBase<AxoByteArray>;

<div>
    <div class="row justify-content-between">
        <div class="col-auto d-flex align-items-center">
            <p class="mb-0">@Component.AttributeName</p>
        </div>
        <div class="col-auto d-flex justify-content-end">
            <button type="button" class="btn btn-secondary me-1" data-bs-toggle="modal" data-bs-target="#formatModal-@_id">Format</button>
            @if (IsControllable & !IsReadOnly)
            {
                <button class="btn btn-primary" type="button" @onclick="() => UploadAndFormatData(null, null)">
                    <span class="oi oi-data-transfer-upload" aria-hidden="true" />
                </button>
                <button class="btn btn-primary" type="button" @onclick="() => Download()">
                    <span class="oi oi-data-transfer-download" aria-hidden="true" />
                </button>
            }
            else
            {
                <button class="btn btn-primary" type="button" @onclick="() => UploadAndFormatData(null, null)">
                    <span class="oi oi-reload" aria-hidden="true" />
                </button>
            }
        </div>
    </div>
    <div class="row mx-1 flex-nowrap gx-0" style="overflow-x: auto; width: 70vw;">
        @if (this.Data != null)
        {
            @foreach (IndexedData<string> item in this.Data)
            {
                if (item != null && @item.Index != null && @item.Data != null)
                {
                    <div class="col-auto mx-1">
                        <label>@item.Index</label>
                        <div>
                            <input class="form-control p-1" type="text" @bind=item.Data maxlength="@MaxLen" style="width: 2.5rem;">
                        </div>
                    </div>
                }
            }
        }
    </div>
</div>

<div class="modal fade" id="formatModal-@_id" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Display format</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <select class="form-control" @bind="@DisplayFormat">

                    @foreach (var displayedFormat in DisplayedFormatList)
                    {
                        <option value="@displayedFormat.DisplayFormat"> @displayedFormat.Description </option>
                    }
                </select>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@code {
    private Guid _id = Guid.NewGuid();

    private List<DisplayedFormat> DisplayedFormatList = new List<DisplayedFormat>()
        {new DisplayedFormat(eDisplayFormat.Array_of_decimals, "array of decimals"),
         new DisplayedFormat(eDisplayFormat.Array_of_hexdecimals, "array of hexadecimals"),
         new DisplayedFormat(eDisplayFormat.String, "string") };

    private async Task Upload()
    {
        UploadAndFormatData(null, null);
        await InvokeAsync(StateHasChanged);
    }

    private async Task Download()
    {
        Download(null, null);
    }

    private class DisplayedFormat
    {
        public DisplayedFormat(eDisplayFormat displayFormat, string description)
        {
            DisplayFormat = displayFormat;
            Description = description;
        }
        public eDisplayFormat DisplayFormat { get; set; }
        public string Description { get; set; }
    }

}
