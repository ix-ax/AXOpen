@namespace AXOpen.Core
@using AXSharp.Connector.ValueTypes
@using AXSharp.Connector;
@using AXSharp.Presentation.Blazor.Controls.Layouts.TabControlComponents;
@inherits RenderableComplexComponentBase<AxoByteArray>;

<div @oncontextmenu="Show" @oncontextmenu:preventDefault="true">
    <div class="row ">
        <div class="col">
            @Component.AttributeName
            <button class="btn btn-primary" type="button" @onclick="@Refresh">
                <span class="oi oi-reload" aria-hidden="true" />
            </button>
        </div>
    </div>
    <div class="row ms-1 me-1 flex-nowrap" style="overflow-x: scroll; width: 75em;">
        @if (this.Data != null)
        {
            @foreach (IndexedData<string> item in this.Data)
            {
                if (item != null && @item.Index != null && @item.Data != null)
                {
                    <div class="col">
                        <div>
                            @item.Index
                        </div>
                        <div>
                            @item.Data
                        </div>
                    </div>
                }
            }
        }
    </div>
    <div class="container">
        <div class="modal modal-xl @_modalClass" tabindex="-1" role="dialog" style="display:@_modalDisplay; overflow-y: auto; ">
            <div class="modal-dialog mw-75 w-50 modal-dialog-centered" style="align-items: flex-end;" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="text-center d-flex">
                            <div class="col">
                                <h3 class="modal-title m-2 ">Display format</h3>
                            </div>
                            <div class="d-flex justify-content-center ">
                                <button type="button" class="btn-close topright" data-dismiss="modal" aria-label="Close" @onclick="Close" />
                            </div>
                        </div>
                    </div>
                    <div class="modal-body">
                        <p>Display data as:</p>
                        <select class="form-control" @bind="@SelectedFormatID">

                            @foreach (var displayedFormat in DisplayedFormatList)
                            {
                                <option value="@displayedFormat.DisplayFormat"> @displayedFormat.Description </option>
                            }

                        </select>
                        <div class="d-flex justify-content-center ">
                            <button type="button" class="btn btn-primary m-2 w-50" @onclick="ChangeFormat">Change format</button>
                            <button type="button" class="btn btn-primary m-2 w-50" @onclick="Close">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    @if (_showBackdrop)
    {
        <div class="modal-backdrop fade show"></div>
    }
</div>

@code {

    private string _modalDisplay = "none;";
    private string _modalClass = string.Empty;
    private bool _showBackdrop = false;
    private eDisplayFormat previousDisplayFormat;
    private eDisplayFormat selectedFormatID;

    private eDisplayFormat SelectedFormatID
    {
        get => selectedFormatID;
        set { selectedFormatID = value; }
    }

    private List<DisplayedFormat> DisplayedFormatList = new List<DisplayedFormat>()
        {new DisplayedFormat(eDisplayFormat.Array_of_decimals, "array of decimals"),
         new DisplayedFormat(eDisplayFormat.Array_of_hexdecimals, "array of hexadecimals"),
         new DisplayedFormat(eDisplayFormat.String, "string") };

    private async Task Show()
    {
        _modalDisplay = "flex";
        _modalClass = "show";
        _showBackdrop = true;
        previousDisplayFormat = CurrentDisplayFormat;
        SelectedFormatID = previousDisplayFormat;
        await InvokeAsync(StateHasChanged);
    }

    private async Task Close()
    {
        _modalDisplay = "none";
        _modalClass = string.Empty;
        _showBackdrop = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task ChangeFormat()
    {
        if (SelectedFormatID != previousDisplayFormat)
        {
            CurrentDisplayFormat = SelectedFormatID;
        }
        await Close();
    }

    private async Task Refresh()
    {
        UpdateAndFormatData(null, null);
        await InvokeAsync(StateHasChanged);
    }

    private class DisplayedFormat
    {

        public DisplayedFormat(eDisplayFormat displayFormat, string description)
        {
            DisplayFormat = displayFormat;
            Description = description;
        }
        public eDisplayFormat DisplayFormat { get; set; }
        public string Description { get; set; }
    }

}
