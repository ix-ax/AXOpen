@*@namespace AXOpen.Core.Blazor.Dialogs
@using AXOpen.Core.Blazor.AxoDialogs.Hubs;
@using AXOpen.Core.Blazor.AxoDialogs;
@using AXOpen.Dialogs;
@using AXSharp.Abstractions.Dialogs.AlertDialog;
@using AXSharp.Connector;
@inject AxoDialogProxyService _dialogService
@inject IAlertDialogService _alertDialogService
@implements IDisposable

@if (_dialogService.DialogInstance != null)
{
    if (_dialogService.DialogInstance is AxoAlertDialog)
    {
        AxoAlertDialog a = (AxoAlertDialog)_dialogService.DialogInstance;
        _alertDialogService.AddAlertDialog((eDialogType)Enum.ToObject(typeof(eDialogType), a._dialogType.Cyclic), a._title.Cyclic, a._message.Cyclic, a._timeToBurn.Cyclic);
        _dialogService.DialogInstance = null;
    }
}

@code {
    [Parameter]
    public IEnumerable<ITwinObject> ObservedObjects { get; set; }

    protected override void OnInitialized()
    {
        if (ObservedObjects != null)
            _dialogService.SetObservedObjects(ObservedObjects);
        
        _dialogService.DialogInvoked += OnDialogInvoked;
        base.OnInitialized();   
    }

    public async void OnDialogInvoked()
    {
        await InvokeAsync(StateHasChanged);
    }
    
    public void Dispose()
    {
        _dialogService.DialogInvoked -= OnDialogInvoked;
    }
}
*@