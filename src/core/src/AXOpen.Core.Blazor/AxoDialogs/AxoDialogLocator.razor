@namespace AXOpen.Core.Blazor.AxoDialogs
@using AXOpen.Core.Blazor.AxoDialogs.Hubs;
@using AXOpen.Dialogs;
@using AXSharp.Connector;
@inject NavigationManager _navigationManager
@inject AxoDialogContainer _dialogContainer
@implements IDisposable
<h1>cau</h1>


@if (_axoDialogProxyService?.DialogInstance != null)
{
    <RenderableContentControl Context="_axoDialogProxyService.DialogInstance"
                              Presentation="Dialog"/>
}




@code {

    [Parameter]
    public IEnumerable<ITwinObject> ObservedObjects { get; set; }
    /// <summary>
    /// Pass unique value of last segment of URL, which will represent dialog id corresponding to actual page url.
    /// </summary>
    [Parameter]
    public string DialogId { get; set; }
    /// <summary>
    /// Delay for dialog open, if you have problem with dialogs open on slower PC, increase dialog dealay (Default value is 500 ms).
    /// </summary>
    [Parameter]
    public int DialogOpenDelay { get; set; }


    private AxoDialogProxyService _axoDialogProxyService { get; set; }



    protected async override Task OnInitializedAsync()
    {

        //if dialog id is null, set it to actual URI
        if (string.IsNullOrEmpty(DialogId))
        {
            DialogId = _navigationManager.Uri;
        }
        //try to acquire existing dialog service instance
        _axoDialogProxyService = _dialogContainer.DialogProxyServices.FirstOrDefault(x => x.DialogServiceId == DialogId);


        if (_axoDialogProxyService == null)
        {
            // if it does not exist, create new instance with observed objects and add it into container
            _axoDialogProxyService = new AxoDialogProxyService(DialogId, ObservedObjects);
            await _dialogContainer.InitializeSignalR(_navigationManager.BaseUri);
            _dialogContainer.DialogProxyServices.Add(_axoDialogProxyService);
        }


        Console.WriteLine($"Base initialized, ID: {DialogId}");
        _axoDialogProxyService.DialogInvoked += OnDialogInvoked;
        base.OnInitialized();   
    }

    public async void OnDialogInvoked(object sender, AxoDialogEventArgs e)
    {
        Console.WriteLine($"Invoke caught 1, ID: {DialogId}");
        await InvokeAsync(StateHasChanged);
        await _dialogContainer.DialogClient.SendDialogOpen(DialogId);


    }
    
    public void Dispose()
    {
        _axoDialogProxyService.DialogInvoked -= OnDialogInvoked;
    }

}
