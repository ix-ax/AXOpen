@namespace AXOpen.Core.Blazor.AxoDialogs
@using AXOpen.Base.Abstractions.Dialogs;
@using AXOpen.Core.Blazor.AxoDialogs.Hubs;
@using AXOpen.Dialogs;
@using AXSharp.Connector;
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager _navigationManager
@inject AxoDialogContainer _dialogContainer
@implements IDisposable




@if (_axoDialogProxyService?.DialogInstance != null)
{
    <RenderableContentControl Context="_axoDialogProxyService.DialogInstance"
                              Presentation="Dialog"/>
}




@code {

    /// <summary>
    /// List of objects, which are observed for dialogs. Example: ObservedObjects="new[] {Entry.Plc.Context.CU0, Entry.Plc.Context.CU1}"
    /// </summary>
    [Parameter]
    public IEnumerable<ITwinObject> ObservedObjects { get; set; }
    /// <summary>
    /// Unique ID of dialog, which is used to synchronize dialogs across clients. Make sure you pass unique value, otherwise inconsistencies may occur. When no value provided, URI is used as a ID. 
    /// </summary>
    [Parameter]
    public string DialogId { get; set; }
    /// <summary>
    /// The opening dialog delay (default value is 100 ms).
    /// </summary>
    [Parameter]
    public int DialogOpenDelay { get; set; } = 100;
    /// <summary>
    /// Using SSL certificate for SignalR connection (default value is true).
    /// </summary>
    [Parameter]
    public bool BypassSSLCertificate { get; set; } = true;


    private AxoDialogProxyService _axoDialogProxyService { get; set; }



    protected async override Task OnInitializedAsync()
    {

        //if dialog id is null, set it to actual URI
        if (string.IsNullOrEmpty(DialogId))
        {
            DialogId = _navigationManager.Uri;
        }
        //initialize signalR
        _dialogContainer.InitializeSignalR(_navigationManager.BaseUri, BypassSSLCertificate);
        await _dialogContainer.DialogClient.StartAsync();

        //try to acquire existing dialog service instance
        var proxyExists = _dialogContainer.DialogProxyServicesDictionary.TryGetValue(DialogId, out AxoDialogProxyService proxy);

        if (!proxyExists)
        {
            // if it does not exist, create new instance with observed objects and add it into container
            _axoDialogProxyService = new AxoDialogProxyService(_dialogContainer, DialogId, ObservedObjects);
            _dialogContainer.DialogProxyServicesDictionary.TryAdd(DialogId, _axoDialogProxyService);
        }
        else
        {
            _axoDialogProxyService = proxy;
        }

        _axoDialogProxyService.DialogInvoked += OnDialogInvoked;
        base.OnInitialized();   
    }

    public async void OnDialogInvoked(object? sender, AxoDialogEventArgs e)
    {
        await InvokeAsync(StateHasChanged);
        await Task.Delay(DialogOpenDelay);
      
        await _dialogContainer.DialogClient.SendDialogOpen(DialogId);
    }
    
    public void Dispose()
    {
        _axoDialogProxyService.DialogInvoked -= OnDialogInvoked;
    }

}
