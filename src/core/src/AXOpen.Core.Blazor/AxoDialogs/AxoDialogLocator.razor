@namespace AXOpen.Core.Blazor.AxoDialogs
@using AXOpen.Dialogs;
@using AXSharp.Connector;
@inject NavigationManager _navigationManager
@inject AxoDialogProxyService _dialogService
@implements IDisposable
<h1>cau</h1>


@if (_dialogService.DialogInstance != null @*&& _dialogService.DialogInstance.Show == true*@)
{
    <RenderableContentControl Context="_dialogService.DialogInstance"
                              Presentation="Action"/>
}




@code {
    public void Dispose()
    {
        _dialogService.DialogInvoked -= OnDialogInvoked;
    }

    //[Parameter]
    //public static AxoDialogProxyService DialogService { get; set; }

    [Parameter]
    public IEnumerable<ITwinObject> ObservedObjects { get; set; }
    /// <summary>
    /// Pass unique value of last segment of URL, which will represent dialog id corresponding to actual page url.
    /// </summary>
    [Parameter]
    public string DialogId { get; set; }
    /// <summary>
    /// Delay for dialog open, if you have problem with dialogs open on slower PC, increase dialog dealay (Default value is 500 ms).
    /// </summary>
    [Parameter]
    public int DialogOpenDelay { get; set; }



    private bool _showDialog { get; set;}


    //public IsDialog DialogInstance { get; set; }


    protected override void OnInitialized()
    {
        if (ObservedObjects != null)
            _dialogService.SetObservedObjects(ObservedObjects);
        if (!_dialogService.HasBaseEventHandlerInitialized)
        {
            Console.WriteLine("Base initialized");
            //_dialogService.DialogInvoked -= OnDialogInvoked;
            _dialogService.DialogInvoked += OnDialogInvoked;
            //_dialogService.HasBaseEventHandlerInitialized = true;
        }

        base.OnInitialized();   
    }

    public async void OnDialogInvoked()
    {
        Console.WriteLine("Invoke caught 1 - RCC create");
        _dialogService.DialogInstance.Show = true;
        await InvokeAsync(StateHasChanged);

    }
    //protected async void Queue(IsDialog dialog)
    //{

    //    DialogInstance = dialog;
    //    try
    //    {
    //        await DialogInstance.ReadAsync();

    //    }
    //    catch 
    //    {
    //      //swallow  
        //    }


    //    Console.WriteLine("Queue");
    //    DialogInstance.NotifyNow();
    //    await InvokeAsync(StateHasChanged);

    //}

    //void UpdateDialogs(IEnumerable<ITwinObject> observedObjects)
    //{
    //    if (observedObjects == null || observedObjects.Count() == 0) return;
    //    foreach (var observedObject in observedObjects)
    //    {
    //        var descendants = GetDescendants<IsDialog>(observedObject);
    //        foreach (var dialog in descendants)
    //        {
    //            dialog.Initialize(() => Queue(dialog));
    //        }
        //    }

    //}


    //public IEnumerable<T> GetDescendants<T>(ITwinObject obj, IList<T> children = null) where T : class
    //{
    //    children = children != null ? children : new List<T>();

    //    if (obj != null)
    //    {
    //        foreach (var child in obj.GetChildren())
    //        {
    //            var ch = child as T;
    //            if (ch != null)
    //            {
    //                children.Add(ch);
    //            }

    //            GetDescendants<T>(child, children);
    //        }
        //    }

    //    return children;
    //}

    //protected override Task OnInitializedAsync()
    //{
    //    //DialogService.DialogInvoked += OnDialogInvoked;
    //    //UpdateDialogs(ObservedObjects);

    //    return base.OnInitializedAsync();   
    //}


    //public async void OnDialogInvoked()
    //{
    //    await Task.Delay(DialogOpenDelay);

    //    if (DialogService.DialogInstance != null)
    //    {
    //        DialogService.DialogInstance.DialogId = DialogId;
    //        await InvokeAsync(StateHasChanged);
    //        //DialogService.DialogInstance.NotifyNow();
    //        //_actualDialog = DialogService.DialogVortex;



    //    }
        //}




}
