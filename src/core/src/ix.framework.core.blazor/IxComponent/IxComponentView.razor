@namespace ix.framework.core
@using Ix.Connector.ValueTypes;
@using Ix.Presentation.Blazor.Controls.Layouts.TabControlComponents
@inherits RenderableComplexComponentBase<IxComponent>


<div class="container text-left">
    <label>@Component.AttributeName</label>
    <div class="row">
        <table border="1" width="100%">
            <col style="width:95%">
            <col style="width:5%">
            <tbody>
                <tr>
                    <td align="left" style="vertical-align: top;">
                        <RenderableContentControl Presentation="@Presentation" Context="@Header" />
                    </td>
                    @if (ContainsDetailsAttribute)
                    {
                        <td align="right" style="vertical-align: top;">
                            <button @onclick="@Toggle" class="btn btn-primary" role="button">@BtnString</button>
                        </td>                        
                    }
                </tr>
                @if (!Collapsed)
                {
                    <TabControl>

                         @foreach (var detailsTab in DetailsTabs)
                        {
                                <TabPage Text="@detailsTab.HumanReadable">
                                    <RenderableContentControl Presentation="@Presentation" Context=@detailsTab/>
                                </TabPage>
                          }
                    </TabControl>
                }
            </tbody>
        </table>
    </div>
</div>


@code {
    private string _btnString= "+";
    public string BtnString
    {
        get 
        {
            _btnString = Collapsed ? "+" : "-";
            return this._btnString;
        }
    }
    private string _presentation = "Base";
    [Parameter]
    public string Presentation 
    {
        get 
        { 
            return this._presentation; 
        }
        set
        {
            if (!string.IsNullOrEmpty(value))
            {
                this._presentation = value;
            }
        }
    }
    private bool _collapsed = true;
    [Parameter]
    public bool Collapsed { get { return _collapsed; } set { _collapsed = value; } }

    private bool ContainsHeaderAttribute;
    private bool ContainsDetailsAttribute;
    private IEnumerable<string> tabNames = new List<string>();

    void Toggle()
    {
        Collapsed = !Collapsed;
    }

    protected override void OnInitialized()
    {
        ContainsHeaderAttribute = this.Header.GetKids().Count() != 0;       
        tabNames = GetAllTabNames(this.Component);
        ContainsDetailsAttribute = this.DetailsTabs.Count() != 0;


        UpdateValuesOnChange(Component);
    }
}
