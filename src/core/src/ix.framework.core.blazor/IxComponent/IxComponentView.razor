@namespace ix.framework.core
@using Ix.Connector.ValueTypes
@using Ix.Presentation.Blazor.Controls.Layouts.TabControlComponents
@inherits RenderableComplexComponentBase<IxComponent>


<div class="card">
    <div class="card-header d-flex">
        <div class="p-0 w-100"><h5>@Component.AttributeName</h5></div>
        <div class="p-0 flex-shrink-1">
            @if (ContainsDetailsAttribute)
            {
                <button class="btn btn-primary" type="button" @onclick="Collapse">
                    <span class="oi oi-chevron-top @(isCollapsed ? "open" : "")" aria-hidden="true"></span>
                </button>
            }
        </div>
    </div>
   
    <div class="card-body">
        <RenderableContentControl Presentation="@Presentation" Context="@Header" Class="bg-light rounded-3 shadow" LayoutClass="align-items-end"/>
    </div>

    @if (ContainsDetailsAttribute)
    {
        <div class="@(isCollapsed ? "collapse" : null)">
            <div class="card card-body">
                <TabControl>
                    @foreach (var detailsTab in DetailsTabs)
                    {
                        <TabPage Text="@detailsTab.HumanReadable">
                            <RenderableContentControl 
                            Context=@detailsTab
                            Presentation="@Presentation"
                            Class="bg-light rounded-3 shadow"
                            LayoutClass="align-items-end" 
                            LayoutChildrenClass="ms-0"/>
                        </TabPage>
                    }
                </TabControl>
            </div>
        </div>
    }
</div>


@code {
    private bool isCollapsed = true;
    private string _presentation = "Base";
    [Parameter]
    public string Presentation 
    {
        get 
        { 
            return this._presentation; 
        }
        set
        {
            if (this.Component._isinServiceMode.Cyclic)
            {
                if (!string.IsNullOrEmpty(value))
                {
                    this._presentation = value;
                }
            }
            else
            {
                this._presentation = "Display";
            }

        }
    }

    private bool ContainsHeaderAttribute;
    private bool ContainsDetailsAttribute;
    private IEnumerable<string> tabNames = new List<string>();

    protected override void OnInitialized()
    {
        ContainsHeaderAttribute = this.Header.GetKids().Count() != 0;       
        tabNames = GetAllTabNames(this.Component);
        ContainsDetailsAttribute = this.DetailsTabs.Count() != 0;
        UpdateValuesOnChange(Component);
    }

    private void Collapse()
    {
        isCollapsed = !isCollapsed;
    }
}
