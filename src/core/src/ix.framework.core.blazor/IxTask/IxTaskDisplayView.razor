@namespace ix.framework.core
@inherits RenderableComplexComponentBase<IxTask>
@implements IDisposable;

<div class="d-flex align-end me-2 mb-2">
        <div class="btn-group">

            @if (IsTaskRunning)
            {
                <button class="btn @ButtonClass" type="button" disabled="true">
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"/>
                    <span >@Component.AttributeName</span>
                    <span class="oi oi-media-pause text-white ms-1 mt-0 me-0 mb-0 p-0" type="button"/>
                </button>
            }
            else if (IsTaskAborted)
            {
                <button class="btn @ButtonClass" type="button" disabled="true">
                    <span class="spinner-border spinner-border-sm invisible" role="status" aria-hidden="true"/>
                    <span>@Component.AttributeName</span>
                    <span class="oi oi-media-play text-white ms-1 mt-0 me-0 mb-0 p-0" />
                </button>
            }
            else
            {
                <button class="btn @ButtonClass" type="button" disabled="true">
                    <span class="spinner-border spinner-border-sm invisible" role="status" aria-hidden="true" />
                    <span>@Component.AttributeName</span>
                    <span class="oi oi-media-play text-white ms-1 mt-0 me-0 mb-0 p-0 invisible" />
                </button>
            }
            <button class="btn @ButtonClass" type="button" disabled="true">
                <span class="oi oi-reload" aria-hidden="true"></span>
            </button>
        </div>
</div>

@code
{
    public string ButtonClass = "btn-primary";

    public bool IsTaskRunning => Component.Status.Cyclic == (ushort)eIxTaskState.Busy;
    public bool IsTaskAborted => Component.Status.Cyclic == (ushort)eIxTaskState.Aborted;

    protected void UpdateTaskColor(object sender, EventArgs e)
    {
        switch ((eIxTaskState)Component.Status.LastValue)
        {
            case eIxTaskState.Done:
                ButtonClass = "btn-success";
                break;
            case eIxTaskState.Error:
                ButtonClass = "btn-danger";
                break;
            default:
                ButtonClass = "btn-primary";
                break;
        }        
    }

    protected override void OnInitialized()
    {
        UpdateValuesOnChange(Component);
        UpdateTaskColor(this, new EventArgs());
        Component.Status.PropertyChanged += UpdateTaskColor;
    }

    public void Dispose()
    {
        Component.Status.PropertyChanged -= UpdateTaskColor;
    }
}
