@using AXSharp.Connector;

<div class="accordion-item">
    <div class="accordion-header">
        <div class="input-group flex-nowrap">
            <div class="input-group-text bg-transparent border-0">
                <input class="form-check-input mt-0" type="checkbox" @attributes="Vm.CheckedInDictionary(Vm.GetCustomExportDataValue(Fragment.ToString(), String.Join('.', Parent, AccordionContent.GetSymbolTail())))" @onchange="@((ChangeEventArgs __e) => Vm.ChangeCustomExportDataValue(__e, Fragment.ToString(), String.Join('.', Parent, AccordionContent.GetSymbolTail())))">
            </div>
            <button class="accordion-button collapsed py-2" type="button" data-bs-toggle="collapse" data-bs-target="#@Fragment.ToString().Replace(".", "_")-@Parent.Replace(".", "_")-@AccordionContent.GetSymbolTail()-@ViewGuid" aria-expanded="false" aria-controls="@Fragment.ToString().Replace(".", "_")-@Parent.Replace(".", "_")-@AccordionContent.GetSymbolTail()-@ViewGuid">
                @AccordionContent.GetSymbolTail()
            </button>
        </div>
    </div>
    <div id="@Fragment.ToString().Replace(".", "_")-@Parent.Replace(".", "_")-@AccordionContent.GetSymbolTail()-@ViewGuid" class="accordion-collapse collapse">
        <div class="accordion-body">
            <ul class="list-group">
                @foreach (var item in Vm.GetValueTags(AccordionContent.GetType()))
                {
                    @if (item is ITwinPrimitive)
                    {
                        <li class="list-group-item">
                            <input class="form-check-input me-1" type="checkbox" id="@Fragment.ToString()-@Parent-@AccordionContent.GetSymbolTail()-@item.GetSymbolTail()-@ViewGuid" @attributes="Vm.CheckedInDictionary(Vm.GetCustomExportDataValue(Fragment.ToString(), String.Join('.', Parent, AccordionContent.GetSymbolTail(), item.GetSymbolTail())))" @onchange="@((ChangeEventArgs __e) => Vm.ChangeCustomExportDataValue(__e, Fragment.ToString(), String.Join('.', Parent, AccordionContent.GetSymbolTail(), item.GetSymbolTail())))">
                            <label class="form-check-label ms-3" for="@Fragment.ToString()-@Parent-@AccordionContent.GetSymbolTail()-@item.GetSymbolTail()-@ViewGuid">@item.GetSymbolTail()</label>
                        </li>
                    }
                    else if (item is ITwinObject)
                    {
                        <DataExchangeAccordionComponent AccordionContent="item" Vm="Vm" Fragment="Fragment" Parent="@(String.Join('.', Parent, AccordionContent.GetSymbolTail()))" ViewGuid="ViewGuid" />
                    }
                }
            </ul>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public ITwinElement AccordionContent { get; set; }

    [Parameter]
    public DataExchangeViewModel Vm { get; set; }

    [Parameter]
    public ITwinObject Fragment { get; set; }

    [Parameter]
    public string? Parent { get; set; } = null;

    [Parameter]
    public Guid ViewGuid { get; set; }
}