@namespace AXOpen.Inspectors

<div class="accordion my-3">
    <div class="accordion-item">
        <div class="accordion-header" style="border-bottom: 1px solid #dee2e6">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#@ID" aria-expanded="false" aria-controls="@ID">
                @Name
            </button>
        </div>

        <div class="accordion-body d-flex flex-wrap">
            @if (IsAnalogInspectorData())
            {

                <RenderableContentControl Context="((AxoAnalogueInspectorData)Data).RequiredMin" Presentation="@Presentation" Class="p-2 " />

                <RenderableContentControl Context="((AxoAnalogueInspectorData)Data).DetectedStatus" Presentation="@Presentation" Class="p-2" />

                <RenderableContentControl Context="((AxoAnalogueInspectorData)Data).RequiredMax" Presentation="@Presentation" Class="p-2 me-auto" />
            }
            else if (IsDigitalInspectorData())
            {

                <RenderableContentControl Context="((AxoDigitalInspectorData)Data).RequiredStatus" Presentation="@Presentation" Class="p-2" />

                <RenderableContentControl Context="((AxoDigitalInspectorData)Data).DetectedStatus" Presentation="@Presentation" Class="p-2 me-auto" />

            }
            else if (IsDataInspectorData())
            {

                <RenderableContentControl Context="((AxoDataInspectorData)Data).RequiredStatus" Presentation="@Presentation" Class="p-2" />

                <RenderableContentControl Context="((AxoDataInspectorData)Data).DetectedStatus" Presentation="@Presentation" Class="p-2 me-auto" />

                <RenderableContentControl Context="((AxoDataInspectorData)Data).StarNotationEnabled" Presentation="@Presentation" Class="p-2 " />

            }
            else
            {
                <p>Cannot render, unspecified inspector type</p>
            }
            <div class="p-2">
                <RenderableContentControl Context="@Data.IsByPassed" Presentation="@Presentation" />
            </div>
            <div class="p-2">
                <RenderableContentControl Context="@Data.IsExcluded" Presentation="@Presentation" />
            </div>
            <div class="p-2">
                <GenericIconView Result="result" />
            </div>

        </div>

        <div class="p-2">

            @if (IsOverInspected())
            {
                <p class="text-danger">Over-inspection detected</p>
            }
        </div>


        <div id="@ID" class="accordion-collapse collapse">
            <div class="accordion-body">
                <GenericInspectorDataView Data="@Data" Presentation="@Presentation" />
            </div>
        </div>
    </div>
</div>




@code {


    [Parameter]
    public AxoInspectorData Data { get; set; }

    [Parameter]
    public string Presentation { get; set; }

    [Parameter]
    public string Name { get; set; }

    private short result;
    private string ID = "M" + Guid.NewGuid().ToString();

    private bool IsAnalogInspectorData() => Data is AxoAnalogueInspectorData ? true : false;
    private bool IsDigitalInspectorData() => Data is AxoDigitalInspectorData ? true : false;
    private bool IsDataInspectorData() => Data is AxoDataInspectorData ? true : false;

    private bool IsOverInspected()
    {
        if (Presentation.Contains("Shadow"))
        {
            return (Data.NumberOfAllowedRetries.Shadow > 0) && (Data.NumberOfAllowedRetries.Shadow < Data.RetryAttemptsCount.Shadow);
        }
        // other case is online
        return (Data.NumberOfAllowedRetries.Cyclic > 0) && (Data.NumberOfAllowedRetries.Cyclic < Data.RetryAttemptsCount.Cyclic); ;
    }


    protected override void OnParametersSet()
    {
        result = ((Presentation == "Control") || (Presentation == "Display")) ? Data.Result.Cyclic : Data.Result.Shadow;
    }

}


