@page "/Documentation"
@using axopen.inspectors;
@using AXOpen.Core;
@inherits RenderableComponentBase
<PageTitle>Documentation</PageTitle>

@* <RenderableContentControl Context="@Entry.Plc.documentation" Presentation="Command-Control" PollingInterval="100"/> *@

<RenderableContentControl Context="@Entry.Plc.documentation._automat._analogueInspector" Presentation="Command-Control" PollingInterval="100"/>
<RenderableContentControl Context="@Entry.Plc.documentation._automat._digitalInspector" Presentation="Command-Control" PollingInterval="100" />
<RenderableContentControl Context="@Entry.Plc.documentation._automat._dataInspector" Presentation="Command-Control" PollingInterval="100" />

<div class="container">
 <!-- TOP LEVEL TASKS -->
    <div class="row">
    @foreach (var task in Entry.Plc.documentation.GetChildren().OfType<AxoTask>())
        {
            <div class="col-auto">
                <AuthorizeView Roles="can_run_automat_mode">
                    <Authorized>
                        <AxoTaskCommandView Component="@task" />
                    </Authorized>
                    <NotAuthorized>
                        <AxoTaskStatusView Component="@task" />
                    </NotAuthorized>
                </AuthorizeView>
            </div>
        }
    </div>

    <div class="row">
       @if (Entry.Plc.documentation._automat.Status.Cyclic == (ushort)eAxoTaskState.Busy)
        {
        <AxoSequencerView Component="Entry.Plc.documentation._automat" HasTaskControlButton="false"></AxoSequencerView>
        }
        
    </div>
</div>
@code
{
    protected override void OnInitialized()
    {
        base.OnInitialized();

        UpdateValuesOnChange(Entry.Plc.documentation._automat.Status);


    }
}