@page "/Documentation"
@using axopen.inspectors;
@using AXOpen.Core;
@inherits RenderableComponentBase
<PageTitle>Documentation</PageTitle>

@* <RenderableContentControl Context="@Entry.Plc.documentation" Presentation="Command-Control" PollingInterval="100"/> *@

<RenderableContentControl Context="@Entry.Plc.documentation._automat._analogueInspector" Presentation="Command-Control" PollingInterval="100"/>
<RenderableContentControl Context="@Entry.Plc.documentation._automat._digitalInspector" Presentation="Command-Control" PollingInterval="100" />
<RenderableContentControl Context="@Entry.Plc.documentation._automat._dataInspector" Presentation="Command-Control" PollingInterval="100" />

<div class="container">
    <div class="row">
        <h1>@Entry.Plc.documentation._automat</h1>
    </div>
    <!-- TOP LEVEL TASKS -->
    <div class="row">
        @foreach (var task in @Entry.Plc.documentation._automat.GetChildren().OfType<AxoTask>())
        {
            <div class="col-auto">
                <AXOpen.Core.AxoTaskCommandView Component="@task" />
            </div>
        }
    </div> 

    <div>
        <p>/////////////////////////////</p>
    </div>
     <!-- TASK DETAILS -->
    <div class="row">
        @foreach (AxoSequencer axoSequencer in @Entry.Plc.documentation.GetChildren().OfType<AxoSequencer>())
        {
            if (axoSequencer.Status.Cyclic == (ushort)eAxoTaskState.Busy)
            {
                    <div class="card-body">
                        <div class="row">
                            <div class="col">
                     
                                  <AXOpen.Core.AxoTaskCommandView Component="@Entry.Plc.documentation._automat" /> 
                                   
                            </div>
                        </div>
                       
                        <div class="container">
                            <div class="row">
                                <div class="col">
                                <RenderableContentControl Context="@Entry.Plc.documentation._automat.SequenceMode" Presentation="Control" />
                                </div>
                                <div class="col">
                                <RenderableContentControl Context="@Entry.Plc.documentation._automat.SteppingMode" Presentation="Control" />
                                </div>
                            </div>
                        </div>
                       
                            <div class="container">
                                <div class="row">
                                    <div class="col">

                                <RenderableContentControl Context="@Entry.Plc.documentation._automat.StepBackwardCommand" Presentation="Command" />
                                         
                             
                                    </div>
                                    <div class="col">
                                <RenderableContentControl Context="@Entry.Plc.documentation._automat.StepIn" Presentation="Command" />
                                    </div>
                                    <div class="col">

                                <RenderableContentControl Context="@Entry.Plc.documentation._automat.StepForwardCommand" Presentation="Command" />
                                           
       
                                    </div>
                                </div>
                            </div>
                        
                      
                            <div style="height: 300px; overflow: auto;">
                        <AxoStepView Component="Entry.Plc.documentation._automat.CurrentStep"></AxoStepView> 
                            </div>
                        
                    </div>

            }
        }
    </div>
</div>

@code
{
    protected override void OnInitialized()
    {
        base.OnInitialized();

        Entry.Plc.documentation._automat.GetChildren().OfType<AxoSequencer>().ToList().ForEach(p => UpdateValuesOnChange(p.Status));

    }
}