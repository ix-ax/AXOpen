@page "/Identity/Account/Manage"
@using AxOpen.Security.Entities;
@using AxOpen.Security.Models;
@using AxOpen.Security.Services;
@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Identity;
@namespace AxOpen.Security.Views
@inject UserManager<User> _userManager
@inject IRepositoryService _repositoryService
@inject AuthenticationStateProvider _authenticationStateProvider

<AuthorizeView>
    <Authorized>
        <div class="card">
            <h4 class="card-header">Account Manage</h4>
            <div class="card-body">
                <EditForm Model="@_model" OnValidSubmit="OnValidUpdate" Context="accountManagementContext">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label>Username</label>
                        <InputText @bind-Value="_model.Username" type="text" class="form-control" disabled />
                    </div>
                    <div class="form-group">
                        <label>Group</label>
                        <InputText @bind-Value="_model.Group" type="text" class="form-control" disabled />
                    </div>
                    <div class="form-group">
                        <label>Email</label>
                        <InputText @bind-Value="_model.Email" type="email" class="form-control" />
                        <ValidationMessage For="@(() => _model.Email)" />
                    </div>
                    @if (_model.CanUserChangePassword)
                    {
                        <div class="form-group">
                            <label>Password</label>
                            <InputText @bind-Value="_model.Password" type="password" class="form-control" />
                            <ValidationMessage For="@(() => _model.Password)" />
                        </div>
                        <div class="form-group">
                            <label>Confirm password</label>
                            <InputText @bind-Value="_model.ConfirmPassword" type="password" class="form-control" />
                            <ValidationMessage For="@(() => _model.ConfirmPassword)" />
                        </div>
                    }
                    <div class="d-flex justify-content-between">
                        <button type="submit" class="btn btn-primary m-2">Update</button>
                        @*@if (_repositoryService.ExternalAuthorization != null)
                        {
                            <button type="button" class="btn btn-primary m-2" data-bs-toggle="modal" data-bs-target="#changeAuthorizationTokenModal">Change authorization token</button>
                        }*@
                    </div>
                </EditForm>
            </div>
        </div>

        @*<div class="modal fade" id="changeAuthorizationTokenModal" data-bs-backdrop="static" tabindex="-1" aria-hidden="true">
            <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable">
                <div class="modal-content">
                    <div class="modal-header">
                        <h1 class="modal-title fs-5" id="exampleModalLabel">@changeAuthorizationTokenTitle</h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="SetDefault"></button>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary m-2" @onclick="WillChangeToken">@changeAuthorizationTokenButton</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="SetDefault">Close</button>
                    </div>
                </div>
            </div>
        </div>*@
    </Authorized>
    <NotAuthorized>
        <p>Sorry, you are not logged in. Please log in.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private RegisterUserModel _model { get; set; }

    private async void OnValidUpdate()
    {
        User _user = await _userManager.FindByIdAsync(_model.Username);

        if (_model.CanUserChangePassword && _model.Password != "password")
        {
            await _userManager.ResetPasswordAsync(_user, _user.SecurityStamp, _model.Password);
        }
        _user.Email = _model.Email;
        var result = await _userManager.UpdateAsync(_user);
        if (result.Succeeded)
        {
            //WeakReferenceMessenger.Default.Send(new ToastMessage(new Toast("Success", "Updated!", "User succesfully updated.", 10)));
            //TcoAppDomain.Current.Logger.Information($"User '{_user.UserName}' has changed.{{payload}}", new { UserName = _user.UserName, Email = _user.Email, CanChangePassword = _user.CanUserChangePassword, Group = string.Join(",", _user.Roles) });
        }
        else
        {
            //WeakReferenceMessenger.Default.Send(new ToastMessage(new Toast("Success", "Not updated!", "User was not updated.", 10)));
        }
    }

    protected override async void OnInitialized()
    {
        _model = new RegisterUserModel();

        User _user = await _userManager.FindByIdAsync(_authenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.Name);

        _model.Username = _user.UserName;
        _model.Group = _user.Group;
        _model.Email = _user.Email;
        _model.CanUserChangePassword = _user.CanUserChangePassword;
        _model.Password = "password";
        _model.ConfirmPassword = "password";
    }

    private string changeAuthorizationTokenTitle = "Are you sure you want to change your authorization token?";
    private string changeAuthorizationTokenButton = "Change your authorization token";

    //private void WillChangeToken()
    //{
    //    if (_blazorAuthenticationStateProvider.ExternalAuthorization.WillChangeToken)
    //    {
    //        _blazorAuthenticationStateProvider.ExternalAuthorization.WillChangeToken = false;
    //        changeAuthorizationTokenTitle = "Read your authorization token and press OK";
    //        changeAuthorizationTokenButton = "OK";
    //    }
    //    else
    //    {
    //        _blazorAuthenticationStateProvider.ExternalAuthorization.WillChangeToken = true;
    //        changeAuthorizationTokenTitle = "Are you sure you want to change your authorization token?";
    //        changeAuthorizationTokenButton = "Change your authorization token";
    //    }
    //}

    //private void SetDefault()
    //{
    //    _blazorAuthenticationStateProvider.ExternalAuthorization.WillChangeToken = true;
    //    changeAuthorizationTokenTitle = "Are you sure you want to change your authorization token?";
    //    changeAuthorizationTokenButton = "Change your authorization token";
    //}
}
