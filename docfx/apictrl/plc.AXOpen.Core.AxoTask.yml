## YamlMime:ManagedReference
items:
- uid: plc.AXOpen.Core.AxoTask
  id: plc.AXOpen.Core.AxoTask
  parent: plc.AXOpen.Core
  children:
  - plc.AXOpen.Core.AxoTask.Status
  - plc.AXOpen.Core.AxoTask.IsDisabled
  - plc.AXOpen.Core.AxoTask.RemoteInvoke
  - plc.AXOpen.Core.AxoTask.RemoteRestore
  - plc.AXOpen.Core.AxoTask.RemoteAbort
  - plc.AXOpen.Core.AxoTask.RemoteResume
  - plc.AXOpen.Core.AxoTask.StartSignature
  - plc.AXOpen.Core.AxoTask.Duration
  - plc.AXOpen.Core.AxoTask.StartTimeStamp
  - plc.AXOpen.Core.AxoTask.ErrorDetails
  - plc.AXOpen.Core.AxoTask._openCycleCountInvoke
  - plc.AXOpen.Core.AxoTask._openCycleCountExecute
  - plc.AXOpen.Core.AxoTask._taskTimer
  - plc.AXOpen.Core.AxoTask._isFirstExecutionCycle
  - plc.AXOpen.Core.AxoTask._CyclicExecuteIsNotCalled
  - plc.AXOpen.Core.AxoTask._MultipleExecuteIsCalled
  - plc.AXOpen.Core.AxoTask._SuspendMultipleExecuteCallCheck
  - plc.AXOpen.Core.AxoTask._RemoteRestoreEnabled
  - plc.AXOpen.Core.AxoTask._RemoteAbortEnabled
  - plc.AXOpen.Core.AxoTask._restoreCycleCount
  - plc.AXOpen.Core.AxoTask._doneCycleCount
  - plc.AXOpen.Core.AxoTask._startCycleCount
  - plc.AXOpen.Core.AxoTask._errorCycleCount
  - plc.AXOpen.Core.AxoTask._abortCycleCount
  - plc.AXOpen.Core.AxoTask._resumeCycleCount
  - plc.AXOpen.Core.AxoTask.GetState()
  - plc.AXOpen.Core.AxoTask.GetErrorDetails()
  - plc.AXOpen.Core.AxoTask.IsReady()
  - plc.AXOpen.Core.AxoTask.IsDone()
  - plc.AXOpen.Core.AxoTask.IsBusy()
  - plc.AXOpen.Core.AxoTask.IsAborted()
  - plc.AXOpen.Core.AxoTask.HasError()
  - plc.AXOpen.Core.AxoTask.IsFirstExecutionCycle()
  - plc.AXOpen.Core.AxoTask.SetSuspendMultipleExecuteCallCheck(BOOL)
  - plc.AXOpen.Core.AxoTask.GetSuspendMultipleExecuteCallCheckState()
  - plc.AXOpen.Core.AxoTask.IsNewInvokeCall()
  - plc.AXOpen.Core.AxoTask.IsNewExecuteCall()
  - plc.AXOpen.Core.AxoTask.IsExecuteCalledInThisPlcCycle()
  - plc.AXOpen.Core.AxoTask.WasExecuteCalledInPreviousPlcCycle()
  - plc.AXOpen.Core.AxoTask.UpdateState()
  - plc.AXOpen.Core.AxoTask.Invoke()
  - plc.AXOpen.Core.AxoTask.Restore()
  - plc.AXOpen.Core.AxoTask.DoneWhen(BOOL)
  - plc.AXOpen.Core.AxoTask.Execute()
  - plc.AXOpen.Core.AxoTask.LogTask(STRING[80],eLogLevel,IAxoObject)
  - plc.AXOpen.Core.AxoTask.ThrowWhen(BOOL)
  - plc.AXOpen.Core.AxoTask.ThrowWhen(BOOL,STRING[254])
  - plc.AXOpen.Core.AxoTask.SetIsDisabled(BOOL)
  - plc.AXOpen.Core.AxoTask.GetIsDisabled()
  - plc.AXOpen.Core.AxoTask.Abort()
  - plc.AXOpen.Core.AxoTask.Resume()
  - plc.AXOpen.Core.AxoTask.SetRemoteRestoreEnabled(BOOL)
  - plc.AXOpen.Core.AxoTask.GetRemoteRestoreEnabled()
  - plc.AXOpen.Core.AxoTask.SetRemoteAbortEnabled(BOOL)
  - plc.AXOpen.Core.AxoTask.GetRemoteAbortEnabled()
  - plc.AXOpen.Core.AxoTask.OnAbort()
  - plc.AXOpen.Core.AxoTask.OnResume()
  - plc.AXOpen.Core.AxoTask.OnDone()
  - plc.AXOpen.Core.AxoTask.OnError()
  - plc.AXOpen.Core.AxoTask.OnRestore()
  - plc.AXOpen.Core.AxoTask.OnStart()
  - plc.AXOpen.Core.AxoTask.WhileError()
  - plc.AXOpen.Core.AxoTask.AbortTriggered()
  - plc.AXOpen.Core.AxoTask.ResumeTriggered()
  - plc.AXOpen.Core.AxoTask.DoneReached()
  - plc.AXOpen.Core.AxoTask.ErrorOccured()
  - plc.AXOpen.Core.AxoTask.RestoreTriggered()
  - plc.AXOpen.Core.AxoTask.StartTriggered()
  name: AxoTask
  fullName: AxoTask
  type: Class
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 8
  namespace: plc.AXOpen.Core
  syntax:
    content: CLASS AxoTask
  inheritance:
  - plc.AXOpen.Core.AxoObject
  inheritedMembers:
  - plc.AXOpen.Core.AxoObject.Identity
  - plc.AXOpen.Core.AxoObject.GetIdentity()
  - plc.AXOpen.Core.AxoObject.GetContext()
  - plc.AXOpen.Core.AxoObject.GetContextUnsafe()
  - plc.AXOpen.Core.AxoObject.GetParent()
  - plc.AXOpen.Core.AxoObject.Initialize(IAxoObject)
  - plc.AXOpen.Core.AxoObject.Initialize(IAxoContext)
  implements:
  - plc.AXOpen.Core.IAxoTask
  - plc.AXOpen.Core.IAxoTaskState
- uid: plc.AXOpen.Core.AxoTask.Status
  id: plc.AXOpen.Core.AxoTask.Status
  parent: AXOpen.Core
  children: []
  name: Status
  fullName: Status
  type: Property
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.Status
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 15
  namespace: plc.AXOpen.Core
  summary: Gets the state of this task.
  syntax:
    content: 'Status : AXOpen.Core.eAxoTaskState'
    return:
      type: AXOpen.Core.eAxoTaskState
- uid: plc.AXOpen.Core.AxoTask.IsDisabled
  id: plc.AXOpen.Core.AxoTask.IsDisabled
  parent: AXOpen.Core
  children: []
  name: IsDisabled
  fullName: IsDisabled
  type: Property
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.IsDisabled
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 25
  namespace: plc.AXOpen.Core
  summary: Gets or sets whether this task is disabled for execution.
  syntax:
    content: 'IsDisabled : BOOL'
    return:
      type: BOOL
- uid: plc.AXOpen.Core.AxoTask.RemoteInvoke
  id: plc.AXOpen.Core.AxoTask.RemoteInvoke
  parent: AXOpen.Core
  children: []
  name: RemoteInvoke
  fullName: RemoteInvoke
  type: Property
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.RemoteInvoke
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 31
  namespace: plc.AXOpen.Core
  summary: Remote requests for invoke of this task.When 'TRUE' this task will be invoked.
  syntax:
    content: 'RemoteInvoke : BOOL'
    return:
      type: BOOL
- uid: plc.AXOpen.Core.AxoTask.RemoteRestore
  id: plc.AXOpen.Core.AxoTask.RemoteRestore
  parent: AXOpen.Core
  children: []
  name: RemoteRestore
  fullName: RemoteRestore
  type: Property
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.RemoteRestore
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 37
  namespace: plc.AXOpen.Core
  summary: Remote requests for restore of this task.When 'TRUE' this task will be restored.
  syntax:
    content: 'RemoteRestore : BOOL'
    return:
      type: BOOL
- uid: plc.AXOpen.Core.AxoTask.RemoteAbort
  id: plc.AXOpen.Core.AxoTask.RemoteAbort
  parent: AXOpen.Core
  children: []
  name: RemoteAbort
  fullName: RemoteAbort
  type: Property
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.RemoteAbort
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 43
  namespace: plc.AXOpen.Core
  summary: Remote requests for abort of this task.When 'TRUE' this task will be aborted.
  syntax:
    content: 'RemoteAbort : BOOL'
    return:
      type: BOOL
- uid: plc.AXOpen.Core.AxoTask.RemoteResume
  id: plc.AXOpen.Core.AxoTask.RemoteResume
  parent: AXOpen.Core
  children: []
  name: RemoteResume
  fullName: RemoteResume
  type: Property
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.RemoteResume
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 49
  namespace: plc.AXOpen.Core
  summary: Remote requests for resume of this task.When 'TRUE' this task will be resumed.
  syntax:
    content: 'RemoteResume : BOOL'
    return:
      type: BOOL
- uid: plc.AXOpen.Core.AxoTask.StartSignature
  id: plc.AXOpen.Core.AxoTask.StartSignature
  parent: AXOpen.Core
  children: []
  name: StartSignature
  fullName: StartSignature
  type: Property
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.StartSignature
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 54
  namespace: plc.AXOpen.Core
  summary: Contains contex cycle number when this task started.
  syntax:
    content: 'StartSignature : ULINT'
    return:
      type: ULINT
- uid: plc.AXOpen.Core.AxoTask.Duration
  id: plc.AXOpen.Core.AxoTask.Duration
  parent: AXOpen.Core
  children: []
  name: Duration
  fullName: Duration
  type: Property
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.Duration
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 60
  namespace: plc.AXOpen.Core
  summary: Gets elapsed time of last task execution.
  syntax:
    content: 'Duration : LTIME'
    return:
      type: LTIME
- uid: plc.AXOpen.Core.AxoTask.StartTimeStamp
  id: plc.AXOpen.Core.AxoTask.StartTimeStamp
  parent: AXOpen.Core
  children: []
  name: StartTimeStamp
  fullName: StartTimeStamp
  type: Property
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.StartTimeStamp
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 66
  namespace: plc.AXOpen.Core
  summary: Gets date and time when the task started.
  syntax:
    content: 'StartTimeStamp : LDATE_AND_TIME'
    return:
      type: LDATE_AND_TIME
- uid: plc.AXOpen.Core.AxoTask.ErrorDetails
  id: plc.AXOpen.Core.AxoTask.ErrorDetails
  parent: AXOpen.Core
  children: []
  name: ErrorDetails
  fullName: ErrorDetails
  type: Property
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.ErrorDetails
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 73
  namespace: plc.AXOpen.Core
  summary: Contains details about the error.
  syntax:
    content: 'ErrorDetails : STRING[254]'
    return:
      type: STRING[254]
- uid: plc.AXOpen.Core.AxoTask._openCycleCountInvoke
  id: plc.AXOpen.Core.AxoTask._openCycleCountInvoke
  parent: AXOpen.Core
  children: []
  name: _openCycleCountInvoke
  fullName: _openCycleCountInvoke
  type: Property
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask._openCycleCountInvoke
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 74
  namespace: plc.AXOpen.Core
  syntax:
    content: '_openCycleCountInvoke : ULINT'
    return:
      type: ULINT
- uid: plc.AXOpen.Core.AxoTask._openCycleCountExecute
  id: plc.AXOpen.Core.AxoTask._openCycleCountExecute
  parent: AXOpen.Core
  children: []
  name: _openCycleCountExecute
  fullName: _openCycleCountExecute
  type: Property
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask._openCycleCountExecute
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 75
  namespace: plc.AXOpen.Core
  syntax:
    content: '_openCycleCountExecute : ULINT'
    return:
      type: ULINT
- uid: plc.AXOpen.Core.AxoTask._taskTimer
  id: plc.AXOpen.Core.AxoTask._taskTimer
  parent: AXOpen.Core
  children: []
  name: _taskTimer
  fullName: _taskTimer
  type: Property
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask._taskTimer
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 77
  namespace: plc.AXOpen.Core
  syntax:
    content: '_taskTimer : UNDEFINED'
    return:
      type: UNDEFINED
- uid: plc.AXOpen.Core.AxoTask._isFirstExecutionCycle
  id: plc.AXOpen.Core.AxoTask._isFirstExecutionCycle
  parent: AXOpen.Core
  children: []
  name: _isFirstExecutionCycle
  fullName: _isFirstExecutionCycle
  type: Property
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask._isFirstExecutionCycle
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 78
  namespace: plc.AXOpen.Core
  syntax:
    content: '_isFirstExecutionCycle : BOOL'
    return:
      type: BOOL
- uid: plc.AXOpen.Core.AxoTask._CyclicExecuteIsNotCalled
  id: plc.AXOpen.Core.AxoTask._CyclicExecuteIsNotCalled
  parent: AXOpen.Core
  children: []
  name: _CyclicExecuteIsNotCalled
  fullName: _CyclicExecuteIsNotCalled
  type: Property
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask._CyclicExecuteIsNotCalled
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 81
  namespace: plc.AXOpen.Core
  summary: Enable error message when task is not calling cyclically .
  syntax:
    content: '_CyclicExecuteIsNotCalled : AXOpen.Messaging.Static.AxoMessenger'
    return:
      type: AXOpen.Messaging.Static.AxoMessenger
- uid: plc.AXOpen.Core.AxoTask._MultipleExecuteIsCalled
  id: plc.AXOpen.Core.AxoTask._MultipleExecuteIsCalled
  parent: AXOpen.Core
  children: []
  name: _MultipleExecuteIsCalled
  fullName: _MultipleExecuteIsCalled
  type: Property
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask._MultipleExecuteIsCalled
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 86
  namespace: plc.AXOpen.Core
  summary: Enable error message when the `Execute()` method is called more then once inside one PLC cycle.
  syntax:
    content: '_MultipleExecuteIsCalled : AXOpen.Messaging.Static.AxoMessenger'
    return:
      type: AXOpen.Messaging.Static.AxoMessenger
- uid: plc.AXOpen.Core.AxoTask._SuspendMultipleExecuteCallCheck
  id: plc.AXOpen.Core.AxoTask._SuspendMultipleExecuteCallCheck
  parent: AXOpen.Core
  children: []
  name: _SuspendMultipleExecuteCallCheck
  fullName: _SuspendMultipleExecuteCallCheck
  type: Property
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask._SuspendMultipleExecuteCallCheck
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 92
  namespace: plc.AXOpen.Core
  syntax:
    content: '_SuspendMultipleExecuteCallCheck : BOOL'
    return:
      type: BOOL
- uid: plc.AXOpen.Core.AxoTask._RemoteRestoreEnabled
  id: plc.AXOpen.Core.AxoTask._RemoteRestoreEnabled
  parent: AXOpen.Core
  children: []
  name: _RemoteRestoreEnabled
  fullName: _RemoteRestoreEnabled
  type: Property
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask._RemoteRestoreEnabled
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 94
  namespace: plc.AXOpen.Core
  syntax:
    content: '_RemoteRestoreEnabled : BOOL'
    return:
      type: BOOL
- uid: plc.AXOpen.Core.AxoTask._RemoteAbortEnabled
  id: plc.AXOpen.Core.AxoTask._RemoteAbortEnabled
  parent: AXOpen.Core
  children: []
  name: _RemoteAbortEnabled
  fullName: _RemoteAbortEnabled
  type: Property
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask._RemoteAbortEnabled
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 95
  namespace: plc.AXOpen.Core
  syntax:
    content: '_RemoteAbortEnabled : BOOL'
    return:
      type: BOOL
- uid: plc.AXOpen.Core.AxoTask._restoreCycleCount
  id: plc.AXOpen.Core.AxoTask._restoreCycleCount
  parent: AXOpen.Core
  children: []
  name: _restoreCycleCount
  fullName: _restoreCycleCount
  type: Property
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask._restoreCycleCount
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 96
  namespace: plc.AXOpen.Core
  syntax:
    content: '_restoreCycleCount : ULINT'
    return:
      type: ULINT
- uid: plc.AXOpen.Core.AxoTask._doneCycleCount
  id: plc.AXOpen.Core.AxoTask._doneCycleCount
  parent: AXOpen.Core
  children: []
  name: _doneCycleCount
  fullName: _doneCycleCount
  type: Property
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask._doneCycleCount
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 97
  namespace: plc.AXOpen.Core
  syntax:
    content: '_doneCycleCount : ULINT'
    return:
      type: ULINT
- uid: plc.AXOpen.Core.AxoTask._startCycleCount
  id: plc.AXOpen.Core.AxoTask._startCycleCount
  parent: AXOpen.Core
  children: []
  name: _startCycleCount
  fullName: _startCycleCount
  type: Property
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask._startCycleCount
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 101
  namespace: plc.AXOpen.Core
  syntax:
    content: '_startCycleCount : ULINT'
    return:
      type: ULINT
- uid: plc.AXOpen.Core.AxoTask._errorCycleCount
  id: plc.AXOpen.Core.AxoTask._errorCycleCount
  parent: AXOpen.Core
  children: []
  name: _errorCycleCount
  fullName: _errorCycleCount
  type: Property
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask._errorCycleCount
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 102
  namespace: plc.AXOpen.Core
  syntax:
    content: '_errorCycleCount : ULINT'
    return:
      type: ULINT
- uid: plc.AXOpen.Core.AxoTask._abortCycleCount
  id: plc.AXOpen.Core.AxoTask._abortCycleCount
  parent: AXOpen.Core
  children: []
  name: _abortCycleCount
  fullName: _abortCycleCount
  type: Property
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask._abortCycleCount
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 104
  namespace: plc.AXOpen.Core
  syntax:
    content: '_abortCycleCount : ULINT'
    return:
      type: ULINT
- uid: plc.AXOpen.Core.AxoTask._resumeCycleCount
  id: plc.AXOpen.Core.AxoTask._resumeCycleCount
  parent: AXOpen.Core
  children: []
  name: _resumeCycleCount
  fullName: _resumeCycleCount
  type: Property
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask._resumeCycleCount
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 104
  namespace: plc.AXOpen.Core
  syntax:
    content: '_resumeCycleCount : ULINT'
    return:
      type: ULINT
- uid: plc.AXOpen.Core.AxoTask.GetState()
  id: plc.AXOpen.Core.AxoTask.GetState()
  parent: AXOpen.Core.AxoTask
  children: []
  name: GetState
  fullName: GetState
  type: Method
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.GetState
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 108
  namespace: plc.AXOpen.Core
  summary: Gets the actual state of this task.
  syntax:
    content: Public AXOpen.Core.eAxoTaskState GetState()
    parameters: &o0 []
    return:
      type: plc.AXOpen.Core.eAxoTaskState
- uid: plc.AXOpen.Core.AxoTask.GetErrorDetails()
  id: plc.AXOpen.Core.AxoTask.GetErrorDetails()
  parent: AXOpen.Core.AxoTask
  children: []
  name: GetErrorDetails
  fullName: GetErrorDetails
  type: Method
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.GetErrorDetails
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 125
  namespace: plc.AXOpen.Core
  syntax:
    content: Public STRING[254] GetErrorDetails()
    parameters: *o0
    return:
      type: plc.STRING[254]
- uid: plc.AXOpen.Core.AxoTask.IsReady()
  id: plc.AXOpen.Core.AxoTask.IsReady()
  parent: AXOpen.Core.AxoTask
  children: []
  name: IsReady
  fullName: IsReady
  type: Method
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.IsReady
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 132
  namespace: plc.AXOpen.Core
  summary: Gets true when the task is ready.
  syntax:
    content: Public BOOL IsReady()
    parameters: *o0
    return:
      type: plc.BOOL
- uid: plc.AXOpen.Core.AxoTask.IsDone()
  id: plc.AXOpen.Core.AxoTask.IsDone()
  parent: AXOpen.Core.AxoTask
  children: []
  name: IsDone
  fullName: IsDone
  type: Method
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.IsDone
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 151
  namespace: plc.AXOpen.Core
  summary: Gets true when the task is done.
  syntax:
    content: Public BOOL IsDone()
    parameters: *o0
    return:
      type: plc.BOOL
- uid: plc.AXOpen.Core.AxoTask.IsBusy()
  id: plc.AXOpen.Core.AxoTask.IsBusy()
  parent: AXOpen.Core.AxoTask
  children: []
  name: IsBusy
  fullName: IsBusy
  type: Method
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.IsBusy
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 171
  namespace: plc.AXOpen.Core
  summary: Gets true when the task is busy/executing.
  syntax:
    content: Public BOOL IsBusy()
    parameters: *o0
    return:
      type: plc.BOOL
- uid: plc.AXOpen.Core.AxoTask.IsAborted()
  id: plc.AXOpen.Core.AxoTask.IsAborted()
  parent: AXOpen.Core.AxoTask
  children: []
  name: IsAborted
  fullName: IsAborted
  type: Method
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.IsAborted
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 191
  namespace: plc.AXOpen.Core
  summary: Gets true when the task is aborted.
  syntax:
    content: Public BOOL IsAborted()
    parameters: *o0
    return:
      type: plc.BOOL
- uid: plc.AXOpen.Core.AxoTask.HasError()
  id: plc.AXOpen.Core.AxoTask.HasError()
  parent: AXOpen.Core.AxoTask
  children: []
  name: HasError
  fullName: HasError
  type: Method
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.HasError
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 211
  namespace: plc.AXOpen.Core
  summary: Gets true when the task has error.
  syntax:
    content: Public BOOL HasError()
    parameters: *o0
    return:
      type: plc.BOOL
- uid: plc.AXOpen.Core.AxoTask.IsFirstExecutionCycle()
  id: plc.AXOpen.Core.AxoTask.IsFirstExecutionCycle()
  parent: AXOpen.Core.AxoTask
  children: []
  name: IsFirstExecutionCycle
  fullName: IsFirstExecutionCycle
  type: Method
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.IsFirstExecutionCycle
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 235
  namespace: plc.AXOpen.Core
  summary: Checks if the current execution cycle is the first cycle.
  remarks: This method provides information about whether the current execution cycle is the initial cycle.It returns TRUE if the code is being executed for the first time in the cycle.It returns FALSE if the code is not in the first execution cycle.
  syntax:
    content: Public BOOL IsFirstExecutionCycle()
    parameters: *o0
    return:
      type: plc.BOOL
      description: A boolean value indicating whether the current execution cycle is the first cycle (TRUE) or not (FALSE).
- uid: plc.AXOpen.Core.AxoTask.SetSuspendMultipleExecuteCallCheck(BOOL)
  id: plc.AXOpen.Core.AxoTask.SetSuspendMultipleExecuteCallCheck(BOOL)
  parent: AXOpen.Core.AxoTask
  children: []
  name: SetSuspendMultipleExecuteCallCheck
  fullName: SetSuspendMultipleExecuteCallCheck
  type: Method
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.SetSuspendMultipleExecuteCallCheck
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 250
  namespace: plc.AXOpen.Core
  summary: Sets the flag to suspend or resume multiple execute check operations.
  remarks: This method allows dynamic control over the multiple execute check operations.When suspended (TRUE), the system stops processing multiple execute check operations.When resumed (FALSE), the system resumes processing multiple execute check operations.
  syntax:
    content: Public VOID SetSuspendMultipleExecuteCallCheck(in plc.BOOL Suspend)
    parameters:
    - id: Suspend
      type: plc.BOOL
      description: A boolean value indicating whether multiple execute check operations should be suspended (TRUE) or resumed (FALSE).
    return:
      type: VOID
- uid: plc.AXOpen.Core.AxoTask.GetSuspendMultipleExecuteCallCheckState()
  id: plc.AXOpen.Core.AxoTask.GetSuspendMultipleExecuteCallCheckState()
  parent: AXOpen.Core.AxoTask
  children: []
  name: GetSuspendMultipleExecuteCallCheckState
  fullName: GetSuspendMultipleExecuteCallCheckState
  type: Method
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.GetSuspendMultipleExecuteCallCheckState
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 267
  namespace: plc.AXOpen.Core
  summary: Retrieves the current state of the flag indicating whether multiple execute check operations are suspended or resumed.
  remarks: This method provides the current state of the flag controlling multiple execute check operations.It returns TRUE if multiple execute check operations are suspended, indicating that processing is halted.It returns FALSE if multiple execute check operations are resumed, allowing normal processing to occur.
  syntax:
    content: Public BOOL GetSuspendMultipleExecuteCallCheckState()
    parameters: *o0
    return:
      type: plc.BOOL
      description: A boolean value indicating whether multiple execute check operations are suspended (TRUE) or resumed (FALSE).
- uid: plc.AXOpen.Core.AxoTask.IsNewInvokeCall()
  id: plc.AXOpen.Core.AxoTask.IsNewInvokeCall()
  parent: AXOpen.Core.AxoTask
  children: []
  name: IsNewInvokeCall
  fullName: IsNewInvokeCall
  type: Method
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.IsNewInvokeCall
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 282
  namespace: plc.AXOpen.Core
  syntax:
    content: Private BOOL IsNewInvokeCall()
    parameters: *o0
    return:
      type: plc.BOOL
- uid: plc.AXOpen.Core.AxoTask.IsNewExecuteCall()
  id: plc.AXOpen.Core.AxoTask.IsNewExecuteCall()
  parent: AXOpen.Core.AxoTask
  children: []
  name: IsNewExecuteCall
  fullName: IsNewExecuteCall
  type: Method
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.IsNewExecuteCall
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 309
  namespace: plc.AXOpen.Core
  syntax:
    content: Private BOOL IsNewExecuteCall()
    parameters: *o0
    return:
      type: plc.BOOL
- uid: plc.AXOpen.Core.AxoTask.IsExecuteCalledInThisPlcCycle()
  id: plc.AXOpen.Core.AxoTask.IsExecuteCalledInThisPlcCycle()
  parent: AXOpen.Core.AxoTask
  children: []
  name: IsExecuteCalledInThisPlcCycle
  fullName: IsExecuteCalledInThisPlcCycle
  type: Method
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.IsExecuteCalledInThisPlcCycle
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 314
  namespace: plc.AXOpen.Core
  syntax:
    content: Private BOOL IsExecuteCalledInThisPlcCycle()
    parameters: *o0
    return:
      type: plc.BOOL
- uid: plc.AXOpen.Core.AxoTask.WasExecuteCalledInPreviousPlcCycle()
  id: plc.AXOpen.Core.AxoTask.WasExecuteCalledInPreviousPlcCycle()
  parent: AXOpen.Core.AxoTask
  children: []
  name: WasExecuteCalledInPreviousPlcCycle
  fullName: WasExecuteCalledInPreviousPlcCycle
  type: Method
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.WasExecuteCalledInPreviousPlcCycle
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 323
  namespace: plc.AXOpen.Core
  syntax:
    content: Private BOOL WasExecuteCalledInPreviousPlcCycle()
    parameters: *o0
    return:
      type: plc.BOOL
- uid: plc.AXOpen.Core.AxoTask.UpdateState()
  id: plc.AXOpen.Core.AxoTask.UpdateState()
  parent: AXOpen.Core.AxoTask
  children: []
  name: UpdateState
  fullName: UpdateState
  type: Method
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.UpdateState
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 333
  namespace: plc.AXOpen.Core
  syntax:
    content: Private VOID UpdateState()
    parameters: *o0
    return:
      type: VOID
- uid: plc.AXOpen.Core.AxoTask.Invoke()
  id: plc.AXOpen.Core.AxoTask.Invoke()
  parent: AXOpen.Core.AxoTask
  children: []
  name: Invoke
  fullName: Invoke
  type: Method
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.Invoke
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 361
  namespace: plc.AXOpen.Core
  summary: Invokes this task.
  syntax:
    content: Public AXOpen.Core.IAxoTaskState Invoke()
    parameters: *o0
    return:
      type: plc.AXOpen.Core.IAxoTaskState
- uid: plc.AXOpen.Core.AxoTask.Restore()
  id: plc.AXOpen.Core.AxoTask.Restore()
  parent: AXOpen.Core.AxoTask
  children: []
  name: Restore
  fullName: Restore
  type: Method
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.Restore
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 408
  namespace: plc.AXOpen.Core
  summary: Restores this task.
  syntax:
    content: Public AXOpen.Core.IAxoTaskState Restore()
    parameters: *o0
    return:
      type: plc.AXOpen.Core.IAxoTaskState
- uid: plc.AXOpen.Core.AxoTask.DoneWhen(BOOL)
  id: plc.AXOpen.Core.AxoTask.DoneWhen(BOOL)
  parent: AXOpen.Core.AxoTask
  children: []
  name: DoneWhen
  fullName: DoneWhen
  type: Method
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.DoneWhen
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 437
  namespace: plc.AXOpen.Core
  summary: Makes this task to transition in `Done` statewhen `Condition` argument is `TRUE`.
  syntax:
    content: Public VOID DoneWhen(in plc.BOOL Condition)
    parameters:
    - id: Condition
      type: plc.BOOL
    return:
      type: VOID
- uid: plc.AXOpen.Core.AxoTask.Execute()
  id: plc.AXOpen.Core.AxoTask.Execute()
  parent: AXOpen.Core.AxoTask
  children: []
  name: Execute
  fullName: Execute
  type: Method
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.Execute
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 452
  namespace: plc.AXOpen.Core
  summary: Returns `TRUE` if the task is Busy, otherwise false.This method needs to be called cyclically.
  syntax:
    content: Public BOOL Execute()
    parameters: *o0
    return:
      type: plc.BOOL
- uid: plc.AXOpen.Core.AxoTask.LogTask(STRING[80],eLogLevel,IAxoObject)
  id: plc.AXOpen.Core.AxoTask.LogTask(STRING[80],eLogLevel,IAxoObject)
  parent: AXOpen.Core.AxoTask
  children: []
  name: LogTask
  fullName: LogTask
  type: Method
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.LogTask
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 546
  namespace: plc.AXOpen.Core
  syntax:
    content: Private VOID LogTask(in plc.STRING[80] _message,in plc.AXOpen.Logging.eLogLevel _level,in plc.AXOpen.Core.IAxoObject _sender)
    parameters:
    - id: _message
      type: plc.STRING[80]
    - id: _level
      type: plc.AXOpen.Logging.eLogLevel
    - id: _sender
      type: plc.AXOpen.Core.IAxoObject
    return:
      type: VOID
- uid: plc.AXOpen.Core.AxoTask.ThrowWhen(BOOL)
  id: plc.AXOpen.Core.AxoTask.ThrowWhen(BOOL)
  parent: AXOpen.Core.AxoTask
  children: []
  name: ThrowWhen
  fullName: ThrowWhen
  type: Method
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.ThrowWhen
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 566
  namespace: plc.AXOpen.Core
  summary: Makes this task enter into `Error` state, when `HasErrorState` argument is `TRUE`task in error state stops its execution.
  syntax:
    content: Public VOID ThrowWhen(in plc.BOOL HasErrorState)
    parameters:
    - id: HasErrorState
      type: plc.BOOL
    return:
      type: VOID
- uid: plc.AXOpen.Core.AxoTask.ThrowWhen(BOOL,STRING[254])
  id: plc.AXOpen.Core.AxoTask.ThrowWhen(BOOL,STRING[254])
  parent: AXOpen.Core.AxoTask
  children: []
  name: ThrowWhen
  fullName: ThrowWhen
  type: Method
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.ThrowWhen
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 588
  namespace: plc.AXOpen.Core
  summary: Makes this task enter into `Error` state, when `HasErrorState` argument is `TRUE`task in error state stops its execution.
  syntax:
    content: Public VOID ThrowWhen(in plc.BOOL HasErrorState,in plc.STRING[254] ErrorDescription)
    parameters:
    - id: HasErrorState
      type: plc.BOOL
    - id: ErrorDescription
      type: plc.STRING[254]
    return:
      type: VOID
- uid: plc.AXOpen.Core.AxoTask.SetIsDisabled(BOOL)
  id: plc.AXOpen.Core.AxoTask.SetIsDisabled(BOOL)
  parent: AXOpen.Core.AxoTask
  children: []
  name: SetIsDisabled
  fullName: SetIsDisabled
  type: Method
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.SetIsDisabled
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 603
  namespace: plc.AXOpen.Core
  summary: Sets the value of the `IsDisabled` variable
  syntax:
    content: Public VOID SetIsDisabled(in plc.BOOL Disabled)
    parameters:
    - id: Disabled
      type: plc.BOOL
    return:
      type: VOID
- uid: plc.AXOpen.Core.AxoTask.GetIsDisabled()
  id: plc.AXOpen.Core.AxoTask.GetIsDisabled()
  parent: AXOpen.Core.AxoTask
  children: []
  name: GetIsDisabled
  fullName: GetIsDisabled
  type: Method
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.GetIsDisabled
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 609
  namespace: plc.AXOpen.Core
  summary: Returns the value of the `IsDisabled` variable
  syntax:
    content: Public BOOL GetIsDisabled()
    parameters: *o0
    return:
      type: plc.BOOL
- uid: plc.AXOpen.Core.AxoTask.Abort()
  id: plc.AXOpen.Core.AxoTask.Abort()
  parent: AXOpen.Core.AxoTask
  children: []
  name: Abort
  fullName: Abort
  type: Method
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.Abort
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 612
  namespace: plc.AXOpen.Core
  summary: Aborts the execution of the task if running and sets its state to aborted.
  syntax:
    content: Public VOID Abort()
    parameters: *o0
    return:
      type: VOID
- uid: plc.AXOpen.Core.AxoTask.Resume()
  id: plc.AXOpen.Core.AxoTask.Resume()
  parent: AXOpen.Core.AxoTask
  children: []
  name: Resume
  fullName: Resume
  type: Method
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.Resume
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 619
  namespace: plc.AXOpen.Core
  summary: Resume the execution of the task if aborted and sets its state to busy.
  syntax:
    content: Public VOID Resume()
    parameters: *o0
    return:
      type: VOID
- uid: plc.AXOpen.Core.AxoTask.SetRemoteRestoreEnabled(BOOL)
  id: plc.AXOpen.Core.AxoTask.SetRemoteRestoreEnabled(BOOL)
  parent: AXOpen.Core.AxoTask
  children: []
  name: SetRemoteRestoreEnabled
  fullName: SetRemoteRestoreEnabled
  type: Method
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.SetRemoteRestoreEnabled
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 637
  namespace: plc.AXOpen.Core
  summary: Sets the remote restore functionality based on the provided input.Enables or disables remote restoration based on the value of the 'Enable' parameter.
  remarks: This method allows dynamic control over the ability to perform remote restoration tasks.When enabled, remote restoration functionality is activated, allowing tasks to be restored remotely.When disabled, remote restoration functionality is deactivated, preventing tasks from being restored remotely.
  syntax:
    content: Public VOID SetRemoteRestoreEnabled(in plc.BOOL Enable)
    parameters:
    - id: Enable
      type: plc.BOOL
      description: A boolean value indicating whether remote restore functionality should be enabled (TRUE) or disabled (FALSE).
    return:
      type: VOID
- uid: plc.AXOpen.Core.AxoTask.GetRemoteRestoreEnabled()
  id: plc.AXOpen.Core.AxoTask.GetRemoteRestoreEnabled()
  parent: AXOpen.Core.AxoTask
  children: []
  name: GetRemoteRestoreEnabled
  fullName: GetRemoteRestoreEnabled
  type: Method
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.GetRemoteRestoreEnabled
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 654
  namespace: plc.AXOpen.Core
  summary: Retrieves the current status of remote restore functionality.
  remarks: This method provides the current status of remote restore functionality.It returns TRUE if remote restoration is enabled, allowing tasks to be restored remotely.It returns FALSE if remote restoration is disabled, preventing tasks from being restored remotely.
  syntax:
    content: Public BOOL GetRemoteRestoreEnabled()
    parameters: *o0
    return:
      type: plc.BOOL
      description: A boolean value indicating whether remote restore functionality is enabled (TRUE) or disabled (FALSE).
- uid: plc.AXOpen.Core.AxoTask.SetRemoteAbortEnabled(BOOL)
  id: plc.AXOpen.Core.AxoTask.SetRemoteAbortEnabled(BOOL)
  parent: AXOpen.Core.AxoTask
  children: []
  name: SetRemoteAbortEnabled
  fullName: SetRemoteAbortEnabled
  type: Method
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.SetRemoteAbortEnabled
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 675
  namespace: plc.AXOpen.Core
  summary: Sets the remote abort functionality based on the provided input.Enables or disables remote abort based on the value of the 'Enable' parameter.
  remarks: This method allows dynamic control over the ability to perform remote abort tasks.When enabled, remote abort functionality is activated, allowing tasks to be aborted remotely.When disabled, remote abort functionality is deactivated, preventing tasks from being aborted remotely.
  syntax:
    content: Public VOID SetRemoteAbortEnabled(in plc.BOOL Enable)
    parameters:
    - id: Enable
      type: plc.BOOL
      description: A boolean value indicating whether remote abort functionality should be enabled (TRUE) or disabled (FALSE).
    return:
      type: VOID
- uid: plc.AXOpen.Core.AxoTask.GetRemoteAbortEnabled()
  id: plc.AXOpen.Core.AxoTask.GetRemoteAbortEnabled()
  parent: AXOpen.Core.AxoTask
  children: []
  name: GetRemoteAbortEnabled
  fullName: GetRemoteAbortEnabled
  type: Method
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.GetRemoteAbortEnabled
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 708
  namespace: plc.AXOpen.Core
  summary: Retrieves the current status of remote abort functionality.
  remarks: This method provides the current status of remote abort functionality.It returns TRUE if remote abort is enabled, allowing tasks to be aborted remotely.It returns FALSE if remote abort is disabled, preventing tasks from being aborted remotely.
  syntax:
    content: Public BOOL GetRemoteAbortEnabled()
    parameters: *o0
    return:
      type: plc.BOOL
      description: A boolean value indicating whether remote abort functionality is enabled (TRUE) or disabled (FALSE).
- uid: plc.AXOpen.Core.AxoTask.OnAbort()
  id: plc.AXOpen.Core.AxoTask.OnAbort()
  parent: AXOpen.Core.AxoTask
  children: []
  name: OnAbort
  fullName: OnAbort
  type: Method
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.OnAbort
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 717
  namespace: plc.AXOpen.Core
  summary: Executes once when the task is aborted.
  syntax:
    content: Protected VOID OnAbort()
    parameters: *o0
    return:
      type: VOID
- uid: plc.AXOpen.Core.AxoTask.OnResume()
  id: plc.AXOpen.Core.AxoTask.OnResume()
  parent: AXOpen.Core.AxoTask
  children: []
  name: OnResume
  fullName: OnResume
  type: Method
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.OnResume
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 722
  namespace: plc.AXOpen.Core
  summary: Executes once when the task is resumed.
  syntax:
    content: Protected VOID OnResume()
    parameters: *o0
    return:
      type: VOID
- uid: plc.AXOpen.Core.AxoTask.OnDone()
  id: plc.AXOpen.Core.AxoTask.OnDone()
  parent: AXOpen.Core.AxoTask
  children: []
  name: OnDone
  fullName: OnDone
  type: Method
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.OnDone
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 725
  namespace: plc.AXOpen.Core
  summary: Executes once when the task reaches the `Done` state.
  syntax:
    content: Protected VOID OnDone()
    parameters: *o0
    return:
      type: VOID
- uid: plc.AXOpen.Core.AxoTask.OnError()
  id: plc.AXOpen.Core.AxoTask.OnError()
  parent: AXOpen.Core.AxoTask
  children: []
  name: OnError
  fullName: OnError
  type: Method
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.OnError
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 731
  namespace: plc.AXOpen.Core
  summary: Executes once when the task reaches the `Error` state.
  syntax:
    content: Protected VOID OnError()
    parameters: *o0
    return:
      type: VOID
- uid: plc.AXOpen.Core.AxoTask.OnRestore()
  id: plc.AXOpen.Core.AxoTask.OnRestore()
  parent: AXOpen.Core.AxoTask
  children: []
  name: OnRestore
  fullName: OnRestore
  type: Method
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.OnRestore
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 736
  namespace: plc.AXOpen.Core
  summary: Executes once when the task is restored.
  syntax:
    content: Protected VOID OnRestore()
    parameters: *o0
    return:
      type: VOID
- uid: plc.AXOpen.Core.AxoTask.OnStart()
  id: plc.AXOpen.Core.AxoTask.OnStart()
  parent: AXOpen.Core.AxoTask
  children: []
  name: OnStart
  fullName: OnStart
  type: Method
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.OnStart
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 741
  namespace: plc.AXOpen.Core
  summary: Executes once when the task starts (at the moment of transition from the `Kicking` state into the `Busy` state).
  syntax:
    content: Protected VOID OnStart()
    parameters: *o0
    return:
      type: VOID
- uid: plc.AXOpen.Core.AxoTask.WhileError()
  id: plc.AXOpen.Core.AxoTask.WhileError()
  parent: AXOpen.Core.AxoTask
  children: []
  name: WhileError
  fullName: WhileError
  type: Method
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.WhileError
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 746
  namespace: plc.AXOpen.Core
  summary: Executes repeatedly while the task is in `Error` state (and `Execute()` method is called).
  syntax:
    content: Protected VOID WhileError()
    parameters: *o0
    return:
      type: VOID
- uid: plc.AXOpen.Core.AxoTask.AbortTriggered()
  id: plc.AXOpen.Core.AxoTask.AbortTriggered()
  parent: AXOpen.Core.AxoTask
  children: []
  name: AbortTriggered
  fullName: AbortTriggered
  type: Method
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.AbortTriggered
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 752
  namespace: plc.AXOpen.Core
  summary: Returns `TRUE` when the task has been aborted in this or previous PLC cycle.
  syntax:
    content: Public BOOL AbortTriggered()
    parameters: *o0
    return:
      type: plc.BOOL
- uid: plc.AXOpen.Core.AxoTask.ResumeTriggered()
  id: plc.AXOpen.Core.AxoTask.ResumeTriggered()
  parent: AXOpen.Core.AxoTask
  children: []
  name: ResumeTriggered
  fullName: ResumeTriggered
  type: Method
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.ResumeTriggered
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 758
  namespace: plc.AXOpen.Core
  summary: Returns `TRUE` when the task has been resumed in this or previous PLC cycle.
  syntax:
    content: Public BOOL ResumeTriggered()
    parameters: *o0
    return:
      type: plc.BOOL
- uid: plc.AXOpen.Core.AxoTask.DoneReached()
  id: plc.AXOpen.Core.AxoTask.DoneReached()
  parent: AXOpen.Core.AxoTask
  children: []
  name: DoneReached
  fullName: DoneReached
  type: Method
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.DoneReached
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 758
  namespace: plc.AXOpen.Core
  summary: Returns `TRUE` when the task has reached the `Done` state in this or previous PLC cycle.
  syntax:
    content: Public BOOL DoneReached()
    parameters: *o0
    return:
      type: plc.BOOL
- uid: plc.AXOpen.Core.AxoTask.ErrorOccured()
  id: plc.AXOpen.Core.AxoTask.ErrorOccured()
  parent: AXOpen.Core.AxoTask
  children: []
  name: ErrorOccured
  fullName: ErrorOccured
  type: Method
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.ErrorOccured
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 758
  namespace: plc.AXOpen.Core
  summary: Returns `TRUE` when the task has reached the `Error` state in this or previous PLC cycle.
  syntax:
    content: Public BOOL ErrorOccured()
    parameters: *o0
    return:
      type: plc.BOOL
- uid: plc.AXOpen.Core.AxoTask.RestoreTriggered()
  id: plc.AXOpen.Core.AxoTask.RestoreTriggered()
  parent: AXOpen.Core.AxoTask
  children: []
  name: RestoreTriggered
  fullName: RestoreTriggered
  type: Method
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.RestoreTriggered
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 758
  namespace: plc.AXOpen.Core
  summary: Returns `TRUE` when the task has been restored in this or previous PLC cycle.
  syntax:
    content: Public BOOL RestoreTriggered()
    parameters: *o0
    return:
      type: plc.BOOL
- uid: plc.AXOpen.Core.AxoTask.StartTriggered()
  id: plc.AXOpen.Core.AxoTask.StartTriggered()
  parent: AXOpen.Core.AxoTask
  children: []
  name: StartTriggered
  fullName: StartTriggered
  type: Method
  source:
    remote:
      path: .\src\core\ctrl\src\AxoTask\AxoTask.st
      branch: 293-Festo_CMMT-AS_class_not_derived_from_AxoDrive_just_point_to_point_movements
      repo: https://github.com/ix-ax/AXOpen.git
    id: plc.AXOpen.Core.AxoTask.StartTriggered
    path: .\src\core\ctrl\src\AxoTask\AxoTask.st
    startLine: 758
  namespace: plc.AXOpen.Core
  summary: Returns `TRUE` when the task has been started in this or previous PLC cycle.
  syntax:
    content: Public BOOL StartTriggered()
    parameters: *o0
    return:
      type: plc.BOOL
references:
- uid: plc.AXOpen.Core.AxoObject.Identity
  commentId: plc.AXOpen.Core.AxoObject.Identity
  name: Identity
  nameWithType: Identity
  fullName: plc.AXOpen.Core.AxoObject.Identity
  parent: plc.AXOpen.Core.AxoObject.Identity
- uid: plc.AXOpen.Core.AxoObject.GetIdentity()
  commentId: plc.AXOpen.Core.AxoObject.GetIdentity()
  name: GetIdentity()
  nameWithType: GetIdentity()
  fullName: plc.AXOpen.Core.AxoObject.GetIdentity()
  parent: plc.AXOpen.Core.AxoObject.GetIdentity()
- uid: plc.AXOpen.Core.AxoObject.GetContext()
  commentId: plc.AXOpen.Core.AxoObject.GetContext()
  name: GetContext()
  nameWithType: GetContext()
  fullName: plc.AXOpen.Core.AxoObject.GetContext()
  parent: plc.AXOpen.Core.AxoObject.GetContext()
- uid: plc.AXOpen.Core.AxoObject.GetContextUnsafe()
  commentId: plc.AXOpen.Core.AxoObject.GetContextUnsafe()
  name: GetContextUnsafe()
  nameWithType: GetContextUnsafe()
  fullName: plc.AXOpen.Core.AxoObject.GetContextUnsafe()
  parent: plc.AXOpen.Core.AxoObject.GetContextUnsafe()
- uid: plc.AXOpen.Core.AxoObject.GetParent()
  commentId: plc.AXOpen.Core.AxoObject.GetParent()
  name: GetParent()
  nameWithType: GetParent()
  fullName: plc.AXOpen.Core.AxoObject.GetParent()
  parent: plc.AXOpen.Core.AxoObject.GetParent()
- uid: plc.AXOpen.Core.AxoObject.Initialize(IAxoObject)
  commentId: plc.AXOpen.Core.AxoObject.Initialize(IAxoObject)
  name: Initialize(IAxoObject)
  nameWithType: Initialize(IAxoObject)
  fullName: plc.AXOpen.Core.AxoObject.Initialize(IAxoObject)
  parent: plc.AXOpen.Core.AxoObject.Initialize(IAxoObject)
- uid: plc.AXOpen.Core.AxoObject.Initialize(IAxoContext)
  commentId: plc.AXOpen.Core.AxoObject.Initialize(IAxoContext)
  name: Initialize(IAxoContext)
  nameWithType: Initialize(IAxoContext)
  fullName: plc.AXOpen.Core.AxoObject.Initialize(IAxoContext)
  parent: plc.AXOpen.Core.AxoObject.Initialize(IAxoContext)
- uid: plc.AXOpen.Core.IAxoTask
  commentId: plc.AXOpen.Core.IAxoTask
  name: IAxoTask
  nameWithType: IAxoTask
  fullName: plc.AXOpen.Core.IAxoTask
  parent: plc.AXOpen.Core.IAxoTask
- uid: plc.AXOpen.Core.IAxoTaskState
  commentId: plc.AXOpen.Core.IAxoTaskState
  name: IAxoTaskState
  nameWithType: IAxoTaskState
  fullName: plc.AXOpen.Core.IAxoTaskState
  parent: plc.AXOpen.Core.IAxoTaskState
- uid: plc.AXOpen.Core.eAxoTaskState
  name: eAxoTaskState
  nameWithType: eAxoTaskState
  fullName: AXOpen.Core.eAxoTaskState
- uid: plc.BOOL
  name: BOOL
  nameWithType: BOOL
  fullName: BOOL
- uid: plc.ULINT
  name: ULINT
  nameWithType: ULINT
  fullName: ULINT
- uid: plc.LTIME
  name: LTIME
  nameWithType: LTIME
  fullName: LTIME
- uid: plc.LDATE_AND_TIME
  name: LDATE_AND_TIME
  nameWithType: LDATE_AND_TIME
  fullName: LDATE_AND_TIME
- uid: plc.STRING[254]
  name: STRING[254]
  nameWithType: STRING[254]
  fullName: STRING[254]
- uid: plc.UNDEFINED
  name: UNDEFINED
  nameWithType: UNDEFINED
  fullName: UNDEFINED
- uid: plc.AXOpen.Messaging.Static.AxoMessenger
  name: AxoMessenger
  nameWithType: AxoMessenger
  fullName: AXOpen.Messaging.Static.AxoMessenger
- uid: plc.STRING[80]
  name: STRING[80]
  nameWithType: STRING[80]
  fullName: STRING[80]
- uid: plc.AXOpen.Logging.eLogLevel
  name: eLogLevel
  nameWithType: eLogLevel
  fullName: AXOpen.Logging.eLogLevel
- uid: plc.AXOpen.Core.IAxoObject
  name: IAxoObject
  nameWithType: IAxoObject
  fullName: AXOpen.Core.IAxoObject


